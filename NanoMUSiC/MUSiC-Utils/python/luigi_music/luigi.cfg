### LUIGI Config

# Configuration is done in sections. All sections refer to tasks with the same
# name, even the built-in ones.
# Keys can be specified either with "_" or "-". "_" will be checked first and
# we should treat it as preferable because that's the way the parameter shows
# up in code.
# Note that additional config sections/keys do not provoke an exception.


[core]
# Hostname of the scheduler.
#scheduler_host = lx3acms1.physik.rwth-aachen.de            #Yannik changed
scheduler_host = lx3acms2.physik.rwth-aachen.de             

# If set to True, luigi does not initialize its logging handlers.
# This is the desired behavior in our case, because we initialize logging in
# luigi_music/__init__.py and don't want luigi to overwrite our settings.
no_configure_logging = True

# If set to true, a multiprocessing pool is used for checking whether queued
# tasks are complete.
parallel_scheduling = True
max_shown_tasks=1000

[resources]
grid_submission=4
grid_monitor=14
grid_upload=4
sqlite=1

[worker]
# If set to true, workers are kept alive as long as there are pending tasks.
keep_alive = True

# Number of times that a task should be automatically scheduled if it finished
# successfully, but its output is missing.
# Since blind rescheduling will not work in this case (our jobs are designed
# to FAIL is something is wrong), we set this to 0.
max_reschedules = 0

# Interval in seconds for pinging the scheduler. Make sure that this is
# significantly lower than scheduler > worker_disconnect_delay!
ping_interval = 10

# Kill long running tasks after this amount of time (in seconds).
# We use 1 week = 604800 seconds.
timeout = 604800


[scheduler]
# If set to True, write task history to sqlite database.
record_task_history = False

# If set, a pickle file is used for persisting scheduler state across restarts.
state_path = ${MUSIC_UTILS}/python/luigi_music/work/luigi-state.pickle

# Time in seconds to remove finished jobs (regardless whether they have
# succeeded or failed) from the scheduler interface.
# We use 1 day = 24h = 86400 seconds.
remove_delay = 600

# Amount of time (in seconds) between last received worker ping and disconneting
# the worker. Make sure that this is significantly more than worker > ping_interval.
worker_disconnect_delay = 180

# If a job fails, wait 15min (retry_delay), then mark it as "pending" again.
# If it fails more than 2 times (retry_count) in one hour (disable_window),
# disable it for 6h (disable_persist).
retry_delay = 900
#retry_count = 2
# change: do not disable jobs
retry_count = 0
disable_window  = 3600
disable_persist  = 1800
disable-persist-seconds=1800


[email]
method = smtp
#format = plain
format = none
sender = music-luigi@physik.rwth-aachen.de
receiver = cms-music-batch@cern.ch
force_send = False


[smtp]
host = smarthost.rwth-aachen.de
port = 25
no_tls = True


[batch_notifier]
email_interval = 60
batch_mode = family
error_lines = 100
error_messages = 3
group_by_error_messages = True



### MUSiC Config
[RemoteClassificationTask]
site = T2_DE_RWTH
job_max_runtime = 488

[SampleSetClassificationTask]
chunk_size = 4
remote = True
job_max_runtime = 600

[SampleClassificationTask]
chunk_size = 4
remote = True
# extra_args =

[SampleMergeTask]
num_files = 200
job_count = 10

[Myskims]
#myskims_file = ./myskims_ram.yaml


[CMSSWConfig]
cmssw_version = CMSSW_7_6_3
scram_arch = slc6_amd64_gcc493


[TAPASRepository]
repository_url = ssh://git@gitlab.cern.ch:7999/aachen-3a/tapas.git
commit = master

[TAPASCheckoutTask]
tools_branch = se_gfal2_python

[PxlAnalyzerRepository]
repository_url = ssh://git@gitlab.cern.ch:7999/aachen-3a/pxlanalyzer.git
commit = submit_2015

[TEventClassRepository]
repository_url = ssh://git@gitlab.cern.ch:7999/MUSiC/MUSiC-Utils.git
commit = luigi_integration

[EventClassFactoryRepository]
repository_url = ssh://git@gitlab.cern.ch:7999/MUSiC/MUSiC-EventClassFactory.git
commit = submit_2015

[ConfigsRepository]
repository_url = ssh://git@gitlab.cern.ch:7999/MUSiC/MUSiC-Configs.git
commit = 2015

[RoIScannerRepository]
repository_url = ssh://git@gitlab.cern.ch:7999/MUSiC/MUSiC-RoIScanner.git
commit = HEAD
