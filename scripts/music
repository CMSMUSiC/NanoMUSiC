#!/usr/bin/env python3

from enum import Enum
from typing import Union
from typing_extensions import Annotated
import typer
import metadata
import sys
import os

############################################################################
############################################################################
# Classification
############################################################################
############################################################################
classification_app = typer.Typer(help="Launch and control the Classification steps. Expected workflow: build -> preprocess -> launch -> merge -> unwrap -> fold.")


@classification_app.command()
def build(config_file: Annotated[str, typer.Argument(help="analysis_config.toml file path, as build by parse_sample_list_nanoaod.py")]):
    """
    Will query all files LFN, for each sample and add it to the analysis_config.toml.
    """
    import analysis_builder

    analysis_builder.build_analysis_config(config_file)


@classification_app.command()
def preprocess(config_file: Annotated[str, typer.Argument(help="analysis_config.toml file path, as build by parse_sample_list_nanoaod.py")]):
    """
    Will scan all MC input files and collect the total MC weight per sample.
    """
    import preprocessing

    preprocessing.preamble()
    preprocessing.compute_sum_weights(config_file)


class ClassificationTarget(str, Enum):
    Condor = "condor"
    Dev = "dev"
    Parallel = "parallel"


@classification_app.command()
def launch(
    config_file: Annotated[str, typer.Argument(help="analysis_config.toml file path, as build by parse_sample_list_nanoaod.py")],
    target: ClassificationTarget = ClassificationTarget.Condor,
    process: Union[str, None] = None,
    year: Union[metadata.Years, None] = None,
    max_files: int = sys.maxsize,
    split_size: int = sys.maxsize,
    dry_run: bool = False,
    num_cpus: int = 100,
):
    """
    Launch the classification jobs for a given target.
    """
    import classification

    if not os.path.exists("sum_weights.json"):
        print("ERROR: Could not find sum_weights.json. Did you run the preprocess?")
        sys.exit(-1)

    if target == ClassificationTarget.Dev:
        classification.launch_dev(config_file, process, year, max_files)
    elif target == ClassificationTarget.Parallel:
        classification.launch_parallel(
            config_file, process, year, max_files, split_size, num_cpus
        )
    else:
        classification.launch_condor(
            config_file, process, year, max_files, split_size, dry_run
        )


@classification_app.command()
def merge(
    config_file: Annotated[str, typer.Argument(help="analysis_config.toml file path, as build by parse_sample_list_nanoaod.py")],
    inputs_dir: str = "classification_outputs",
):
    """
    Merge classification results.
    """
    import classification

    classification.merge_classification_outputs(config_file, inputs_dir)


@classification_app.command()
def unwrap(
    config_file: Annotated[str, typer.Argument(help="analysis_config.toml file path, as build by parse_sample_list_nanoaod.py")],
    inputs_dir: str = "classification_merged_results",
    validation_inputs_dir: str = "validation_merged_results",
    num_cpus: int = 120,
):
    """
    Will serialize to ROOT (TH1F) all recorded EventClasses.
    """
    import classification

    classification.serialize_to_root(
        config_file, inputs_dir, validation_inputs_dir, num_cpus
    )


@classification_app.command()
def fold(
    config_file: Annotated[str, typer.Argument(help="analysis_config.toml file path, as build by parse_sample_list_nanoaod.py")]|None=None,
    alternative_config_file: Annotated[str, typer.Argument(help="Altrernative analysis_config.toml file path, as build by parse_sample_list_nanoaod.py, with different cross-sections")]|None=None,
    inputs_dir: str = "classification_root_files",
    validation_inputs_dir: str = "validation_root_files",
    filters: list[str] = ["*"],
    validation_filters: list[str] = ["*"],
):
    """
    Will merge related histograms (TH1F) into Distributions (usefull data format for plotting and scan).
    """
    import classification

    classification.make_distributions(config_file, alternative_config_file, inputs_dir, validation_inputs_dir, filters, validation_filters
    )



############################################################################
############################################################################
# Plotter
############################################################################
############################################################################
plot_app = typer.Typer(help="Produce different MUSiC plots.")


@plot_app.command()
def distribution(
    input_dir: str="classification_distributions",
    output_dir: str = "classification_plots",
    validation_input_dir: str="validation_distributions",
    validation_output_dir: str = "validation_plots",
    filters:list[str]=["*"],
    validation_filters:list[str]=["*"],
    num_cpus:int=120
):
    """
    Produce plots all distribution, matching (glob matching) the different filters.
    """
    from plotter import plotter

    plotter(input_dir, filters, output_dir, num_cpus)
    plotter(validation_input_dir, validation_filters, validation_output_dir, num_cpus)


# @plot_app.command()
# def summary(config: str):
#     pass


############################################################################
############################################################################
# Scanner
############################################################################
############################################################################
scan_app = typer.Typer()


# @scan_app.command()
# def integral(config: str):
#     pass
#
#
# @scan_app.command()
# def scan(config: str):
#     pass


############################################################################
############################################################################
# Main
############################################################################
############################################################################
app = typer.Typer()
app.add_typer(classification_app, name="classification")
app.add_typer(scan_app, name="scan")
app.add_typer(plot_app, name="plot")

if __name__ == "__main__":
    app()
