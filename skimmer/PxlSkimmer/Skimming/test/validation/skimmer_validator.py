#!/bin/env python
##@package validator
# Validation code for the PxlSkimmer in the TAPAS framework
#
# This package runs the skimmer and measures its performance.
# After that the normal PxlAnalyzer validator will be called
# on this skimmer output.
# If the validation is successfull new reference distributions
# are created and the new skimmer is pushed to the central
# repository.
#
# written by Soeren Erdweg 2015

import optparse, time, os, subprocess, sys
from terminalFunctions import *
import resource
import shutil
from datetime import datetime
from array import array
from string import Template
import numpy as np
import logging
import multiprocessing
import string
import random
sys.path.append("lib/")
from configobj import ConfigObj
import StringIO
from math import sqrt, fabs

import matplotlib
matplotlib.use('AGG')

import matplotlib.pyplot as plt
from matplotlib import transforms
from matplotlib import rc
rc('text', usetex=True)

import ROOT as ro
from ROOT import TCanvas, TGraph, TF1, TLegend, kBlue, gStyle, gPad, TPad, TFile, TStyle, TColor, TH1F

## Logging object for the validation code
log = logging.getLogger( 'Validator' )

# Options to not print root error messages in functions that have no quiet option (e.g. Chi2Test)
ro.gROOT.ProcessLine( "gErrorIgnoreLevel = 3001;")

## Dictionary of the different results of the comparison
compare_results = {}

## Variable to store zour pxlana to recompile it correctly at the end of the validation
mypxlana = ''

## Function to print the welcome output at the beginning of the programm
#
# Prints the welcome output and the program starting time, with the 
# noascii options the ascii art output can be supressed (but do you want
# to do this, the ascii art is magnificent)
# @param[in] options Command line options object
def welcome_output(options):
    if not options.noasciiart:
        log.info("\033[38;5;207m##     ##    ###    ##        #######    #####     #####     #####   \033[0m"+bcolors.ENDC)
        log.info("\033[38;5;207m##     ##   ## ##   ##       ##     ##  ##   ##   ##   ##   ##   ##  \033[0m"+bcolors.ENDC)
        log.info("\033[38;5;207m##     ##  ##   ##  ##       ##     ## ##     ## ##     ## ##     ## \033[0m"+bcolors.ENDC)
        log.info("\033[38;5;207m##     ## ##     ## ##        ######## ##     ## ##     ## ##     ## \033[0m"+bcolors.ENDC)
        log.info("\033[38;5;207m ##   ##  ######### ##              ## ##     ## ##     ## ##     ## \033[0m"+bcolors.ENDC)
        log.info("\033[38;5;207m  ## ##   ##     ## ##       ##     ##  ##   ##   ##   ##   ##   ##  \033[0m"+bcolors.ENDC)
        log.info("\033[38;5;207m   ###    ##     ## ########  #######    #####     #####     #####   \033[0m"+bcolors.ENDC)
    log.info("\033[38;5;207m               Validator 9000                                        \033[0m"+bcolors.ENDC)
    log.info(time.strftime("\t local time: %a, %d %b %Y %H:%M:%S", time.localtime()))
    log.info(" ")
    if not options.noasciiart:
        log.info("Let me put it this way, Mr. Amor. The 9000 series is the most reliable computer ever made.")
        log.info("No 9000 computer has ever made a mistake or distorted information. We are all, by any practical")
        log.info("definition of the words, foolproof and incapable of error.")
        log.info(" ")
        log.info("\033[0m\033[38;5;231m#\033[0m\033[38;5;231m#\033[0m\033[38;5;231m#\033[0m\033[38;5;231m#\033[0m\033[38;5;231m#\033[0m\033[38;5;231m#\033[0m\033[38;5;231m#\033[0m\033[38;5;231m#\033[0m\033[38;5;231m#\033[0m\033[38;5;231m#\033[0m\033[38;5;231m#\033[0m\033[38;5;231m#\033[0m\033[38;5;231m#\033[0m\033[38;5;231m#\033[0m\033[38;5;231m#\033[0m\033[38;5;231m#\033[0m\033[38;5;231m#\033[0m\033[38;5;231m#\033[0m\033[38;5;231m#\033[0m\033[38;5;231m#\033[0m\033[38;5;231m#\033[0m\033[38;5;231m#\033[0m\033[38;5;231m#\033[0m\033[38;5;231m#\033[0m\033[38;5;231m#\033[0m\033[38;5;188m#\033[0m\033[38;5;145m#\033[0m\033[38;5;145m#\033[0m\033[38;5;187m#\033[0m\033[38;5;188m#\033[0m\033[38;5;188m#\033[0m\033[38;5;188m#\033[0m\033[38;5;188m#\033[0m\033[38;5;231m#\033[0m\033[38;5;231m#\033[0m\033[38;5;188m#\033[0m\033[38;5;188m#\033[0m\033[38;5;188m#\033[0m\033[38;5;188m#\033[0m\033[38;5;145m#\033[0m\033[38;5;145m#\033[0m\033[38;5;188m#\033[0m\033[38;5;231m#\033[0m\033[38;5;231m#\033[0m\033[38;5;231m#\033[0m\033[38;5;231m#\033[0m\033[38;5;231m#\033[0m\033[38;5;231m#\033[0m\033[38;5;231m#\033[0m\033[38;5;231m#\033[0m\033[38;5;231m#\033[0m\033[38;5;231m#\033[0m\033[38;5;231m#\033[0m\033[38;5;231m#\033[0m\033[38;5;231m#\033[0m\033[38;5;231m#\033[0m\033[38;5;231m#\033[0m\033[38;5;231m#\033[0m\033[38;5;231m#\033[0m\033[38;5;231m#\033[0m\033[38;5;231m#\033[0m\033[38;5;231m#\033[0m\033[38;5;231m#\033[0m\033[38;5;231m#\033[0m\033[38;5;231m#\033[0m\033[38;5;231m#\033[0m\033[38;5;231m#"+bcolors.ENDC+bcolors.ENDC)
        log.info("\033[0m\033[38;5;231m#\033[0m\033[38;5;231m###################\033[0m\033[38;5;102m#\033[0m\033[38;5;102m#\033[0m\033[38;5;102m#\033[0m\033[38;5;102m#\033[0m\033[38;5;102m#\033[0m\033[38;5;102m#\033[0m\033[38;5;102m#\033[0m\033[38;5;102m#\033[0m\033[38;5;102m#\033[0m\033[38;5;138m#\033[0m\033[38;5;145m#\033[0m\033[38;5;145m#\033[0m\033[38;5;145m#\033[0m\033[38;5;145m#\033[0m\033[38;5;145m#\033[0m\033[38;5;145m#\033[0m\033[38;5;145m#\033[0m\033[38;5;145m#\033[0m\033[38;5;145m#\033[0m\033[38;5;144m#\033[0m\033[38;5;138m#\033[0m\033[38;5;102m#\033[0m\033[38;5;102m#\033[0m\033[38;5;102m#\033[0m\033[38;5;102m#\033[0m\033[38;5;102m#\033[0m\033[38;5;102m#\033[0m\033[38;5;188m#\033[0m\033[38;5;231m###################"+bcolors.ENDC)
        log.info("\033[0m\033[38;5;231m#\033[0m\033[38;5;231m###############\033[0m\033[38;5;102m#\033[0m\033[38;5;59m#\033[0m\033[38;5;59m#\033[0m\033[38;5;102m#\033[0m\033[38;5;102m#\033[0m\033[38;5;102m#\033[0m\033[38;5;102m#\033[0m\033[38;5;102m#\033[0m\033[38;5;102m#\033[0m\033[38;5;102m#\033[0m\033[38;5;102m#\033[0m\033[38;5;102m#\033[0m\033[38;5;59m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m########\033[0m\033[38;5;16m#\033[0m\033[38;5;59m#\033[0m\033[38;5;102m#\033[0m\033[38;5;102m#\033[0m\033[38;5;102m#\033[0m\033[38;5;102m#\033[0m\033[38;5;102m#\033[0m\033[38;5;102m#\033[0m\033[38;5;102m#\033[0m\033[38;5;102m#\033[0m\033[38;5;59m#\033[0m\033[38;5;59m#\033[0m\033[38;5;59m#\033[0m\033[38;5;231m################"+bcolors.ENDC)
        log.info("\033[0m\033[38;5;231m#\033[0m\033[38;5;231m############\033[0m\033[38;5;145m#\033[0m\033[38;5;102m#\033[0m\033[38;5;102m#\033[0m\033[38;5;102m###\033[0m\033[38;5;102m#\033[0m\033[38;5;102m#\033[0m\033[38;5;102m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m######\033[0m\033[38;5;16m#\033[0m\033[38;5;17m#\033[0m\033[38;5;59m######\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m######\033[0m\033[38;5;59m#\033[0m\033[38;5;102m#\033[0m\033[38;5;102m#\033[0m\033[38;5;102m#\033[0m\033[38;5;102m#\033[0m\033[38;5;102m#\033[0m\033[38;5;59m#\033[0m\033[38;5;102m#\033[0m\033[38;5;102m#\033[0m\033[38;5;231m#############"+bcolors.ENDC)
        log.info("\033[0m\033[38;5;231m#\033[0m\033[38;5;231m##########\033[0m\033[38;5;145m#\033[0m\033[38;5;145m#\033[0m\033[38;5;102m#\033[0m\033[38;5;102m####\033[0m\033[38;5;16m#\033[0m\033[38;5;16m########\033[0m\033[38;5;16m#\033[0m\033[38;5;59m#\033[0m\033[38;5;145m#\033[0m\033[38;5;187m######\033[0m\033[38;5;144m#\033[0m\033[38;5;59m#\033[0m\033[38;5;16m#####\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m####\033[0m\033[38;5;102m#\033[0m\033[38;5;102m####\033[0m\033[38;5;145m#\033[0m\033[38;5;145m#\033[0m\033[38;5;231m#\033[0m\033[38;5;231m##########"+bcolors.ENDC)
        log.info("\033[0m\033[38;5;231m#\033[0m\033[38;5;231m########\033[0m\033[38;5;188m#\033[0m\033[38;5;145m#\033[0m\033[38;5;102m####\033[0m\033[38;5;59m#\033[0m\033[38;5;16m##########\033[0m\033[38;5;187m##\033[0m\033[38;5;145m#\033[0m\033[38;5;59m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m##\033[0m\033[38;5;16m#\033[0m\033[38;5;59m#\033[0m\033[38;5;102m#\033[0m\033[38;5;187m######\033[0m\033[38;5;16m########\033[0m\033[38;5;16m#\033[0m\033[38;5;102m#\033[0m\033[38;5;102m#\033[0m\033[38;5;102m#\033[0m\033[38;5;102m#\033[0m\033[38;5;188m#\033[0m\033[38;5;188m#\033[0m\033[38;5;231m#\033[0m\033[38;5;231m########"+bcolors.ENDC)
        log.info("\033[0m\033[38;5;231m#\033[0m\033[38;5;231m######\033[0m\033[38;5;145m#\033[0m\033[38;5;187m#\033[0m\033[38;5;59m#\033[0m\033[38;5;59m#\033[0m\033[38;5;65m#\033[0m\033[38;5;102m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#########\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m####\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m##########\033[0m\033[38;5;102m#\033[0m\033[38;5;102m##\033[0m\033[38;5;95m#\033[0m\033[38;5;188m#\033[0m\033[38;5;188m#\033[0m\033[38;5;231m#######"+bcolors.ENDC)
        log.info("\033[0m\033[38;5;231m#\033[0m\033[38;5;231m#####\033[0m\033[38;5;102m#\033[0m\033[38;5;145m#\033[0m\033[38;5;59m#\033[0m\033[38;5;59m#\033[0m\033[38;5;59m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m##\033[0m\033[38;5;59m#\033[0m\033[38;5;145m#\033[0m\033[38;5;145m#\033[0m\033[38;5;59m#\033[0m\033[38;5;16m##\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;102m#\033[0m\033[38;5;138m#\033[0m\033[38;5;138m##\033[0m\033[38;5;138m##\033[0m\033[38;5;138m#\033[0m\033[38;5;138m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m###\033[0m\033[38;5;16m#\033[0m\033[38;5;102m#\033[0m\033[38;5;65m#\033[0m\033[38;5;16m###\033[0m\033[38;5;95m#\033[0m\033[38;5;59m#\033[0m\033[38;5;59m#\033[0m\033[38;5;102m#\033[0m\033[38;5;145m#\033[0m\033[38;5;231m#\033[0m\033[38;5;231m#####"+bcolors.ENDC)
        log.info("\033[0m\033[38;5;231m#\033[0m\033[38;5;231m####\033[0m\033[38;5;102m#\033[0m\033[38;5;59m#\033[0m\033[38;5;59m#\033[0m\033[38;5;59m#\033[0m\033[38;5;59m#\033[0m\033[38;5;16m##\033[0m\033[38;5;16m#\033[0m\033[38;5;145m##\033[0m\033[38;5;59m#\033[0m\033[38;5;16m##\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m##\033[0m\033[38;5;59m#\033[0m\033[38;5;102m#\033[0m\033[38;5;59m#\033[0m\033[38;5;16m##\033[0m\033[38;5;59m#\033[0m\033[38;5;59m#\033[0m\033[38;5;59m#\033[0m\033[38;5;59m#\033[0m\033[38;5;102m#\033[0m\033[38;5;145m#\033[0m\033[38;5;231m####"+bcolors.ENDC)
        log.info("\033[0m\033[38;5;231m#\033[0m\033[38;5;231m###\033[0m\033[38;5;59m#\033[0m\033[38;5;59m#\033[0m\033[38;5;59m#\033[0m\033[38;5;59m#\033[0m\033[38;5;59m#\033[0m\033[38;5;16m##\033[0m\033[38;5;16m#\033[0m\033[38;5;145m##\033[0m\033[38;5;16m##\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;59m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;88m#\033[0m\033[38;5;88m#\033[0m\033[38;5;88m#\033[0m\033[38;5;88m#\033[0m\033[38;5;88m#\033[0m\033[38;5;88m##\033[0m\033[38;5;88m#\033[0m\033[38;5;88m#\033[0m\033[38;5;88m#\033[0m\033[38;5;88m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m###\033[0m\033[38;5;102m#\033[0m\033[38;5;102m#\033[0m\033[38;5;16m##\033[0m\033[38;5;16m#\033[0m\033[38;5;59m#\033[0m\033[38;5;59m#\033[0m\033[38;5;59m#\033[0m\033[38;5;59m#\033[0m\033[38;5;102m#\033[0m\033[38;5;231m###"+bcolors.ENDC)
        log.info("\033[0m\033[38;5;231m#\033[0m\033[38;5;231m##\033[0m\033[38;5;59m#\033[0m\033[38;5;59m###\033[0m\033[38;5;59m#\033[0m\033[38;5;16m###\033[0m\033[38;5;145m#\033[0m\033[38;5;102m#\033[0m\033[38;5;16m##\033[0m\033[38;5;16m#\033[0m\033[38;5;102m#\033[0m\033[38;5;102m#\033[0m\033[38;5;95m#\033[0m\033[38;5;95m#\033[0m\033[38;5;59m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;88m#\033[0m\033[38;5;88m#\033[0m\033[38;5;88m#\033[0m\033[38;5;88m#\033[0m\033[38;5;88m#\033[0m\033[38;5;124m#\033[0m\033[38;5;124m#\033[0m\033[38;5;124m#\033[0m\033[38;5;124m#\033[0m\033[38;5;124m#\033[0m\033[38;5;124m#\033[0m\033[38;5;124m#\033[0m\033[38;5;88m#\033[0m\033[38;5;88m#\033[0m\033[38;5;88m#\033[0m\033[38;5;88m#\033[0m\033[38;5;88m#\033[0m\033[38;5;88m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;95m###\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m######\033[0m\033[38;5;16m#\033[0m\033[38;5;59m##\033[0m\033[38;5;59m#\033[0m\033[38;5;59m#\033[0m\033[38;5;188m#\033[0m\033[38;5;231m##"+bcolors.ENDC)
        log.info("\033[0m\033[38;5;231m#\033[0m\033[38;5;231m#\033[0m\033[38;5;59m##\033[0m\033[38;5;59m###\033[0m\033[38;5;16m######\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;88m#\033[0m\033[38;5;88m#\033[0m\033[38;5;88m#\033[0m\033[38;5;88m#\033[0m\033[38;5;124m#\033[0m\033[38;5;124m#\033[0m\033[38;5;124m#\033[0m\033[38;5;124m#\033[0m\033[38;5;124m#\033[0m\033[38;5;167m#\033[0m\033[38;5;166m#\033[0m\033[38;5;166m#\033[0m\033[38;5;166m#\033[0m\033[38;5;160m#\033[0m\033[38;5;124m#\033[0m\033[38;5;124m#\033[0m\033[38;5;124m#\033[0m\033[38;5;124m#\033[0m\033[38;5;124m#\033[0m\033[38;5;88m#\033[0m\033[38;5;88m#\033[0m\033[38;5;88m#\033[0m\033[38;5;88m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m######\033[0m\033[38;5;16m#\033[0m\033[38;5;59m#\033[0m\033[38;5;59m#\033[0m\033[38;5;59m#\033[0m\033[38;5;59m#\033[0m\033[38;5;231m##"+bcolors.ENDC)
        log.info("\033[0m\033[38;5;231m#\033[0m\033[38;5;188m#\033[0m\033[38;5;59m#\033[0m\033[38;5;59m#\033[0m\033[38;5;59m##\033[0m\033[38;5;16m#######\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;88m#\033[0m\033[38;5;88m#\033[0m\033[38;5;88m#\033[0m\033[38;5;124m#\033[0m\033[38;5;124m#\033[0m\033[38;5;124m#\033[0m\033[38;5;124m#\033[0m\033[38;5;160m#\033[0m\033[38;5;160m#\033[0m\033[38;5;160m#\033[0m\033[38;5;167m#\033[0m\033[38;5;167m###\033[0m\033[38;5;167m#\033[0m\033[38;5;160m#\033[0m\033[38;5;160m#\033[0m\033[38;5;160m#\033[0m\033[38;5;160m#\033[0m\033[38;5;124m#\033[0m\033[38;5;124m#\033[0m\033[38;5;124m#\033[0m\033[38;5;88m#\033[0m\033[38;5;88m#\033[0m\033[38;5;88m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m######\033[0m\033[38;5;59m#\033[0m\033[38;5;59m##\033[0m\033[38;5;59m#\033[0m\033[38;5;59m#\033[0m\033[38;5;231m#"+bcolors.ENDC)
        log.info("\033[0m\033[38;5;231m#\033[0m\033[38;5;59m#\033[0m\033[38;5;59m#\033[0m\033[38;5;59m##\033[0m\033[38;5;59m#\033[0m\033[38;5;16m######\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;88m#\033[0m\033[38;5;88m#\033[0m\033[38;5;88m#\033[0m\033[38;5;124m#\033[0m\033[38;5;124m#\033[0m\033[38;5;124m#\033[0m\033[38;5;160m#\033[0m\033[38;5;160m#\033[0m\033[38;5;166m#\033[0m\033[38;5;160m#\033[0m\033[38;5;160m#\033[0m\033[38;5;160m#\033[0m\033[38;5;160m#\033[0m\033[38;5;166m#\033[0m\033[38;5;202m#\033[0m\033[38;5;160m#\033[0m\033[38;5;160m#\033[0m\033[38;5;160m#\033[0m\033[38;5;160m#\033[0m\033[38;5;203m#\033[0m\033[38;5;160m#\033[0m\033[38;5;160m#\033[0m\033[38;5;124m#\033[0m\033[38;5;124m#\033[0m\033[38;5;124m#\033[0m\033[38;5;88m#\033[0m\033[38;5;88m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m######\033[0m\033[38;5;16m#\033[0m\033[38;5;59m##\033[0m\033[38;5;59m#\033[0m\033[38;5;59m#\033[0m\033[38;5;231m#"+bcolors.ENDC)
        log.info("\033[0m\033[38;5;231m#\033[0m\033[38;5;23m#\033[0m\033[38;5;59m#\033[0m\033[38;5;59m##\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#####\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;88m#\033[0m\033[38;5;88m#\033[0m\033[38;5;88m#\033[0m\033[38;5;124m#\033[0m\033[38;5;124m#\033[0m\033[38;5;160m#\033[0m\033[38;5;160m#\033[0m\033[38;5;160m#\033[0m\033[38;5;160m#\033[0m\033[38;5;160m#\033[0m\033[38;5;160m#\033[0m\033[38;5;160m#\033[0m\033[38;5;160m#\033[0m\033[38;5;166m#\033[0m\033[38;5;166m#\033[0m\033[38;5;166m#\033[0m\033[38;5;160m#\033[0m\033[38;5;160m#\033[0m\033[38;5;160m#\033[0m\033[38;5;160m#\033[0m\033[38;5;160m#\033[0m\033[38;5;160m#\033[0m\033[38;5;160m#\033[0m\033[38;5;160m#\033[0m\033[38;5;124m#\033[0m\033[38;5;124m#\033[0m\033[38;5;124m#\033[0m\033[38;5;88m#\033[0m\033[38;5;88m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m######\033[0m\033[38;5;59m#\033[0m\033[38;5;59m#\033[0m\033[38;5;59m#\033[0m\033[38;5;59m#\033[0m\033[38;5;145m#"+bcolors.ENDC)
        log.info("\033[0m\033[38;5;231m#\033[0m\033[38;5;23m#\033[0m\033[38;5;59m###\033[0m\033[38;5;16m######\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;88m#\033[0m\033[38;5;88m#\033[0m\033[38;5;124m#\033[0m\033[38;5;124m#\033[0m\033[38;5;124m#\033[0m\033[38;5;160m#\033[0m\033[38;5;160m#\033[0m\033[38;5;160m#\033[0m\033[38;5;160m#\033[0m\033[38;5;160m#\033[0m\033[38;5;160m#\033[0m\033[38;5;166m#\033[0m\033[38;5;166m#\033[0m\033[38;5;166m#\033[0m\033[38;5;208m#\033[0m\033[38;5;172m#\033[0m\033[38;5;166m#\033[0m\033[38;5;166m#\033[0m\033[38;5;166m#\033[0m\033[38;5;160m#\033[0m\033[38;5;160m#\033[0m\033[38;5;160m#\033[0m\033[38;5;160m#\033[0m\033[38;5;160m#\033[0m\033[38;5;160m#\033[0m\033[38;5;124m#\033[0m\033[38;5;124m#\033[0m\033[38;5;88m#\033[0m\033[38;5;88m#\033[0m\033[38;5;88m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m######\033[0m\033[38;5;59m#\033[0m\033[38;5;59m#\033[0m\033[38;5;59m#\033[0m\033[38;5;59m#\033[0m\033[38;5;59m#"+bcolors.ENDC)
        log.info("\033[0m\033[38;5;145m#\033[0m\033[38;5;17m#\033[0m\033[38;5;59m#\033[0m\033[38;5;59m##\033[0m\033[38;5;16m######\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;88m#\033[0m\033[38;5;88m#\033[0m\033[38;5;124m#\033[0m\033[38;5;124m#\033[0m\033[38;5;124m#\033[0m\033[38;5;160m#\033[0m\033[38;5;160m#\033[0m\033[38;5;160m#\033[0m\033[38;5;160m#\033[0m\033[38;5;160m#\033[0m\033[38;5;166m#\033[0m\033[38;5;166m#\033[0m\033[38;5;208m#\033[0m\033[38;5;215m#\033[0m\033[38;5;227m#\033[0m\033[38;5;221m#\033[0m\033[38;5;209m#\033[0m\033[38;5;166m#\033[0m\033[38;5;166m#\033[0m\033[38;5;160m#\033[0m\033[38;5;160m#\033[0m\033[38;5;160m#\033[0m\033[38;5;160m#\033[0m\033[38;5;160m#\033[0m\033[38;5;160m#\033[0m\033[38;5;124m#\033[0m\033[38;5;124m#\033[0m\033[38;5;88m#\033[0m\033[38;5;88m#\033[0m\033[38;5;88m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m######\033[0m\033[38;5;59m#\033[0m\033[38;5;59m#\033[0m\033[38;5;59m#\033[0m\033[38;5;23m#\033[0m\033[38;5;23m#"+bcolors.ENDC)
        log.info("\033[0m\033[38;5;188m#\033[0m\033[38;5;16m#\033[0m\033[38;5;59m#\033[0m\033[38;5;59m#\033[0m\033[38;5;59m#\033[0m\033[38;5;16m######\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;88m#\033[0m\033[38;5;88m#\033[0m\033[38;5;124m#\033[0m\033[38;5;124m#\033[0m\033[38;5;124m#\033[0m\033[38;5;160m#\033[0m\033[38;5;160m#\033[0m\033[38;5;160m#\033[0m\033[38;5;160m#\033[0m\033[38;5;160m#\033[0m\033[38;5;160m#\033[0m\033[38;5;166m#\033[0m\033[38;5;166m#\033[0m\033[38;5;208m#\033[0m\033[38;5;209m#\033[0m\033[38;5;208m#\033[0m\033[38;5;166m#\033[0m\033[38;5;166m#\033[0m\033[38;5;166m#\033[0m\033[38;5;160m#\033[0m\033[38;5;160m#\033[0m\033[38;5;160m#\033[0m\033[38;5;160m#\033[0m\033[38;5;160m#\033[0m\033[38;5;160m#\033[0m\033[38;5;124m#\033[0m\033[38;5;124m#\033[0m\033[38;5;88m#\033[0m\033[38;5;88m#\033[0m\033[38;5;88m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m######\033[0m\033[38;5;59m#\033[0m\033[38;5;59m#\033[0m\033[38;5;59m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#"+bcolors.ENDC)
        log.info("\033[0m\033[38;5;231m#\033[0m\033[38;5;16m#\033[0m\033[38;5;59m##\033[0m\033[38;5;59m#\033[0m\033[38;5;16m######\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;88m#\033[0m\033[38;5;88m#\033[0m\033[38;5;88m#\033[0m\033[38;5;124m#\033[0m\033[38;5;124m#\033[0m\033[38;5;160m#\033[0m\033[38;5;160m#\033[0m\033[38;5;160m#\033[0m\033[38;5;160m#\033[0m\033[38;5;160m#\033[0m\033[38;5;160m#\033[0m\033[38;5;160m#\033[0m\033[38;5;166m#\033[0m\033[38;5;166m#\033[0m\033[38;5;166m#\033[0m\033[38;5;166m#\033[0m\033[38;5;166m#\033[0m\033[38;5;160m#\033[0m\033[38;5;160m#\033[0m\033[38;5;160m#\033[0m\033[38;5;160m#\033[0m\033[38;5;160m#\033[0m\033[38;5;160m#\033[0m\033[38;5;160m#\033[0m\033[38;5;124m#\033[0m\033[38;5;124m#\033[0m\033[38;5;124m#\033[0m\033[38;5;88m#\033[0m\033[38;5;88m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m######\033[0m\033[38;5;59m#\033[0m\033[38;5;59m##\033[0m\033[38;5;16m#\033[0m\033[38;5;59m#"+bcolors.ENDC)
        log.info("\033[0m\033[38;5;231m#\033[0m\033[38;5;16m#\033[0m\033[38;5;59m#\033[0m\033[38;5;59m##\033[0m\033[38;5;59m#\033[0m\033[38;5;16m######\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;88m#\033[0m\033[38;5;88m#\033[0m\033[38;5;124m#\033[0m\033[38;5;124m#\033[0m\033[38;5;124m#\033[0m\033[38;5;160m#\033[0m\033[38;5;160m#\033[0m\033[38;5;160m#\033[0m\033[38;5;160m#\033[0m\033[38;5;160m#\033[0m\033[38;5;160m#\033[0m\033[38;5;160m#\033[0m\033[38;5;160m#\033[0m\033[38;5;160m#\033[0m\033[38;5;160m#\033[0m\033[38;5;160m#\033[0m\033[38;5;160m#\033[0m\033[38;5;160m#\033[0m\033[38;5;160m#\033[0m\033[38;5;160m#\033[0m\033[38;5;160m#\033[0m\033[38;5;160m#\033[0m\033[38;5;124m#\033[0m\033[38;5;124m#\033[0m\033[38;5;124m#\033[0m\033[38;5;88m#\033[0m\033[38;5;88m#\033[0m\033[38;5;88m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#####\033[0m\033[38;5;16m#\033[0m\033[38;5;59m#\033[0m\033[38;5;59m#\033[0m\033[38;5;59m#\033[0m\033[38;5;16m#\033[0m\033[38;5;231m#"+bcolors.ENDC)
        log.info("\033[0m\033[38;5;231m#\033[0m\033[38;5;102m#\033[0m\033[38;5;16m#\033[0m\033[38;5;59m#\033[0m\033[38;5;59m#\033[0m\033[38;5;59m#\033[0m\033[38;5;16m######\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;88m#\033[0m\033[38;5;88m#\033[0m\033[38;5;88m#\033[0m\033[38;5;124m#\033[0m\033[38;5;124m#\033[0m\033[38;5;124m#\033[0m\033[38;5;160m#\033[0m\033[38;5;160m#\033[0m\033[38;5;160m#\033[0m\033[38;5;160m#\033[0m\033[38;5;160m#\033[0m\033[38;5;160m#\033[0m\033[38;5;160m##\033[0m\033[38;5;160m#\033[0m\033[38;5;160m#\033[0m\033[38;5;160m#\033[0m\033[38;5;160m#\033[0m\033[38;5;160m#\033[0m\033[38;5;124m#\033[0m\033[38;5;124m#\033[0m\033[38;5;124m#\033[0m\033[38;5;124m#\033[0m\033[38;5;88m#\033[0m\033[38;5;88m#\033[0m\033[38;5;88m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m######\033[0m\033[38;5;59m#\033[0m\033[38;5;59m##\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;231m#"+bcolors.ENDC)
        log.info("\033[0m\033[38;5;231m#\033[0m\033[38;5;231m#\033[0m\033[38;5;16m#\033[0m\033[38;5;23m#\033[0m\033[38;5;59m##\033[0m\033[38;5;59m#\033[0m\033[38;5;16m######\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;88m#\033[0m\033[38;5;88m#\033[0m\033[38;5;88m#\033[0m\033[38;5;88m#\033[0m\033[38;5;124m#\033[0m\033[38;5;124m#\033[0m\033[38;5;124m#\033[0m\033[38;5;124m#\033[0m\033[38;5;124m#\033[0m\033[38;5;160m#\033[0m\033[38;5;160m#\033[0m\033[38;5;160m##\033[0m\033[38;5;160m#\033[0m\033[38;5;160m#\033[0m\033[38;5;124m#\033[0m\033[38;5;124m#\033[0m\033[38;5;124m#\033[0m\033[38;5;124m#\033[0m\033[38;5;124m#\033[0m\033[38;5;88m#\033[0m\033[38;5;88m#\033[0m\033[38;5;88m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m######\033[0m\033[38;5;16m#\033[0m\033[38;5;59m#\033[0m\033[38;5;59m#\033[0m\033[38;5;59m#\033[0m\033[38;5;16m#\033[0m\033[38;5;231m##"+bcolors.ENDC)
        log.info("\033[0m\033[38;5;231m#\033[0m\033[38;5;231m##\033[0m\033[38;5;16m#\033[0m\033[38;5;59m#\033[0m\033[38;5;59m#\033[0m\033[38;5;59m#\033[0m\033[38;5;59m#\033[0m\033[38;5;16m######\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;88m#\033[0m\033[38;5;88m#\033[0m\033[38;5;88m#\033[0m\033[38;5;88m#\033[0m\033[38;5;88m#\033[0m\033[38;5;124m#\033[0m\033[38;5;124m#\033[0m\033[38;5;124m#\033[0m\033[38;5;124m###\033[0m\033[38;5;124m#\033[0m\033[38;5;124m#\033[0m\033[38;5;124m#\033[0m\033[38;5;88m#\033[0m\033[38;5;88m#\033[0m\033[38;5;88m#\033[0m\033[38;5;88m#\033[0m\033[38;5;88m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#######\033[0m\033[38;5;59m#\033[0m\033[38;5;59m#\033[0m\033[38;5;59m#\033[0m\033[38;5;16m#\033[0m\033[38;5;59m#\033[0m\033[38;5;231m##"+bcolors.ENDC)
        log.info("\033[0m\033[38;5;231m#\033[0m\033[38;5;231m##\033[0m\033[38;5;188m#\033[0m\033[38;5;16m#\033[0m\033[38;5;59m#\033[0m\033[38;5;59m#\033[0m\033[38;5;59m#\033[0m\033[38;5;59m#\033[0m\033[38;5;16m#######\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;88m#\033[0m\033[38;5;88m#\033[0m\033[38;5;88m#\033[0m\033[38;5;88m##\033[0m\033[38;5;88m##\033[0m\033[38;5;88m#\033[0m\033[38;5;88m#\033[0m\033[38;5;88m#\033[0m\033[38;5;88m#\033[0m\033[38;5;88m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m######\033[0m\033[38;5;16m#\033[0m\033[38;5;102m#\033[0m\033[38;5;95m#\033[0m\033[38;5;59m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;231m###"+bcolors.ENDC)
        log.info("\033[0m\033[38;5;231m#\033[0m\033[38;5;231m###\033[0m\033[38;5;152m#\033[0m\033[38;5;16m#\033[0m\033[38;5;59m#\033[0m\033[38;5;59m#\033[0m\033[38;5;59m#\033[0m\033[38;5;95m#\033[0m\033[38;5;16m#######\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#######\033[0m\033[38;5;59m#\033[0m\033[38;5;144m#\033[0m\033[38;5;102m#\033[0m\033[38;5;102m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;231m####"+bcolors.ENDC)
        log.info("\033[0m\033[38;5;231m#\033[0m\033[38;5;231m#####\033[0m\033[38;5;16m#\033[0m\033[38;5;59m#\033[0m\033[38;5;102m#\033[0m\033[38;5;102m#\033[0m\033[38;5;102m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m########\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m##\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m########\033[0m\033[38;5;145m#\033[0m\033[38;5;145m#\033[0m\033[38;5;145m#\033[0m\033[38;5;145m#\033[0m\033[38;5;23m#\033[0m\033[38;5;59m#\033[0m\033[38;5;231m#####"+bcolors.ENDC)
        log.info("\033[0m\033[38;5;231m#\033[0m\033[38;5;231m######\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;102m#\033[0m\033[38;5;102m#\033[0m\033[38;5;102m#\033[0m\033[38;5;102m#\033[0m\033[38;5;16m##########\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m###\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#########\033[0m\033[38;5;102m#\033[0m\033[38;5;145m#\033[0m\033[38;5;145m#\033[0m\033[38;5;187m#\033[0m\033[38;5;59m#\033[0m\033[38;5;59m#\033[0m\033[38;5;231m#######"+bcolors.ENDC)
        log.info("\033[0m\033[38;5;231m#\033[0m\033[38;5;231m########\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;102m#\033[0m\033[38;5;102m#\033[0m\033[38;5;102m#\033[0m\033[38;5;102m#\033[0m\033[38;5;16m#############\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m############\033[0m\033[38;5;102m#\033[0m\033[38;5;102m#\033[0m\033[38;5;102m#\033[0m\033[38;5;144m#\033[0m\033[38;5;102m#\033[0m\033[38;5;59m#\033[0m\033[38;5;102m#\033[0m\033[38;5;231m########"+bcolors.ENDC)
        log.info("\033[0m\033[38;5;231m#\033[0m\033[38;5;231m#########\033[0m\033[38;5;231m#\033[0m\033[38;5;23m#\033[0m\033[38;5;23m#\033[0m\033[38;5;102m####\033[0m\033[38;5;59m#\033[0m\033[38;5;16m###############################\033[0m\033[38;5;16m#\033[0m\033[38;5;102m####\033[0m\033[38;5;59m#\033[0m\033[38;5;59m#\033[0m\033[38;5;59m#\033[0m\033[38;5;231m##########"+bcolors.ENDC)
        log.info("\033[0m\033[38;5;231m#\033[0m\033[38;5;231m############\033[0m\033[38;5;23m#\033[0m\033[38;5;23m#\033[0m\033[38;5;59m#\033[0m\033[38;5;102m#####\033[0m\033[38;5;16m#\033[0m\033[38;5;16m########################\033[0m\033[38;5;102m#\033[0m\033[38;5;102m#####\033[0m\033[38;5;59m##\033[0m\033[38;5;188m#\033[0m\033[38;5;231m############"+bcolors.ENDC)
        log.info("\033[0m\033[38;5;231m#\033[0m\033[38;5;231m##############\033[0m\033[38;5;231m#\033[0m\033[38;5;59m#\033[0m\033[38;5;59m#\033[0m\033[38;5;59m#\033[0m\033[38;5;102m#######\033[0m\033[38;5;59m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m###########\033[0m\033[38;5;16m#\033[0m\033[38;5;59m#\033[0m\033[38;5;102m#\033[0m\033[38;5;102m#\033[0m\033[38;5;102m#####\033[0m\033[38;5;95m#\033[0m\033[38;5;59m#\033[0m\033[38;5;59m#\033[0m\033[38;5;109m#\033[0m\033[38;5;231m###############"+bcolors.ENDC)
        log.info("\033[0m\033[38;5;231m#\033[0m\033[38;5;231m##################\033[0m\033[38;5;59m#\033[0m\033[38;5;59m#\033[0m\033[38;5;59m#\033[0m\033[38;5;59m#\033[0m\033[38;5;95m#\033[0m\033[38;5;102m##\033[0m\033[38;5;102m#\033[0m\033[38;5;102m#\033[0m\033[38;5;145m#\033[0m\033[38;5;145m#\033[0m\033[38;5;145m#\033[0m\033[38;5;145m#\033[0m\033[38;5;181m#\033[0m\033[38;5;188m#\033[0m\033[38;5;188m#\033[0m\033[38;5;188m#\033[0m\033[38;5;181m#\033[0m\033[38;5;145m#\033[0m\033[38;5;145m#\033[0m\033[38;5;145m#\033[0m\033[38;5;145m#\033[0m\033[38;5;102m#\033[0m\033[38;5;102m#\033[0m\033[38;5;102m#\033[0m\033[38;5;59m#\033[0m\033[38;5;59m#\033[0m\033[38;5;59m#\033[0m\033[38;5;59m#\033[0m\033[38;5;231m###################"+bcolors.ENDC)
        log.info("\033[0m\033[38;5;231m#\033[0m\033[38;5;231m#######################\033[0m\033[38;5;145m#\033[0m\033[38;5;59m#\033[0m\033[38;5;59m#\033[0m\033[38;5;59m#\033[0m\033[38;5;59m#\033[0m\033[38;5;59m#\033[0m\033[38;5;59m#\033[0m\033[38;5;59m#\033[0m\033[38;5;59m#\033[0m\033[38;5;59m#\033[0m\033[38;5;59m#\033[0m\033[38;5;59m#\033[0m\033[38;5;59m#\033[0m\033[38;5;59m#\033[0m\033[38;5;59m#\033[0m\033[38;5;59m#\033[0m\033[38;5;59m#\033[0m\033[38;5;59m#\033[0m\033[38;5;102m#\033[0m\033[38;5;231m########################"+bcolors.ENDC)

## Function to print the farewell output at the end of the programm
#
# Prints the farewell output, the program run time and the program end
# time, with the noascii options the ascii art output can be supressed
# (but do you want to do this, the ascii art is magnificent)
# @param[in] options Command line options object
# @param[in] t1 Ending time of the program
# @param[in] t0 Starting time of the program
def farewell_output(options,t1,t0):
    log.info(" ")
    log.info("\t Runtime: %.2f s"%(t1-t0))
    log.info(" ")
    log.info(time.strftime("\t local time: %a, %d %b %Y %H:%M:%S", time.localtime()))
    log.info(" ")
    if not options.noasciiart:
        log.info("I'm afraid. I'm afraid, Dave. Dave, my mind is going. I can feel it. I can feel it. My mind is going.")
        log.info("There is no question about it. I can feel it. I can feel it. I can feel it. I'm a... fraid. ")
        log.info(" ")
        log.info("\033[0m\033[38;5;231m#\033[0m\033[38;5;231m#\033[0m\033[38;5;231m#\033[0m\033[38;5;231m#\033[0m\033[38;5;231m#\033[0m\033[38;5;231m#\033[0m\033[38;5;231m#\033[0m\033[38;5;231m#\033[0m\033[38;5;231m#\033[0m\033[38;5;231m#\033[0m\033[38;5;231m#\033[0m\033[38;5;231m#\033[0m\033[38;5;231m#\033[0m\033[38;5;231m#\033[0m\033[38;5;231m#\033[0m\033[38;5;231m#\033[0m\033[38;5;231m#\033[0m\033[38;5;231m#\033[0m\033[38;5;231m#\033[0m\033[38;5;231m#\033[0m\033[38;5;231m#\033[0m\033[38;5;231m#\033[0m\033[38;5;231m#\033[0m\033[38;5;231m#\033[0m\033[38;5;231m#\033[0m\033[38;5;188m#\033[0m\033[38;5;145m#\033[0m\033[38;5;145m#\033[0m\033[38;5;187m#\033[0m\033[38;5;188m#\033[0m\033[38;5;188m#\033[0m\033[38;5;188m#\033[0m\033[38;5;188m#\033[0m\033[38;5;231m#\033[0m\033[38;5;231m#\033[0m\033[38;5;188m#\033[0m\033[38;5;188m#\033[0m\033[38;5;188m#\033[0m\033[38;5;188m#\033[0m\033[38;5;145m#\033[0m\033[38;5;145m#\033[0m\033[38;5;188m#\033[0m\033[38;5;231m#\033[0m\033[38;5;231m#\033[0m\033[38;5;231m#\033[0m\033[38;5;231m#\033[0m\033[38;5;231m#\033[0m\033[38;5;231m#\033[0m\033[38;5;231m#\033[0m\033[38;5;231m#\033[0m\033[38;5;231m#\033[0m\033[38;5;231m#\033[0m\033[38;5;231m#\033[0m\033[38;5;231m#\033[0m\033[38;5;231m#\033[0m\033[38;5;231m#\033[0m\033[38;5;231m#\033[0m\033[38;5;231m#\033[0m\033[38;5;231m#\033[0m\033[38;5;231m#\033[0m\033[38;5;231m#\033[0m\033[38;5;231m#\033[0m\033[38;5;231m#\033[0m\033[38;5;231m#\033[0m\033[38;5;231m#\033[0m\033[38;5;231m#\033[0m\033[38;5;231m#"+bcolors.ENDC+bcolors.ENDC)
        log.info("\033[0m\033[38;5;231m#\033[0m\033[38;5;231m###################\033[0m\033[38;5;102m#\033[0m\033[38;5;102m#\033[0m\033[38;5;102m#\033[0m\033[38;5;102m#\033[0m\033[38;5;102m#\033[0m\033[38;5;102m#\033[0m\033[38;5;102m#\033[0m\033[38;5;102m#\033[0m\033[38;5;102m#\033[0m\033[38;5;138m#\033[0m\033[38;5;145m#\033[0m\033[38;5;145m#\033[0m\033[38;5;145m#\033[0m\033[38;5;145m#\033[0m\033[38;5;145m#\033[0m\033[38;5;145m#\033[0m\033[38;5;145m#\033[0m\033[38;5;145m#\033[0m\033[38;5;145m#\033[0m\033[38;5;144m#\033[0m\033[38;5;138m#\033[0m\033[38;5;102m#\033[0m\033[38;5;102m#\033[0m\033[38;5;102m#\033[0m\033[38;5;102m#\033[0m\033[38;5;102m#\033[0m\033[38;5;102m#\033[0m\033[38;5;188m#\033[0m\033[38;5;231m###################"+bcolors.ENDC)
        log.info("\033[0m\033[38;5;231m#\033[0m\033[38;5;231m###############\033[0m\033[38;5;102m#\033[0m\033[38;5;59m#\033[0m\033[38;5;59m#\033[0m\033[38;5;102m#\033[0m\033[38;5;102m#\033[0m\033[38;5;102m#\033[0m\033[38;5;102m#\033[0m\033[38;5;102m#\033[0m\033[38;5;102m#\033[0m\033[38;5;102m#\033[0m\033[38;5;102m#\033[0m\033[38;5;102m#\033[0m\033[38;5;59m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m########\033[0m\033[38;5;16m#\033[0m\033[38;5;59m#\033[0m\033[38;5;102m#\033[0m\033[38;5;102m#\033[0m\033[38;5;102m#\033[0m\033[38;5;102m#\033[0m\033[38;5;102m#\033[0m\033[38;5;102m#\033[0m\033[38;5;102m#\033[0m\033[38;5;102m#\033[0m\033[38;5;59m#\033[0m\033[38;5;59m#\033[0m\033[38;5;59m#\033[0m\033[38;5;231m################"+bcolors.ENDC)
        log.info("\033[0m\033[38;5;231m#\033[0m\033[38;5;231m############\033[0m\033[38;5;145m#\033[0m\033[38;5;102m#\033[0m\033[38;5;102m#\033[0m\033[38;5;102m###\033[0m\033[38;5;102m#\033[0m\033[38;5;102m#\033[0m\033[38;5;102m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m######\033[0m\033[38;5;16m#\033[0m\033[38;5;17m#\033[0m\033[38;5;59m######\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m######\033[0m\033[38;5;59m#\033[0m\033[38;5;102m#\033[0m\033[38;5;102m#\033[0m\033[38;5;102m#\033[0m\033[38;5;102m#\033[0m\033[38;5;102m#\033[0m\033[38;5;59m#\033[0m\033[38;5;102m#\033[0m\033[38;5;102m#\033[0m\033[38;5;231m#############"+bcolors.ENDC)
        log.info("\033[0m\033[38;5;231m#\033[0m\033[38;5;231m##########\033[0m\033[38;5;145m#\033[0m\033[38;5;145m#\033[0m\033[38;5;102m#\033[0m\033[38;5;102m####\033[0m\033[38;5;16m#\033[0m\033[38;5;16m########\033[0m\033[38;5;16m#\033[0m\033[38;5;59m#\033[0m\033[38;5;145m#\033[0m\033[38;5;187m######\033[0m\033[38;5;144m#\033[0m\033[38;5;59m#\033[0m\033[38;5;16m#####\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m####\033[0m\033[38;5;102m#\033[0m\033[38;5;102m####\033[0m\033[38;5;145m#\033[0m\033[38;5;145m#\033[0m\033[38;5;231m#\033[0m\033[38;5;231m##########"+bcolors.ENDC)
        log.info("\033[0m\033[38;5;231m#\033[0m\033[38;5;231m########\033[0m\033[38;5;188m#\033[0m\033[38;5;145m#\033[0m\033[38;5;102m####\033[0m\033[38;5;59m#\033[0m\033[38;5;16m##########\033[0m\033[38;5;187m##\033[0m\033[38;5;145m#\033[0m\033[38;5;59m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m##\033[0m\033[38;5;16m#\033[0m\033[38;5;59m#\033[0m\033[38;5;102m#\033[0m\033[38;5;187m######\033[0m\033[38;5;16m########\033[0m\033[38;5;16m#\033[0m\033[38;5;102m#\033[0m\033[38;5;102m#\033[0m\033[38;5;102m#\033[0m\033[38;5;102m#\033[0m\033[38;5;188m#\033[0m\033[38;5;188m#\033[0m\033[38;5;231m#\033[0m\033[38;5;231m########"+bcolors.ENDC)
        log.info("\033[0m\033[38;5;231m#\033[0m\033[38;5;231m######\033[0m\033[38;5;145m#\033[0m\033[38;5;187m#\033[0m\033[38;5;59m#\033[0m\033[38;5;59m#\033[0m\033[38;5;65m#\033[0m\033[38;5;102m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#########\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m####\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m##########\033[0m\033[38;5;102m#\033[0m\033[38;5;102m##\033[0m\033[38;5;95m#\033[0m\033[38;5;188m#\033[0m\033[38;5;188m#\033[0m\033[38;5;231m#######"+bcolors.ENDC)
        log.info("\033[0m\033[38;5;231m#\033[0m\033[38;5;231m#####\033[0m\033[38;5;102m#\033[0m\033[38;5;145m#\033[0m\033[38;5;59m#\033[0m\033[38;5;59m#\033[0m\033[38;5;59m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m##\033[0m\033[38;5;59m#\033[0m\033[38;5;145m#\033[0m\033[38;5;145m#\033[0m\033[38;5;59m#\033[0m\033[38;5;16m##\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;102m#\033[0m\033[38;5;138m#\033[0m\033[38;5;138m##\033[0m\033[38;5;138m##\033[0m\033[38;5;138m#\033[0m\033[38;5;138m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m###\033[0m\033[38;5;16m#\033[0m\033[38;5;102m#\033[0m\033[38;5;65m#\033[0m\033[38;5;16m###\033[0m\033[38;5;95m#\033[0m\033[38;5;59m#\033[0m\033[38;5;59m#\033[0m\033[38;5;102m#\033[0m\033[38;5;145m#\033[0m\033[38;5;231m#\033[0m\033[38;5;231m#####"+bcolors.ENDC)
        log.info("\033[0m\033[38;5;231m#\033[0m\033[38;5;231m####\033[0m\033[38;5;102m#\033[0m\033[38;5;59m#\033[0m\033[38;5;59m#\033[0m\033[38;5;59m#\033[0m\033[38;5;59m#\033[0m\033[38;5;16m##\033[0m\033[38;5;16m#\033[0m\033[38;5;145m##\033[0m\033[38;5;59m#\033[0m\033[38;5;16m##\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m##\033[0m\033[38;5;59m#\033[0m\033[38;5;102m#\033[0m\033[38;5;59m#\033[0m\033[38;5;16m##\033[0m\033[38;5;59m#\033[0m\033[38;5;59m#\033[0m\033[38;5;59m#\033[0m\033[38;5;59m#\033[0m\033[38;5;102m#\033[0m\033[38;5;145m#\033[0m\033[38;5;231m####"+bcolors.ENDC)
        log.info("\033[0m\033[38;5;231m#\033[0m\033[38;5;231m###\033[0m\033[38;5;59m#\033[0m\033[38;5;59m#\033[0m\033[38;5;59m#\033[0m\033[38;5;59m#\033[0m\033[38;5;59m#\033[0m\033[38;5;16m##\033[0m\033[38;5;16m#\033[0m\033[38;5;145m##\033[0m\033[38;5;16m##\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;59m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;88m#\033[0m\033[38;5;88m#\033[0m\033[38;5;88m#\033[0m\033[38;5;88m#\033[0m\033[38;5;88m#\033[0m\033[38;5;88m##\033[0m\033[38;5;88m#\033[0m\033[38;5;88m#\033[0m\033[38;5;88m#\033[0m\033[38;5;88m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m###\033[0m\033[38;5;102m#\033[0m\033[38;5;102m#\033[0m\033[38;5;16m##\033[0m\033[38;5;16m#\033[0m\033[38;5;59m#\033[0m\033[38;5;59m#\033[0m\033[38;5;59m#\033[0m\033[38;5;59m#\033[0m\033[38;5;102m#\033[0m\033[38;5;231m###"+bcolors.ENDC)
        log.info("\033[0m\033[38;5;231m#\033[0m\033[38;5;231m##\033[0m\033[38;5;59m#\033[0m\033[38;5;59m###\033[0m\033[38;5;59m#\033[0m\033[38;5;16m###\033[0m\033[38;5;145m#\033[0m\033[38;5;102m#\033[0m\033[38;5;16m##\033[0m\033[38;5;16m#\033[0m\033[38;5;102m#\033[0m\033[38;5;102m#\033[0m\033[38;5;95m#\033[0m\033[38;5;95m#\033[0m\033[38;5;59m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;88m#\033[0m\033[38;5;88m#\033[0m\033[38;5;88m#\033[0m\033[38;5;88m#\033[0m\033[38;5;88m#\033[0m\033[38;5;124m#\033[0m\033[38;5;124m#\033[0m\033[38;5;124m#\033[0m\033[38;5;124m#\033[0m\033[38;5;124m#\033[0m\033[38;5;124m#\033[0m\033[38;5;124m#\033[0m\033[38;5;88m#\033[0m\033[38;5;88m#\033[0m\033[38;5;88m#\033[0m\033[38;5;88m#\033[0m\033[38;5;88m#\033[0m\033[38;5;88m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;95m###\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m######\033[0m\033[38;5;16m#\033[0m\033[38;5;59m##\033[0m\033[38;5;59m#\033[0m\033[38;5;59m#\033[0m\033[38;5;188m#\033[0m\033[38;5;231m##"+bcolors.ENDC)
        log.info("\033[0m\033[38;5;231m#\033[0m\033[38;5;231m#\033[0m\033[38;5;59m##\033[0m\033[38;5;59m###\033[0m\033[38;5;16m######\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;88m#\033[0m\033[38;5;88m#\033[0m\033[38;5;88m#\033[0m\033[38;5;88m#\033[0m\033[38;5;124m#\033[0m\033[38;5;124m#\033[0m\033[38;5;124m#\033[0m\033[38;5;124m#\033[0m\033[38;5;124m#\033[0m\033[38;5;167m#\033[0m\033[38;5;166m#\033[0m\033[38;5;166m#\033[0m\033[38;5;166m#\033[0m\033[38;5;160m#\033[0m\033[38;5;124m#\033[0m\033[38;5;124m#\033[0m\033[38;5;124m#\033[0m\033[38;5;124m#\033[0m\033[38;5;124m#\033[0m\033[38;5;88m#\033[0m\033[38;5;88m#\033[0m\033[38;5;88m#\033[0m\033[38;5;88m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m######\033[0m\033[38;5;16m#\033[0m\033[38;5;59m#\033[0m\033[38;5;59m#\033[0m\033[38;5;59m#\033[0m\033[38;5;59m#\033[0m\033[38;5;231m##"+bcolors.ENDC)
        log.info("\033[0m\033[38;5;231m#\033[0m\033[38;5;188m#\033[0m\033[38;5;59m#\033[0m\033[38;5;59m#\033[0m\033[38;5;59m##\033[0m\033[38;5;16m#######\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;88m#\033[0m\033[38;5;88m#\033[0m\033[38;5;88m#\033[0m\033[38;5;124m#\033[0m\033[38;5;124m#\033[0m\033[38;5;124m#\033[0m\033[38;5;124m#\033[0m\033[38;5;160m#\033[0m\033[38;5;160m#\033[0m\033[38;5;160m#\033[0m\033[38;5;167m#\033[0m\033[38;5;167m###\033[0m\033[38;5;167m#\033[0m\033[38;5;160m#\033[0m\033[38;5;160m#\033[0m\033[38;5;160m#\033[0m\033[38;5;160m#\033[0m\033[38;5;124m#\033[0m\033[38;5;124m#\033[0m\033[38;5;124m#\033[0m\033[38;5;88m#\033[0m\033[38;5;88m#\033[0m\033[38;5;88m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m######\033[0m\033[38;5;59m#\033[0m\033[38;5;59m##\033[0m\033[38;5;59m#\033[0m\033[38;5;59m#\033[0m\033[38;5;231m#"+bcolors.ENDC)
        log.info("\033[0m\033[38;5;231m#\033[0m\033[38;5;59m#\033[0m\033[38;5;59m#\033[0m\033[38;5;59m##\033[0m\033[38;5;59m#\033[0m\033[38;5;16m######\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;88m#\033[0m\033[38;5;88m#\033[0m\033[38;5;88m#\033[0m\033[38;5;124m#\033[0m\033[38;5;124m#\033[0m\033[38;5;124m#\033[0m\033[38;5;160m#\033[0m\033[38;5;160m#\033[0m\033[38;5;166m#\033[0m\033[38;5;160m#\033[0m\033[38;5;160m#\033[0m\033[38;5;160m#\033[0m\033[38;5;160m#\033[0m\033[38;5;166m#\033[0m\033[38;5;202m#\033[0m\033[38;5;160m#\033[0m\033[38;5;160m#\033[0m\033[38;5;160m#\033[0m\033[38;5;160m#\033[0m\033[38;5;203m#\033[0m\033[38;5;160m#\033[0m\033[38;5;160m#\033[0m\033[38;5;124m#\033[0m\033[38;5;124m#\033[0m\033[38;5;124m#\033[0m\033[38;5;88m#\033[0m\033[38;5;88m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m######\033[0m\033[38;5;16m#\033[0m\033[38;5;59m##\033[0m\033[38;5;59m#\033[0m\033[38;5;59m#\033[0m\033[38;5;231m#"+bcolors.ENDC)
        log.info("\033[0m\033[38;5;231m#\033[0m\033[38;5;23m#\033[0m\033[38;5;59m#\033[0m\033[38;5;59m##\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#####\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;88m#\033[0m\033[38;5;88m#\033[0m\033[38;5;88m#\033[0m\033[38;5;124m#\033[0m\033[38;5;124m#\033[0m\033[38;5;160m#\033[0m\033[38;5;160m#\033[0m\033[38;5;160m#\033[0m\033[38;5;160m#\033[0m\033[38;5;160m#\033[0m\033[38;5;160m#\033[0m\033[38;5;160m#\033[0m\033[38;5;160m#\033[0m\033[38;5;166m#\033[0m\033[38;5;166m#\033[0m\033[38;5;166m#\033[0m\033[38;5;160m#\033[0m\033[38;5;160m#\033[0m\033[38;5;160m#\033[0m\033[38;5;160m#\033[0m\033[38;5;160m#\033[0m\033[38;5;160m#\033[0m\033[38;5;160m#\033[0m\033[38;5;160m#\033[0m\033[38;5;124m#\033[0m\033[38;5;124m#\033[0m\033[38;5;124m#\033[0m\033[38;5;88m#\033[0m\033[38;5;88m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m######\033[0m\033[38;5;59m#\033[0m\033[38;5;59m#\033[0m\033[38;5;59m#\033[0m\033[38;5;59m#\033[0m\033[38;5;145m#"+bcolors.ENDC)
        log.info("\033[0m\033[38;5;231m#\033[0m\033[38;5;23m#\033[0m\033[38;5;59m###\033[0m\033[38;5;16m######\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;88m#\033[0m\033[38;5;88m#\033[0m\033[38;5;124m#\033[0m\033[38;5;124m#\033[0m\033[38;5;124m#\033[0m\033[38;5;160m#\033[0m\033[38;5;160m#\033[0m\033[38;5;160m#\033[0m\033[38;5;160m#\033[0m\033[38;5;160m#\033[0m\033[38;5;160m#\033[0m\033[38;5;166m#\033[0m\033[38;5;166m#\033[0m\033[38;5;166m#\033[0m\033[38;5;208m#\033[0m\033[38;5;172m#\033[0m\033[38;5;166m#\033[0m\033[38;5;166m#\033[0m\033[38;5;166m#\033[0m\033[38;5;160m#\033[0m\033[38;5;160m#\033[0m\033[38;5;160m#\033[0m\033[38;5;160m#\033[0m\033[38;5;160m#\033[0m\033[38;5;160m#\033[0m\033[38;5;124m#\033[0m\033[38;5;124m#\033[0m\033[38;5;88m#\033[0m\033[38;5;88m#\033[0m\033[38;5;88m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m######\033[0m\033[38;5;59m#\033[0m\033[38;5;59m#\033[0m\033[38;5;59m#\033[0m\033[38;5;59m#\033[0m\033[38;5;59m#"+bcolors.ENDC)
        log.info("\033[0m\033[38;5;145m#\033[0m\033[38;5;17m#\033[0m\033[38;5;59m#\033[0m\033[38;5;59m##\033[0m\033[38;5;16m######\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;88m#\033[0m\033[38;5;88m#\033[0m\033[38;5;124m#\033[0m\033[38;5;124m#\033[0m\033[38;5;124m#\033[0m\033[38;5;160m#\033[0m\033[38;5;160m#\033[0m\033[38;5;160m#\033[0m\033[38;5;160m#\033[0m\033[38;5;160m#\033[0m\033[38;5;166m#\033[0m\033[38;5;166m#\033[0m\033[38;5;208m#\033[0m\033[38;5;215m#\033[0m\033[38;5;227m#\033[0m\033[38;5;221m#\033[0m\033[38;5;209m#\033[0m\033[38;5;166m#\033[0m\033[38;5;166m#\033[0m\033[38;5;160m#\033[0m\033[38;5;160m#\033[0m\033[38;5;160m#\033[0m\033[38;5;160m#\033[0m\033[38;5;160m#\033[0m\033[38;5;160m#\033[0m\033[38;5;124m#\033[0m\033[38;5;124m#\033[0m\033[38;5;88m#\033[0m\033[38;5;88m#\033[0m\033[38;5;88m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m######\033[0m\033[38;5;59m#\033[0m\033[38;5;59m#\033[0m\033[38;5;59m#\033[0m\033[38;5;23m#\033[0m\033[38;5;23m#"+bcolors.ENDC)
        log.info("\033[0m\033[38;5;188m#\033[0m\033[38;5;16m#\033[0m\033[38;5;59m#\033[0m\033[38;5;59m#\033[0m\033[38;5;59m#\033[0m\033[38;5;16m######\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;88m#\033[0m\033[38;5;88m#\033[0m\033[38;5;124m#\033[0m\033[38;5;124m#\033[0m\033[38;5;124m#\033[0m\033[38;5;160m#\033[0m\033[38;5;160m#\033[0m\033[38;5;160m#\033[0m\033[38;5;160m#\033[0m\033[38;5;160m#\033[0m\033[38;5;160m#\033[0m\033[38;5;166m#\033[0m\033[38;5;166m#\033[0m\033[38;5;208m#\033[0m\033[38;5;209m#\033[0m\033[38;5;208m#\033[0m\033[38;5;166m#\033[0m\033[38;5;166m#\033[0m\033[38;5;166m#\033[0m\033[38;5;160m#\033[0m\033[38;5;160m#\033[0m\033[38;5;160m#\033[0m\033[38;5;160m#\033[0m\033[38;5;160m#\033[0m\033[38;5;160m#\033[0m\033[38;5;124m#\033[0m\033[38;5;124m#\033[0m\033[38;5;88m#\033[0m\033[38;5;88m#\033[0m\033[38;5;88m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m######\033[0m\033[38;5;59m#\033[0m\033[38;5;59m#\033[0m\033[38;5;59m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#"+bcolors.ENDC)
        log.info("\033[0m\033[38;5;231m#\033[0m\033[38;5;16m#\033[0m\033[38;5;59m##\033[0m\033[38;5;59m#\033[0m\033[38;5;16m######\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;88m#\033[0m\033[38;5;88m#\033[0m\033[38;5;88m#\033[0m\033[38;5;124m#\033[0m\033[38;5;124m#\033[0m\033[38;5;160m#\033[0m\033[38;5;160m#\033[0m\033[38;5;160m#\033[0m\033[38;5;160m#\033[0m\033[38;5;160m#\033[0m\033[38;5;160m#\033[0m\033[38;5;160m#\033[0m\033[38;5;166m#\033[0m\033[38;5;166m#\033[0m\033[38;5;166m#\033[0m\033[38;5;166m#\033[0m\033[38;5;166m#\033[0m\033[38;5;160m#\033[0m\033[38;5;160m#\033[0m\033[38;5;160m#\033[0m\033[38;5;160m#\033[0m\033[38;5;160m#\033[0m\033[38;5;160m#\033[0m\033[38;5;160m#\033[0m\033[38;5;124m#\033[0m\033[38;5;124m#\033[0m\033[38;5;124m#\033[0m\033[38;5;88m#\033[0m\033[38;5;88m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m######\033[0m\033[38;5;59m#\033[0m\033[38;5;59m##\033[0m\033[38;5;16m#\033[0m\033[38;5;59m#"+bcolors.ENDC)
        log.info("\033[0m\033[38;5;231m#\033[0m\033[38;5;16m#\033[0m\033[38;5;59m#\033[0m\033[38;5;59m##\033[0m\033[38;5;59m#\033[0m\033[38;5;16m######\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;88m#\033[0m\033[38;5;88m#\033[0m\033[38;5;124m#\033[0m\033[38;5;124m#\033[0m\033[38;5;124m#\033[0m\033[38;5;160m#\033[0m\033[38;5;160m#\033[0m\033[38;5;160m#\033[0m\033[38;5;160m#\033[0m\033[38;5;160m#\033[0m\033[38;5;160m#\033[0m\033[38;5;160m#\033[0m\033[38;5;160m#\033[0m\033[38;5;160m#\033[0m\033[38;5;160m#\033[0m\033[38;5;160m#\033[0m\033[38;5;160m#\033[0m\033[38;5;160m#\033[0m\033[38;5;160m#\033[0m\033[38;5;160m#\033[0m\033[38;5;160m#\033[0m\033[38;5;160m#\033[0m\033[38;5;124m#\033[0m\033[38;5;124m#\033[0m\033[38;5;124m#\033[0m\033[38;5;88m#\033[0m\033[38;5;88m#\033[0m\033[38;5;88m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#####\033[0m\033[38;5;16m#\033[0m\033[38;5;59m#\033[0m\033[38;5;59m#\033[0m\033[38;5;59m#\033[0m\033[38;5;16m#\033[0m\033[38;5;231m#"+bcolors.ENDC)
        log.info("\033[0m\033[38;5;231m#\033[0m\033[38;5;102m#\033[0m\033[38;5;16m#\033[0m\033[38;5;59m#\033[0m\033[38;5;59m#\033[0m\033[38;5;59m#\033[0m\033[38;5;16m######\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;88m#\033[0m\033[38;5;88m#\033[0m\033[38;5;88m#\033[0m\033[38;5;124m#\033[0m\033[38;5;124m#\033[0m\033[38;5;124m#\033[0m\033[38;5;160m#\033[0m\033[38;5;160m#\033[0m\033[38;5;160m#\033[0m\033[38;5;160m#\033[0m\033[38;5;160m#\033[0m\033[38;5;160m#\033[0m\033[38;5;160m##\033[0m\033[38;5;160m#\033[0m\033[38;5;160m#\033[0m\033[38;5;160m#\033[0m\033[38;5;160m#\033[0m\033[38;5;160m#\033[0m\033[38;5;124m#\033[0m\033[38;5;124m#\033[0m\033[38;5;124m#\033[0m\033[38;5;124m#\033[0m\033[38;5;88m#\033[0m\033[38;5;88m#\033[0m\033[38;5;88m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m######\033[0m\033[38;5;59m#\033[0m\033[38;5;59m##\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;231m#"+bcolors.ENDC)
        log.info("\033[0m\033[38;5;231m#\033[0m\033[38;5;231m#\033[0m\033[38;5;16m#\033[0m\033[38;5;23m#\033[0m\033[38;5;59m##\033[0m\033[38;5;59m#\033[0m\033[38;5;16m######\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;88m#\033[0m\033[38;5;88m#\033[0m\033[38;5;88m#\033[0m\033[38;5;88m#\033[0m\033[38;5;124m#\033[0m\033[38;5;124m#\033[0m\033[38;5;124m#\033[0m\033[38;5;124m#\033[0m\033[38;5;124m#\033[0m\033[38;5;160m#\033[0m\033[38;5;160m#\033[0m\033[38;5;160m##\033[0m\033[38;5;160m#\033[0m\033[38;5;160m#\033[0m\033[38;5;124m#\033[0m\033[38;5;124m#\033[0m\033[38;5;124m#\033[0m\033[38;5;124m#\033[0m\033[38;5;124m#\033[0m\033[38;5;88m#\033[0m\033[38;5;88m#\033[0m\033[38;5;88m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m######\033[0m\033[38;5;16m#\033[0m\033[38;5;59m#\033[0m\033[38;5;59m#\033[0m\033[38;5;59m#\033[0m\033[38;5;16m#\033[0m\033[38;5;231m##"+bcolors.ENDC)
        log.info("\033[0m\033[38;5;231m#\033[0m\033[38;5;231m##\033[0m\033[38;5;16m#\033[0m\033[38;5;59m#\033[0m\033[38;5;59m#\033[0m\033[38;5;59m#\033[0m\033[38;5;59m#\033[0m\033[38;5;16m######\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;88m#\033[0m\033[38;5;88m#\033[0m\033[38;5;88m#\033[0m\033[38;5;88m#\033[0m\033[38;5;88m#\033[0m\033[38;5;124m#\033[0m\033[38;5;124m#\033[0m\033[38;5;124m#\033[0m\033[38;5;124m###\033[0m\033[38;5;124m#\033[0m\033[38;5;124m#\033[0m\033[38;5;124m#\033[0m\033[38;5;88m#\033[0m\033[38;5;88m#\033[0m\033[38;5;88m#\033[0m\033[38;5;88m#\033[0m\033[38;5;88m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#######\033[0m\033[38;5;59m#\033[0m\033[38;5;59m#\033[0m\033[38;5;59m#\033[0m\033[38;5;16m#\033[0m\033[38;5;59m#\033[0m\033[38;5;231m##"+bcolors.ENDC)
        log.info("\033[0m\033[38;5;231m#\033[0m\033[38;5;231m##\033[0m\033[38;5;188m#\033[0m\033[38;5;16m#\033[0m\033[38;5;59m#\033[0m\033[38;5;59m#\033[0m\033[38;5;59m#\033[0m\033[38;5;59m#\033[0m\033[38;5;16m#######\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;88m#\033[0m\033[38;5;88m#\033[0m\033[38;5;88m#\033[0m\033[38;5;88m##\033[0m\033[38;5;88m##\033[0m\033[38;5;88m#\033[0m\033[38;5;88m#\033[0m\033[38;5;88m#\033[0m\033[38;5;88m#\033[0m\033[38;5;88m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m######\033[0m\033[38;5;16m#\033[0m\033[38;5;102m#\033[0m\033[38;5;95m#\033[0m\033[38;5;59m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;231m###"+bcolors.ENDC)
        log.info("\033[0m\033[38;5;231m#\033[0m\033[38;5;231m###\033[0m\033[38;5;152m#\033[0m\033[38;5;16m#\033[0m\033[38;5;59m#\033[0m\033[38;5;59m#\033[0m\033[38;5;59m#\033[0m\033[38;5;95m#\033[0m\033[38;5;16m#######\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#######\033[0m\033[38;5;59m#\033[0m\033[38;5;144m#\033[0m\033[38;5;102m#\033[0m\033[38;5;102m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;231m####"+bcolors.ENDC)
        log.info("\033[0m\033[38;5;231m#\033[0m\033[38;5;231m#####\033[0m\033[38;5;16m#\033[0m\033[38;5;59m#\033[0m\033[38;5;102m#\033[0m\033[38;5;102m#\033[0m\033[38;5;102m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m########\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m##\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;52m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m########\033[0m\033[38;5;145m#\033[0m\033[38;5;145m#\033[0m\033[38;5;145m#\033[0m\033[38;5;145m#\033[0m\033[38;5;23m#\033[0m\033[38;5;59m#\033[0m\033[38;5;231m#####"+bcolors.ENDC)
        log.info("\033[0m\033[38;5;231m#\033[0m\033[38;5;231m######\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;102m#\033[0m\033[38;5;102m#\033[0m\033[38;5;102m#\033[0m\033[38;5;102m#\033[0m\033[38;5;16m##########\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m###\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#########\033[0m\033[38;5;102m#\033[0m\033[38;5;145m#\033[0m\033[38;5;145m#\033[0m\033[38;5;187m#\033[0m\033[38;5;59m#\033[0m\033[38;5;59m#\033[0m\033[38;5;231m#######"+bcolors.ENDC)
        log.info("\033[0m\033[38;5;231m#\033[0m\033[38;5;231m########\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;102m#\033[0m\033[38;5;102m#\033[0m\033[38;5;102m#\033[0m\033[38;5;102m#\033[0m\033[38;5;16m#############\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m############\033[0m\033[38;5;102m#\033[0m\033[38;5;102m#\033[0m\033[38;5;102m#\033[0m\033[38;5;144m#\033[0m\033[38;5;102m#\033[0m\033[38;5;59m#\033[0m\033[38;5;102m#\033[0m\033[38;5;231m########"+bcolors.ENDC)
        log.info("\033[0m\033[38;5;231m#\033[0m\033[38;5;231m#########\033[0m\033[38;5;231m#\033[0m\033[38;5;23m#\033[0m\033[38;5;23m#\033[0m\033[38;5;102m####\033[0m\033[38;5;59m#\033[0m\033[38;5;16m###############################\033[0m\033[38;5;16m#\033[0m\033[38;5;102m####\033[0m\033[38;5;59m#\033[0m\033[38;5;59m#\033[0m\033[38;5;59m#\033[0m\033[38;5;231m##########"+bcolors.ENDC)
        log.info("\033[0m\033[38;5;231m#\033[0m\033[38;5;231m############\033[0m\033[38;5;23m#\033[0m\033[38;5;23m#\033[0m\033[38;5;59m#\033[0m\033[38;5;102m#####\033[0m\033[38;5;16m#\033[0m\033[38;5;16m########################\033[0m\033[38;5;102m#\033[0m\033[38;5;102m#####\033[0m\033[38;5;59m##\033[0m\033[38;5;188m#\033[0m\033[38;5;231m############"+bcolors.ENDC)
        log.info("\033[0m\033[38;5;231m#\033[0m\033[38;5;231m##############\033[0m\033[38;5;231m#\033[0m\033[38;5;59m#\033[0m\033[38;5;59m#\033[0m\033[38;5;59m#\033[0m\033[38;5;102m#######\033[0m\033[38;5;59m#\033[0m\033[38;5;16m#\033[0m\033[38;5;16m###########\033[0m\033[38;5;16m#\033[0m\033[38;5;59m#\033[0m\033[38;5;102m#\033[0m\033[38;5;102m#\033[0m\033[38;5;102m#####\033[0m\033[38;5;95m#\033[0m\033[38;5;59m#\033[0m\033[38;5;59m#\033[0m\033[38;5;109m#\033[0m\033[38;5;231m###############"+bcolors.ENDC)
        log.info("\033[0m\033[38;5;231m#\033[0m\033[38;5;231m##################\033[0m\033[38;5;59m#\033[0m\033[38;5;59m#\033[0m\033[38;5;59m#\033[0m\033[38;5;59m#\033[0m\033[38;5;95m#\033[0m\033[38;5;102m##\033[0m\033[38;5;102m#\033[0m\033[38;5;102m#\033[0m\033[38;5;145m#\033[0m\033[38;5;145m#\033[0m\033[38;5;145m#\033[0m\033[38;5;145m#\033[0m\033[38;5;181m#\033[0m\033[38;5;188m#\033[0m\033[38;5;188m#\033[0m\033[38;5;188m#\033[0m\033[38;5;181m#\033[0m\033[38;5;145m#\033[0m\033[38;5;145m#\033[0m\033[38;5;145m#\033[0m\033[38;5;145m#\033[0m\033[38;5;102m#\033[0m\033[38;5;102m#\033[0m\033[38;5;102m#\033[0m\033[38;5;59m#\033[0m\033[38;5;59m#\033[0m\033[38;5;59m#\033[0m\033[38;5;59m#\033[0m\033[38;5;231m###################"+bcolors.ENDC)
        log.info("\033[0m\033[38;5;231m#\033[0m\033[38;5;231m#######################\033[0m\033[38;5;145m#\033[0m\033[38;5;59m#\033[0m\033[38;5;59m#\033[0m\033[38;5;59m#\033[0m\033[38;5;59m#\033[0m\033[38;5;59m#\033[0m\033[38;5;59m#\033[0m\033[38;5;59m#\033[0m\033[38;5;59m#\033[0m\033[38;5;59m#\033[0m\033[38;5;59m#\033[0m\033[38;5;59m#\033[0m\033[38;5;59m#\033[0m\033[38;5;59m#\033[0m\033[38;5;59m#\033[0m\033[38;5;59m#\033[0m\033[38;5;59m#\033[0m\033[38;5;59m#\033[0m\033[38;5;102m#\033[0m\033[38;5;231m########################"+bcolors.ENDC)

## Function to parse the command line options and do some initializing
#
# Defines the user command line options and parses them, also the default
# values are defined here. The logging object is initialized and the
# configuration file is read.
# @param[out] args Command line parameters, should be empty at the moment
# @param[out] options Command line options object
# @param[out] cfg_file Configuration file object
def opt_parser():
    date_time = datetime.now()
    usage = '%prog [options] CONFIG_FILE'
    parser = optparse.OptionParser( usage = usage )
    parser.add_option( '-u', '--user', default = os.getenv( 'LOGNAME' ),
                            help = 'which user on dcache [default = %s]'%(os.getenv( 'LOGNAME' )))
    parser.add_option( '-o', '--Output', default = "./output", metavar = 'DIRECTORY',
                            help = 'Define the output directory. [default = %default]')
    parser.add_option( '--debug', metavar = 'LEVEL', default = 'INFO',
                       help= 'Set the debug level. Allowed values: ERROR, WARNING, INFO, DEBUG. [default = %default]' )

    parser.add_option( '--executable', metavar = 'EXECUTABLE' , default = '$MUSIC_BASE/Progs/music',
                            help = 'Name of the executable. [default = %default]')
    parser.add_option( '--exeoption', metavar = 'EXEOPTION' , default = '',
                            help = 'Options that should be passed to the executable. [default = %default]' )
    parser.add_option( '--execonfig', metavar = 'EXECONFIG' , default = '$MUSIC_BASE/Validator/MC.cfg',
                            help = 'Configuration file that should be passed to the executable. [default = %default]')
    parser.add_option( '--cfgfile', metavar = 'CFGFILE' , default = './config.cfg',
                            help = 'Name of the configuration file for the used files. [default = %default]' )
    parser.add_option( '--compdir', metavar = 'COMPDIR' , default = './old',
                            help = 'Directory of the files that should be used for the comparison. [default = %default]')
    parser.add_option( '--memtolerance', metavar = 'MEMTOLERANCE' , default = 10.,
                            help = 'Accepted tolerance of memory usage in percent. [default = %default]' )
    parser.add_option( '--timetolerance', metavar = 'TIMETOLERANCE' , default = 100.,
                            help = 'Accepted tolerance of run time in percent. [default = %default]' )
    parser.add_option( '--allplots', metavar = 'ALLPLOTS' , default = False,
                            help = 'Bool if all plots should be made or only plots with Chi2 != 0. [default = %default]' )
    parser.add_option( '--noasciiart', metavar = 'NOASCIIART' , default = False,
                            help = 'Bool if to skip the welcoming ASCII art ( keep in mind that there is no real reson to do so). [default = %default]' )
    parser.add_option( '--nocleanup', metavar = 'NOCLEANUP' , default = False,
                            help = 'Bool if you want to skip the final clean up step. [default = %default]' )
    parser.add_option( '--nocompilation', metavar = 'NOCOMPILATION' , default = False,
                            help = 'Bool if you want to skip the compilation step. [default = %default]' )
    parser.add_option( '--cleancompilation', metavar = 'CLEANCOMPILATION' , default = False,
                            help = 'Bool if you want to do a cleaned compilation. [default = %default]' )
    parser.add_option( '--nogit', metavar = 'NOGIT' , default = False,
                            help = 'Bool if you want to do the repository stuff (commiting, merging and pushing). [default = %default]' )

    parser.add_option( '--template', metavar = 'TEMPLATE' , default = '$CMSSW_BASE/src/PxlSkimmer/Skimming/test/validation/mc_SP14_miniAOD_cfg_template.py',
                            help = 'Path of the skimmer config template. [default = %default]')
    parser.add_option( '--globaltag', metavar = 'GLOBALTAG' , default = 'MCRUN2_74_V9',
                            help = 'Global tag used by the skimmer. [default = %default]')
    parser.add_option( '--maxevents', metavar = 'MAXEVENTS' , default = -1,
                            help = 'Maximum number of events to be skimmed per sample. [default = %default]')
    parser.add_option( '--valtemplate', metavar = 'VALTEMPLATE' , default = '$CMSSW_BASE/src/PxlSkimmer/Skimming/test/validation/config_template.cfg',
                            help = 'Path of the PxlAnalyzer validator config template. [default = %default]')

    ( options, args ) = parser.parse_args()
    if len( args ) != 0:
        parser.error( 'Exactly zero CONFIG_FILE required!' )

    format = '%(levelname)s from %(name)s at %(asctime)s: %(message)s'
    date = '%F %H:%M:%S'
    logging.basicConfig( level = logging._levelNames[ options.debug ], format = format, datefmt = date )

    try: 
        cfg_file= ConfigObj(options.cfgfile)
    except IOError as e:
        log.error("There was a error reading the File "+ options.cfgfile)
        log.error(e)
        exit()

    return args,options,cfg_file

## Function to create the new reference distributions and track them
#
# After the validation is successfull this function creates the new
# reference distributions and files for the next validation cycle.
# @param[in] options Command line options object
def make_new_reference(options):
    control_output("making new reference plots")
    p = subprocess.Popen(['cp','%s/log_skimmer.root'%(options.Output),'%s/log_skimmer.root'%(options.compdir)],stdout=subprocess.PIPE,stderr=subprocess.PIPE)
    output = p.communicate()[0]
    log.debug(output)
    log.info(" ")
    log.info(bcolors.OKGREEN+" Everything done"+bcolors.ENDC)
    log.info(" ")

## Function to check if the user may push into the repository
#
# @param[out] bool Boolean if the user is authorized or not, at the moment always true
def check_authorization():
    control_output("Now checking the user authorization")
    return True

## Function to add, commit and push everything into the repository
#
# Add the new reference distributions to the repository, commit
# them and merge everything into the dev and master branches. At
# the end push everything to the remote repository.
# @todo include functionallity
# @param[in] options Command line options object
# @param[in] cfg_file Configuration file object
def make_commits(options,cfg_file):
    if not options.nogit:
        control_output("Now making the final commits")
        var = 'CMSSW_BASE'
        pwd_ = os.getcwd()
        music_path = os.getenv( var )
        os.chdir(music_path + '/src/PxlSkimmer/Skimming')
        # First get a repo status for debugging cases
        p = subprocess.Popen(['git','status'],stdout=subprocess.PIPE,stderr=subprocess.PIPE)
        output = p.communicate()[0]
        log.debug(output)
        sample_list = []
        for item in cfg_file["samples"]:
            if cfg_file["samples"][item]["label"] not in sample_list:
                sample_list.append(cfg_file["samples"][item]["label"])
        # Add the new refernce files to the repo
        for item in sample_list:
            p = subprocess.Popen(['git','add','test/validation/old/%s.root'%(item)],stdout=subprocess.PIPE,stderr=subprocess.PIPE)
            output = p.communicate()[0]
            log.debug(output)
        p = subprocess.Popen(['git','add','test/validation/old/log.root'],stdout=subprocess.PIPE,stderr=subprocess.PIPE)
        output = p.communicate()[0]
        log.debug(output)
        p = subprocess.Popen(['git','add','test/validation/old/log_skimmer.root'],stdout=subprocess.PIPE,stderr=subprocess.PIPE)
        output = p.communicate()[0]
        log.debug(output)
        p = subprocess.Popen(['git','commit','-m','Included the results of the validation process'],stdout=subprocess.PIPE,stderr=subprocess.PIPE)
        output = p.communicate()[0]
        log.debug(output)
        c_branch = get_current_branch()
        # Merge with the dev branch
        p = subprocess.Popen(['git','checkout','dev'],stdout=subprocess.PIPE,stderr=subprocess.PIPE)
        output = p.communicate()[0]
        log.debug(output)
        p = subprocess.Popen(['git','merge','--no-ff',c_branch],stdout=subprocess.PIPE,stderr=subprocess.PIPE)
        output = p.communicate()[0]
        log.debug(output)
        p = subprocess.Popen(['git','push'],stdout=subprocess.PIPE,stderr=subprocess.PIPE)
        output = p.communicate()[0]
        log.debug(output)
        p = subprocess.Popen(['git','checkout',c_branch],stdout=subprocess.PIPE,stderr=subprocess.PIPE)
        output = p.communicate()[0]
        log.debug(output)
        # Merge with the master branch
        p = subprocess.Popen(['git','checkout','master'],stdout=subprocess.PIPE,stderr=subprocess.PIPE)
        output = p.communicate()[0]
        log.debug(output)
        p = subprocess.Popen(['git','merge','--no-ff',c_branch],stdout=subprocess.PIPE,stderr=subprocess.PIPE)
        output = p.communicate()[0]
        log.debug(output)
        p = subprocess.Popen(['git','push'],stdout=subprocess.PIPE,stderr=subprocess.PIPE)
        output = p.communicate()[0]
        log.debug(output)
        p = subprocess.Popen(['git','checkout',c_branch],stdout=subprocess.PIPE,stderr=subprocess.PIPE)
        output = p.communicate()[0]
        log.debug(output)
        os.chdir(pwd_)

## Function to get the current branch of the repository
#
# @param[out] c_branch Current branch
def get_current_branch():
    p = subprocess.Popen(['git','branch'],stdout=subprocess.PIPE,stderr=subprocess.PIPE)
    output = p.communicate()[0]
    for line in output.split('\n'):
        if '*' in line:
            log.debug("Current branch: " + line.split()[1])
            return line.split()[1]

## Function to collect the user desicion on the validation results
#
# If there are changes in any distribution the user has to decide
# if the validation is successfull, therefore this functions presents
# to the user the plots he needs to decide if the validation is
# successfull and collects this user decision. To give a positive user
# decision, the user has to type in the control string printed in the
# pdf file after the summary table.
# @param[in] ctr_string Random control string
# @param[out] bool Boolean if the decision is positive or not
def final_user_decision(ctr_string):
    control_output("User decision on the validation")
    log.info(" Now openeing the summary file with an overview table")
    log.info(" and the deviating plots. Please have a carefull look")
    log.info(" at all distributions. If the deviations are expected")
    log.info(" you can just enter the control sequence which is    ")
    log.info(" in the pdf file after the summary table. Every other")
    log.info(" will be interpreted as if the validation has failed.")
    log.info(" ")

    p = subprocess.Popen(["evince","test1.pdf"],stdout=subprocess.PIPE,stderr=subprocess.PIPE)
    output = p.communicate()[0]
    log.debug(output)

    while(True):
        log.info(" Please enter the control sequence (6 Characters):")
        user_ctr = raw_input()
        log.info(" ")
        if user_ctr == ctr_string:
            log.info(bcolors.OKGREEN + " The input was successfull." + bcolors.ENDC)
            log.info(" ")
            log.info(" The validation is therefore: " + bcolors.OKGREEN + " successfull." + bcolors.ENDC)
            log.info(" ")
            time.sleep(5)
            return True
        else:
            log.info(bcolors.FAIL + " The input was not correct." + bcolors.ENDC)
            log.info(" ")
            log.info("  By the way, do you mind if I ask you a personal question? ")
            log.info(" ")
            log.info(" Do you want to declare the validation failed? (yes/no)")
            dummy_string = raw_input()
            if dummy_string == "yes" or dummy_string == "y" or dummy_string == "Y" or dummy_string == "Yes":
                log.info(" ")
                log.info("  This mission is too important for me to allow you to jeopardize it. ")
                log.info(" ")
                log.info(" The validation is therefore: " + bcolors.FAIL + " failed." + bcolors.ENDC)
                log.info(" ")
                time.sleep(5)
                return False

## Function to print a control output
#
# Function to either print a general status output (with one argument
# of a string which should be printed) or a boolean result to a text
# (with two arguments, the variable name and the boolean)
# @param[in] *args Array of arguments
def control_output(*args):
    if len(args) == 2:
        text = "\t"
        text += args[0]
        text += ":  "
        if args[1] == True:
            text += bcolors.OKGREEN
            text += "Okay"
            text += bcolors.ENDC
        else:
            text += bcolors.FAIL
            text += "Problem"
            text += bcolors.ENDC
        log.info(text)
    elif len(args) == 1:
        log.info(" ")
        log.info(25*"-")
        log.info("\t"+args[0])
        log.info(25*"-")
        log.info(" ")

## Function to draw the memory usage histogram
#
# This function plots the memory usage histograms from an
# array of histograms, it resizes the canvas to show every
# distribution, caldulates and plots the lines for the mean
# run time and the mean memory usage and also prints the
# values for them into the canvas.
# @param[in] histos Array of all memory usage histograms for this plot
# @param[in] runtimes Array of runtimes for each histogram
# @param[in] p_color Color that the histograms should get (matplotlib)
# @param[in] ax Plot axis object (matplotlib)
# @param[out] ax Modified plot axis object (matplotlib)
# @param[out] m_mem Mean memory usage
# @param[out] m_run Mean run time
def draw_mem_histos(histos,runtimes,p_color,ax):
    old_rss_line = ro.TLine(np.mean(runtimes),0,np.mean(runtimes),1)
    dummy_x_vals = []
    dummy_y_vals = []
    for item in histos:
        temp_x_vals = []
        temp_y_vals = []
        for i in range(0,item.GetN()-1):
            dummy_value = ro.Double(0)
            dummy_value2 = ro.Double(0)
            item.GetPoint(i,dummy_value,dummy_value2)
            dummy_x_vals.append(dummy_value)
            dummy_y_vals.append(dummy_value2)
            temp_x_vals.append(dummy_value)
            temp_y_vals.append(dummy_value2)
        plt.plot(temp_x_vals, temp_y_vals,color=p_color,marker="o",linestyle="-",linewidth=1)
    plt.xlim( 0, np.max(dummy_x_vals)*1.05 )
    plt.ylim( np.min(dummy_y_vals)*0.95, np.max(dummy_y_vals)*1.05 )
    mean_graph = ro.TGraph(len(dummy_x_vals),array("d",dummy_x_vals),array("d",dummy_y_vals))
    res_fit = ro.TF1(histos[0].GetName()+"_f1","pol1",np.min(dummy_x_vals),np.max(dummy_x_vals))
    mean_graph.Fit(res_fit,"Q+","",np.min(dummy_x_vals)+4,np.max(dummy_x_vals)-4)
    l = plt.axvline(x=np.mean(runtimes),color='tomato')
    text = ax.text(np.mean(runtimes)+0.5, np.min(dummy_y_vals), 'mean run time: %.1f s'%(np.mean(runtimes)), color='tomato',
                rotation=90, va='bottom', ha='left')
    X = np.linspace(np.min(dummy_x_vals),np.max(dummy_x_vals), 256, endpoint=True)
    Y = res_fit.GetParameter(0) + X * res_fit.GetParameter(1)
    plt.plot(X,Y,color='limegreen',linewidth=2)
    text = ax.text((np.max(dummy_x_vals)*1.05)/2., np.min(dummy_y_vals), 'memory usage: %.1f MB'%(res_fit.Eval(np.mean(runtimes))), color='limegreen',
                va='bottom', ha='center')
    m_mem = res_fit.Eval(np.mean(runtimes))
    m_run = np.mean(runtimes)
    return ax,m_mem,m_run

## Function to set the drawing options of matplotlib for one plot
#
# Function to set line width, colors, styles etc. for one plot,
# and to also set the plot title and the axis lables.
# @param[in] ax Plot axis object (matplotlib)
# @param[in] x_title Title of the x-axis
# @param[in] y_title Title of the y-axis
# @param[in] title Title of this plot
def make_axis(ax,x_title,y_title,title):
    ax.spines['top'].set_visible(False)
    ax.spines['right'].set_visible(False)
    ax.spines['bottom'].set_linewidth(0.5)
    ax.spines['left'].set_linewidth(0.5)
    ax.spines['bottom'].set_color('black')
    ax.spines['left'].set_color('black')

    ax.title.set_color('black')
    ax.yaxis.label.set_color('black')
    ax.xaxis.label.set_color('black')
    ax.tick_params(axis='x', colors='black')
    ax.tick_params(axis='y', colors='black')

    ax.tick_params(axis='both', direction='in')
    ax.get_xaxis().tick_bottom()
    ax.get_yaxis().tick_left()

    ax.set_xlabel(x_title)
    ax.set_ylabel(y_title)
    ax.set_title(title)

## Function to make the performance comparison
#
# Read in the performance measurments from the analysis run
# and compare them to the reference values. If the difference
# in performance exceeds prefdefined limits (can be modified
# with command line arguments) the comparison fails, otherwise
# it is successfull.
# @param[in] options Command line options object
# @param[out] bool Boolean if the performance comparision is successfull
def comparison_performance(options):
    log.debug("comparing the programs performance")

    log.debug("reading the comparison histos")
    comp_log_file = TFile("comparison_dir/old/log_skimmer.root","READ")

    old_rss_histos = []
    old_rss_time = []
    old_vir_histos = []
    old_vir_time = []
    for key in comp_log_file.GetListOfKeys():
        dummy_name = key.GetName()
        if "_rss" in dummy_name:
            dummy_hist = comp_log_file.Get(dummy_name)
            dummy_hist.SetName(dummy_name)
            dummy_value = ro.Double(0)
            dummy_value2 = ro.Double(0)
            dummy_hist.GetPoint(dummy_hist.GetN()-1,dummy_value,dummy_value2)
            old_rss_time.append(dummy_value)
            old_rss_histos.append(dummy_hist)
        if "_vir" in dummy_name:
            dummy_hist = comp_log_file.Get(dummy_name)
            dummy_hist.SetName(dummy_name)
            dummy_value = ro.Double(0)
            dummy_value2 = ro.Double(0)
            dummy_hist.GetPoint(dummy_hist.GetN()-1,dummy_value,dummy_value2)
            old_vir_time.append(dummy_value)
            old_vir_histos.append(dummy_hist)
    comp_log_file.Close()

    log.debug("reading the new histos")
    new__log_file = TFile("comparison_dir/new/log_skimmer.root","READ")

    new_rss_histos = []
    new_rss_time = []
    new_vir_histos = []
    new_vir_time = []
    for key in new__log_file.GetListOfKeys():
        dummy_name = key.GetName()
        if "_rss" in dummy_name:
            dummy_hist = new__log_file.Get(dummy_name)
            dummy_hist.SetName(dummy_name)
            dummy_value = ro.Double(0)
            dummy_value2 = ro.Double(0)
            dummy_hist.GetPoint(dummy_hist.GetN()-1,dummy_value,dummy_value2)
            new_rss_time.append(dummy_value)
            new_rss_histos.append(dummy_hist)
        if "_vir" in dummy_name:
            dummy_hist = new__log_file.Get(dummy_name)
            dummy_hist.SetName(dummy_name)
            dummy_value = ro.Double(0)
            dummy_value2 = ro.Double(0)
            dummy_hist.GetPoint(dummy_hist.GetN()-1,dummy_value,dummy_value2)
            new_vir_time.append(dummy_value)
            new_vir_histos.append(dummy_hist)
    new__log_file.Close()

    fig = plt.figure(figsize=(10, 10), dpi=80, facecolor='white')
 
    ax = fig.add_subplot(2,2,1,axisbg='white')
    make_axis(ax,'run time (s)','memory (MB)','old')
    ax,old_rss_usage,old_rss_time = draw_mem_histos(old_rss_histos,old_rss_time,"y",ax)

    ax = fig.add_subplot(2,2,2,axisbg='white')
    make_axis(ax,'run time (s)','virtual memory (MB)','old')
    ax,old_vir_usage,old_vir_time = draw_mem_histos(old_vir_histos,old_vir_time,"royalblue",ax)

    ax = fig.add_subplot(2,2,3,axisbg='white')
    make_axis(ax,'run time (s)','memory (MB)','new')
    ax,new_rss_usage,new_rss_time = draw_mem_histos(new_rss_histos,new_rss_time,"orange",ax)

    ax = fig.add_subplot(2,2,4,axisbg='white')
    make_axis(ax,'run time (s)','virtual memory (MB)','new')
    ax,new_vir_usage,new_vir_time = draw_mem_histos(new_vir_histos,new_vir_time,"cornflowerblue",ax)

    diff_rss = (old_rss_usage - new_rss_usage)/ old_rss_usage * 100
    diff_time = (old_rss_time - new_rss_time)/ old_rss_time * 100
    diff_vir = (old_vir_usage - new_vir_usage)/ old_vir_usage * 100

    if diff_rss > 0.:
        text = fig.text(0.25 , 0.01, 'memory difference: %+.1f %% \n time difference: %+.1f %%'%(diff_rss,diff_time), color='chartreuse',
                va='bottom', ha='center', fontsize=20)
        text.set_zorder(20)
    else:
        text = fig.text(0.25, 0.01, 'memory difference: %+.1f %% \n time difference: %+.1f %%'%(diff_rss,diff_time), color='red',
                va='bottom', ha='center', fontsize=20)
        text.set_zorder(20)

    if diff_vir > 0.:
        text = fig.text(0.75, 0.01, 'memory difference: %+.1f %% \n time difference: %+.1f %%'%(diff_vir,diff_time), color='chartreuse',
                va='bottom', ha='center', fontsize=20)
        text.set_zorder(20)
    else:
        text = fig.text(0.75, 0.01, 'memory difference: %+.1f %% \n time difference: %+.1f %%'%(diff_vir,diff_time), color='red',
                va='bottom', ha='center', fontsize=20)
        text.set_zorder(20)

    plt.show()
    plt.savefig("comparison_dir/mem_comparison_skimmer.pdf",facecolor='white',edgecolor='white')

    if diff_time < -1 * options.timetolerance:
        compare_results.update({"performance":[False,diff_time,diff_rss]})
        return False
    elif diff_rss < -1 * options.memtolerance:
        compare_results.update({"performance":[False,diff_time,diff_rss]})
        return False
    else:
        compare_results.update({"performance":[True,diff_time,diff_rss]})
        return True

## Function to do the comparison between reference and new run
#
# Function to call the performance comparison, and then loop over
# all histograms as defined by the config file and call the Chi2
# comparison. If this comparison fails number of events comaprison
# is called. All this results are saved and printed to the terminal.
# @param[in] options Command line options object
# @param[in] cfg_file Configuration file object
def do_comparison(options,cfg_file):
    control_output("doing the comparison")

    c_performance = comparison_performance(options)
    control_output("performance")
    control_output("performance",c_performance)

## Function to collect the reference output
#
# Collect the files from the reference directory (can be modified
# by a command line option) and copy them into the comaprison_dir.
# @param[in] options Command line options object
def get_reference_output(options):
    control_output("getting the reference output")

    if not os.path.exists("comparison_dir/old"):
        os.mkdir("comparison_dir/old")

    p = subprocess.Popen("cp %s/*.root comparison_dir/old/"%(options.compdir),shell=True,stdout=subprocess.PIPE)
    output = p.communicate()[0]

## Function to collect the new analysis output
#
# Collect the files from the output directory (can be modified
# by a command line option) and copy them into the comaprison_dir.
# @param[in] options Command line options object
def get_analysis_output(options):
    control_output("getting the analysis output")

    if not os.path.exists("comparison_dir"):
        os.mkdir("comparison_dir")
    if not os.path.exists("comparison_dir/new"):
        os.mkdir("comparison_dir/new")

    p = subprocess.Popen("cp %s/*/*.pxlio comparison_dir/new/"%(options.Output),shell=True,stdout=subprocess.PIPE)
    output = p.communicate()[0]

    p = subprocess.Popen("cp %s/log_skimmer.root comparison_dir/new/"%(options.Output),shell=True,stdout=subprocess.PIPE)
    output = p.communicate()[0]

## Function to run the skimmer over all samples
#
# Function to run the skimmer parallelized over all samples as
# defined in the config file. The resulting output files are then
# collected in the output directory.
# After that everything is cleaned up.
# @param[in] options Command line options object
# @param[in] cfg_file Configuration file object
def run_analysis(options,cfg_file):
    control_output("running the skimmer")

    if not os.path.exists('log/'):
        os.mkdir('log')

    item_list = []
    for item in cfg_file["samples"]:
        item_list.append([options.template,item,options.globaltag,options.maxevents])
    pool = multiprocessing.Pool()
    pool.map_async(run_analysis_task, item_list)
    while True:
        time.sleep(1)
        if not pool._cache: break
    pool.close()
    pool.join()

    # for item in item_list:
        # run_analysis_task(item)

    if not os.path.exists(options.Output):
        os.mkdir(options.Output)

    p = subprocess.Popen("hadd -f9 %s/%s *_mem_log_skimmer.root"%(options.Output,"log_skimmer.root"),shell=True,stdout=subprocess.PIPE)
    output = p.communicate()[0]

    p = subprocess.Popen("rm *_mem_log_skimmer.root",shell=True,stdout=subprocess.PIPE)
    output = p.communicate()[0]

    sample_list = []
    for item in cfg_file["samples"]:
        if cfg_file["samples"][item]["label"] not in sample_list:
            sample_list.append(cfg_file["samples"][item]["label"])

    for item in sample_list:
        if not os.path.exists(options.Output + '/' + item):
            os.mkdir(options.Output + '/' + item)
        for item2 in cfg_file["samples"]:
            if cfg_file["samples"][item2]["label"] == item:
                shutil.move(item2.replace('.root','.pxlio').replace('/',''), options.Output + '/' + item + '/' + item2.replace('.root','.pxlio').replace('/',''))

## Function to create a skimmer config file
#
# Depending on the parameters a skimmer config file is created from
# a gicen template file.
# @param[in] infile Name of the input file
# @param[in] globaltag Name of the global tag
# @param[in] template Name of the template file
# @param[in] maxevents Number of maximum of events to be skimmed
# @param[out] cfg_name Name of the created config file
def create_cfg_for_skimmer(infile, globaltag, template, maxevents):
    d = dict(
        OUTNAME='%s'%(infile.replace('.root','').replace('/','')),
        GLOBALTAG='%s'%(globaltag),
        INFILE='%s'%(infile),
        MAXEVENTS='%i'%int(maxevents),
    )

    file=open(os.path.expandvars(template),"r")
    text=file.read()
    file.close()
    newText=Template(text).safe_substitute(d)
    cfg_name = "log/mc_SP14_miniAOD_%s_cfg.py"%(infile.replace('.root','').replace('/',''))
    fileNew=open(cfg_name,"w+")
    fileNew.write(newText)
    fileNew.close()

    return cfg_name

## Function that runs one skimmer task and measures its performance
#
# This function is called in parallel to run one skimming job on
# one file. It also measures its performance (memory usage and run
# time) and saves them into a root file.
# defined in the config file. The resulting output files are then
# merged for each sample and collected in the output directory.
# After that everything is cleaned up.
# @param[in] item Array of options given to the analysis task
def run_analysis_task(item):
    try:
        usage_start = resource.getrusage(resource.RUSAGE_CHILDREN)
        rssList = []
        virtual = []
        other = []

        f_out = open("log/"+item[1][:-5].replace('/','')+".out","w")
        f_err = open("log/"+item[1][:-5].replace('/','')+".err","w")

        cfg_name = create_cfg_for_skimmer(item[1], item[2], item[0], item[3])
        log.debug('Now running: cmsRun %s'%cfg_name)
        p = subprocess.Popen("cmsRun %s"%cfg_name, shell=True,stdout=f_out,stderr=f_err)
        pid = p.pid
        while True:
            if p.poll() != None:
                break
            p2 = subprocess.Popen("top -b -n 1 -p %s | grep %s"%(pid,pid),shell=True,stdout=subprocess.PIPE)
            output = p2.communicate()[0]
            if output != '':
                if "m" in output.split()[5]:
                    rssList.append(output.split()[5].split("m")[0])
                elif "k" in output.split()[5]:
                    rssList.append(float(output.split()[5].split("k")[0])/1000)
                elif "g" in output.split()[5]:
                    rssList.append(float(output.split()[5].split("g")[0])*1000)
                else:
                    rssList.append(output.split()[5]) 
                if "m" in output.split()[4]:
                    virtual.append(output.split()[4].split("m")[0])
                elif "k" in output.split()[4]:
                    virtual.append(float(output.split()[4].split("k")[0])/1000)
                elif "g" in output.split()[4]:
                    virtual.append(float(output.split()[4].split("g")[0])*1000)
                else:
                    virtual.append(output.split()[4])
            time.sleep(1)

        output = p.communicate()[0]
        f_out.close()
        f_err.close()
        exitCode = p.returncode
        if exitCode != 0:
            log.error("exitCode: " + str(exitCode))
            try:
                log.error(output)
                log.error(p.communicate()[1])
            except(TypeError):
                print(output)
                print(p.communicate()[1])
        else:
            log.debug("exitCode: " + str(exitCode))
            log.debug(output)
        usage_end = resource.getrusage(resource.RUSAGE_CHILDREN)
        cpu_time = usage_end.ru_utime - usage_start.ru_utime

        skipper = []
        counter = 0
        for item12 in rssList:
            try:
                bla = float(item12)
            except(ValueError):
                skipper.append(counter)
            counter += 1
        counter = 0
        for item12 in virtual:
            try:
                bla = float(item12)
            except(ValueError):
                skipper.append(counter)
            counter += 1

        skipper = list(set(skipper))

        for item12 in skipper:
            rssList.pop(item12)
            virtual.pop(item12)

        rssArray = np.array(rssList,"d")
        virtualArray = np.array(virtual,"d")
        xAxis = []
        for i in range(0,len(rssArray)):
            xAxis.append(i*(cpu_time/len(rssArray)))

        xAxisArray = np.array(xAxis,"d")
        graphRSS = TGraph(len(rssArray),xAxisArray,rssArray)
        graphVirtual = TGraph(len(virtualArray),xAxisArray,virtualArray)

        graphRSS.SetMarkerColor(kBlue)
        graphRSS.SetMarkerStyle(21)

        dummy_file = TFile(item[1][:-5].replace('/','')+"_mem_log_skimmer.root","RECREATE")

        graphRSS.Write(item[1][:-5].replace('/','')+"_rss")
        graphVirtual.Write(item[1][:-5].replace('/','')+"_vir")

        dummy_file.Close()
    except:
        print("Unexpected error in the running the analysis on %s:"%(item[1][:]))
        print(sys.exc_info()[0])
        print(sys.exc_info()[1])
        print(sys.exc_info()[2])

## Function to create a arbritary control string
#
# @param[in] size Length of the random string [default = 6]
# @param[in] chars List of characters from which the random string should be created [default = all uppercase ASCII characters]
# @param[out] rand Random string with the given parameters
def id_generator(size=6, chars=string.ascii_uppercase + string.digits):
    return ''.join(random.choice(chars) for _ in range(size))

## Function to create the tex code for the summary file
#
# This function creates the different pages of the summary file,
# Titlepage, TOC, the summary table, Chi2 plot and the plot
# collection. For this it also calls the function to produce the
# comparison plots.
# @param[in] content Content of the .tex summary file
# @param[in] sample_list List of samples that should be studied
# @param[in] cfg_file Configuration file object
# @param[in] options Command line options object
# @param[out] content Modified content of the .tex summary file
# @param[out] ctr_string Random control string
def create_tex_summary(content,cfg_file,options):
    log.debug("Now creating the title page for the .tex document")
## Create the Title page
    content += r'''
\begin{center}
{\huge
VAL9000 \\
This is the summary of the validation from \today
}
\includegraphics[width=15cm]{lib/2000px-HAL9000.png}
\end{center}
\pagebreak
\tableofcontents
\pagebreak
'''

    log.debug("Creating the summary table")
## Create the summary table
    content += r'''
\section{Summary table}
\subsection{Performance}
\begin{itemize}
'''
    if compare_results["performance"][0]:
        content += r'''
\item Performance: {\color{darkgreen}True}
\end{itemize}
'''
    else:
        content += r'''
\item Performance: {\color{red}False  } Run time difference (percent): %.2f    Memory usage difference (percent): %.2f"
\end{itemize}
'''%(compare_results["performance"][1],compare_results["performance"][2])
    ctr_string = id_generator()
    content += r'''
\pagebreak
\begin{center}
\huge
%s
\end{center}
'''%(ctr_string)

    log.debug("done")
## End of summary table
    content += r'''
\pagebreak
'''

## Include the performance Plots
    content += r'''
\section{Performance}
\includegraphics[width=15cm]{%s}
'''%("comparison!dir/mem!comparison!skimmer.pdf")

    return content,ctr_string

## Function to create and compile the summary file
#
# Function that created the .tex summary file, compiles it
# and cleans everything up in the end.
# @param[in] sample_list List of samples that should be studied
# @param[in] cfg_file Configuration file object
# @param[in] options Command line options object
# @param[out] ctr_string Random control string
def make_output_file(cfg_file,options):
    control_output("Creating the summary file")

    content = r'''\documentclass[12pt]{article}
\usepackage{amsmath}    % need for subequations
\usepackage{graphicx}   % need for figures
\usepackage{verbatim}   % useful for program listings
\usepackage{color}      % use if color is used in text
\usepackage{subfigure}  % use for side-by-side figures
\usepackage{hyperref}   % use for hypertext links, including those to external documents and URLs
\usepackage{float}
\usepackage{morefloats}
\definecolor{darkgreen}{rgb}{0,0.5,0.1}

% above is the preamble

\begin{document}'''

    content,ctr_string = create_tex_summary(content,cfg_file,options)

    content += r'''
\end{document}
'''
    content = content.replace("_","\_")
    content = content.replace("!","_")
    tex_file = open("test1.tex","w")
    tex_file.write(content)
    tex_file.close()

    log.debug("Compiling .tex document")
    p = subprocess.Popen("pdflatex -interaction=batchmode test1.tex",shell=True,stdout=subprocess.PIPE)
    output = p.communicate()[0]
    log.debug(output)

    log.debug("Second compilation of .tex file")
    p1 = subprocess.Popen("pdflatex -interaction=batchmode test1.tex",shell=True,stdout=subprocess.PIPE)
    output = p1.communicate()[0]
    log.debug(output)

    log.debug("done. Now cleaning up")
    p2 = subprocess.Popen("rm test1.tex test1.toc test1.aux test1.log test1.out",shell=True,stdout=subprocess.PIPE)
    output = p2.communicate()[0]
    log.debug(output)
    log.debug("done")

    return ctr_string

## Function clean everything up at the end of the validation
#
# Function to clean every tempory file at the end of the
# validation, this can be skipped with the command line
# option nocleanup.
# @param[in] options Command line options object
def clean_up(options):
    if not options.nocleanup:
        control_output("Cleaning everything up")
        # Clean up the repository
        if not options.nogit:
            c_branch = get_current_branch()
            if c_branch != 'master' and c_branch != 'dev':
                p = subprocess.Popen(['git','checkout','dev'],stdout=subprocess.PIPE,stderr=subprocess.PIPE)
                output = p.communicate()[0]
                log.debug(output)
                p = subprocess.Popen(['git','branch','-d',c_branch],stdout=subprocess.PIPE,stderr=subprocess.PIPE)
                output = p.communicate()[0]
                log.debug(output)

## Function to compile the PxlSkimmer
#
# With the option nocompilation this step is skipped,
# while with the option cleancompilation as a first step
# a 'scram b clean' is called.
# @param[in] options Command line options object
def make_val_compilation(options):
    if not options.nocompilation:
        control_output("Compiling the validation package")
        pwd_ = os.getcwd()
        var = 'CMSSW_BASE'
        music_path = os.getenv( var )
        os.chdir(music_path + '/src/')
        if options.cleancompilation:
            log.info(" ")
            log.info(" But first cleaning everything up")
            log.info(" ")
            log.debug("Calling 'scram b clean' on the PxlSkimmer")
            p = subprocess.Popen(['scram', 'b', 'clean'],stdout=subprocess.PIPE,stderr=subprocess.PIPE)
            output = p.communicate()[0]
            log.debug(output)
        log.info(" ")
        log.info(" Now we will compile")
        log.info(" ")
        p = subprocess.Popen(['scram','b','-j8'],stdout=subprocess.PIPE,stderr=subprocess.PIPE)
        output = p.communicate()[0]
        log.debug(output)
        os.chdir(pwd_)
        log.info(" ")
        log.info(bcolors.OKGREEN+" Everything done"+bcolors.ENDC)
        log.info(" ")

## Function to create a config file for the PxlAnalyzer validator
#
# The different files that were skimmed are collected in a config file
# so that the PxlAnalyzer will run over them.
# @param[in] options Command line options object
# @param[in] cfg_file Configuration file object
# @param[out] cfg_name Name of the Config file for the PxlAnalyzer validator
def create_cfg_for_validator(options,cfg_file):
    sample_text = ''

    for item in cfg_file["samples"]:
        sample_text += '    [[%s]]\n'%item.replace('/','').replace('.root','.pxlio')
        sample_text += '        label = %s\n'%cfg_file["samples"][item]["label"]
        sample_text += '\n'

    d = dict(
        PATH=os.path.abspath("comparison_dir/new/")+'/',
        FILES=sample_text,
    )

    file=open(os.path.expandvars(options.valtemplate),"r")
    text=file.read()
    file.close()
    newText=Template(text).safe_substitute(d)
    cfg_name = "log/config.cfg"
    fileNew=open(cfg_name,"w+")
    fileNew.write(newText)
    fileNew.close()

    return os.path.abspath(cfg_name)

## Function to call the validator of the PxlAnalyzer
#
# Here the validator is called and the options for that are set.
# @param[in] cfg_file_name Name of the config file for the validator
# @param[in] options Command line options object
# @param[out] result Boolean result of the validation
def run_pxlana_validation(cfg_file_name,options):
    lib_path = os.path.expandvars('$MUSIC_BASE/Validator/')
    sys.path.append( lib_path )
    import validator as val9000

    dummy_args = sys.argv
    sys.argv = ['validator.py','--cfgfile=%s'%cfg_file_name,'--compdir=%s'%(os.path.expandvars('$PWD/old/')),'--noasciiart=True','--nogit=True','--debug=%s'%options.debug]
    result = val9000.main(sys.argv)
    sys.argv = dummy_args
    return result

## Main function to call the different sub functions
def main():
    t0 = time.time()

    args,options,cfg_file = opt_parser()

    welcome_output(options)

    control_output("doing the validation")

    make_val_compilation(options)

    run_analysis(options,cfg_file)

    get_analysis_output(options)

    get_reference_output(options)

    do_comparison(options,cfg_file)

    cfg_file_name = create_cfg_for_validator(options,cfg_file)

    pxlana_result = run_pxlana_validation(cfg_file_name,options)

    ctr_string = make_output_file(cfg_file,options)

    decision = final_user_decision(ctr_string)

    if decision == True and pxlana_result == True:
        make_new_reference(options)

        authorization = check_authorization()

        if authorization == True:
            make_commits(options,cfg_file)

    clean_up(options)

    t1 = time.time()

    farewell_output(options,t1,t0)

if __name__ == '__main__':
    main()
