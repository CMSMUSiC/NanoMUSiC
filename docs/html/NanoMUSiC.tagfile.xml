<?xml version='1.0' encoding='UTF-8' standalone='yes' ?>
<tagfile>
  <compound kind="file">
    <name>main_page.dox</name>
    <filename>main__page_8dox.html</filename>
  </compound>
  <compound kind="file">
    <name>BS_thread_pool.hh</name>
    <filename>_b_s__thread__pool_8hh.html</filename>
    <class kind="class">BS::multi_future</class>
    <class kind="class">BS::blocks</class>
    <class kind="class">BS::thread_pool</class>
    <class kind="class">BS::synced_stream</class>
    <class kind="class">BS::timer</class>
    <namespace>BS</namespace>
    <member kind="define">
      <type>#define</type>
      <name>BS_THREAD_POOL_VERSION</name>
      <anchorfile>_b_s__thread__pool_8hh.html</anchorfile>
      <anchor>a1149cbbef0b0be59576a0787b2606af4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::invoke_result_t&lt; decltype(std::thread::hardware_concurrency)&gt;</type>
      <name>concurrency_t</name>
      <anchorfile>namespace_b_s.html</anchorfile>
      <anchor>a7bb1747ef283bd1349183c445ee89aaa</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ConvolutionComputer.hh</name>
    <filename>_convolution_computer_8hh.html</filename>
    <member kind="enumeration">
      <type></type>
      <name>PriorMode</name>
      <anchorfile>_convolution_computer_8hh.html</anchorfile>
      <anchor>a091474ce32ca759bb4c234859a523a7a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NORMAL_PRIOR</name>
      <anchorfile>_convolution_computer_8hh.html</anchorfile>
      <anchor>a091474ce32ca759bb4c234859a523a7aa78e4ecb00ee1e4ff1f8a3b61d6a6c1e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LOGNORMAL_PRIOR</name>
      <anchorfile>_convolution_computer_8hh.html</anchorfile>
      <anchor>a091474ce32ca759bb4c234859a523a7aa631bebf563c77e6f6e428ae8abd537a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>compute_p_convolution</name>
      <anchorfile>_convolution_computer_8hh.html</anchorfile>
      <anchor>a894d1125fc8d2cfcd13947bf5ab67fce</anchor>
      <arglist>(const double N_obs, const double N_SM, const double error_parameter, PriorMode prior, const int debugLevel=1)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ConvolutionLookup.hh</name>
    <filename>_convolution_lookup_8hh.html</filename>
    <includes id="_convolution_computer_8hh" name="ConvolutionComputer.hh" local="yes" imported="no">ConvolutionComputer.hh</includes>
    <includes id="_b_s__thread__pool_8hh" name="BS_thread_pool.hh" local="yes" imported="no">BS_thread_pool.hh</includes>
    <includes id="indicators_8hh" name="indicators.hh" local="yes" imported="no">indicators.hh</includes>
    <class kind="struct">__attribute__</class>
    <class kind="class">LookupTable</class>
    <member kind="define">
      <type>#define</type>
      <name>TABLE_VERSION</name>
      <anchorfile>_convolution_lookup_8hh.html</anchorfile>
      <anchor>a0a7d67884d37140ce83087a86269aa0f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>lookup_p_convolution</name>
      <anchorfile>_convolution_lookup_8hh.html</anchorfile>
      <anchor>ae83842e78be8e24b48f93fcbff9a0099</anchor>
      <arglist>(double N_obs, double N_SM, double error_parameter, bool debug=false, const char *filename=&quot;&quot;)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Dicer.hh</name>
    <filename>_dicer_8hh.html</filename>
    <includes id="_m_c_bin_8hh" name="MCBin.hh" local="yes" imported="no">MCBin.hh</includes>
    <includes id="_convolution_computer_8hh" name="ConvolutionComputer.hh" local="yes" imported="no">ConvolutionComputer.hh</includes>
    <class kind="class">Dicer</class>
  </compound>
  <compound kind="file">
    <name>ECScanner.hh</name>
    <filename>_e_c_scanner_8hh.html</filename>
    <includes id="_convolution_lookup_8hh" name="ConvolutionLookup.hh" local="yes" imported="no">ConvolutionLookup.hh</includes>
    <includes id="_dicer_8hh" name="Dicer.hh" local="yes" imported="no">Dicer.hh</includes>
    <includes id="_m_c_bin_8hh" name="MCBin.hh" local="yes" imported="no">MCBin.hh</includes>
    <includes id="_profiler_8hh" name="Profiler.hh" local="yes" imported="no">Profiler.hh</includes>
    <includes id="_scan_result_8hh" name="ScanResult.hh" local="yes" imported="no">ScanResult.hh</includes>
    <class kind="class">ECScanner</class>
    <member kind="define">
      <type>#define</type>
      <name>RAPIDJSON_HAS_STDSTRING</name>
      <anchorfile>_e_c_scanner_8hh.html</anchorfile>
      <anchor>a2f2eef0ee4477f3fe5874703a66e997f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>indicators.hh</name>
    <filename>indicators_8hh.html</filename>
    <class kind="class">indicators::details::BlockProgressScaleWriter</class>
    <class kind="class">indicators::details::ProgressScaleWriter</class>
    <class kind="class">indicators::details::IndeterminateProgressScaleWriter</class>
    <class kind="class">indicators::ProgressBar</class>
    <class kind="class">indicators::BlockProgressBar</class>
    <class kind="class">indicators::IndeterminateProgressBar</class>
    <class kind="class">indicators::MultiProgress</class>
    <class kind="class">indicators::DynamicProgress</class>
    <class kind="class">indicators::ProgressSpinner</class>
    <namespace>indicators</namespace>
    <namespace>indicators::details</namespace>
    <member kind="define">
      <type>#define</type>
      <name>INDICATORS_FONT_STYLE</name>
      <anchorfile>indicators_8hh.html</anchorfile>
      <anchor>a30b1e1bfecc6b64f89283628833a9421</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>INDICATORS_PROGRESS_TYPE</name>
      <anchorfile>indicators_8hh.html</anchorfile>
      <anchor>a88376e0aa53100313fb834825add8e46</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TERMCOLOR_HPP_</name>
      <anchorfile>indicators_8hh.html</anchorfile>
      <anchor>a73cd2532e7049aa3b2414412d24962be</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>INDICATORS_TERMINAL_SIZE</name>
      <anchorfile>indicators_8hh.html</anchorfile>
      <anchor>ada002e2e30e7cd6ace2aa32ccf67a746</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>INDICATORS_SETTING</name>
      <anchorfile>indicators_8hh.html</anchorfile>
      <anchor>a8176213f9b62905bd7f193e6a4d5cf5a</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>INDICATORS_CURSOR_CONTROL</name>
      <anchorfile>indicators_8hh.html</anchorfile>
      <anchor>a583bef6a46f6636aaadf9c020f3430e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>INDICATORS_CURSOR_MOVEMENT</name>
      <anchorfile>indicators_8hh.html</anchorfile>
      <anchor>a5bc3c5e50aa04160ada392df72339472</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>INDICATORS_STREAM_HELPER</name>
      <anchorfile>indicators_8hh.html</anchorfile>
      <anchor>ac0da8c6359456d1b21dc7c31161be293</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>INDICATORS_DISPLAY_WIDTH</name>
      <anchorfile>indicators_8hh.html</anchorfile>
      <anchor>a08f2e4aa58ecfb305e06bb0ec824f40a</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>INDICATORS_PROGRESS_BAR</name>
      <anchorfile>indicators_8hh.html</anchorfile>
      <anchor>abd3cd62e3f2fdf99270ffa65bc131679</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>INDICATORS_BLOCK_PROGRESS_BAR</name>
      <anchorfile>indicators_8hh.html</anchorfile>
      <anchor>ac465ee3a15d8437b9398913115339714</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>INDICATORS_INDETERMINATE_PROGRESS_BAR</name>
      <anchorfile>indicators_8hh.html</anchorfile>
      <anchor>a1f29e8279a35f9e45e4f863d4b295d63</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>INDICATORS_MULTI_PROGRESS</name>
      <anchorfile>indicators_8hh.html</anchorfile>
      <anchor>a52b4c766258534e6498821c7b04b312a</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>INDICATORS_DYNAMIC_PROGRESS</name>
      <anchorfile>indicators_8hh.html</anchorfile>
      <anchor>a0874abcdc8255b424a65ea2d730766ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>INDICATORS_PROGRESS_SPINNER</name>
      <anchorfile>indicators_8hh.html</anchorfile>
      <anchor>a8184125319374bc5362a7282a026c294</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>Color</name>
      <anchorfile>namespaceindicators.html</anchorfile>
      <anchor>a21cb670516a74f8f15aa29d22223349f</anchor>
      <arglist></arglist>
      <enumvalue file="namespaceindicators.html" anchor="a21cb670516a74f8f15aa29d22223349faca50000a180a293de0b27acb67a695cb">grey</enumvalue>
      <enumvalue file="namespaceindicators.html" anchor="a21cb670516a74f8f15aa29d22223349fabda9643ac6601722a28f238714274da4">red</enumvalue>
      <enumvalue file="namespaceindicators.html" anchor="a21cb670516a74f8f15aa29d22223349fa9f27410725ab8cc8854a2769c7a516b8">green</enumvalue>
      <enumvalue file="namespaceindicators.html" anchor="a21cb670516a74f8f15aa29d22223349fad487dd0b55dfcacdd920ccbdaeafa351">yellow</enumvalue>
      <enumvalue file="namespaceindicators.html" anchor="a21cb670516a74f8f15aa29d22223349fa48d6215903dff56238e52e8891380c8f">blue</enumvalue>
      <enumvalue file="namespaceindicators.html" anchor="a21cb670516a74f8f15aa29d22223349fa4c2a4a7078da0ac6733464eacfd00f86">magenta</enumvalue>
      <enumvalue file="namespaceindicators.html" anchor="a21cb670516a74f8f15aa29d22223349fa6411532ba4971f378391776a9db629d3">cyan</enumvalue>
      <enumvalue file="namespaceindicators.html" anchor="a21cb670516a74f8f15aa29d22223349fad508fe45cecaf653904a0e774084bb5c">white</enumvalue>
      <enumvalue file="namespaceindicators.html" anchor="a21cb670516a74f8f15aa29d22223349fad415f0e30c471dfdd9bc4f827329ef48">unspecified</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>FontStyle</name>
      <anchorfile>namespaceindicators.html</anchorfile>
      <anchor>ae7df6316e62332d1ef7f35253aca27dc</anchor>
      <arglist></arglist>
      <enumvalue file="namespaceindicators.html" anchor="ae7df6316e62332d1ef7f35253aca27dca69dcab4a73aeec2113f69b61e6263da8">bold</enumvalue>
      <enumvalue file="namespaceindicators.html" anchor="ae7df6316e62332d1ef7f35253aca27dcaa82fd95db10ff25dfad39f07372ebe37">dark</enumvalue>
      <enumvalue file="namespaceindicators.html" anchor="ae7df6316e62332d1ef7f35253aca27dca030c5b6d1e5715105943ac111d9671bf">italic</enumvalue>
      <enumvalue file="namespaceindicators.html" anchor="ae7df6316e62332d1ef7f35253aca27dca6dc7b4483f8c2c701a48e42db552806d">underline</enumvalue>
      <enumvalue file="namespaceindicators.html" anchor="ae7df6316e62332d1ef7f35253aca27dca40652ee9ae143f1c1c830f01a5449ecb">blink</enumvalue>
      <enumvalue file="namespaceindicators.html" anchor="ae7df6316e62332d1ef7f35253aca27dca4d9c2073afa3c2abb817dceb22c34de6">reverse</enumvalue>
      <enumvalue file="namespaceindicators.html" anchor="ae7df6316e62332d1ef7f35253aca27dca2235b9ee5dbac65f79cb61d4a4baced2">concealed</enumvalue>
      <enumvalue file="namespaceindicators.html" anchor="ae7df6316e62332d1ef7f35253aca27dcafade7e5041fdebd013b445486161c31c">crossed</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>ProgressType</name>
      <anchorfile>namespaceindicators.html</anchorfile>
      <anchor>a458cab7e6f3aea9f31820e8eb0102b90</anchor>
      <arglist></arglist>
      <enumvalue file="namespaceindicators.html" anchor="a458cab7e6f3aea9f31820e8eb0102b90a57e48ffcfe372672b239d90ecbe3919a">incremental</enumvalue>
      <enumvalue file="namespaceindicators.html" anchor="a458cab7e6f3aea9f31820e8eb0102b90af4a7a844a60aa57ff7aef6060bdec414">decremental</enumvalue>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_stream_color</name>
      <anchorfile>namespaceindicators_1_1details.html</anchorfile>
      <anchor>aac088c2287d6d53b0f3e667019a4a80f</anchor>
      <arglist>(std::ostream &amp;os, Color color)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_font_style</name>
      <anchorfile>namespaceindicators_1_1details.html</anchorfile>
      <anchor>ab308cc03b14b87ecdf07aaa5b8ea3e23</anchor>
      <arglist>(std::ostream &amp;os, FontStyle style)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>write_duration</name>
      <anchorfile>namespaceindicators_1_1details.html</anchorfile>
      <anchor>aebf59d2f5f28de4d2d071d558f507d4b</anchor>
      <arglist>(std::ostream &amp;os, std::chrono::nanoseconds ns)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>MCBin.hh</name>
    <filename>_m_c_bin_8hh.html</filename>
    <class kind="class">MCBin</class>
  </compound>
  <compound kind="file">
    <name>Profiler.hh</name>
    <filename>_profiler_8hh.html</filename>
    <class kind="class">CpuClock</class>
    <class kind="class">ChronoClock</class>
    <class kind="class">WallClock</class>
    <class kind="class">ClockProfiler</class>
    <member kind="typedef">
      <type>double</type>
      <name>seconds</name>
      <anchorfile>_profiler_8hh.html</anchorfile>
      <anchor>af5afa4ff6cbaa5626870d3f90e0a40e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ClockProfiler&lt; ChronoClock &gt;</type>
      <name>Profiler</name>
      <anchorfile>_profiler_8hh.html</anchorfile>
      <anchor>a3d54cfeefedecc71aa4fd7eaf1ebe6ca</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ScanResult.hh</name>
    <filename>_scan_result_8hh.html</filename>
    <includes id="_m_c_bin_8hh" name="MCBin.hh" local="yes" imported="no">MCBin.hh</includes>
    <class kind="class">ScanResult</class>
    <member kind="define">
      <type>#define</type>
      <name>RAPIDJSON_HAS_STDSTRING</name>
      <anchorfile>_scan_result_8hh.html</anchorfile>
      <anchor>a2f2eef0ee4477f3fe5874703a66e997f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TEventClass.hh</name>
    <filename>_t_event_class_8hh.html</filename>
    <includes id="_m_config_8hh" name="MConfig.hh" local="yes" imported="no">MConfig.hh</includes>
    <class kind="class">TEventClass</class>
    <class kind="struct">TEventClass::PDFResult</class>
  </compound>
  <compound kind="file">
    <name>music.hh</name>
    <filename>music_8hh.html</filename>
    <includes id="color_8hh" name="color.hh" local="yes" imported="no">tools/color.hh</includes>
    <includes id="emoji_8hh" name="emoji.hh" local="yes" imported="no">tools/emoji.hh</includes>
    <includes id="_run_lumi_filter_8hh" name="RunLumiFilter.hh" local="yes" imported="no">RunLumiFilter.hh</includes>
    <includes id="core_8hh" name="core.hh" local="yes" imported="no">Pxl/Pxl/interface/pxl/core.hh</includes>
    <includes id="hep_8hh" name="hep.hh" local="yes" imported="no">Pxl/Pxl/interface/pxl/hep.hh</includes>
    <includes id="_event_adaptor_8hh" name="EventAdaptor.hh" local="yes" imported="no">Main/EventAdaptor.hh</includes>
    <includes id="_event_selector_8hh" name="EventSelector.hh" local="yes" imported="no">Main/EventSelector.hh</includes>
    <includes id="_jet_type_writer_8hh" name="JetTypeWriter.hh" local="yes" imported="no">Main/JetTypeWriter.hh</includes>
    <includes id="_particle_matcher_8hh" name="ParticleMatcher.hh" local="yes" imported="no">Main/ParticleMatcher.hh</includes>
    <includes id="_re_weighter_8hh" name="ReWeighter.hh" local="yes" imported="no">Main/ReWeighter.hh</includes>
    <includes id="_run_lumi_ranges_8hh" name="RunLumiRanges.hh" local="yes" imported="no">Main/RunLumiRanges.hh</includes>
    <includes id="_skip_events_8hh" name="SkipEvents.hh" local="yes" imported="no">Main/SkipEvents.hh</includes>
    <includes id="_systematics_8hh" name="Systematics.hh" local="yes" imported="no">Main/Systematics.hh</includes>
    <includes id="_tools_8hh" name="Tools.hh" local="yes" imported="no">Tools/Tools.hh</includes>
    <includes id="_event_class_factory_8hh" name="EventClassFactory.hh" local="yes" imported="no">EventClassFactory/EventClassFactory.hh</includes>
    <includes id="_nano_a_o_d_reader_8hh" name="NanoAODReader.hh" local="yes" imported="no">Main/NanoAODReader.hh</includes>
    <includes id="nano2pxl__utils_8hh" name="nano2pxl_utils.hh" local="yes" imported="no">nano2pxl_utils.hh</includes>
    <member kind="define">
      <type>#define</type>
      <name>Q</name>
      <anchorfile>music_8hh.html</anchorfile>
      <anchor>a2a280bfe12bc6e732a7c4d3d62443a14</anchor>
      <arglist>(x)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>QUOTE</name>
      <anchorfile>music_8hh.html</anchorfile>
      <anchor>a2117b58e19182dff91ad3558e650541d</anchor>
      <arglist>(x)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getIntYear</name>
      <anchorfile>music_8hh.html</anchorfile>
      <anchor>a7f681cc87c8855e0d3be4e29f2410cd7</anchor>
      <arglist>(std::string year)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; pxl::Event &gt;</type>
      <name>buildPxlEvent</name>
      <anchorfile>music_8hh.html</anchorfile>
      <anchor>abb9c96a738ada936872cd749db2f0371</anchor>
      <arglist>(unsigned int i_evt, NanoAODReader &amp;nano_reader, std::string year, std::string process, std::string dataset, bool isData, int debug)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>nano2pxl_utils.hh</name>
    <filename>nano2pxl__utils_8hh.html</filename>
    <member kind="function">
      <type>void</type>
      <name>analyzeGenRelatedInfo</name>
      <anchorfile>nano2pxl__utils_8hh.html</anchorfile>
      <anchor>ab4dc3fabf7d25daf4206879c84f39ad0</anchor>
      <arglist>(NanoAODReader &amp;nano_reader, pxl::EventView *GenEvtView)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>analyzegenWeight</name>
      <anchorfile>nano2pxl__utils_8hh.html</anchorfile>
      <anchor>a37337ec8ca035dcd2c22d6400da5725d</anchor>
      <arglist>(NanoAODReader &amp;nano_reader, pxl::EventView *GenEvtView)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>analyzeLHEInfo</name>
      <anchorfile>nano2pxl__utils_8hh.html</anchorfile>
      <anchor>a841cb5df4f2982810ea920e71a6d50c9</anchor>
      <arglist>(NanoAODReader &amp;nano_reader, pxl::EventView *GenEvtView)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>analyzeLHEParticles</name>
      <anchorfile>nano2pxl__utils_8hh.html</anchorfile>
      <anchor>a1fa1f3a91f3a7cb08f9c39d1a5f0dfca</anchor>
      <arglist>(NanoAODReader &amp;nano_reader, pxl::EventView *GenEvtView)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>analyzeGenVertices</name>
      <anchorfile>nano2pxl__utils_8hh.html</anchorfile>
      <anchor>a82bd24d679bd5e84c6aca8d8d609c586</anchor>
      <arglist>(NanoAODReader &amp;nano_reader, pxl::EventView *GenEvtView)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>analyzeGenParticles</name>
      <anchorfile>nano2pxl__utils_8hh.html</anchorfile>
      <anchor>a0cbca3f46b4b53fcbd97f79b179d2461</anchor>
      <arglist>(NanoAODReader &amp;nano_reader, pxl::EventView *GenEvtView)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>analyzeGenDressedLeptons</name>
      <anchorfile>nano2pxl__utils_8hh.html</anchorfile>
      <anchor>affb88e51d402f2fd9c181fafa36798d3</anchor>
      <arglist>(NanoAODReader &amp;nano_reader, pxl::EventView *GenEvtView)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>analyzeGenPU</name>
      <anchorfile>nano2pxl__utils_8hh.html</anchorfile>
      <anchor>a9fd0d228a01f5607a8fb46e58c51a479</anchor>
      <arglist>(NanoAODReader &amp;nano_reader, pxl::EventView *GenEvtView)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>analyzeGenJets</name>
      <anchorfile>nano2pxl__utils_8hh.html</anchorfile>
      <anchor>addb2d16d7170ed7d99ea5640ad4eb2d8</anchor>
      <arglist>(NanoAODReader &amp;nano_reader, pxl::EventView *GenEvtView)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>analyzeGenJetsAK8</name>
      <anchorfile>nano2pxl__utils_8hh.html</anchorfile>
      <anchor>ab3f0435c623798c288cb98437468bc5c</anchor>
      <arglist>(NanoAODReader &amp;nano_reader, pxl::EventView *GenEvtView)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>analyzeGenMET</name>
      <anchorfile>nano2pxl__utils_8hh.html</anchorfile>
      <anchor>adaac6e148ccbdf943cde7dc45823403d</anchor>
      <arglist>(NanoAODReader &amp;nano_reader, pxl::EventView *GenEvtView)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>analyzeTrigger</name>
      <anchorfile>nano2pxl__utils_8hh.html</anchorfile>
      <anchor>a30b67fd9952b1e1df318f9f69ee91364</anchor>
      <arglist>(NanoAODReader &amp;nano_reader, pxl::EventView *TrigEvtView)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>analyseMETFilter</name>
      <anchorfile>nano2pxl__utils_8hh.html</anchorfile>
      <anchor>a710a6692fae11b221ac9c6132d81a1be</anchor>
      <arglist>(NanoAODReader &amp;nano_reader, pxl::EventView *FilterEvtView)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>analyzeRho</name>
      <anchorfile>nano2pxl__utils_8hh.html</anchorfile>
      <anchor>a5ecf9d7e82cf92823334aa3f6db4dd07</anchor>
      <arglist>(NanoAODReader &amp;nano_reader, pxl::EventView *RecEvtView)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>analyzeRecVertices</name>
      <anchorfile>nano2pxl__utils_8hh.html</anchorfile>
      <anchor>aec97770e500825b7821217e40bda9d6f</anchor>
      <arglist>(NanoAODReader &amp;nano_reader, pxl::EventView *RecEvtView)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>analyzeRecTaus</name>
      <anchorfile>nano2pxl__utils_8hh.html</anchorfile>
      <anchor>a535203a9fea68c4acbc1734682e07ab9</anchor>
      <arglist>(NanoAODReader &amp;nano_reader, pxl::EventView *RecEvtView)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>analyzeRecBoostedTaus</name>
      <anchorfile>nano2pxl__utils_8hh.html</anchorfile>
      <anchor>ace227919cf711deabc8f4c71284657d8</anchor>
      <arglist>(NanoAODReader &amp;nano_reader, pxl::EventView *RecEvtView)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>analyzeRecMuons</name>
      <anchorfile>nano2pxl__utils_8hh.html</anchorfile>
      <anchor>a82b78f26b03aac8d36096190c7e11c80</anchor>
      <arglist>(NanoAODReader &amp;nano_reader, pxl::EventView *RecEvtView)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>analyzeRecElectrons</name>
      <anchorfile>nano2pxl__utils_8hh.html</anchorfile>
      <anchor>a42515be7e85c9c22ddd696af5f865b2c</anchor>
      <arglist>(NanoAODReader &amp;nano_reader, pxl::EventView *RecEvtView)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>analyzeRecPhotons</name>
      <anchorfile>nano2pxl__utils_8hh.html</anchorfile>
      <anchor>aedf31ff30ecf8fedd43af0afabee3eab</anchor>
      <arglist>(NanoAODReader &amp;nano_reader, pxl::EventView *RecEvtView)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>analyzeRecMET</name>
      <anchorfile>nano2pxl__utils_8hh.html</anchorfile>
      <anchor>a1ae730e94582f239ca7258ef3e2b99ee</anchor>
      <arglist>(NanoAODReader &amp;nano_reader, pxl::EventView *RecEvtView)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>analyzeRecPuppiMET</name>
      <anchorfile>nano2pxl__utils_8hh.html</anchorfile>
      <anchor>a8e18dc177d9a44992f18e0e4e1d95753</anchor>
      <arglist>(NanoAODReader &amp;nano_reader, pxl::EventView *RecEvtView)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>analyzeRecJets</name>
      <anchorfile>nano2pxl__utils_8hh.html</anchorfile>
      <anchor>a7645de776d658a1c10f060a07d98248c</anchor>
      <arglist>(NanoAODReader &amp;nano_reader, pxl::EventView *RecEvtView)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>analyzeRecFatJets</name>
      <anchorfile>nano2pxl__utils_8hh.html</anchorfile>
      <anchor>a76dee63f1bc274e250faab56d728e24c</anchor>
      <arglist>(NanoAODReader &amp;nano_reader, pxl::EventView *RecEvtView)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>analyzeRecBTagWeights</name>
      <anchorfile>nano2pxl__utils_8hh.html</anchorfile>
      <anchor>a0141447f197e7044df2c883955a4302c</anchor>
      <arglist>(NanoAODReader &amp;nano_reader, pxl::EventView *RecEvtView)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>analyzePrefiringWeights</name>
      <anchorfile>nano2pxl__utils_8hh.html</anchorfile>
      <anchor>a55423c518eb6e4016e1fd80e8191c6e3</anchor>
      <arglist>(NanoAODReader &amp;nano_reader, pxl::EventView *RecEvtView)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RunLumiFilter.hh</name>
    <filename>_run_lumi_filter_8hh.html</filename>
    <class kind="class">RunLumiFilter</class>
    <member kind="typedef">
      <type>nlohmann::json</type>
      <name>json</name>
      <anchorfile>_run_lumi_filter_8hh.html</anchorfile>
      <anchor>ab701e3ac61a85b337ec5c1abaad6742d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>color.hh</name>
    <filename>color_8hh.html</filename>
    <class kind="class">Color::Modifier</class>
    <namespace>Color</namespace>
    <member kind="enumeration">
      <type></type>
      <name>Code</name>
      <anchorfile>namespace_color.html</anchorfile>
      <anchor>a20a7b04657c1d83fae5d54514d3f1622</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FG_RED</name>
      <anchorfile>namespace_color.html</anchorfile>
      <anchor>a20a7b04657c1d83fae5d54514d3f1622abe34efdb5a71e6c08dbd73b2b048594e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FG_GREEN</name>
      <anchorfile>namespace_color.html</anchorfile>
      <anchor>a20a7b04657c1d83fae5d54514d3f1622a3a47691d3524832443f1a94c9301cbc1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FG_YELLOW</name>
      <anchorfile>namespace_color.html</anchorfile>
      <anchor>a20a7b04657c1d83fae5d54514d3f1622a89cd1fbea5f6f69b83a2cfe8e8b3a0b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FG_BLUE</name>
      <anchorfile>namespace_color.html</anchorfile>
      <anchor>a20a7b04657c1d83fae5d54514d3f1622a91581c34f3a125bd751e1d0ea15c54e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FG_CYAN</name>
      <anchorfile>namespace_color.html</anchorfile>
      <anchor>a20a7b04657c1d83fae5d54514d3f1622ae429d988155b73516653a3042c4190b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FG_ACQUA</name>
      <anchorfile>namespace_color.html</anchorfile>
      <anchor>a20a7b04657c1d83fae5d54514d3f1622a02876d9224a122f43db70368c35a84c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FG_DEFAULT</name>
      <anchorfile>namespace_color.html</anchorfile>
      <anchor>a20a7b04657c1d83fae5d54514d3f1622a8a2002a109cc5d185745a3371776eabb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BG_RED</name>
      <anchorfile>namespace_color.html</anchorfile>
      <anchor>a20a7b04657c1d83fae5d54514d3f1622aafa9e9d96317844f2479b794417dfbd4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BG_GREEN</name>
      <anchorfile>namespace_color.html</anchorfile>
      <anchor>a20a7b04657c1d83fae5d54514d3f1622a6a1218e3191bd7ffdc1071677d454196</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BG_BLUE</name>
      <anchorfile>namespace_color.html</anchorfile>
      <anchor>a20a7b04657c1d83fae5d54514d3f1622a0c518bf654e18a54857f69a03685ad8e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BG_CYAN</name>
      <anchorfile>namespace_color.html</anchorfile>
      <anchor>a20a7b04657c1d83fae5d54514d3f1622a7d8fdd00a1ffed112671ed7fbea0938c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BG_DEFAULT</name>
      <anchorfile>namespace_color.html</anchorfile>
      <anchor>a20a7b04657c1d83fae5d54514d3f1622a2f4ff5db29c759ed5319cb528fdc3ad2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>emoji.hh</name>
    <filename>emoji_8hh.html</filename>
    <namespace>emojicpp</namespace>
    <member kind="function">
      <type>std::string</type>
      <name>emojize</name>
      <anchorfile>namespaceemojicpp.html</anchorfile>
      <anchor>a6bb4b8775ae489335c752949a881e687</anchor>
      <arglist>(std::string s, bool escape=true)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>AnalysisComposer.hh</name>
    <path>/.automount/home/home__home1/institut_3a/silva/NanoMUSiC/NanoMUSiC/PxlAnalyzer/EventClassFactory/</path>
    <filename>_analysis_composer_8hh.html</filename>
    <includes id="_event_selector_8hh" name="EventSelector.hh" local="yes" imported="no">Main/EventSelector.hh</includes>
    <includes id="_p_d_f_tool_8hh" name="PDFTool.hh" local="yes" imported="no">Main/PDFTool.hh</includes>
    <includes id="_systematics_8hh" name="Systematics.hh" local="yes" imported="no">Main/Systematics.hh</includes>
    <includes id="_tools_8hh" name="Tools.hh" local="yes" imported="no">Tools/Tools.hh</includes>
    <includes id="core_8hh" name="core.hh" local="yes" imported="no">Pxl/Pxl/interface/pxl/core.hh</includes>
    <includes id="hep_8hh" name="hep.hh" local="yes" imported="no">Pxl/Pxl/interface/pxl/hep.hh</includes>
    <class kind="class">AnalysisComposer</class>
  </compound>
  <compound kind="file">
    <name>CrossSectionOrderErrorMap.hh</name>
    <path>/.automount/home/home__home1/institut_3a/silva/NanoMUSiC/NanoMUSiC/PxlAnalyzer/EventClassFactory/</path>
    <filename>_cross_section_order_error_map_8hh.html</filename>
    <includes id="_m_config_8hh" name="MConfig.hh" local="yes" imported="no">Tools/MConfig.hh</includes>
    <includes id="_tools_8hh" name="Tools.hh" local="yes" imported="no">Tools/Tools.hh</includes>
    <class kind="class">CrossSectionOrderErrorMap</class>
  </compound>
  <compound kind="file">
    <name>EventClassFactory.hh</name>
    <path>/.automount/home/home__home1/institut_3a/silva/NanoMUSiC/NanoMUSiC/PxlAnalyzer/EventClassFactory/</path>
    <filename>_event_class_factory_8hh.html</filename>
    <includes id="_event_selector_8hh" name="EventSelector.hh" local="yes" imported="no">Main/EventSelector.hh</includes>
    <includes id="_gen_rec_name_map_8hh" name="GenRecNameMap.hh" local="yes" imported="no">Main/GenRecNameMap.hh</includes>
    <includes id="_systematics_8hh" name="Systematics.hh" local="yes" imported="no">Main/Systematics.hh</includes>
    <includes id="_p_d_f_tool_8hh" name="PDFTool.hh" local="yes" imported="no">PDFTool.hh</includes>
    <includes id="core_8hh" name="core.hh" local="yes" imported="no">Pxl/Pxl/interface/pxl/core.hh</includes>
    <includes id="hep_8hh" name="hep.hh" local="yes" imported="no">Pxl/Pxl/interface/pxl/hep.hh</includes>
    <includes id="_t_event_class_8hh" name="TEventClass.hh" local="yes" imported="no">TEventClass.hh</includes>
    <includes id="_m_config_8hh" name="MConfig.hh" local="yes" imported="no">Tools/MConfig.hh</includes>
    <includes id="_cross_section_order_error_map_8hh" name="CrossSectionOrderErrorMap.hh" local="yes" imported="no">CrossSectionOrderErrorMap.hh</includes>
    <includes id="_particle_map_8hh" name="ParticleMap.hh" local="yes" imported="no">EventClassFactory/ParticleMap.hh</includes>
    <includes id="_particle_splitting_functions_8hh" name="ParticleSplittingFunctions.hh" local="yes" imported="no">ParticleSplittingFunctions.hh</includes>
    <includes id="_trigger_stream_8hh" name="TriggerStream.hh" local="yes" imported="no">TriggerStream.hh</includes>
    <class kind="class">EventClassFactory</class>
    <class kind="struct">EventClassFactory::EventInfo</class>
    <namespace>pdf</namespace>
    <member kind="define">
      <type>#define</type>
      <name>TRIGGERSTREAM</name>
      <anchorfile>_event_class_factory_8hh.html</anchorfile>
      <anchor>a1f3f4bf5e62a4062e683a6908eadcdad</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ParticleMap.hh</name>
    <path>/.automount/home/home__home1/institut_3a/silva/NanoMUSiC/NanoMUSiC/PxlAnalyzer/EventClassFactory/</path>
    <filename>_particle_map_8hh.html</filename>
    <includes id="core_8hh" name="core.hh" local="yes" imported="no">Pxl/Pxl/interface/pxl/core.hh</includes>
    <includes id="hep_8hh" name="hep.hh" local="yes" imported="no">Pxl/Pxl/interface/pxl/hep.hh</includes>
    <includes id="_particle_vector_8hh" name="ParticleVector.hh" local="yes" imported="no">ParticleVector.hh</includes>
    <class kind="class">ParticleMap</class>
  </compound>
  <compound kind="file">
    <name>ParticleVector.hh</name>
    <path>/.automount/home/home__home1/institut_3a/silva/NanoMUSiC/NanoMUSiC/PxlAnalyzer/EventClassFactory/</path>
    <filename>_particle_vector_8hh.html</filename>
    <includes id="core_8hh" name="core.hh" local="yes" imported="no">Pxl/Pxl/interface/pxl/core.hh</includes>
    <includes id="hep_8hh" name="hep.hh" local="yes" imported="no">Pxl/Pxl/interface/pxl/hep.hh</includes>
    <class kind="class">ParticleVector</class>
  </compound>
  <compound kind="file">
    <name>Resolutions.hh</name>
    <path>/.automount/home/home__home1/institut_3a/silva/NanoMUSiC/NanoMUSiC/PxlAnalyzer/EventClassFactory/</path>
    <filename>_resolutions_8hh.html</filename>
    <namespace>pxl</namespace>
    <namespace>Resolutions</namespace>
    <member kind="function">
      <type>double</type>
      <name>muon</name>
      <anchorfile>namespace_resolutions.html</anchorfile>
      <anchor>a7ddd199af0b2c68fed3a73a4205f2c21</anchor>
      <arglist>(double pt)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>electron</name>
      <anchorfile>namespace_resolutions.html</anchorfile>
      <anchor>a0d147ed8f76aef17e47a0401327beea6</anchor>
      <arglist>(double const energy)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>tau</name>
      <anchorfile>namespace_resolutions.html</anchorfile>
      <anchor>a8910fa37d40be85450c3d93adc347681</anchor>
      <arglist>(const double pt)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>gamma</name>
      <anchorfile>namespace_resolutions.html</anchorfile>
      <anchor>ac86a47eddf8a699c196707c80ea59e9d</anchor>
      <arglist>(double energy)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>jet</name>
      <anchorfile>namespace_resolutions.html</anchorfile>
      <anchor>ac780743ccd89cbca45ef66a7b5a904d4</anchor>
      <arglist>(double pt)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>met</name>
      <anchorfile>namespace_resolutions.html</anchorfile>
      <anchor>aa46c02eb6435a9e5060c205b1fd8515a</anchor>
      <arglist>(double const sumpt)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TriggerStream.hh</name>
    <path>/.automount/home/home__home1/institut_3a/silva/NanoMUSiC/NanoMUSiC/PxlAnalyzer/EventClassFactory/</path>
    <filename>_trigger_stream_8hh.html</filename>
    <includes id="core_8hh" name="core.hh" local="yes" imported="no">Pxl/Pxl/interface/pxl/core.hh</includes>
    <includes id="hep_8hh" name="hep.hh" local="yes" imported="no">Pxl/Pxl/interface/pxl/hep.hh</includes>
    <class kind="class">TriggerStream</class>
  </compound>
  <compound kind="file">
    <name>BinnedMapping.hh</name>
    <path>/.automount/home/home__home1/institut_3a/silva/NanoMUSiC/NanoMUSiC/PxlAnalyzer/Main/</path>
    <filename>_binned_mapping_8hh.html</filename>
    <class kind="class">BinnedMapping</class>
    <namespace>Tools</namespace>
  </compound>
  <compound kind="file">
    <name>EffectiveArea.hh</name>
    <path>/.automount/home/home__home1/institut_3a/silva/NanoMUSiC/NanoMUSiC/PxlAnalyzer/Main/</path>
    <filename>_effective_area_8hh.html</filename>
    <includes id="_binned_mapping_8hh" name="BinnedMapping.hh" local="yes" imported="no">BinnedMapping.hh</includes>
    <includes id="_m_config_8hh" name="MConfig.hh" local="yes" imported="no">Tools/MConfig.hh</includes>
    <class kind="class">EffectiveArea</class>
  </compound>
  <compound kind="file">
    <name>EleSelector.hh</name>
    <path>/.automount/home/home__home1/institut_3a/silva/NanoMUSiC/NanoMUSiC/PxlAnalyzer/Main/</path>
    <filename>_ele_selector_8hh.html</filename>
    <includes id="_effective_area_8hh" name="EffectiveArea.hh" local="yes" imported="no">Main/EffectiveArea.hh</includes>
    <includes id="_object_selector_8hh" name="ObjectSelector.hh" local="yes" imported="no">ObjectSelector.hh</includes>
    <includes id="core_8hh" name="core.hh" local="yes" imported="no">Pxl/Pxl/interface/pxl/core.hh</includes>
    <includes id="hep_8hh" name="hep.hh" local="yes" imported="no">Pxl/Pxl/interface/pxl/hep.hh</includes>
    <class kind="class">EleSelector</class>
  </compound>
  <compound kind="file">
    <name>EventAdaptor.hh</name>
    <path>/.automount/home/home__home1/institut_3a/silva/NanoMUSiC/NanoMUSiC/PxlAnalyzer/Main/</path>
    <filename>_event_adaptor_8hh.html</filename>
    <includes id="_gen_rec_name_map_8hh" name="GenRecNameMap.hh" local="yes" imported="no">Main/GenRecNameMap.hh</includes>
    <includes id="_jet_resolution_8hh" name="JetResolution.hh" local="yes" imported="no">Main/JetResolution.hh</includes>
    <class kind="class">EventAdaptor</class>
    <namespace>pxl</namespace>
    <namespace>Tools</namespace>
  </compound>
  <compound kind="file">
    <name>EventCleaning.hh</name>
    <path>/.automount/home/home__home1/institut_3a/silva/NanoMUSiC/NanoMUSiC/PxlAnalyzer/Main/</path>
    <filename>_event_cleaning_8hh.html</filename>
    <class kind="class">EventCleaning</class>
    <namespace>pxl</namespace>
    <namespace>Tools</namespace>
  </compound>
  <compound kind="file">
    <name>EventSelector.hh</name>
    <path>/.automount/home/home__home1/institut_3a/silva/NanoMUSiC/NanoMUSiC/PxlAnalyzer/Main/</path>
    <filename>_event_selector_8hh.html</filename>
    <includes id="core_8hh" name="core.hh" local="yes" imported="no">Pxl/Pxl/interface/pxl/core.hh</includes>
    <includes id="hep_8hh" name="hep.hh" local="yes" imported="no">Pxl/Pxl/interface/pxl/hep.hh</includes>
    <includes id="_m_config_8hh" name="MConfig.hh" local="yes" imported="no">Tools/MConfig.hh</includes>
    <includes id="_trigger_selector_8hh" name="TriggerSelector.hh" local="yes" imported="no">TriggerSelector.hh</includes>
    <includes id="_ele_selector_8hh" name="EleSelector.hh" local="yes" imported="no">EleSelector.hh</includes>
    <includes id="_fat_jet_selector_8hh" name="FatJetSelector.hh" local="yes" imported="no">FatJetSelector.hh</includes>
    <includes id="_gamma_selector_8hh" name="GammaSelector.hh" local="yes" imported="no">GammaSelector.hh</includes>
    <includes id="_jet_selector_8hh" name="JetSelector.hh" local="yes" imported="no">JetSelector.hh</includes>
    <includes id="_m_e_t_selector_8hh" name="METSelector.hh" local="yes" imported="no">METSelector.hh</includes>
    <includes id="_muon_selector_8hh" name="MuonSelector.hh" local="yes" imported="no">MuonSelector.hh</includes>
    <includes id="_object_selector_8hh" name="ObjectSelector.hh" local="yes" imported="no">ObjectSelector.hh</includes>
    <includes id="_tau_selector_8hh" name="TauSelector.hh" local="yes" imported="no">TauSelector.hh</includes>
    <includes id="_effective_area_8hh" name="EffectiveArea.hh" local="yes" imported="no">EffectiveArea.hh</includes>
    <includes id="_event_cleaning_8hh" name="EventCleaning.hh" local="yes" imported="no">EventCleaning.hh</includes>
    <includes id="_gen_rec_name_map_8hh" name="GenRecNameMap.hh" local="yes" imported="no">GenRecNameMap.hh</includes>
    <includes id="_gen_selector_8hh" name="GenSelector.hh" local="yes" imported="no">GenSelector.hh</includes>
    <includes id="_jet_type_writer_8hh" name="JetTypeWriter.hh" local="yes" imported="no">JetTypeWriter.hh</includes>
    <includes id="_old_name_mapper_8hh" name="OldNameMapper.hh" local="yes" imported="no">OldNameMapper.hh</includes>
    <class kind="class">EventSelector</class>
  </compound>
  <compound kind="file">
    <name>FatJetSelector.hh</name>
    <path>/.automount/home/home__home1/institut_3a/silva/NanoMUSiC/NanoMUSiC/PxlAnalyzer/Main/</path>
    <filename>_fat_jet_selector_8hh.html</filename>
    <includes id="_jet_selector_8hh" name="JetSelector.hh" local="yes" imported="no">JetSelector.hh</includes>
    <class kind="class">FatJetSelector</class>
  </compound>
  <compound kind="file">
    <name>GammaSelector.hh</name>
    <path>/.automount/home/home__home1/institut_3a/silva/NanoMUSiC/NanoMUSiC/PxlAnalyzer/Main/</path>
    <filename>_gamma_selector_8hh.html</filename>
    <includes id="_effective_area_8hh" name="EffectiveArea.hh" local="yes" imported="no">EffectiveArea.hh</includes>
    <includes id="_object_selector_8hh" name="ObjectSelector.hh" local="yes" imported="no">ObjectSelector.hh</includes>
    <includes id="core_8hh" name="core.hh" local="yes" imported="no">Pxl/Pxl/interface/pxl/core.hh</includes>
    <includes id="hep_8hh" name="hep.hh" local="yes" imported="no">Pxl/Pxl/interface/pxl/hep.hh</includes>
    <includes id="_m_config_8hh" name="MConfig.hh" local="yes" imported="no">Tools/MConfig.hh</includes>
    <class kind="class">GammaSelector</class>
  </compound>
  <compound kind="file">
    <name>GenRecNameMap.hh</name>
    <path>/.automount/home/home__home1/institut_3a/silva/NanoMUSiC/NanoMUSiC/PxlAnalyzer/Main/</path>
    <filename>_gen_rec_name_map_8hh.html</filename>
    <includes id="_m_config_8hh" name="MConfig.hh" local="yes" imported="no">Tools/MConfig.hh</includes>
    <includes id="_tools_8hh" name="Tools.hh" local="yes" imported="no">Tools/Tools.hh</includes>
    <class kind="class">GenRecNameMap</class>
    <class kind="struct">GenRecNameMap::GenRecNamePair</class>
  </compound>
  <compound kind="file">
    <name>GenSelector.hh</name>
    <path>/.automount/home/home__home1/institut_3a/silva/NanoMUSiC/NanoMUSiC/PxlAnalyzer/Main/</path>
    <filename>_gen_selector_8hh.html</filename>
    <includes id="core_8hh" name="core.hh" local="yes" imported="no">Pxl/Pxl/interface/pxl/core.hh</includes>
    <includes id="hep_8hh" name="hep.hh" local="yes" imported="no">Pxl/Pxl/interface/pxl/hep.hh</includes>
    <includes id="_m_config_8hh" name="MConfig.hh" local="yes" imported="no">Tools/MConfig.hh</includes>
    <class kind="class">GenSelector</class>
  </compound>
  <compound kind="file">
    <name>JetResolution.hh</name>
    <path>/.automount/home/home__home1/institut_3a/silva/NanoMUSiC/NanoMUSiC/PxlAnalyzer/Main/</path>
    <filename>_jet_resolution_8hh.html</filename>
    <includes id="_binned_mapping_8hh" name="BinnedMapping.hh" local="yes" imported="no">BinnedMapping.hh</includes>
    <includes id="_m_config_8hh" name="MConfig.hh" local="yes" imported="no">Tools/MConfig.hh</includes>
    <class kind="class">JetResolution</class>
    <namespace>pxl</namespace>
  </compound>
  <compound kind="file">
    <name>JetSelector.hh</name>
    <path>/.automount/home/home__home1/institut_3a/silva/NanoMUSiC/NanoMUSiC/PxlAnalyzer/Main/</path>
    <filename>_jet_selector_8hh.html</filename>
    <includes id="_object_selector_8hh" name="ObjectSelector.hh" local="yes" imported="no">ObjectSelector.hh</includes>
    <includes id="core_8hh" name="core.hh" local="yes" imported="no">Pxl/Pxl/interface/pxl/core.hh</includes>
    <includes id="hep_8hh" name="hep.hh" local="yes" imported="no">Pxl/Pxl/interface/pxl/hep.hh</includes>
    <includes id="_m_config_8hh" name="MConfig.hh" local="yes" imported="no">Tools/MConfig.hh</includes>
    <class kind="class">JetSelector</class>
  </compound>
  <compound kind="file">
    <name>JetTypeWriter.hh</name>
    <path>/.automount/home/home__home1/institut_3a/silva/NanoMUSiC/NanoMUSiC/PxlAnalyzer/Main/</path>
    <filename>_jet_type_writer_8hh.html</filename>
    <includes id="_gen_rec_name_map_8hh" name="GenRecNameMap.hh" local="yes" imported="no">Main/GenRecNameMap.hh</includes>
    <includes id="core_8hh" name="core.hh" local="yes" imported="no">Pxl/Pxl/interface/pxl/core.hh</includes>
    <includes id="hep_8hh" name="hep.hh" local="yes" imported="no">Pxl/Pxl/interface/pxl/hep.hh</includes>
    <includes id="_m_config_8hh" name="MConfig.hh" local="yes" imported="no">Tools/MConfig.hh</includes>
    <class kind="class">JetTypeWriter</class>
  </compound>
  <compound kind="file">
    <name>METSelector.hh</name>
    <path>/.automount/home/home__home1/institut_3a/silva/NanoMUSiC/NanoMUSiC/PxlAnalyzer/Main/</path>
    <filename>_m_e_t_selector_8hh.html</filename>
    <includes id="_object_selector_8hh" name="ObjectSelector.hh" local="yes" imported="no">ObjectSelector.hh</includes>
    <includes id="core_8hh" name="core.hh" local="yes" imported="no">Pxl/Pxl/interface/pxl/core.hh</includes>
    <includes id="hep_8hh" name="hep.hh" local="yes" imported="no">Pxl/Pxl/interface/pxl/hep.hh</includes>
    <includes id="_m_config_8hh" name="MConfig.hh" local="yes" imported="no">Tools/MConfig.hh</includes>
    <class kind="class">METSelector</class>
  </compound>
  <compound kind="file">
    <name>MuonSelector.hh</name>
    <path>/.automount/home/home__home1/institut_3a/silva/NanoMUSiC/NanoMUSiC/PxlAnalyzer/Main/</path>
    <filename>_muon_selector_8hh.html</filename>
    <includes id="_effective_area_8hh" name="EffectiveArea.hh" local="yes" imported="no">EffectiveArea.hh</includes>
    <includes id="_object_selector_8hh" name="ObjectSelector.hh" local="yes" imported="no">ObjectSelector.hh</includes>
    <includes id="core_8hh" name="core.hh" local="yes" imported="no">Pxl/Pxl/interface/pxl/core.hh</includes>
    <includes id="hep_8hh" name="hep.hh" local="yes" imported="no">Pxl/Pxl/interface/pxl/hep.hh</includes>
    <includes id="_m_config_8hh" name="MConfig.hh" local="yes" imported="no">Tools/MConfig.hh</includes>
    <class kind="class">MuonSelector</class>
  </compound>
  <compound kind="file">
    <name>NanoAODReader.hh</name>
    <path>/.automount/home/home__home1/institut_3a/silva/NanoMUSiC/NanoMUSiC/PxlAnalyzer/Main/</path>
    <filename>_nano_a_o_d_reader_8hh.html</filename>
    <class kind="class">NanoAODReader</class>
    <member kind="function">
      <type>void</type>
      <name>simple_replace</name>
      <anchorfile>_nano_a_o_d_reader_8hh.html</anchorfile>
      <anchor>a8ba4f0f438310ae92c05f5ab96408872</anchor>
      <arglist>(std::string &amp;str_in, auto &amp;str_old, auto &amp;str_new)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ObjectSelector.hh</name>
    <path>/.automount/home/home__home1/institut_3a/silva/NanoMUSiC/NanoMUSiC/PxlAnalyzer/Main/</path>
    <filename>_object_selector_8hh.html</filename>
    <includes id="_m_config_8hh" name="MConfig.hh" local="yes" imported="no">MConfig.hh</includes>
    <includes id="_old_name_mapper_8hh" name="OldNameMapper.hh" local="yes" imported="no">OldNameMapper.hh</includes>
    <includes id="_scale_factor_8hh" name="ScaleFactor.hh" local="yes" imported="no">ScaleFactor.hh</includes>
    <class kind="class">ObjectSelector</class>
  </compound>
  <compound kind="file">
    <name>OldNameMapper.hh</name>
    <path>/.automount/home/home__home1/institut_3a/silva/NanoMUSiC/NanoMUSiC/PxlAnalyzer/Main/</path>
    <filename>_old_name_mapper_8hh.html</filename>
    <includes id="core_8hh" name="core.hh" local="yes" imported="no">Pxl/Pxl/interface/pxl/core.hh</includes>
    <includes id="hep_8hh" name="hep.hh" local="yes" imported="no">Pxl/Pxl/interface/pxl/hep.hh</includes>
    <class kind="class">OldNameMapper</class>
  </compound>
  <compound kind="file">
    <name>ParticleMatcher.hh</name>
    <path>/.automount/home/home__home1/institut_3a/silva/NanoMUSiC/NanoMUSiC/PxlAnalyzer/Main/</path>
    <filename>_particle_matcher_8hh.html</filename>
    <includes id="core_8hh" name="core.hh" local="yes" imported="no">Pxl/Pxl/interface/pxl/core.hh</includes>
    <includes id="hep_8hh" name="hep.hh" local="yes" imported="no">Pxl/Pxl/interface/pxl/hep.hh</includes>
    <includes id="_jet_subtype_criterion_8hh" name="JetSubtypeCriterion.hh" local="yes" imported="no">Tools/PXL/JetSubtypeCriterion.hh</includes>
    <includes id="_gen_rec_name_map_8hh" name="GenRecNameMap.hh" local="yes" imported="no">Main/GenRecNameMap.hh</includes>
    <class kind="class">ParticleMatcher</class>
    <namespace>Tools</namespace>
  </compound>
  <compound kind="file">
    <name>ParticleSplittingFunctions.hh</name>
    <path>/.automount/home/home__home1/institut_3a/silva/NanoMUSiC/NanoMUSiC/PxlAnalyzer/Main/</path>
    <filename>_particle_splitting_functions_8hh.html</filename>
    <includes id="core_8hh" name="core.hh" local="yes" imported="no">Pxl/Pxl/interface/pxl/core.hh</includes>
    <includes id="hep_8hh" name="hep.hh" local="yes" imported="no">Pxl/Pxl/interface/pxl/hep.hh</includes>
    <namespace>Splitting</namespace>
    <member kind="function">
      <type>void</type>
      <name>split</name>
      <anchorfile>namespace_splitting.html</anchorfile>
      <anchor>a8da68d30b5f5620d0fcef1fd004837a4</anchor>
      <arglist>(std::map&lt; std::string, std::vector&lt; pxl::Particle * &gt;&gt; &amp;map, const std::function&lt; bool(pxl::Particle *)&gt; &amp;splittingFunc, const std::string &amp;origName, const std::string &amp;name1, const std::string &amp;name2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>merge</name>
      <anchorfile>namespace_splitting.html</anchorfile>
      <anchor>aaa7e71ec7078723673fbc7d90eb1a237</anchor>
      <arglist>(std::map&lt; std::string, std::vector&lt; pxl::Particle * &gt;&gt; &amp;map, const std::string &amp;name1, const std::string &amp;name2, const std::string &amp;newName)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>merge</name>
      <anchorfile>namespace_splitting.html</anchorfile>
      <anchor>a0b0724d92287a9a0da57e14a4fb6e1e4</anchor>
      <arglist>(std::map&lt; std::string, std::vector&lt; pxl::Particle * &gt;&gt; &amp;map, const std::vector&lt; std::string &gt; &amp;names, const std::string &amp;newName)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>splitBjets</name>
      <anchorfile>namespace_splitting.html</anchorfile>
      <anchor>a50b956fa256c1a4d929fcc522894e229</anchor>
      <arglist>(std::map&lt; std::string, std::vector&lt; pxl::Particle * &gt;&gt; &amp;map)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>splitGammaEndcap</name>
      <anchorfile>namespace_splitting.html</anchorfile>
      <anchor>a4391a9943da061562cdea34ed91a7b92</anchor>
      <arglist>(std::map&lt; std::string, std::vector&lt; pxl::Particle * &gt;&gt; &amp;map)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>splitEleEndcap</name>
      <anchorfile>namespace_splitting.html</anchorfile>
      <anchor>a60d34750ad704251ca4375fa0e3cc2c1</anchor>
      <arglist>(std::map&lt; std::string, std::vector&lt; pxl::Particle * &gt;&gt; &amp;map)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>splitWfatjets</name>
      <anchorfile>namespace_splitting.html</anchorfile>
      <anchor>aaef2582f857d50761762e286a148ec3a</anchor>
      <arglist>(std::map&lt; std::string, std::vector&lt; pxl::Particle * &gt;&gt; &amp;map)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mergeWfatjets</name>
      <anchorfile>namespace_splitting.html</anchorfile>
      <anchor>a8d4d50824fa67344b62577f8f176969a</anchor>
      <arglist>(std::map&lt; std::string, std::vector&lt; pxl::Particle * &gt;&gt; &amp;map)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mergeBjets</name>
      <anchorfile>namespace_splitting.html</anchorfile>
      <anchor>a4811f3607723173a8ba442e8907979c9</anchor>
      <arglist>(std::map&lt; std::string, std::vector&lt; pxl::Particle * &gt;&gt; &amp;map)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mergeZ</name>
      <anchorfile>namespace_splitting.html</anchorfile>
      <anchor>aa6b7149e518a9e8ca86c54a9046e7dca</anchor>
      <arglist>(std::map&lt; std::string, std::vector&lt; pxl::Particle * &gt;&gt; &amp;map, double deltaM, std::list&lt; std::string &gt; particles, std::string newName)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>PDFTool.hh</name>
    <path>/.automount/home/home__home1/institut_3a/silva/NanoMUSiC/NanoMUSiC/PxlAnalyzer/Main/</path>
    <filename>_p_d_f_tool_8hh.html</filename>
    <includes id="_p_d_f_info_8hh" name="PDFInfo.hh" local="yes" imported="no">PDFInfo.hh</includes>
    <includes id="core_8hh" name="core.hh" local="yes" imported="no">Pxl/Pxl/interface/pxl/core.hh</includes>
    <includes id="hep_8hh" name="hep.hh" local="yes" imported="no">Pxl/Pxl/interface/pxl/hep.hh</includes>
    <class kind="class">pdf::PDFTool</class>
    <namespace>Tools</namespace>
    <namespace>pdf</namespace>
  </compound>
  <compound kind="file">
    <name>PhotonEffectiveArea.hh</name>
    <path>/.automount/home/home__home1/institut_3a/silva/NanoMUSiC/NanoMUSiC/PxlAnalyzer/Main/</path>
    <filename>_photon_effective_area_8hh.html</filename>
    <includes id="_binned_mapping_8hh" name="BinnedMapping.hh" local="yes" imported="no">BinnedMapping.hh</includes>
    <includes id="_m_config_8hh" name="MConfig.hh" local="yes" imported="no">Tools/MConfig.hh</includes>
    <class kind="class">PhotonEffectiveArea</class>
  </compound>
  <compound kind="file">
    <name>ReWeighter.hh</name>
    <path>/.automount/home/home__home1/institut_3a/silva/NanoMUSiC/NanoMUSiC/PxlAnalyzer/Main/</path>
    <filename>_re_weighter_8hh.html</filename>
    <includes id="core_8hh" name="core.hh" local="yes" imported="no">Pxl/Pxl/interface/pxl/core.hh</includes>
    <includes id="hep_8hh" name="hep.hh" local="yes" imported="no">Pxl/Pxl/interface/pxl/hep.hh</includes>
    <class kind="class">ReWeighter</class>
    <namespace>Tools</namespace>
  </compound>
  <compound kind="file">
    <name>RunLumiRanges.hh</name>
    <path>/.automount/home/home__home1/institut_3a/silva/NanoMUSiC/NanoMUSiC/PxlAnalyzer/Main/</path>
    <filename>_run_lumi_ranges_8hh.html</filename>
    <class kind="class">lumi::bad_config</class>
    <class kind="class">lumi::LumiRanges</class>
    <class kind="class">lumi::RunLumiRanges</class>
    <namespace>lumi</namespace>
    <member kind="typedef">
      <type>unsigned long</type>
      <name>ID</name>
      <anchorfile>namespacelumi.html</anchorfile>
      <anchor>ab421167e7e4d0729e04e038f04f430cc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ScaleFactor.hh</name>
    <path>/.automount/home/home__home1/institut_3a/silva/NanoMUSiC/NanoMUSiC/PxlAnalyzer/Main/</path>
    <filename>_scale_factor_8hh.html</filename>
    <includes id="core_8hh" name="core.hh" local="yes" imported="no">Pxl/Pxl/interface/pxl/core.hh</includes>
    <includes id="hep_8hh" name="hep.hh" local="yes" imported="no">Pxl/Pxl/interface/pxl/hep.hh</includes>
    <includes id="_m_config_8hh" name="MConfig.hh" local="yes" imported="no">MConfig.hh</includes>
    <class kind="class">ScaleFactor</class>
  </compound>
  <compound kind="file">
    <name>SkipEvents.hh</name>
    <path>/.automount/home/home__home1/institut_3a/silva/NanoMUSiC/NanoMUSiC/PxlAnalyzer/Main/</path>
    <filename>_skip_events_8hh.html</filename>
    <class kind="class">SkipEvents</class>
    <namespace>Tools</namespace>
  </compound>
  <compound kind="file">
    <name>Systematics.hh</name>
    <path>/.automount/home/home__home1/institut_3a/silva/NanoMUSiC/NanoMUSiC/PxlAnalyzer/Main/</path>
    <filename>_systematics_8hh.html</filename>
    <includes id="_gen_rec_name_map_8hh" name="GenRecNameMap.hh" local="yes" imported="no">GenRecNameMap.hh</includes>
    <includes id="_jet_resolution_8hh" name="JetResolution.hh" local="yes" imported="no">JetResolution.hh</includes>
    <includes id="core_8hh" name="core.hh" local="yes" imported="no">Pxl/Pxl/interface/pxl/core.hh</includes>
    <includes id="hep_8hh" name="hep.hh" local="yes" imported="no">Pxl/Pxl/interface/pxl/hep.hh</includes>
    <includes id="_systematics_info_8hh" name="SystematicsInfo.hh" local="yes" imported="no">SystematicsInfo.hh</includes>
    <includes id="_tools_8hh" name="Tools.hh" local="yes" imported="no">Tools.hh</includes>
    <includes id="_m_config_8hh" name="MConfig.hh" local="yes" imported="no">Tools/MConfig.hh</includes>
    <class kind="class">Systematics</class>
  </compound>
  <compound kind="file">
    <name>SystematicsInfo.hh</name>
    <path>/.automount/home/home__home1/institut_3a/silva/NanoMUSiC/NanoMUSiC/PxlAnalyzer/Main/</path>
    <filename>_systematics_info_8hh.html</filename>
    <includes id="core_8hh" name="core.hh" local="yes" imported="no">Pxl/Pxl/interface/pxl/core.hh</includes>
    <includes id="hep_8hh" name="hep.hh" local="yes" imported="no">Pxl/Pxl/interface/pxl/hep.hh</includes>
    <class kind="class">SystematicsInfo</class>
  </compound>
  <compound kind="file">
    <name>TauSelector.hh</name>
    <path>/.automount/home/home__home1/institut_3a/silva/NanoMUSiC/NanoMUSiC/PxlAnalyzer/Main/</path>
    <filename>_tau_selector_8hh.html</filename>
    <includes id="_object_selector_8hh" name="ObjectSelector.hh" local="yes" imported="no">ObjectSelector.hh</includes>
    <includes id="core_8hh" name="core.hh" local="yes" imported="no">Pxl/Pxl/interface/pxl/core.hh</includes>
    <includes id="hep_8hh" name="hep.hh" local="yes" imported="no">Pxl/Pxl/interface/pxl/hep.hh</includes>
    <includes id="_m_config_8hh" name="MConfig.hh" local="yes" imported="no">Tools/MConfig.hh</includes>
    <class kind="class">TauSelector</class>
  </compound>
  <compound kind="file">
    <name>TriggerGroup.hh</name>
    <path>/.automount/home/home__home1/institut_3a/silva/NanoMUSiC/NanoMUSiC/PxlAnalyzer/Main/</path>
    <filename>_trigger_group_8hh.html</filename>
    <includes id="_m_config_8hh" name="MConfig.hh" local="yes" imported="no">Tools/MConfig.hh</includes>
    <class kind="class">TriggerGroup</class>
    <namespace>pxl</namespace>
  </compound>
  <compound kind="file">
    <name>TriggerSelector.hh</name>
    <path>/.automount/home/home__home1/institut_3a/silva/NanoMUSiC/NanoMUSiC/PxlAnalyzer/Main/</path>
    <filename>_trigger_selector_8hh.html</filename>
    <includes id="_m_config_8hh" name="MConfig.hh" local="yes" imported="no">Tools/MConfig.hh</includes>
    <includes id="_tools_8hh" name="Tools.hh" local="yes" imported="no">Tools/Tools.hh</includes>
    <includes id="_trigger_group_8hh" name="TriggerGroup.hh" local="yes" imported="no">TriggerGroup.hh</includes>
    <class kind="class">TriggerSelector</class>
    <namespace>pxl</namespace>
  </compound>
  <compound kind="file">
    <name>core.hh</name>
    <path>/.automount/home/home__home1/institut_3a/silva/NanoMUSiC/NanoMUSiC/PxlAnalyzer/Pxl/Pxl/interface/pxl/</path>
    <filename>core_8hh.html</filename>
    <includes id="_basic3_vector_8hh" name="Basic3Vector.hh" local="yes" imported="no">Pxl/Pxl/interface/pxl/core/Basic3Vector.hh</includes>
    <includes id="_basic_container_8hh" name="BasicContainer.hh" local="yes" imported="no">Pxl/Pxl/interface/pxl/core/BasicContainer.hh</includes>
    <includes id="_basic_matrix_8hh" name="BasicMatrix.hh" local="yes" imported="no">Pxl/Pxl/interface/pxl/core/BasicMatrix.hh</includes>
    <includes id="_basic_n_vector_8hh" name="BasicNVector.hh" local="yes" imported="no">Pxl/Pxl/interface/pxl/core/BasicNVector.hh</includes>
    <includes id="_chunk_reader_8hh" name="ChunkReader.hh" local="yes" imported="no">Pxl/Pxl/interface/pxl/core/ChunkReader.hh</includes>
    <includes id="_chunk_writer_8hh" name="ChunkWriter.hh" local="yes" imported="no">Pxl/Pxl/interface/pxl/core/ChunkWriter.hh</includes>
    <includes id="_configuration_8hh" name="Configuration.hh" local="yes" imported="no">Pxl/Pxl/interface/pxl/core/Configuration.hh</includes>
    <includes id="_core_8hh" name="Core.hh" local="yes" imported="no">Pxl/Pxl/interface/pxl/core/Core.hh</includes>
    <includes id="_event_8hh" name="Event.hh" local="yes" imported="no">Pxl/Pxl/interface/pxl/core/Event.hh</includes>
    <includes id="_file_8hh" name="File.hh" local="yes" imported="no">Pxl/Pxl/interface/pxl/core/File.hh</includes>
    <includes id="_filter_8hh" name="Filter.hh" local="yes" imported="no">Pxl/Pxl/interface/pxl/core/Filter.hh</includes>
    <includes id="_generic_input_handler_8hh" name="GenericInputHandler.hh" local="yes" imported="no">Pxl/Pxl/interface/pxl/core/GenericInputHandler.hh</includes>
    <includes id="_generic_output_handler_8hh" name="GenericOutputHandler.hh" local="yes" imported="no">Pxl/Pxl/interface/pxl/core/GenericOutputHandler.hh</includes>
    <includes id="_id_8hh" name="Id.hh" local="yes" imported="no">Pxl/Pxl/interface/pxl/core/Id.hh</includes>
    <includes id="_information_chunk_8hh" name="InformationChunk.hh" local="yes" imported="no">Pxl/Pxl/interface/pxl/core/InformationChunk.hh</includes>
    <includes id="_input_file_8hh" name="InputFile.hh" local="yes" imported="no">Pxl/Pxl/interface/pxl/core/InputFile.hh</includes>
    <includes id="_input_handler_8hh" name="InputHandler.hh" local="yes" imported="no">Pxl/Pxl/interface/pxl/core/InputHandler.hh</includes>
    <includes id="_lorentz_vector_8hh" name="LorentzVector.hh" local="yes" imported="no">Pxl/Pxl/interface/pxl/core/LorentzVector.hh</includes>
    <includes id="_message_dispatcher_8hh" name="MessageDispatcher.hh" local="yes" imported="no">Pxl/Pxl/interface/pxl/core/MessageDispatcher.hh</includes>
    <includes id="_named_t_m_p_file_8hh" name="NamedTMPFile.hh" local="yes" imported="no">Pxl/Pxl/interface/pxl/core/NamedTMPFile.hh</includes>
    <includes id="_object_8hh" name="Object.hh" local="yes" imported="no">Pxl/Pxl/interface/pxl/core/Object.hh</includes>
    <includes id="_object_factory_8hh" name="ObjectFactory.hh" local="yes" imported="no">Pxl/Pxl/interface/pxl/core/ObjectFactory.hh</includes>
    <includes id="_object_manager_8hh" name="ObjectManager.hh" local="yes" imported="no">Pxl/Pxl/interface/pxl/core/ObjectManager.hh</includes>
    <includes id="_object_owner_8hh" name="ObjectOwner.hh" local="yes" imported="no">Pxl/Pxl/interface/pxl/core/ObjectOwner.hh</includes>
    <includes id="_output_file_8hh" name="OutputFile.hh" local="yes" imported="no">Pxl/Pxl/interface/pxl/core/OutputFile.hh</includes>
    <includes id="_output_handler_8hh" name="OutputHandler.hh" local="yes" imported="no">Pxl/Pxl/interface/pxl/core/OutputHandler.hh</includes>
    <includes id="_plugin_manager_8hh" name="PluginManager.hh" local="yes" imported="no">Pxl/Pxl/interface/pxl/core/PluginManager.hh</includes>
    <includes id="_random_8hh" name="Random.hh" local="yes" imported="no">Pxl/Pxl/interface/pxl/core/Random.hh</includes>
    <includes id="_relations_8hh" name="Relations.hh" local="yes" imported="no">Pxl/Pxl/interface/pxl/core/Relations.hh</includes>
    <includes id="_relative_8hh" name="Relative.hh" local="yes" imported="no">Pxl/Pxl/interface/pxl/core/Relative.hh</includes>
    <includes id="_rotation_matrix_8hh" name="RotationMatrix.hh" local="yes" imported="no">Pxl/Pxl/interface/pxl/core/RotationMatrix.hh</includes>
    <includes id="_serializable_8hh" name="Serializable.hh" local="yes" imported="no">Pxl/Pxl/interface/pxl/core/Serializable.hh</includes>
    <includes id="_soft_relations_8hh" name="SoftRelations.hh" local="yes" imported="no">Pxl/Pxl/interface/pxl/core/SoftRelations.hh</includes>
    <includes id="_stream_8hh" name="Stream.hh" local="yes" imported="no">Pxl/Pxl/interface/pxl/core/Stream.hh</includes>
    <includes id="_tokenizer_8hh" name="Tokenizer.hh" local="yes" imported="no">Pxl/Pxl/interface/pxl/core/Tokenizer.hh</includes>
    <includes id="_user_record_8hh" name="UserRecord.hh" local="yes" imported="no">Pxl/Pxl/interface/pxl/core/UserRecord.hh</includes>
    <includes id="_variant_8hh" name="Variant.hh" local="yes" imported="no">Pxl/Pxl/interface/pxl/core/Variant.hh</includes>
    <includes id="_wk_ptr_base_8hh" name="WkPtrBase.hh" local="yes" imported="no">Pxl/Pxl/interface/pxl/core/WkPtrBase.hh</includes>
    <includes id="functions_8hh" name="functions.hh" local="yes" imported="no">Pxl/Pxl/interface/pxl/core/functions.hh</includes>
    <includes id="logging_8hh" name="logging.hh" local="yes" imported="no">Pxl/Pxl/interface/pxl/core/logging.hh</includes>
    <includes id="macros_8hh" name="macros.hh" local="yes" imported="no">Pxl/Pxl/interface/pxl/core/macros.hh</includes>
    <includes id="weak__ptr_8hh" name="weak_ptr.hh" local="yes" imported="no">Pxl/Pxl/interface/pxl/core/weak_ptr.hh</includes>
  </compound>
  <compound kind="file">
    <name>Basic3Vector.hh</name>
    <path>/.automount/home/home__home1/institut_3a/silva/NanoMUSiC/NanoMUSiC/PxlAnalyzer/Pxl/Pxl/interface/pxl/core/</path>
    <filename>_basic3_vector_8hh.html</filename>
    <includes id="macros_8hh" name="macros.hh" local="yes" imported="no">Pxl/Pxl/interface/pxl/core/macros.hh</includes>
    <includes id="_stream_8hh" name="Stream.hh" local="yes" imported="no">Pxl/Pxl/interface/pxl/core/Stream.hh</includes>
    <class kind="class">pxl::Basic3Vector</class>
    <namespace>pxl</namespace>
    <member kind="function">
      <type>PXL_DLL_EXPORT bool</type>
      <name>operator==</name>
      <anchorfile>namespacepxl.html</anchorfile>
      <anchor>a23aca4365b37065fd14de599e26dc3f3</anchor>
      <arglist>(const Basic3Vector &amp;obj1, const Basic3Vector &amp;obj2)</arglist>
    </member>
    <member kind="function">
      <type>PXL_DLL_EXPORT bool</type>
      <name>operator!=</name>
      <anchorfile>namespacepxl.html</anchorfile>
      <anchor>a4c8d346aaa14d6ebaeac2183b6184ab9</anchor>
      <arglist>(const Basic3Vector &amp;obj1, const Basic3Vector &amp;obj2)</arglist>
    </member>
    <member kind="function">
      <type>PXL_DLL_EXPORT Basic3Vector</type>
      <name>operator*</name>
      <anchorfile>namespacepxl.html</anchorfile>
      <anchor>aba142ab2f56d4095bf5ba126247dd344</anchor>
      <arglist>(const double skalar, const Basic3Vector &amp;vec)</arglist>
    </member>
    <member kind="function">
      <type>PXL_DLL_EXPORT Basic3Vector</type>
      <name>operator*</name>
      <anchorfile>namespacepxl.html</anchorfile>
      <anchor>aa4b1e1c118580dd6e3472eb697e13114</anchor>
      <arglist>(const Basic3Vector &amp;vec, const double skalar)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>BasicContainer.hh</name>
    <path>/.automount/home/home__home1/institut_3a/silva/NanoMUSiC/NanoMUSiC/PxlAnalyzer/Pxl/Pxl/interface/pxl/core/</path>
    <filename>_basic_container_8hh.html</filename>
    <includes id="macros_8hh" name="macros.hh" local="yes" imported="no">Pxl/Pxl/interface/pxl/core/macros.hh</includes>
    <includes id="_user_record_8hh" name="UserRecord.hh" local="yes" imported="no">Pxl/Pxl/interface/pxl/core/UserRecord.hh</includes>
    <includes id="_object_factory_8hh" name="ObjectFactory.hh" local="yes" imported="no">Pxl/Pxl/interface/pxl/core/ObjectFactory.hh</includes>
    <includes id="_serializable_8hh" name="Serializable.hh" local="yes" imported="no">Pxl/Pxl/interface/pxl/core/Serializable.hh</includes>
    <class kind="class">pxl::BasicContainer</class>
    <namespace>pxl</namespace>
  </compound>
  <compound kind="file">
    <name>BasicMatrix.hh</name>
    <path>/.automount/home/home__home1/institut_3a/silva/NanoMUSiC/NanoMUSiC/PxlAnalyzer/Pxl/Pxl/interface/pxl/core/</path>
    <filename>_basic_matrix_8hh.html</filename>
    <includes id="macros_8hh" name="macros.hh" local="yes" imported="no">Pxl/Pxl/interface/pxl/core/macros.hh</includes>
    <includes id="_basic3_vector_8hh" name="Basic3Vector.hh" local="yes" imported="no">Pxl/Pxl/interface/pxl/core/Basic3Vector.hh</includes>
    <includes id="_basic_n_vector_8hh" name="BasicNVector.hh" local="yes" imported="no">Pxl/Pxl/interface/pxl/core/BasicNVector.hh</includes>
    <includes id="_object_factory_8hh" name="ObjectFactory.hh" local="yes" imported="no">Pxl/Pxl/interface/pxl/core/ObjectFactory.hh</includes>
    <includes id="_serializable_8hh" name="Serializable.hh" local="yes" imported="no">Pxl/Pxl/interface/pxl/core/Serializable.hh</includes>
    <includes id="_stream_8hh" name="Stream.hh" local="yes" imported="no">Pxl/Pxl/interface/pxl/core/Stream.hh</includes>
    <class kind="class">pxl::BasicMatrix</class>
    <namespace>pxl</namespace>
    <member kind="enumeration">
      <type></type>
      <name>StorageOrder</name>
      <anchorfile>namespacepxl.html</anchorfile>
      <anchor>af7ae1a96f4c70538f6387257fd6f9fd8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ROWMAJOR</name>
      <anchorfile>namespacepxl.html</anchorfile>
      <anchor>af7ae1a96f4c70538f6387257fd6f9fd8a3ea06d453c92b780c1e2604391fea557</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>COLUMNMAJOR</name>
      <anchorfile>namespacepxl.html</anchorfile>
      <anchor>af7ae1a96f4c70538f6387257fd6f9fd8ac1082ce93c99232eb3db733d13b92a43</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>PXL_DLL_EXPORT bool</type>
      <name>operator==</name>
      <anchorfile>namespacepxl.html</anchorfile>
      <anchor>a3ff2c9f172bc71f021aa95e6c796badf</anchor>
      <arglist>(const BasicMatrix &amp;obj1, const BasicMatrix &amp;obj2)</arglist>
    </member>
    <member kind="function">
      <type>PXL_DLL_EXPORT bool</type>
      <name>operator!=</name>
      <anchorfile>namespacepxl.html</anchorfile>
      <anchor>a939db489ab19f05274af15d08f93b816</anchor>
      <arglist>(const BasicMatrix &amp;obj1, const BasicMatrix &amp;obj2)</arglist>
    </member>
    <member kind="function">
      <type>PXL_DLL_EXPORT BasicMatrix</type>
      <name>operator*</name>
      <anchorfile>namespacepxl.html</anchorfile>
      <anchor>acece6400a95843be6e4398d0fab28b2e</anchor>
      <arglist>(double skalar, const BasicMatrix &amp;vec)</arglist>
    </member>
    <member kind="function">
      <type>PXL_DLL_EXPORT BasicMatrix</type>
      <name>operator*</name>
      <anchorfile>namespacepxl.html</anchorfile>
      <anchor>a66b66028508605fb49583cc6a8116ffa</anchor>
      <arglist>(const BasicMatrix &amp;vec, double skalar)</arglist>
    </member>
    <member kind="function">
      <type>PXL_DLL_EXPORT BasicNVector</type>
      <name>operator*</name>
      <anchorfile>namespacepxl.html</anchorfile>
      <anchor>a5e75cd305a915bbc5530368dabeda6e9</anchor>
      <arglist>(const BasicMatrix &amp;M, const BasicNVector &amp;vec)</arglist>
    </member>
    <member kind="function">
      <type>PXL_DLL_EXPORT Basic3Vector</type>
      <name>operator*</name>
      <anchorfile>namespacepxl.html</anchorfile>
      <anchor>a5f95421bd897ed7ffded50b12a574638</anchor>
      <arglist>(const BasicMatrix &amp;M, const Basic3Vector &amp;vec)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>BasicNVector.hh</name>
    <path>/.automount/home/home__home1/institut_3a/silva/NanoMUSiC/NanoMUSiC/PxlAnalyzer/Pxl/Pxl/interface/pxl/core/</path>
    <filename>_basic_n_vector_8hh.html</filename>
    <includes id="macros_8hh" name="macros.hh" local="yes" imported="no">Pxl/Pxl/interface/pxl/core/macros.hh</includes>
    <includes id="_basic3_vector_8hh" name="Basic3Vector.hh" local="yes" imported="no">Pxl/Pxl/interface/pxl/core/Basic3Vector.hh</includes>
    <includes id="_object_factory_8hh" name="ObjectFactory.hh" local="yes" imported="no">Pxl/Pxl/interface/pxl/core/ObjectFactory.hh</includes>
    <includes id="_serializable_8hh" name="Serializable.hh" local="yes" imported="no">Pxl/Pxl/interface/pxl/core/Serializable.hh</includes>
    <includes id="_stream_8hh" name="Stream.hh" local="yes" imported="no">Pxl/Pxl/interface/pxl/core/Stream.hh</includes>
    <class kind="class">pxl::BasicNVector</class>
    <namespace>pxl</namespace>
    <member kind="function">
      <type>PXL_DLL_EXPORT bool</type>
      <name>operator==</name>
      <anchorfile>namespacepxl.html</anchorfile>
      <anchor>a59e6851abb3c85074cffa37dcb2387e9</anchor>
      <arglist>(const BasicNVector &amp;obj1, const BasicNVector &amp;obj2)</arglist>
    </member>
    <member kind="function">
      <type>PXL_DLL_EXPORT bool</type>
      <name>operator!=</name>
      <anchorfile>namespacepxl.html</anchorfile>
      <anchor>abe449f184b052af5d9c8e6aa00ca3776</anchor>
      <arglist>(const BasicNVector &amp;obj1, const BasicNVector &amp;obj2)</arglist>
    </member>
    <member kind="function">
      <type>PXL_DLL_EXPORT BasicNVector</type>
      <name>operator*</name>
      <anchorfile>namespacepxl.html</anchorfile>
      <anchor>abfb0f98d28b925598cd3c2695c092339</anchor>
      <arglist>(double skalar, const BasicNVector &amp;vec)</arglist>
    </member>
    <member kind="function">
      <type>PXL_DLL_EXPORT BasicNVector</type>
      <name>operator*</name>
      <anchorfile>namespacepxl.html</anchorfile>
      <anchor>a4dd7157cbcb3f47b9e6c144c58567351</anchor>
      <arglist>(const BasicNVector &amp;vec, double skalar)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ChunkReader.hh</name>
    <path>/.automount/home/home__home1/institut_3a/silva/NanoMUSiC/NanoMUSiC/PxlAnalyzer/Pxl/Pxl/interface/pxl/core/</path>
    <filename>_chunk_reader_8hh.html</filename>
    <includes id="macros_8hh" name="macros.hh" local="yes" imported="no">Pxl/Pxl/interface/pxl/core/macros.hh</includes>
    <includes id="_file_8hh" name="File.hh" local="yes" imported="no">Pxl/Pxl/interface/pxl/core/File.hh</includes>
    <includes id="_stream_8hh" name="Stream.hh" local="yes" imported="no">Pxl/Pxl/interface/pxl/core/Stream.hh</includes>
    <class kind="class">pxl::ChunkReader</class>
    <namespace>pxl</namespace>
    <namespace>pxl::skipSpace</namespace>
    <member kind="define">
      <type>#define</type>
      <name>iotl__iStreamer__lengthUnzipBuffer</name>
      <anchorfile>_chunk_reader_8hh.html</anchorfile>
      <anchor>ac05379669076d01b57361e37fe2afc35</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>skipMode</name>
      <anchorfile>namespacepxl_1_1skip_space.html</anchorfile>
      <anchor>a8d9fe41b00cc2d3e18653134f24faa42</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>off</name>
      <anchorfile>namespacepxl_1_1skip_space.html</anchorfile>
      <anchor>a8d9fe41b00cc2d3e18653134f24faa42a277c4676ab05227e8dfbf87236c4b8ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>on</name>
      <anchorfile>namespacepxl_1_1skip_space.html</anchorfile>
      <anchor>a8d9fe41b00cc2d3e18653134f24faa42a54e9ed69d6e83394af322670a5b13e53</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ChunkWriter.hh</name>
    <path>/.automount/home/home__home1/institut_3a/silva/NanoMUSiC/NanoMUSiC/PxlAnalyzer/Pxl/Pxl/interface/pxl/core/</path>
    <filename>_chunk_writer_8hh.html</filename>
    <includes id="macros_8hh" name="macros.hh" local="yes" imported="no">Pxl/Pxl/interface/pxl/core/macros.hh</includes>
    <includes id="_file_8hh" name="File.hh" local="yes" imported="no">Pxl/Pxl/interface/pxl/core/File.hh</includes>
    <includes id="_stream_8hh" name="Stream.hh" local="yes" imported="no">Pxl/Pxl/interface/pxl/core/Stream.hh</includes>
    <class kind="class">pxl::ChunkWriter</class>
    <namespace>pxl</namespace>
  </compound>
  <compound kind="file">
    <name>config.hh</name>
    <path>/.automount/home/home__home1/institut_3a/silva/NanoMUSiC/NanoMUSiC/PxlAnalyzer/Pxl/Pxl/interface/pxl/core/</path>
    <filename>config_8hh.html</filename>
    <member kind="define">
      <type>#define</type>
      <name>PXL_MAJOR_VERSION</name>
      <anchorfile>config_8hh.html</anchorfile>
      <anchor>a698bca2c74f7f4d07eaf48f28f869cc4</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PXL_MINOR_VERSION</name>
      <anchorfile>config_8hh.html</anchorfile>
      <anchor>ac7698b6ded17c16d016e9552e4f52a1c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PXL_FULL_VERSION</name>
      <anchorfile>config_8hh.html</anchorfile>
      <anchor>a47fdc3ed4929204300188a5dd3967d23</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PXL_MAJOR_VERSION_VALUE</name>
      <anchorfile>config_8hh.html</anchorfile>
      <anchor>a83f277a6ff4197dc293473c844bd3c60</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PXL_MINOR_VERSION_VALUE</name>
      <anchorfile>config_8hh.html</anchorfile>
      <anchor>ab9a365e1c3e15350f3516c1db519d668</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PXL_LIB_VERSION</name>
      <anchorfile>config_8hh.html</anchorfile>
      <anchor>a3abdafcc2909e1b50106e72dcc0c798e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ConfigLoader.hh</name>
    <path>/.automount/home/home__home1/institut_3a/silva/NanoMUSiC/NanoMUSiC/PxlAnalyzer/Pxl/Pxl/interface/pxl/core/</path>
    <filename>_config_loader_8hh.html</filename>
    <includes id="macros_8hh" name="macros.hh" local="yes" imported="no">Pxl/Pxl/interface/pxl/core/macros.hh</includes>
    <namespace>pxl</namespace>
    <member kind="function">
      <type>void PXL_DLL_EXPORT</type>
      <name>fillConfigFromSimpleIni</name>
      <anchorfile>namespacepxl.html</anchorfile>
      <anchor>a68546bc6b2c65ba1aaa012780e6912a8</anchor>
      <arglist>(const CSimpleIniA &amp;iniFile)</arglist>
    </member>
    <member kind="function">
      <type>void PXL_DLL_EXPORT</type>
      <name>loadDefaultConfigurations</name>
      <anchorfile>namespacepxl.html</anchorfile>
      <anchor>aea0ae9ab093941fcf705982e0dda3f74</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Configuration.hh</name>
    <path>/.automount/home/home__home1/institut_3a/silva/NanoMUSiC/NanoMUSiC/PxlAnalyzer/Pxl/Pxl/interface/pxl/core/</path>
    <filename>_configuration_8hh.html</filename>
    <includes id="_variant_8hh" name="Variant.hh" local="yes" imported="no">Pxl/Pxl/interface/pxl/core/Variant.hh</includes>
    <includes id="macros_8hh" name="macros.hh" local="yes" imported="no">Pxl/Pxl/interface/pxl/core/macros.hh</includes>
    <class kind="class">pxl::Configuration</class>
    <namespace>pxl</namespace>
  </compound>
  <compound kind="file">
    <name>Core.hh</name>
    <path>/.automount/home/home__home1/institut_3a/silva/NanoMUSiC/NanoMUSiC/PxlAnalyzer/Pxl/Pxl/interface/pxl/core/</path>
    <filename>_core_8hh.html</filename>
    <includes id="macros_8hh" name="macros.hh" local="yes" imported="no">Pxl/Pxl/interface/pxl/core/macros.hh</includes>
    <class kind="class">pxl::Core</class>
    <namespace>pxl</namespace>
  </compound>
  <compound kind="file">
    <name>Event.hh</name>
    <path>/.automount/home/home__home1/institut_3a/silva/NanoMUSiC/NanoMUSiC/PxlAnalyzer/Pxl/Pxl/interface/pxl/core/</path>
    <filename>_event_8hh.html</filename>
    <includes id="macros_8hh" name="macros.hh" local="yes" imported="no">Pxl/Pxl/interface/pxl/core/macros.hh</includes>
    <includes id="_object_factory_8hh" name="ObjectFactory.hh" local="yes" imported="no">Pxl/Pxl/interface/pxl/core/ObjectFactory.hh</includes>
    <includes id="_object_owner_8hh" name="ObjectOwner.hh" local="yes" imported="no">Pxl/Pxl/interface/pxl/core/ObjectOwner.hh</includes>
    <includes id="_serializable_8hh" name="Serializable.hh" local="yes" imported="no">Pxl/Pxl/interface/pxl/core/Serializable.hh</includes>
    <includes id="_user_record_8hh" name="UserRecord.hh" local="yes" imported="no">Pxl/Pxl/interface/pxl/core/UserRecord.hh</includes>
    <class kind="class">pxl::Event</class>
    <namespace>pxl</namespace>
  </compound>
  <compound kind="file">
    <name>File.hh</name>
    <path>/.automount/home/home__home1/institut_3a/silva/NanoMUSiC/NanoMUSiC/PxlAnalyzer/Pxl/Pxl/interface/pxl/core/</path>
    <filename>_file_8hh.html</filename>
    <includes id="functions_8hh" name="functions.hh" local="yes" imported="no">Pxl/Pxl/interface/pxl/core/functions.hh</includes>
    <includes id="macros_8hh" name="macros.hh" local="yes" imported="no">Pxl/Pxl/interface/pxl/core/macros.hh</includes>
    <class kind="class">pxl::FileImpl</class>
    <class kind="class">pxl::File</class>
    <namespace>pxl</namespace>
    <member kind="enumeration">
      <type></type>
      <name>SeekDirectionEnum</name>
      <anchorfile>namespacepxl.html</anchorfile>
      <anchor>a50b4b5d7346adc40cc4674a15610a03d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SeekBegin</name>
      <anchorfile>namespacepxl.html</anchorfile>
      <anchor>a50b4b5d7346adc40cc4674a15610a03dac831f6540d1fcaa875aa6f3c1ba32b67</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SeekCurrent</name>
      <anchorfile>namespacepxl.html</anchorfile>
      <anchor>a50b4b5d7346adc40cc4674a15610a03da4c0e0cc66408660013cfbec168b304d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SeekEnd</name>
      <anchorfile>namespacepxl.html</anchorfile>
      <anchor>a50b4b5d7346adc40cc4674a15610a03daa485595b61952ce9b1c1f1572d9c3372</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>OpenModeEnum</name>
      <anchorfile>namespacepxl.html</anchorfile>
      <anchor>ae58cd884d34dd6dc5807bde796b22ea9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OpenRead</name>
      <anchorfile>namespacepxl.html</anchorfile>
      <anchor>ae58cd884d34dd6dc5807bde796b22ea9a33d6bf6a067fd7b4d74c242f0e9c5a1e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OpenWrite</name>
      <anchorfile>namespacepxl.html</anchorfile>
      <anchor>ae58cd884d34dd6dc5807bde796b22ea9adc85e9afb6f588de527fd8b80640c2d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OpenOverwrite</name>
      <anchorfile>namespacepxl.html</anchorfile>
      <anchor>ae58cd884d34dd6dc5807bde796b22ea9a196d5ae3cd70d85361ffcdf2d311ce57</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>FileFactory.hh</name>
    <path>/.automount/home/home__home1/institut_3a/silva/NanoMUSiC/NanoMUSiC/PxlAnalyzer/Pxl/Pxl/interface/pxl/core/</path>
    <filename>_file_factory_8hh.html</filename>
    <includes id="macros_8hh" name="macros.hh" local="yes" imported="no">Pxl/Pxl/interface/pxl/core/macros.hh</includes>
    <includes id="_file_8hh" name="File.hh" local="yes" imported="no">Pxl/Pxl/interface/pxl/core/File.hh</includes>
    <includes id="_id_8hh" name="Id.hh" local="yes" imported="no">Pxl/Pxl/interface/pxl/core/Id.hh</includes>
    <class kind="class">pxl::FileFactory</class>
    <class kind="class">pxl::FileProducerInterface</class>
    <class kind="class">pxl::FileProducerTemplate</class>
    <namespace>pxl</namespace>
  </compound>
  <compound kind="file">
    <name>Filter.hh</name>
    <path>/.automount/home/home__home1/institut_3a/silva/NanoMUSiC/NanoMUSiC/PxlAnalyzer/Pxl/Pxl/interface/pxl/core/</path>
    <filename>_filter_8hh.html</filename>
    <includes id="macros_8hh" name="macros.hh" local="yes" imported="no">Pxl/Pxl/interface/pxl/core/macros.hh</includes>
    <includes id="_object_owner_8hh" name="ObjectOwner.hh" local="yes" imported="no">Pxl/Pxl/interface/pxl/core/ObjectOwner.hh</includes>
    <class kind="class">pxl::ComparatorInterface</class>
    <class kind="class">pxl::FilterCriterionInterface</class>
    <class kind="class">pxl::Filter</class>
    <namespace>pxl</namespace>
  </compound>
  <compound kind="file">
    <name>functions.hh</name>
    <path>/.automount/home/home__home1/institut_3a/silva/NanoMUSiC/NanoMUSiC/PxlAnalyzer/Pxl/Pxl/interface/pxl/core/</path>
    <filename>functions_8hh.html</filename>
    <includes id="macros_8hh" name="macros.hh" local="yes" imported="no">Pxl/Pxl/interface/pxl/core/macros.hh</includes>
    <namespace>pxl</namespace>
    <member kind="function">
      <type>PXL_DLL_EXPORT double</type>
      <name>getCpuTime</name>
      <anchorfile>namespacepxl.html</anchorfile>
      <anchor>a72150d45d91cfa83646673ed33dd54c7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string PXL_DLL_EXPORT</type>
      <name>trim_right</name>
      <anchorfile>namespacepxl.html</anchorfile>
      <anchor>ad6862ebbad2672bf7da7cffb51c85417</anchor>
      <arglist>(const std::string &amp;s, const std::string &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>std::string PXL_DLL_EXPORT</type>
      <name>trim_left</name>
      <anchorfile>namespacepxl.html</anchorfile>
      <anchor>a7d5f1c395ab6616a0fd0cdd56f30a60f</anchor>
      <arglist>(const std::string &amp;s, const std::string &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>std::string PXL_DLL_EXPORT</type>
      <name>trim</name>
      <anchorfile>namespacepxl.html</anchorfile>
      <anchor>a46971e4f31f6cd630377d2751c724b5c</anchor>
      <arglist>(const std::string &amp;s, const std::string &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>std::string PXL_DLL_EXPORT</type>
      <name>trim</name>
      <anchorfile>namespacepxl.html</anchorfile>
      <anchor>afadca93d49c9f4ecff0cd62345bdd8f6</anchor>
      <arglist>(const std::string &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>void PXL_DLL_EXPORT</type>
      <name>explode</name>
      <anchorfile>namespacepxl.html</anchorfile>
      <anchor>ad8e5398846f5604a3fbba3eb3b1703ea</anchor>
      <arglist>(const std::string &amp;s, std::vector&lt; std::string &gt; &amp;v, const bool trim_spaces, const std::string &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>PXL_DLL_EXPORT std::string</type>
      <name>implode</name>
      <anchorfile>namespacepxl.html</anchorfile>
      <anchor>a293bc85a0eca67f4a0f18d36bfe5290b</anchor>
      <arglist>(const std::vector&lt; std::string &gt; &amp;v, const std::string &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>std::string PXL_DLL_EXPORT</type>
      <name>expandEnvironmentVariables</name>
      <anchorfile>namespacepxl.html</anchorfile>
      <anchor>a21b5965003d046282ce19a0715a42f3b</anchor>
      <arglist>(const std::string &amp;input)</arglist>
    </member>
    <member kind="function">
      <type>PXL_DLL_EXPORT std::string &amp;</type>
      <name>replace</name>
      <anchorfile>namespacepxl.html</anchorfile>
      <anchor>a4c35b2d05f6fa9327599470e1a613fbe</anchor>
      <arglist>(std::string &amp;context, const std::string &amp;from, const std::string &amp;to)</arglist>
    </member>
    <member kind="function">
      <type>std::string PXL_DLL_EXPORT</type>
      <name>getParentDirectory</name>
      <anchorfile>namespacepxl.html</anchorfile>
      <anchor>a2cf21720566d475ff1c3a5fa3c292546</anchor>
      <arglist>(const std::string &amp;path)</arglist>
    </member>
    <member kind="function">
      <type>bool PXL_DLL_EXPORT</type>
      <name>createDirectory</name>
      <anchorfile>namespacepxl.html</anchorfile>
      <anchor>aa656b00bcfb11f066358deea2f491a7a</anchor>
      <arglist>(const std::string &amp;path)</arglist>
    </member>
    <member kind="function">
      <type>bool PXL_DLL_EXPORT</type>
      <name>isAbsolutePath</name>
      <anchorfile>namespacepxl.html</anchorfile>
      <anchor>a5d6b2310f2579cbf869d24087089c029</anchor>
      <arglist>(const std::string &amp;path)</arglist>
    </member>
    <member kind="function">
      <type>bool PXL_DLL_EXPORT</type>
      <name>isDirectory</name>
      <anchorfile>namespacepxl.html</anchorfile>
      <anchor>ac1bac77f87ec356165ef219b177c561e</anchor>
      <arglist>(const std::string &amp;path)</arglist>
    </member>
    <member kind="function">
      <type>bool PXL_DLL_EXPORT</type>
      <name>isFile</name>
      <anchorfile>namespacepxl.html</anchorfile>
      <anchor>affc92681eb5eaf2682a0cf923f34e94a</anchor>
      <arglist>(const std::string &amp;path)</arglist>
    </member>
    <member kind="function">
      <type>std::string PXL_DLL_EXPORT</type>
      <name>clearPathName</name>
      <anchorfile>namespacepxl.html</anchorfile>
      <anchor>ad5d9993a61a75cf187a21293014dd737</anchor>
      <arglist>(const std::string &amp;path)</arglist>
    </member>
    <member kind="function">
      <type>void PXL_DLL_EXPORT</type>
      <name>splitSchema</name>
      <anchorfile>namespacepxl.html</anchorfile>
      <anchor>a3d02b8420aa8cb883fadbc57fb30cdad</anchor>
      <arglist>(const std::string &amp;url, std::string &amp;schema, std::string &amp;path)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>safe_delete</name>
      <anchorfile>namespacepxl.html</anchorfile>
      <anchor>ae283a40e7bf5abf179d085f0791c0451</anchor>
      <arglist>(T *&amp;p)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>safe_string</name>
      <anchorfile>namespacepxl.html</anchorfile>
      <anchor>a03eb4c77adbea5e768476b4d8ed8fdf7</anchor>
      <arglist>(const char *ptr)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>GenericInputHandler.hh</name>
    <path>/.automount/home/home__home1/institut_3a/silva/NanoMUSiC/NanoMUSiC/PxlAnalyzer/Pxl/Pxl/interface/pxl/core/</path>
    <filename>_generic_input_handler_8hh.html</filename>
    <includes id="macros_8hh" name="macros.hh" local="yes" imported="no">Pxl/Pxl/interface/pxl/core/macros.hh</includes>
    <includes id="_chunk_reader_8hh" name="ChunkReader.hh" local="yes" imported="no">Pxl/Pxl/interface/pxl/core/ChunkReader.hh</includes>
    <includes id="_input_handler_8hh" name="InputHandler.hh" local="yes" imported="no">Pxl/Pxl/interface/pxl/core/InputHandler.hh</includes>
    <class kind="class">pxl::GenericInputHandler</class>
    <namespace>pxl</namespace>
  </compound>
  <compound kind="file">
    <name>GenericOutputHandler.hh</name>
    <path>/.automount/home/home__home1/institut_3a/silva/NanoMUSiC/NanoMUSiC/PxlAnalyzer/Pxl/Pxl/interface/pxl/core/</path>
    <filename>_generic_output_handler_8hh.html</filename>
    <includes id="macros_8hh" name="macros.hh" local="yes" imported="no">Pxl/Pxl/interface/pxl/core/macros.hh</includes>
    <includes id="_chunk_writer_8hh" name="ChunkWriter.hh" local="yes" imported="no">Pxl/Pxl/interface/pxl/core/ChunkWriter.hh</includes>
    <includes id="_output_handler_8hh" name="OutputHandler.hh" local="yes" imported="no">Pxl/Pxl/interface/pxl/core/OutputHandler.hh</includes>
    <class kind="class">pxl::GenericOutputHandler</class>
    <namespace>pxl</namespace>
  </compound>
  <compound kind="file">
    <name>Id.hh</name>
    <path>/.automount/home/home__home1/institut_3a/silva/NanoMUSiC/NanoMUSiC/PxlAnalyzer/Pxl/Pxl/interface/pxl/core/</path>
    <filename>_id_8hh.html</filename>
    <includes id="macros_8hh" name="macros.hh" local="yes" imported="no">Pxl/Pxl/interface/pxl/core/macros.hh</includes>
    <includes id="_random_8hh" name="Random.hh" local="yes" imported="no">Pxl/Pxl/interface/pxl/core/Random.hh</includes>
    <includes id="_stream_8hh" name="Stream.hh" local="yes" imported="no">Pxl/Pxl/interface/pxl/core/Stream.hh</includes>
    <class kind="class">pxl::Id</class>
    <namespace>pxl</namespace>
    <member kind="function">
      <type>PXL_DLL_EXPORT std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespacepxl.html</anchorfile>
      <anchor>a080762f4b0ac64b6d921a4a5c6f374a1</anchor>
      <arglist>(std::ostream &amp;os, const Id &amp;id)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>InformationChunk.hh</name>
    <path>/.automount/home/home__home1/institut_3a/silva/NanoMUSiC/NanoMUSiC/PxlAnalyzer/Pxl/Pxl/interface/pxl/core/</path>
    <filename>_information_chunk_8hh.html</filename>
    <includes id="macros_8hh" name="macros.hh" local="yes" imported="no">Pxl/Pxl/interface/pxl/core/macros.hh</includes>
    <includes id="_serializable_8hh" name="Serializable.hh" local="yes" imported="no">Pxl/Pxl/interface/pxl/core/Serializable.hh</includes>
    <includes id="_user_record_8hh" name="UserRecord.hh" local="yes" imported="no">Pxl/Pxl/interface/pxl/core/UserRecord.hh</includes>
    <class kind="class">pxl::InformationChunk</class>
    <namespace>pxl</namespace>
  </compound>
  <compound kind="file">
    <name>InputFile.hh</name>
    <path>/.automount/home/home__home1/institut_3a/silva/NanoMUSiC/NanoMUSiC/PxlAnalyzer/Pxl/Pxl/interface/pxl/core/</path>
    <filename>_input_file_8hh.html</filename>
    <includes id="macros_8hh" name="macros.hh" local="yes" imported="no">Pxl/Pxl/interface/pxl/core/macros.hh</includes>
    <includes id="_chunk_reader_8hh" name="ChunkReader.hh" local="yes" imported="no">Pxl/Pxl/interface/pxl/core/ChunkReader.hh</includes>
    <includes id="_file_8hh" name="File.hh" local="yes" imported="no">Pxl/Pxl/interface/pxl/core/File.hh</includes>
    <includes id="_input_handler_8hh" name="InputHandler.hh" local="yes" imported="no">Pxl/Pxl/interface/pxl/core/InputHandler.hh</includes>
    <includes id="logging_8hh" name="logging.hh" local="yes" imported="no">Pxl/Pxl/interface/pxl/core/logging.hh</includes>
    <class kind="class">pxl::InputFile</class>
    <namespace>pxl</namespace>
    <member kind="define">
      <type>#define</type>
      <name>PXL_LOG_MODULE_NAME</name>
      <anchorfile>_input_file_8hh.html</anchorfile>
      <anchor>aaceb03b5331c2b7ef33de1e9d2564c9b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>InputHandler.hh</name>
    <path>/.automount/home/home__home1/institut_3a/silva/NanoMUSiC/NanoMUSiC/PxlAnalyzer/Pxl/Pxl/interface/pxl/core/</path>
    <filename>_input_handler_8hh.html</filename>
    <includes id="macros_8hh" name="macros.hh" local="yes" imported="no">Pxl/Pxl/interface/pxl/core/macros.hh</includes>
    <includes id="_basic_container_8hh" name="BasicContainer.hh" local="yes" imported="no">Pxl/Pxl/interface/pxl/core/BasicContainer.hh</includes>
    <includes id="_chunk_reader_8hh" name="ChunkReader.hh" local="yes" imported="no">Pxl/Pxl/interface/pxl/core/ChunkReader.hh</includes>
    <includes id="_event_8hh" name="Event.hh" local="yes" imported="no">Pxl/Pxl/interface/pxl/core/Event.hh</includes>
    <includes id="_id_8hh" name="Id.hh" local="yes" imported="no">Pxl/Pxl/interface/pxl/core/Id.hh</includes>
    <includes id="_information_chunk_8hh" name="InformationChunk.hh" local="yes" imported="no">Pxl/Pxl/interface/pxl/core/InformationChunk.hh</includes>
    <class kind="class">pxl::InputHandler</class>
    <namespace>pxl</namespace>
  </compound>
  <compound kind="file">
    <name>logging.hh</name>
    <path>/.automount/home/home__home1/institut_3a/silva/NanoMUSiC/NanoMUSiC/PxlAnalyzer/Pxl/Pxl/interface/pxl/core/</path>
    <filename>logging_8hh.html</filename>
    <includes id="functions_8hh" name="functions.hh" local="yes" imported="no">Pxl/Pxl/interface/pxl/core/functions.hh</includes>
    <includes id="macros_8hh" name="macros.hh" local="yes" imported="no">Pxl/Pxl/interface/pxl/core/macros.hh</includes>
    <class kind="class">pxl::LogHandler</class>
    <class kind="class">pxl::ConsoleLogHandler</class>
    <class kind="class">pxl::LogDispatcher</class>
    <class kind="class">pxl::Logger</class>
    <class kind="class">pxl::LogBuffer</class>
    <namespace>pxl</namespace>
    <member kind="define">
      <type>#define</type>
      <name>PXL_LOG_ERROR</name>
      <anchorfile>logging_8hh.html</anchorfile>
      <anchor>ae2f050aa50cf3bdeba48dd65a527c52f</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PXL_LOG_WARNING</name>
      <anchorfile>logging_8hh.html</anchorfile>
      <anchor>aefa5370657c2be13cd6c09b7f8c61600</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PXL_LOG_INFO</name>
      <anchorfile>logging_8hh.html</anchorfile>
      <anchor>a633b816668eebc27e09ac62ebbe89e21</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PXL_LOG_DEBUG</name>
      <anchorfile>logging_8hh.html</anchorfile>
      <anchor>aeb0391740479f5ad746f7d29cf156b83</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>LogLevel</name>
      <anchorfile>namespacepxl.html</anchorfile>
      <anchor>aa2803878ec506ff556ee8052dc205e88</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LOG_LEVEL_ALL</name>
      <anchorfile>namespacepxl.html</anchorfile>
      <anchor>aa2803878ec506ff556ee8052dc205e88a7611cae06169b4c64eba57a6dc4a0756</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LOG_LEVEL_DEBUG</name>
      <anchorfile>namespacepxl.html</anchorfile>
      <anchor>aa2803878ec506ff556ee8052dc205e88a3b7a2ba37e251a3e1f92d7c882d6b146</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LOG_LEVEL_INFO</name>
      <anchorfile>namespacepxl.html</anchorfile>
      <anchor>aa2803878ec506ff556ee8052dc205e88a38e8653cc2a48d8e79615d680c8587d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LOG_LEVEL_WARNING</name>
      <anchorfile>namespacepxl.html</anchorfile>
      <anchor>aa2803878ec506ff556ee8052dc205e88a58ff20de7f93ed96f082102525d65a60</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LOG_LEVEL_ERROR</name>
      <anchorfile>namespacepxl.html</anchorfile>
      <anchor>aa2803878ec506ff556ee8052dc205e88a70e0cfbcd32e8e073afa4b3f4e547796</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LOG_LEVEL_NONE</name>
      <anchorfile>namespacepxl.html</anchorfile>
      <anchor>aa2803878ec506ff556ee8052dc205e88a4bfe3e015dc5487e190adc02b925cbc2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>PXL_DLL_EXPORT LogLevel</type>
      <name>intToLogLevel</name>
      <anchorfile>namespacepxl.html</anchorfile>
      <anchor>acceb9e5999d6ad93a76d6f13e5eafa1c</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>PXL_DLL_EXPORT const std::string &amp;</type>
      <name>LogLevelToString</name>
      <anchorfile>namespacepxl.html</anchorfile>
      <anchor>a0c4e1c40b93c1426be45ee71f006bcda</anchor>
      <arglist>(LogLevel level)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>LorentzVector.hh</name>
    <path>/.automount/home/home__home1/institut_3a/silva/NanoMUSiC/NanoMUSiC/PxlAnalyzer/Pxl/Pxl/interface/pxl/core/</path>
    <filename>_lorentz_vector_8hh.html</filename>
    <includes id="macros_8hh" name="macros.hh" local="yes" imported="no">Pxl/Pxl/interface/pxl/core/macros.hh</includes>
    <includes id="_basic3_vector_8hh" name="Basic3Vector.hh" local="yes" imported="no">Pxl/Pxl/interface/pxl/core/Basic3Vector.hh</includes>
    <includes id="_stream_8hh" name="Stream.hh" local="yes" imported="no">Pxl/Pxl/interface/pxl/core/Stream.hh</includes>
    <class kind="class">pxl::LorentzVector</class>
    <namespace>pxl</namespace>
    <member kind="function">
      <type>PXL_DLL_EXPORT bool</type>
      <name>operator==</name>
      <anchorfile>namespacepxl.html</anchorfile>
      <anchor>a50f445e4d5bafb8741ff9c12f0305591</anchor>
      <arglist>(const LorentzVector &amp;obj1, const LorentzVector &amp;obj2)</arglist>
    </member>
    <member kind="function">
      <type>PXL_DLL_EXPORT bool</type>
      <name>operator!=</name>
      <anchorfile>namespacepxl.html</anchorfile>
      <anchor>af46472ac54840ff1c36635156498f064</anchor>
      <arglist>(const LorentzVector &amp;obj1, const LorentzVector &amp;obj2)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>macros.hh</name>
    <path>/.automount/home/home__home1/institut_3a/silva/NanoMUSiC/NanoMUSiC/PxlAnalyzer/Pxl/Pxl/interface/pxl/core/</path>
    <filename>macros_8hh.html</filename>
    <includes id="config_8hh" name="config.hh" local="yes" imported="no">Pxl/Pxl/interface/pxl/core/config.hh</includes>
    <member kind="define">
      <type>#define</type>
      <name>PXL_NORETURN</name>
      <anchorfile>macros_8hh.html</anchorfile>
      <anchor>a6b7e31e9325dde3c188d743c1d668927</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PXL_LIKELY</name>
      <anchorfile>macros_8hh.html</anchorfile>
      <anchor>a6aa29f889afe3decd262f6fa0f065a3b</anchor>
      <arglist>(expr)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PXL_UNLIKELY</name>
      <anchorfile>macros_8hh.html</anchorfile>
      <anchor>a5bc9a7787b43cc4f7a934d376c62dbc9</anchor>
      <arglist>(expr)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PXL_OFFSETOF</name>
      <anchorfile>macros_8hh.html</anchorfile>
      <anchor>ac3cc3234f1b4a747dfd23247bca0dad6</anchor>
      <arglist>(t, f)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PXL_BASE</name>
      <anchorfile>macros_8hh.html</anchorfile>
      <anchor>ac15d66faf4be1128baa5c96017479df0</anchor>
      <arglist>(t, f, v)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PXL_DLL_EXPORT</name>
      <anchorfile>macros_8hh.html</anchorfile>
      <anchor>a124d90dd5756dd2656f2d71c115bd736</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PXL_VERSION</name>
      <anchorfile>macros_8hh.html</anchorfile>
      <anchor>ae0a49b6db1f6bcb83161b098c6c66821</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PXL_PATH_SEPERATOR</name>
      <anchorfile>macros_8hh.html</anchorfile>
      <anchor>a18131f932b5e97bfbe0dccd6a978a5ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_STR</name>
      <anchorfile>macros_8hh.html</anchorfile>
      <anchor>a34fbaf7ed82e04e522ca124b6aea8db1</anchor>
      <arglist>(x)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>STR</name>
      <anchorfile>macros_8hh.html</anchorfile>
      <anchor>a18d295a837ac71add5578860b55e5502</anchor>
      <arglist>(x)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>MessageDispatcher.hh</name>
    <path>/.automount/home/home__home1/institut_3a/silva/NanoMUSiC/NanoMUSiC/PxlAnalyzer/Pxl/Pxl/interface/pxl/core/</path>
    <filename>_message_dispatcher_8hh.html</filename>
    <includes id="_variant_8hh" name="Variant.hh" local="yes" imported="no">Pxl/Pxl/interface/pxl/core/Variant.hh</includes>
    <includes id="macros_8hh" name="macros.hh" local="yes" imported="no">Pxl/Pxl/interface/pxl/core/macros.hh</includes>
    <class kind="class">pxl::MessageHandler</class>
    <class kind="class">pxl::MessageDispatcher</class>
    <namespace>pxl</namespace>
  </compound>
  <compound kind="file">
    <name>NamedTMPFile.hh</name>
    <path>/.automount/home/home__home1/institut_3a/silva/NanoMUSiC/NanoMUSiC/PxlAnalyzer/Pxl/Pxl/interface/pxl/core/</path>
    <filename>_named_t_m_p_file_8hh.html</filename>
    <includes id="macros_8hh" name="macros.hh" local="yes" imported="no">Pxl/Pxl/interface/pxl/core/macros.hh</includes>
    <class kind="class">pxl::NamedTMPFile</class>
    <namespace>pxl</namespace>
  </compound>
  <compound kind="file">
    <name>Object.hh</name>
    <path>/.automount/home/home__home1/institut_3a/silva/NanoMUSiC/NanoMUSiC/PxlAnalyzer/Pxl/Pxl/interface/pxl/core/</path>
    <filename>_object_8hh.html</filename>
    <includes id="macros_8hh" name="macros.hh" local="yes" imported="no">Pxl/Pxl/interface/pxl/core/macros.hh</includes>
    <includes id="_object_factory_8hh" name="ObjectFactory.hh" local="yes" imported="no">Pxl/Pxl/interface/pxl/core/ObjectFactory.hh</includes>
    <includes id="_relative_8hh" name="Relative.hh" local="yes" imported="no">Pxl/Pxl/interface/pxl/core/Relative.hh</includes>
    <includes id="_user_record_8hh" name="UserRecord.hh" local="yes" imported="no">Pxl/Pxl/interface/pxl/core/UserRecord.hh</includes>
    <includes id="weak__ptr_8hh" name="weak_ptr.hh" local="yes" imported="no">Pxl/Pxl/interface/pxl/core/weak_ptr.hh</includes>
    <class kind="class">pxl::Object</class>
    <namespace>pxl</namespace>
  </compound>
  <compound kind="file">
    <name>ObjectFactory.hh</name>
    <path>/.automount/home/home__home1/institut_3a/silva/NanoMUSiC/NanoMUSiC/PxlAnalyzer/Pxl/Pxl/interface/pxl/core/</path>
    <filename>_object_factory_8hh.html</filename>
    <includes id="macros_8hh" name="macros.hh" local="yes" imported="no">Pxl/Pxl/interface/pxl/core/macros.hh</includes>
    <includes id="_id_8hh" name="Id.hh" local="yes" imported="no">Pxl/Pxl/interface/pxl/core/Id.hh</includes>
    <includes id="_serializable_8hh" name="Serializable.hh" local="yes" imported="no">Pxl/Pxl/interface/pxl/core/Serializable.hh</includes>
    <class kind="class">pxl::ObjectFactory</class>
    <class kind="class">pxl::ObjectProducerInterface</class>
    <class kind="class">pxl::ObjectProducerTemplate</class>
    <namespace>pxl</namespace>
  </compound>
  <compound kind="file">
    <name>ObjectManager.hh</name>
    <path>/.automount/home/home__home1/institut_3a/silva/NanoMUSiC/NanoMUSiC/PxlAnalyzer/Pxl/Pxl/interface/pxl/core/</path>
    <filename>_object_manager_8hh.html</filename>
    <includes id="macros_8hh" name="macros.hh" local="yes" imported="no">Pxl/Pxl/interface/pxl/core/macros.hh</includes>
    <includes id="_object_8hh" name="Object.hh" local="yes" imported="no">Pxl/Pxl/interface/pxl/core/Object.hh</includes>
    <includes id="_object_owner_8hh" name="ObjectOwner.hh" local="yes" imported="no">Pxl/Pxl/interface/pxl/core/ObjectOwner.hh</includes>
    <includes id="weak__ptr_8hh" name="weak_ptr.hh" local="yes" imported="no">Pxl/Pxl/interface/pxl/core/weak_ptr.hh</includes>
    <class kind="class">pxl::ObjectManager</class>
    <namespace>pxl</namespace>
  </compound>
  <compound kind="file">
    <name>ObjectOwner.hh</name>
    <path>/.automount/home/home__home1/institut_3a/silva/NanoMUSiC/NanoMUSiC/PxlAnalyzer/Pxl/Pxl/interface/pxl/core/</path>
    <filename>_object_owner_8hh.html</filename>
    <includes id="macros_8hh" name="macros.hh" local="yes" imported="no">Pxl/Pxl/interface/pxl/core/macros.hh</includes>
    <includes id="_relative_8hh" name="Relative.hh" local="yes" imported="no">Pxl/Pxl/interface/pxl/core/Relative.hh</includes>
    <includes id="weak__ptr_8hh" name="weak_ptr.hh" local="yes" imported="no">Pxl/Pxl/interface/pxl/core/weak_ptr.hh</includes>
    <class kind="class">pxl::ObjectOwnerTypeIterator</class>
    <class kind="class">pxl::ObjectOwner</class>
    <namespace>pxl</namespace>
  </compound>
  <compound kind="file">
    <name>OutputFile.hh</name>
    <path>/.automount/home/home__home1/institut_3a/silva/NanoMUSiC/NanoMUSiC/PxlAnalyzer/Pxl/Pxl/interface/pxl/core/</path>
    <filename>_output_file_8hh.html</filename>
    <includes id="macros_8hh" name="macros.hh" local="yes" imported="no">Pxl/Pxl/interface/pxl/core/macros.hh</includes>
    <includes id="_chunk_writer_8hh" name="ChunkWriter.hh" local="yes" imported="no">Pxl/Pxl/interface/pxl/core/ChunkWriter.hh</includes>
    <includes id="_output_handler_8hh" name="OutputHandler.hh" local="yes" imported="no">Pxl/Pxl/interface/pxl/core/OutputHandler.hh</includes>
    <class kind="class">pxl::OutputFile</class>
    <namespace>pxl</namespace>
  </compound>
  <compound kind="file">
    <name>OutputHandler.hh</name>
    <path>/.automount/home/home__home1/institut_3a/silva/NanoMUSiC/NanoMUSiC/PxlAnalyzer/Pxl/Pxl/interface/pxl/core/</path>
    <filename>_output_handler_8hh.html</filename>
    <includes id="macros_8hh" name="macros.hh" local="yes" imported="no">Pxl/Pxl/interface/pxl/core/macros.hh</includes>
    <includes id="_basic_container_8hh" name="BasicContainer.hh" local="yes" imported="no">Pxl/Pxl/interface/pxl/core/BasicContainer.hh</includes>
    <includes id="_chunk_writer_8hh" name="ChunkWriter.hh" local="yes" imported="no">Pxl/Pxl/interface/pxl/core/ChunkWriter.hh</includes>
    <includes id="_event_8hh" name="Event.hh" local="yes" imported="no">Pxl/Pxl/interface/pxl/core/Event.hh</includes>
    <includes id="_information_chunk_8hh" name="InformationChunk.hh" local="yes" imported="no">Pxl/Pxl/interface/pxl/core/InformationChunk.hh</includes>
    <class kind="class">pxl::OutputHandler</class>
    <namespace>pxl</namespace>
  </compound>
  <compound kind="file">
    <name>PluginManager.hh</name>
    <path>/.automount/home/home__home1/institut_3a/silva/NanoMUSiC/NanoMUSiC/PxlAnalyzer/Pxl/Pxl/interface/pxl/core/</path>
    <filename>_plugin_manager_8hh.html</filename>
    <includes id="macros_8hh" name="macros.hh" local="yes" imported="no">Pxl/Pxl/interface/pxl/core/macros.hh</includes>
    <class kind="class">pxl::PluginManager</class>
    <namespace>pxl</namespace>
    <member kind="define">
      <type>#define</type>
      <name>PXL_PLUGIN_EXPORT</name>
      <anchorfile>_plugin_manager_8hh.html</anchorfile>
      <anchor>a4514fef36c17a070fab1b59bbeb3b448</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PXL_PLUGIN_INIT</name>
      <anchorfile>_plugin_manager_8hh.html</anchorfile>
      <anchor>a33b9af4d5229608a64f3656d32891745</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Random.hh</name>
    <path>/.automount/home/home__home1/institut_3a/silva/NanoMUSiC/NanoMUSiC/PxlAnalyzer/Pxl/Pxl/interface/pxl/core/</path>
    <filename>_random_8hh.html</filename>
    <includes id="_basic3_vector_8hh" name="Basic3Vector.hh" local="yes" imported="no">Pxl/Pxl/interface/pxl/core/Basic3Vector.hh</includes>
    <includes id="macros_8hh" name="macros.hh" local="yes" imported="no">Pxl/Pxl/interface/pxl/core/macros.hh</includes>
    <class kind="class">pxl::Random</class>
    <namespace>pxl</namespace>
    <member kind="define">
      <type>#define</type>
      <name>M_PI</name>
      <anchorfile>_random_8hh.html</anchorfile>
      <anchor>ae71449b1cc6e6250b91f539153a7a0d3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RandomAccessInputFile.hh</name>
    <path>/.automount/home/home__home1/institut_3a/silva/NanoMUSiC/NanoMUSiC/PxlAnalyzer/Pxl/Pxl/interface/pxl/core/</path>
    <filename>_random_access_input_file_8hh.html</filename>
    <includes id="_input_file_8hh" name="InputFile.hh" local="yes" imported="no">Pxl/Pxl/interface/pxl/core/InputFile.hh</includes>
    <class kind="class">pxl::RandomAccessInputFile</class>
    <namespace>pxl</namespace>
  </compound>
  <compound kind="file">
    <name>Relations.hh</name>
    <path>/.automount/home/home__home1/institut_3a/silva/NanoMUSiC/NanoMUSiC/PxlAnalyzer/Pxl/Pxl/interface/pxl/core/</path>
    <filename>_relations_8hh.html</filename>
    <includes id="_id_8hh" name="Id.hh" local="yes" imported="no">Pxl/Pxl/interface/pxl/core/Id.hh</includes>
    <includes id="_stream_8hh" name="Stream.hh" local="yes" imported="no">Pxl/Pxl/interface/pxl/core/Stream.hh</includes>
    <class kind="class">pxl::Relations</class>
    <namespace>pxl</namespace>
  </compound>
  <compound kind="file">
    <name>Relative.hh</name>
    <path>/.automount/home/home__home1/institut_3a/silva/NanoMUSiC/NanoMUSiC/PxlAnalyzer/Pxl/Pxl/interface/pxl/core/</path>
    <filename>_relative_8hh.html</filename>
    <includes id="_id_8hh" name="Id.hh" local="yes" imported="no">Pxl/Pxl/interface/pxl/core/Id.hh</includes>
    <includes id="_relations_8hh" name="Relations.hh" local="yes" imported="no">Pxl/Pxl/interface/pxl/core/Relations.hh</includes>
    <includes id="_serializable_8hh" name="Serializable.hh" local="yes" imported="no">Pxl/Pxl/interface/pxl/core/Serializable.hh</includes>
    <includes id="_soft_relations_8hh" name="SoftRelations.hh" local="yes" imported="no">Pxl/Pxl/interface/pxl/core/SoftRelations.hh</includes>
    <includes id="_wk_ptr_base_8hh" name="WkPtrBase.hh" local="yes" imported="no">Pxl/Pxl/interface/pxl/core/WkPtrBase.hh</includes>
    <class kind="class">pxl::Relative</class>
    <namespace>pxl</namespace>
    <member kind="function">
      <type>PXL_DLL_EXPORT std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>_relative_8hh.html</anchorfile>
      <anchor>a468fcc9b8b87476e452937a82fe6f162</anchor>
      <arglist>(std::ostream &amp;cxxx, const pxl::Relative &amp;obj)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RotationMatrix.hh</name>
    <path>/.automount/home/home__home1/institut_3a/silva/NanoMUSiC/NanoMUSiC/PxlAnalyzer/Pxl/Pxl/interface/pxl/core/</path>
    <filename>_rotation_matrix_8hh.html</filename>
    <includes id="_basic_matrix_8hh" name="BasicMatrix.hh" local="yes" imported="no">Pxl/Pxl/interface/pxl/core/BasicMatrix.hh</includes>
    <class kind="class">pxl::RotationMatrix</class>
    <namespace>pxl</namespace>
  </compound>
  <compound kind="file">
    <name>Serializable.hh</name>
    <path>/.automount/home/home__home1/institut_3a/silva/NanoMUSiC/NanoMUSiC/PxlAnalyzer/Pxl/Pxl/interface/pxl/core/</path>
    <filename>_serializable_8hh.html</filename>
    <includes id="_id_8hh" name="Id.hh" local="yes" imported="no">Pxl/Pxl/interface/pxl/core/Id.hh</includes>
    <includes id="_stream_8hh" name="Stream.hh" local="yes" imported="no">Pxl/Pxl/interface/pxl/core/Stream.hh</includes>
    <includes id="macros_8hh" name="macros.hh" local="yes" imported="no">Pxl/Pxl/interface/pxl/core/macros.hh</includes>
    <class kind="class">pxl::Serializable</class>
    <namespace>pxl</namespace>
  </compound>
  <compound kind="file">
    <name>SoftRelations.hh</name>
    <path>/.automount/home/home__home1/institut_3a/silva/NanoMUSiC/NanoMUSiC/PxlAnalyzer/Pxl/Pxl/interface/pxl/core/</path>
    <filename>_soft_relations_8hh.html</filename>
    <includes id="_id_8hh" name="Id.hh" local="yes" imported="no">Pxl/Pxl/interface/pxl/core/Id.hh</includes>
    <includes id="_serializable_8hh" name="Serializable.hh" local="yes" imported="no">Pxl/Pxl/interface/pxl/core/Serializable.hh</includes>
    <includes id="_stream_8hh" name="Stream.hh" local="yes" imported="no">Pxl/Pxl/interface/pxl/core/Stream.hh</includes>
    <class kind="class">pxl::SoftRelations</class>
    <namespace>pxl</namespace>
  </compound>
  <compound kind="file">
    <name>Stream.hh</name>
    <path>/.automount/home/home__home1/institut_3a/silva/NanoMUSiC/NanoMUSiC/PxlAnalyzer/Pxl/Pxl/interface/pxl/core/</path>
    <filename>_stream_8hh.html</filename>
    <includes id="macros_8hh" name="macros.hh" local="yes" imported="no">Pxl/Pxl/interface/pxl/core/macros.hh</includes>
    <class kind="class">pxl::OutputStream</class>
    <class kind="class">pxl::BufferOutput</class>
    <class kind="class">pxl::InputStream</class>
    <class kind="class">pxl::BufferInput</class>
    <namespace>pxl</namespace>
    <member kind="function">
      <type>void</type>
      <name>swap_endianess</name>
      <anchorfile>namespacepxl.html</anchorfile>
      <anchor>af22c8fe2c93dde81dafbec5e1ac13b70</anchor>
      <arglist>(T &amp;t)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Tokenizer.hh</name>
    <path>/.automount/home/home__home1/institut_3a/silva/NanoMUSiC/NanoMUSiC/PxlAnalyzer/Pxl/Pxl/interface/pxl/core/</path>
    <filename>_tokenizer_8hh.html</filename>
    <includes id="macros_8hh" name="macros.hh" local="yes" imported="no">Pxl/Pxl/interface/pxl/core/macros.hh</includes>
    <class kind="class">pxl::Tokenizer</class>
    <namespace>pxl</namespace>
  </compound>
  <compound kind="file">
    <name>UserRecord.hh</name>
    <path>/.automount/home/home__home1/institut_3a/silva/NanoMUSiC/NanoMUSiC/PxlAnalyzer/Pxl/Pxl/interface/pxl/core/</path>
    <filename>_user_record_8hh.html</filename>
    <includes id="macros_8hh" name="macros.hh" local="yes" imported="no">Pxl/Pxl/interface/pxl/core/macros.hh</includes>
    <includes id="_id_8hh" name="Id.hh" local="yes" imported="no">Pxl/Pxl/interface/pxl/core/Id.hh</includes>
    <includes id="_stream_8hh" name="Stream.hh" local="yes" imported="no">Pxl/Pxl/interface/pxl/core/Stream.hh</includes>
    <includes id="_variant_8hh" name="Variant.hh" local="yes" imported="no">Pxl/Pxl/interface/pxl/core/Variant.hh</includes>
    <class kind="class">pxl::UserRecords</class>
    <class kind="class">pxl::UserRecordHelper</class>
    <namespace>pxl</namespace>
  </compound>
  <compound kind="file">
    <name>Variant.hh</name>
    <path>/.automount/home/home__home1/institut_3a/silva/NanoMUSiC/NanoMUSiC/PxlAnalyzer/Pxl/Pxl/interface/pxl/core/</path>
    <filename>_variant_8hh.html</filename>
    <includes id="_basic3_vector_8hh" name="Basic3Vector.hh" local="yes" imported="no">Pxl/Pxl/interface/pxl/core/Basic3Vector.hh</includes>
    <includes id="_id_8hh" name="Id.hh" local="yes" imported="no">Pxl/Pxl/interface/pxl/core/Id.hh</includes>
    <includes id="_lorentz_vector_8hh" name="LorentzVector.hh" local="yes" imported="no">Pxl/Pxl/interface/pxl/core/LorentzVector.hh</includes>
    <includes id="_serializable_8hh" name="Serializable.hh" local="yes" imported="no">Pxl/Pxl/interface/pxl/core/Serializable.hh</includes>
    <includes id="functions_8hh" name="functions.hh" local="yes" imported="no">Pxl/Pxl/interface/pxl/core/functions.hh</includes>
    <includes id="macros_8hh" name="macros.hh" local="yes" imported="no">Pxl/Pxl/interface/pxl/core/macros.hh</includes>
    <class kind="class">pxl::Variant</class>
    <class kind="class">pxl::Variant::bad_conversion</class>
    <namespace>pxl</namespace>
    <member kind="define">
      <type>#define</type>
      <name>VARIANT_ADD_TYPE_DECL_POD</name>
      <anchorfile>_variant_8hh.html</anchorfile>
      <anchor>a2b0f9724d648ef65484f7b4fd6400857</anchor>
      <arglist>(NAME, TYPE, VALUE, FIELD)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VARIANT_ADD_TYPE_DECL_PTR_BASE</name>
      <anchorfile>_variant_8hh.html</anchorfile>
      <anchor>a72d360eacae9cc4a942a61464a3a8eff</anchor>
      <arglist>(NAME, TYPE, VALUE, FIELD)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VARIANT_ADD_TYPE_DECL_PTR</name>
      <anchorfile>_variant_8hh.html</anchorfile>
      <anchor>a5151d36414e87a27e0f8d568b10637bc</anchor>
      <arglist>(NAME, TYPE, VALUE, FIELD)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VARIANT_TO_DECL</name>
      <anchorfile>_variant_8hh.html</anchorfile>
      <anchor>acdf3895ba788152a9cc113b7fd1e643c</anchor>
      <arglist>(NAME, VALUE)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>Variant::to&lt; std::string &gt;</name>
      <anchorfile>namespacepxl.html</anchorfile>
      <anchor>a348838c38e29172db9236f08fd96fa51</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; Variant &gt;</type>
      <name>Variant::to&lt; std::vector&lt; Variant &gt; &gt;</name>
      <anchorfile>namespacepxl.html</anchorfile>
      <anchor>af72f2a220208937fceae6784e3827220</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>PXL_DLL_EXPORT std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespacepxl.html</anchorfile>
      <anchor>a2f9369f4db8d58d4f78304f008d94c72</anchor>
      <arglist>(std::ostream &amp;os, const Variant &amp;v)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>weak_ptr.hh</name>
    <path>/.automount/home/home__home1/institut_3a/silva/NanoMUSiC/NanoMUSiC/PxlAnalyzer/Pxl/Pxl/interface/pxl/core/</path>
    <filename>weak__ptr_8hh.html</filename>
    <includes id="_wk_ptr_base_8hh" name="WkPtrBase.hh" local="yes" imported="no">Pxl/Pxl/interface/pxl/core/WkPtrBase.hh</includes>
    <includes id="macros_8hh" name="macros.hh" local="yes" imported="no">Pxl/Pxl/interface/pxl/core/macros.hh</includes>
    <class kind="class">pxl::weak_ptr</class>
    <namespace>pxl</namespace>
    <member kind="function">
      <type>objecttype &amp;</type>
      <name>operator*</name>
      <anchorfile>namespacepxl.html</anchorfile>
      <anchor>a144ba670a325156850a559beab87961f</anchor>
      <arglist>(weak_ptr&lt; objecttype &gt; &amp;wkPtr)</arglist>
    </member>
    <member kind="function">
      <type>const objecttype &amp;</type>
      <name>operator*</name>
      <anchorfile>namespacepxl.html</anchorfile>
      <anchor>aeae0595b07df3b42c1856420d1e96de8</anchor>
      <arglist>(const weak_ptr&lt; objecttype &gt; &amp;wkPtr)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>WkPtrBase.hh</name>
    <path>/.automount/home/home__home1/institut_3a/silva/NanoMUSiC/NanoMUSiC/PxlAnalyzer/Pxl/Pxl/interface/pxl/core/</path>
    <filename>_wk_ptr_base_8hh.html</filename>
    <includes id="macros_8hh" name="macros.hh" local="yes" imported="no">Pxl/Pxl/interface/pxl/core/macros.hh</includes>
    <class kind="class">pxl::WkPtrBase</class>
    <namespace>pxl</namespace>
  </compound>
  <compound kind="file">
    <name>hep.hh</name>
    <path>/.automount/home/home__home1/institut_3a/silva/NanoMUSiC/NanoMUSiC/PxlAnalyzer/Pxl/Pxl/interface/pxl/</path>
    <filename>hep_8hh.html</filename>
    <includes id="_analysis_fork_8hh" name="AnalysisFork.hh" local="yes" imported="no">Pxl/Pxl/interface/pxl/hep/AnalysisFork.hh</includes>
    <includes id="_analysis_process_8hh" name="AnalysisProcess.hh" local="yes" imported="no">Pxl/Pxl/interface/pxl/hep/AnalysisProcess.hh</includes>
    <includes id="_collision_8hh" name="Collision.hh" local="yes" imported="no">Pxl/Pxl/interface/pxl/hep/Collision.hh</includes>
    <includes id="_event_view_8hh" name="EventView.hh" local="yes" imported="no">Pxl/Pxl/interface/pxl/hep/EventView.hh</includes>
    <includes id="_hep_8hh" name="Hep.hh" local="yes" imported="no">Pxl/Pxl/interface/pxl/hep/Hep.hh</includes>
    <includes id="_particle_8hh" name="Particle.hh" local="yes" imported="no">Pxl/Pxl/interface/pxl/hep/Particle.hh</includes>
    <includes id="_particle_filter_8hh" name="ParticleFilter.hh" local="yes" imported="no">Pxl/Pxl/interface/pxl/hep/ParticleFilter.hh</includes>
    <includes id="_vertex_8hh" name="Vertex.hh" local="yes" imported="no">Pxl/Pxl/interface/pxl/hep/Vertex.hh</includes>
  </compound>
  <compound kind="file">
    <name>AnalysisFork.hh</name>
    <path>/.automount/home/home__home1/institut_3a/silva/NanoMUSiC/NanoMUSiC/PxlAnalyzer/Pxl/Pxl/interface/pxl/hep/</path>
    <filename>_analysis_fork_8hh.html</filename>
    <includes id="_event_8hh" name="Event.hh" local="yes" imported="no">Pxl/Pxl/interface/pxl/core/Event.hh</includes>
    <includes id="_object_manager_8hh" name="ObjectManager.hh" local="yes" imported="no">Pxl/Pxl/interface/pxl/core/ObjectManager.hh</includes>
    <includes id="macros_8hh" name="macros.hh" local="yes" imported="no">Pxl/Pxl/interface/pxl/core/macros.hh</includes>
    <class kind="class">pxl::AnalysisFork</class>
    <namespace>pxl</namespace>
  </compound>
  <compound kind="file">
    <name>AnalysisProcess.hh</name>
    <path>/.automount/home/home__home1/institut_3a/silva/NanoMUSiC/NanoMUSiC/PxlAnalyzer/Pxl/Pxl/interface/pxl/hep/</path>
    <filename>_analysis_process_8hh.html</filename>
    <includes id="macros_8hh" name="macros.hh" local="yes" imported="no">Pxl/Pxl/interface/pxl/core/macros.hh</includes>
    <includes id="_event_8hh" name="Event.hh" local="yes" imported="no">Pxl/Pxl/interface/pxl/core/Event.hh</includes>
    <includes id="_object_manager_8hh" name="ObjectManager.hh" local="yes" imported="no">Pxl/Pxl/interface/pxl/core/ObjectManager.hh</includes>
    <includes id="weak__ptr_8hh" name="weak_ptr.hh" local="yes" imported="no">Pxl/Pxl/interface/pxl/core/weak_ptr.hh</includes>
    <class kind="class">pxl::AnalysisProcess</class>
    <namespace>pxl</namespace>
  </compound>
  <compound kind="file">
    <name>Collision.hh</name>
    <path>/.automount/home/home__home1/institut_3a/silva/NanoMUSiC/NanoMUSiC/PxlAnalyzer/Pxl/Pxl/interface/pxl/hep/</path>
    <filename>_collision_8hh.html</filename>
    <includes id="macros_8hh" name="macros.hh" local="yes" imported="no">Pxl/Pxl/interface/pxl/core/macros.hh</includes>
    <includes id="_object_8hh" name="Object.hh" local="yes" imported="no">Pxl/Pxl/interface/pxl/core/Object.hh</includes>
    <class kind="class">pxl::Collision</class>
    <namespace>pxl</namespace>
  </compound>
  <compound kind="file">
    <name>CommonParticle.hh</name>
    <path>/.automount/home/home__home1/institut_3a/silva/NanoMUSiC/NanoMUSiC/PxlAnalyzer/Pxl/Pxl/interface/pxl/hep/</path>
    <filename>_common_particle_8hh.html</filename>
    <includes id="macros_8hh" name="macros.hh" local="yes" imported="no">Pxl/Pxl/interface/pxl/core/macros.hh</includes>
    <class kind="class">pxl::CommonParticle</class>
    <namespace>pxl</namespace>
  </compound>
  <compound kind="file">
    <name>CommonVertex.hh</name>
    <path>/.automount/home/home__home1/institut_3a/silva/NanoMUSiC/NanoMUSiC/PxlAnalyzer/Pxl/Pxl/interface/pxl/hep/</path>
    <filename>_common_vertex_8hh.html</filename>
    <includes id="macros_8hh" name="macros.hh" local="yes" imported="no">Pxl/Pxl/interface/pxl/core/macros.hh</includes>
    <class kind="class">pxl::CommonVertex</class>
    <namespace>pxl</namespace>
  </compound>
  <compound kind="file">
    <name>EventView.hh</name>
    <path>/.automount/home/home__home1/institut_3a/silva/NanoMUSiC/NanoMUSiC/PxlAnalyzer/Pxl/Pxl/interface/pxl/hep/</path>
    <filename>_event_view_8hh.html</filename>
    <includes id="macros_8hh" name="macros.hh" local="yes" imported="no">Pxl/Pxl/interface/pxl/core/macros.hh</includes>
    <includes id="_object_manager_8hh" name="ObjectManager.hh" local="yes" imported="no">Pxl/Pxl/interface/pxl/core/ObjectManager.hh</includes>
    <includes id="weak__ptr_8hh" name="weak_ptr.hh" local="yes" imported="no">Pxl/Pxl/interface/pxl/core/weak_ptr.hh</includes>
    <class kind="class">pxl::EventView</class>
    <namespace>pxl</namespace>
  </compound>
  <compound kind="file">
    <name>Hep.hh</name>
    <path>/.automount/home/home__home1/institut_3a/silva/NanoMUSiC/NanoMUSiC/PxlAnalyzer/Pxl/Pxl/interface/pxl/hep/</path>
    <filename>_hep_8hh.html</filename>
    <includes id="macros_8hh" name="macros.hh" local="yes" imported="no">Pxl/Pxl/interface/pxl/core/macros.hh</includes>
    <class kind="class">pxl::Hep</class>
    <namespace>pxl</namespace>
  </compound>
  <compound kind="file">
    <name>Particle.hh</name>
    <path>/.automount/home/home__home1/institut_3a/silva/NanoMUSiC/NanoMUSiC/PxlAnalyzer/Pxl/Pxl/interface/pxl/hep/</path>
    <filename>_particle_8hh.html</filename>
    <includes id="macros_8hh" name="macros.hh" local="yes" imported="no">Pxl/Pxl/interface/pxl/core/macros.hh</includes>
    <includes id="_object_8hh" name="Object.hh" local="yes" imported="no">Pxl/Pxl/interface/pxl/core/Object.hh</includes>
    <includes id="weak__ptr_8hh" name="weak_ptr.hh" local="yes" imported="no">Pxl/Pxl/interface/pxl/core/weak_ptr.hh</includes>
    <includes id="_lorentz_vector_8hh" name="LorentzVector.hh" local="yes" imported="no">Pxl/Pxl/interface/pxl/core/LorentzVector.hh</includes>
    <includes id="_common_particle_8hh" name="CommonParticle.hh" local="yes" imported="no">Pxl/Pxl/interface/pxl/hep/CommonParticle.hh</includes>
    <class kind="class">pxl::Particle</class>
    <namespace>pxl</namespace>
    <member kind="function">
      <type>PXL_DLL_EXPORT bool</type>
      <name>operator==</name>
      <anchorfile>namespacepxl.html</anchorfile>
      <anchor>ac014b48d7f80607c25df78585fcbcb11</anchor>
      <arglist>(const Particle &amp;obj1, const Particle &amp;obj2)</arglist>
    </member>
    <member kind="function">
      <type>PXL_DLL_EXPORT bool</type>
      <name>operator!=</name>
      <anchorfile>namespacepxl.html</anchorfile>
      <anchor>a8cebb9c684317076e64fd5e28c9e540a</anchor>
      <arglist>(const Particle &amp;obj1, const Particle &amp;obj2)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ParticleFilter.hh</name>
    <path>/.automount/home/home__home1/institut_3a/silva/NanoMUSiC/NanoMUSiC/PxlAnalyzer/Pxl/Pxl/interface/pxl/hep/</path>
    <filename>_particle_filter_8hh.html</filename>
    <includes id="macros_8hh" name="macros.hh" local="yes" imported="no">Pxl/Pxl/interface/pxl/core/macros.hh</includes>
    <includes id="_filter_8hh" name="Filter.hh" local="yes" imported="no">Pxl/Pxl/interface/pxl/core/Filter.hh</includes>
    <includes id="_particle_8hh" name="Particle.hh" local="yes" imported="no">Pxl/Pxl/interface/pxl/hep/Particle.hh</includes>
    <class kind="class">pxl::ParticlePtComparator</class>
    <class kind="class">pxl::ParticlePtEtaNameCriterion</class>
    <class kind="class">pxl::ParticlePtCriterion</class>
    <namespace>pxl</namespace>
    <member kind="typedef">
      <type>Filter&lt; Particle, ParticlePtComparator &gt;</type>
      <name>ParticleFilter</name>
      <anchorfile>namespacepxl.html</anchorfile>
      <anchor>a9f0fb37dcffd5e9b09c08620c5d9c397</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Vertex.hh</name>
    <path>/.automount/home/home__home1/institut_3a/silva/NanoMUSiC/NanoMUSiC/PxlAnalyzer/Pxl/Pxl/interface/pxl/hep/</path>
    <filename>_vertex_8hh.html</filename>
    <includes id="macros_8hh" name="macros.hh" local="yes" imported="no">Pxl/Pxl/interface/pxl/core/macros.hh</includes>
    <includes id="_object_8hh" name="Object.hh" local="yes" imported="no">Pxl/Pxl/interface/pxl/core/Object.hh</includes>
    <includes id="weak__ptr_8hh" name="weak_ptr.hh" local="yes" imported="no">Pxl/Pxl/interface/pxl/core/weak_ptr.hh</includes>
    <includes id="_basic3_vector_8hh" name="Basic3Vector.hh" local="yes" imported="no">Pxl/Pxl/interface/pxl/core/Basic3Vector.hh</includes>
    <includes id="_common_vertex_8hh" name="CommonVertex.hh" local="yes" imported="no">Pxl/Pxl/interface/pxl/hep/CommonVertex.hh</includes>
    <class kind="class">pxl::Vertex</class>
    <namespace>pxl</namespace>
    <member kind="function">
      <type>PXL_DLL_EXPORT bool</type>
      <name>operator==</name>
      <anchorfile>namespacepxl.html</anchorfile>
      <anchor>af4cb19e7b109712cd7beba9aa2e2a7ea</anchor>
      <arglist>(const Vertex &amp;obj1, const Vertex &amp;obj2)</arglist>
    </member>
    <member kind="function">
      <type>PXL_DLL_EXPORT bool</type>
      <name>operator!=</name>
      <anchorfile>namespacepxl.html</anchorfile>
      <anchor>a36c0747413d7b562c5011996a0ae6d41</anchor>
      <arglist>(const Vertex &amp;obj1, const Vertex &amp;obj2)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>dCapFileImpl.hh</name>
    <path>/.automount/home/home__home1/institut_3a/silva/NanoMUSiC/NanoMUSiC/PxlAnalyzer/Pxl/Pxl/src/</path>
    <filename>d_cap_file_impl_8hh.html</filename>
    <includes id="_file_8hh" name="File.hh" local="yes" imported="no">Pxl/Pxl/interface/pxl/core/File.hh</includes>
    <class kind="class">pxl::dCapFileImpl</class>
    <namespace>pxl</namespace>
  </compound>
  <compound kind="file">
    <name>LocalFileImpl.hh</name>
    <path>/.automount/home/home__home1/institut_3a/silva/NanoMUSiC/NanoMUSiC/PxlAnalyzer/Pxl/Pxl/src/</path>
    <filename>_local_file_impl_8hh.html</filename>
    <includes id="_file_8hh" name="File.hh" local="yes" imported="no">Pxl/Pxl/interface/pxl/core/File.hh</includes>
    <includes id="macros_8hh" name="macros.hh" local="yes" imported="no">Pxl/Pxl/interface/pxl/core/macros.hh</includes>
    <class kind="class">pxl::LocalFileImpl</class>
    <namespace>pxl</namespace>
  </compound>
  <compound kind="file">
    <name>SafeInt.hh</name>
    <path>/.automount/home/home__home1/institut_3a/silva/NanoMUSiC/NanoMUSiC/PxlAnalyzer/Pxl/Pxl/src/</path>
    <filename>_safe_int_8hh.html</filename>
    <class kind="class">SafeIntException</class>
    <class kind="class">SafeIntInternal::SafeIntExceptionHandler</class>
    <class kind="class">SafeIntInternal::SafeIntExceptionHandler&lt; SafeIntException &gt;</class>
    <class kind="class">CompileConst</class>
    <class kind="class">CompileConst&lt; true &gt;</class>
    <class kind="class">CompileConst&lt; false &gt;</class>
    <class kind="class">NumericType</class>
    <class kind="class">NumericType&lt; bool &gt;</class>
    <class kind="class">NumericType&lt; char &gt;</class>
    <class kind="class">NumericType&lt; unsigned char &gt;</class>
    <class kind="class">NumericType&lt; signed char &gt;</class>
    <class kind="class">NumericType&lt; short &gt;</class>
    <class kind="class">NumericType&lt; unsigned short &gt;</class>
    <class kind="class">NumericType&lt; int &gt;</class>
    <class kind="class">NumericType&lt; unsigned int &gt;</class>
    <class kind="class">NumericType&lt; long &gt;</class>
    <class kind="class">NumericType&lt; unsigned long &gt;</class>
    <class kind="class">NumericType&lt; __int64 &gt;</class>
    <class kind="class">NumericType&lt; unsigned __int64 &gt;</class>
    <class kind="class">NumericType&lt; float &gt;</class>
    <class kind="class">NumericType&lt; double &gt;</class>
    <class kind="class">NumericType&lt; long double &gt;</class>
    <class kind="class">NumericType</class>
    <class kind="class">MinMax</class>
    <class kind="class">MinMax&lt; true, 8 &gt;</class>
    <class kind="class">MinMax&lt; true, 16 &gt;</class>
    <class kind="class">MinMax&lt; true, 32 &gt;</class>
    <class kind="class">MinMax&lt; true, 64 &gt;</class>
    <class kind="class">MinMax&lt; false, 8 &gt;</class>
    <class kind="class">MinMax&lt; false, 16 &gt;</class>
    <class kind="class">MinMax&lt; false, 32 &gt;</class>
    <class kind="class">MinMax&lt; false, 64 &gt;</class>
    <class kind="class">IntTraits</class>
    <class kind="class">SafeIntCompare</class>
    <class kind="class">IntRegion</class>
    <class kind="class">GetAbsMethod</class>
    <class kind="class">AbsValueHelper</class>
    <class kind="class">AbsValueHelper&lt; T, AbsMethodInt &gt;</class>
    <class kind="class">AbsValueHelper&lt; T, AbsMethodInt64 &gt;</class>
    <class kind="class">AbsValueHelper&lt; T, AbsMethodNoop &gt;</class>
    <class kind="class">NegationHelper</class>
    <class kind="class">NegationHelper&lt; T, true &gt;</class>
    <class kind="class">SignedNegation</class>
    <class kind="class">SignedNegation&lt; signed __int32 &gt;</class>
    <class kind="class">SignedNegation&lt; signed __int64 &gt;</class>
    <class kind="class">NegationAssertHelper</class>
    <class kind="class">NegationAssertHelper&lt; true &gt;</class>
    <class kind="class">NegationAssertHelper&lt; false &gt;</class>
    <class kind="class">NegationHelper&lt; T, false &gt;</class>
    <class kind="class">GetCastMethod</class>
    <class kind="class">GetCastMethod&lt; float, FromType &gt;</class>
    <class kind="class">GetCastMethod&lt; double, FromType &gt;</class>
    <class kind="class">GetCastMethod&lt; long double, FromType &gt;</class>
    <class kind="class">GetCastMethod&lt; ToType, float &gt;</class>
    <class kind="class">GetCastMethod&lt; ToType, double &gt;</class>
    <class kind="class">GetCastMethod&lt; ToType, long double &gt;</class>
    <class kind="class">SafeCastHelper</class>
    <class kind="class">SafeCastHelper&lt; T, U, CastOK &gt;</class>
    <class kind="class">SafeCastHelper&lt; T, U, CastFromFloat &gt;</class>
    <class kind="class">SafeCastHelper&lt; T, bool, CastFromBool &gt;</class>
    <class kind="class">SafeCastHelper&lt; bool, T, CastToBool &gt;</class>
    <class kind="class">SafeCastHelper&lt; T, U, CastCheckLTZero &gt;</class>
    <class kind="class">SafeCastHelper&lt; T, U, CastCheckGTMax &gt;</class>
    <class kind="class">SafeCastHelper&lt; T, U, CastCheckMinMaxUnsigned &gt;</class>
    <class kind="class">SafeCastHelper&lt; T, U, CastCheckMinMaxSigned &gt;</class>
    <class kind="class">ValidComparison</class>
    <class kind="class">EqualityTest</class>
    <class kind="class">EqualityTest&lt; T, U, ComparisonMethod_Ok &gt;</class>
    <class kind="class">EqualityTest&lt; T, U, ComparisonMethod_CastInt &gt;</class>
    <class kind="class">EqualityTest&lt; T, U, ComparisonMethod_CastInt64 &gt;</class>
    <class kind="class">EqualityTest&lt; T, U, ComparisonMethod_UnsignedT &gt;</class>
    <class kind="class">EqualityTest&lt; T, U, ComparisonMethod_UnsignedU &gt;</class>
    <class kind="class">GreaterThanTest</class>
    <class kind="class">GreaterThanTest&lt; T, U, ComparisonMethod_Ok &gt;</class>
    <class kind="class">GreaterThanTest&lt; T, U, ComparisonMethod_CastInt &gt;</class>
    <class kind="class">GreaterThanTest&lt; T, U, ComparisonMethod_CastInt64 &gt;</class>
    <class kind="class">GreaterThanTest&lt; T, U, ComparisonMethod_UnsignedT &gt;</class>
    <class kind="class">GreaterThanTest&lt; T, U, ComparisonMethod_UnsignedU &gt;</class>
    <class kind="class">ModulusHelper</class>
    <class kind="class">ModulusHelper&lt; T, U, ComparisonMethod_Ok &gt;</class>
    <class kind="class">ModulusHelper&lt; T, U, ComparisonMethod_CastInt &gt;</class>
    <class kind="class">ModulusHelper&lt; T, U, ComparisonMethod_CastInt64 &gt;</class>
    <class kind="class">ModulusHelper&lt; T, U, ComparisonMethod_UnsignedT &gt;</class>
    <class kind="class">ModulusHelper&lt; T, U, ComparisonMethod_UnsignedU &gt;</class>
    <class kind="class">MultiplicationMethod</class>
    <class kind="class">MultiplicationHelper</class>
    <class kind="class">MultiplicationHelper&lt; T, U, MultiplicationState_CastInt &gt;</class>
    <class kind="class">MultiplicationHelper&lt; T, U, MultiplicationState_CastUint &gt;</class>
    <class kind="class">MultiplicationHelper&lt; T, U, MultiplicationState_CastInt64 &gt;</class>
    <class kind="class">MultiplicationHelper&lt; T, U, MultiplicationState_CastUint64 &gt;</class>
    <class kind="class">LargeIntRegMultiply</class>
    <class kind="class">LargeIntRegMultiply&lt; unsigned __int64, unsigned __int64 &gt;</class>
    <class kind="class">LargeIntRegMultiply&lt; unsigned __int64, unsigned __int32 &gt;</class>
    <class kind="class">LargeIntRegMultiply&lt; unsigned __int64, signed __int32 &gt;</class>
    <class kind="class">LargeIntRegMultiply&lt; unsigned __int64, signed __int64 &gt;</class>
    <class kind="class">LargeIntRegMultiply&lt; signed __int32, unsigned __int64 &gt;</class>
    <class kind="class">LargeIntRegMultiply&lt; unsigned __int32, unsigned __int64 &gt;</class>
    <class kind="class">LargeIntRegMultiply&lt; unsigned __int32, signed __int64 &gt;</class>
    <class kind="class">LargeIntRegMultiply&lt; signed __int64, signed __int64 &gt;</class>
    <class kind="class">LargeIntRegMultiply&lt; signed __int64, unsigned __int32 &gt;</class>
    <class kind="class">LargeIntRegMultiply&lt; signed __int64, signed __int32 &gt;</class>
    <class kind="class">LargeIntRegMultiply&lt; signed __int32, signed __int64 &gt;</class>
    <class kind="class">LargeIntRegMultiply&lt; signed __int64, unsigned __int64 &gt;</class>
    <class kind="class">MultiplicationHelper&lt; T, U, MultiplicationState_Uint64Uint64 &gt;</class>
    <class kind="class">MultiplicationHelper&lt; T, U, MultiplicationState_Uint64Uint &gt;</class>
    <class kind="class">MultiplicationHelper&lt; T, U, MultiplicationState_UintUint64 &gt;</class>
    <class kind="class">MultiplicationHelper&lt; T, U, MultiplicationState_Uint64Int &gt;</class>
    <class kind="class">MultiplicationHelper&lt; T, U, MultiplicationState_Uint64Int64 &gt;</class>
    <class kind="class">MultiplicationHelper&lt; T, U, MultiplicationState_UintInt64 &gt;</class>
    <class kind="class">MultiplicationHelper&lt; T, U, MultiplicationState_Int64Uint &gt;</class>
    <class kind="class">MultiplicationHelper&lt; T, U, MultiplicationState_Int64Int64 &gt;</class>
    <class kind="class">MultiplicationHelper&lt; T, U, MultiplicationState_Int64Int &gt;</class>
    <class kind="class">MultiplicationHelper&lt; T, U, MultiplicationState_IntUint64 &gt;</class>
    <class kind="class">MultiplicationHelper&lt; T, U, MultiplicationState_Int64Uint64 &gt;</class>
    <class kind="class">MultiplicationHelper&lt; T, U, MultiplicationState_IntInt64 &gt;</class>
    <class kind="class">DivisionMethod</class>
    <class kind="class">DivisionHelper</class>
    <class kind="class">DivisionHelper&lt; T, U, DivisionState_OK &gt;</class>
    <class kind="class">DivisionHelper&lt; T, U, DivisionState_UnsignedSigned &gt;</class>
    <class kind="class">DivisionHelper&lt; T, U, DivisionState_SignedUnsigned32 &gt;</class>
    <class kind="class">DivisionHelper&lt; T, U, DivisionState_SignedUnsigned64 &gt;</class>
    <class kind="class">DivisionHelper&lt; T, U, DivisionState_SignedUnsigned &gt;</class>
    <class kind="class">DivisionHelper&lt; T, U, DivisionState_SignedSigned &gt;</class>
    <class kind="class">AdditionMethod</class>
    <class kind="class">AdditionHelper</class>
    <class kind="class">AdditionHelper&lt; T, U, AdditionState_CastIntCheckMax &gt;</class>
    <class kind="class">AdditionHelper&lt; T, U, AdditionState_CastUintCheckOverflow &gt;</class>
    <class kind="class">AdditionHelper&lt; T, U, AdditionState_CastUintCheckOverflowMax &gt;</class>
    <class kind="class">AdditionHelper&lt; T, U, AdditionState_CastUint64CheckOverflow &gt;</class>
    <class kind="class">AdditionHelper&lt; T, U, AdditionState_CastUint64CheckOverflowMax &gt;</class>
    <class kind="class">AdditionHelper&lt; T, U, AdditionState_CastIntCheckMinMax &gt;</class>
    <class kind="class">AdditionHelper&lt; T, U, AdditionState_CastInt64CheckMinMax &gt;</class>
    <class kind="class">AdditionHelper&lt; T, U, AdditionState_CastInt64CheckMax &gt;</class>
    <class kind="class">AdditionHelper&lt; T, U, AdditionState_CastUint64CheckMinMax &gt;</class>
    <class kind="class">AdditionHelper&lt; T, U, AdditionState_CastUint64CheckMinMax2 &gt;</class>
    <class kind="class">AdditionHelper&lt; T, U, AdditionState_CastInt64CheckOverflow &gt;</class>
    <class kind="class">AdditionHelper&lt; T, U, AdditionState_CastInt64CheckOverflowMinMax &gt;</class>
    <class kind="class">AdditionHelper&lt; T, U, AdditionState_CastInt64CheckOverflowMax &gt;</class>
    <class kind="class">AdditionHelper&lt; T, U, AdditionState_ManualCheckInt64Uint64 &gt;</class>
    <class kind="class">AdditionHelper&lt; T, U, AdditionState_ManualCheck &gt;</class>
    <class kind="class">SubtractionMethod</class>
    <class kind="class">SubtractionMethod2</class>
    <class kind="class">SubtractionHelper</class>
    <class kind="class">SubtractionHelper&lt; T, U, SubtractionState_BothUnsigned &gt;</class>
    <class kind="class">SubtractionHelper&lt; T, U, SubtractionState_BothUnsigned2 &gt;</class>
    <class kind="class">SubtractionHelper&lt; T, U, SubtractionState_CastIntCheckMinMax &gt;</class>
    <class kind="class">SubtractionHelper&lt; U, T, SubtractionState_CastIntCheckMinMax2 &gt;</class>
    <class kind="class">SubtractionHelper&lt; T, U, SubtractionState_CastIntCheckMin &gt;</class>
    <class kind="class">SubtractionHelper&lt; T, U, SubtractionState_CastInt64CheckMinMax &gt;</class>
    <class kind="class">SubtractionHelper&lt; U, T, SubtractionState_CastInt64CheckMinMax2 &gt;</class>
    <class kind="class">SubtractionHelper&lt; T, U, SubtractionState_CastInt64CheckMin &gt;</class>
    <class kind="class">SubtractionHelper&lt; T, U, SubtractionState_Uint64Int &gt;</class>
    <class kind="class">SubtractionHelper&lt; U, T, SubtractionState_Uint64Int2 &gt;</class>
    <class kind="class">SubtractionHelper&lt; T, U, SubtractionState_UintInt64 &gt;</class>
    <class kind="class">SubtractionHelper&lt; U, T, SubtractionState_UintInt642 &gt;</class>
    <class kind="class">SubtractionHelper&lt; T, U, SubtractionState_Int64Int &gt;</class>
    <class kind="class">SubtractionHelper&lt; U, T, SubtractionState_Int64Int2 &gt;</class>
    <class kind="class">SubtractionHelper&lt; T, U, SubtractionState_IntInt64 &gt;</class>
    <class kind="class">SubtractionHelper&lt; U, T, SubtractionState_IntInt642 &gt;</class>
    <class kind="class">SubtractionHelper&lt; T, U, SubtractionState_Int64Uint &gt;</class>
    <class kind="class">SubtractionHelper&lt; U, T, SubtractionState_Int64Uint2 &gt;</class>
    <class kind="class">SubtractionHelper&lt; T, U, SubtractionState_IntUint64 &gt;</class>
    <class kind="class">SubtractionHelper&lt; U, T, SubtractionState_IntUint642 &gt;</class>
    <class kind="class">SubtractionHelper&lt; T, U, SubtractionState_Int64Uint64 &gt;</class>
    <class kind="class">SubtractionHelper&lt; U, T, SubtractionState_Int64Uint642 &gt;</class>
    <class kind="class">BinaryMethod</class>
    <class kind="class">BinaryAndHelper</class>
    <class kind="class">BinaryAndHelper&lt; T, U, BinaryState_OK &gt;</class>
    <class kind="class">BinaryAndHelper&lt; T, U, BinaryState_Int8 &gt;</class>
    <class kind="class">BinaryAndHelper&lt; T, U, BinaryState_Int16 &gt;</class>
    <class kind="class">BinaryAndHelper&lt; T, U, BinaryState_Int32 &gt;</class>
    <class kind="class">BinaryOrHelper</class>
    <class kind="class">BinaryOrHelper&lt; T, U, BinaryState_OK &gt;</class>
    <class kind="class">BinaryOrHelper&lt; T, U, BinaryState_Int8 &gt;</class>
    <class kind="class">BinaryOrHelper&lt; T, U, BinaryState_Int16 &gt;</class>
    <class kind="class">BinaryOrHelper&lt; T, U, BinaryState_Int32 &gt;</class>
    <class kind="class">BinaryXorHelper</class>
    <class kind="class">BinaryXorHelper&lt; T, U, BinaryState_OK &gt;</class>
    <class kind="class">BinaryXorHelper&lt; T, U, BinaryState_Int8 &gt;</class>
    <class kind="class">BinaryXorHelper&lt; T, U, BinaryState_Int16 &gt;</class>
    <class kind="class">BinaryXorHelper&lt; T, U, BinaryState_Int32 &gt;</class>
    <class kind="class">SafeInt</class>
    <class kind="class">ModulusSimpleCaseHelper</class>
    <class kind="class">ModulusSignedCaseHelper</class>
    <class kind="class">ModulusSignedCaseHelper&lt; T, E, true &gt;</class>
    <class kind="class">ModulusSignedCaseHelper&lt; T, E, false &gt;</class>
    <class kind="class">ModulusSimpleCaseHelper&lt; T, U, E, true &gt;</class>
    <class kind="class">ModulusSimpleCaseHelper&lt; T, U, E, false &gt;</class>
    <class kind="class">DivisionNegativeCornerCaseHelper</class>
    <class kind="class">DivisionNegativeCornerCaseHelper&lt; T, U, E, true &gt;</class>
    <class kind="class">DivisionNegativeCornerCaseHelper&lt; T, U, E, false &gt;</class>
    <class kind="class">DivisionCornerCaseHelper</class>
    <class kind="class">DivisionCornerCaseHelper&lt; T, U, E, true &gt;</class>
    <class kind="class">DivisionCornerCaseHelper&lt; T, U, E, false &gt;</class>
    <class kind="class">DivisionCornerCaseHelper2</class>
    <class kind="class">DivisionCornerCaseHelper2&lt; T, U, E, true &gt;</class>
    <class kind="class">DivisionCornerCaseHelper2&lt; T, U, E, false &gt;</class>
    <namespace>SafeIntInternal</namespace>
    <member kind="define">
      <type>#define</type>
      <name>SAFEINT_USE_INTRINSICS</name>
      <anchorfile>_safe_int_8hh.html</anchorfile>
      <anchor>a40e988491327401300b93498cb3a8e0e</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>NEEDS_NULLPTR_DEFINED</name>
      <anchorfile>_safe_int_8hh.html</anchorfile>
      <anchor>aa92d14d6f0ddfefa47082f5cf402caa2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>nullptr</name>
      <anchorfile>_safe_int_8hh.html</anchorfile>
      <anchor>ab979d9d4b4923f7c54d6caa6e1a61936</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>C_ASSERT</name>
      <anchorfile>_safe_int_8hh.html</anchorfile>
      <anchor>abf28f80e90bef143796d9dfcf34dd239</anchor>
      <arglist>(e)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>NotReachedReturn</name>
      <anchorfile>_safe_int_8hh.html</anchorfile>
      <anchor>a632cf9168f62e5787460681d80fb4f75</anchor>
      <arglist>(x)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SafeIntDefaultExceptionHandler</name>
      <anchorfile>_safe_int_8hh.html</anchorfile>
      <anchor>af0c0f82fcc5fa91b8b9e79fc04a0eb17</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>BinaryAssert</name>
      <anchorfile>_safe_int_8hh.html</anchorfile>
      <anchor>a3bf662d280e45c5169d970d0a16c1c47</anchor>
      <arglist>(x)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ShiftAssert</name>
      <anchorfile>_safe_int_8hh.html</anchorfile>
      <anchor>a734e42ef735f20b39682da8d31f8912b</anchor>
      <arglist>(x)</arglist>
    </member>
    <member kind="typedef">
      <type>char</type>
      <name>__C_ASSERT__</name>
      <anchorfile>_safe_int_8hh.html</anchorfile>
      <anchor>a7dff6defbffc33e0ada71bbed4b7734c</anchor>
      <arglist>[(-1==(int) 0xffffffff) ? 1 :-1]</arglist>
    </member>
    <member kind="typedef">
      <type>SafeIntInternal::SafeIntExceptionHandler&lt; SafeIntException &gt;</type>
      <name>CPlusPlusExceptionHandler</name>
      <anchorfile>_safe_int_8hh.html</anchorfile>
      <anchor>a43e2a55ee49c5230a2539a73d045cb9a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>SafeIntError</name>
      <anchorfile>_safe_int_8hh.html</anchorfile>
      <anchor>a704a7e8786f8870a8a0f4238fb4768c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SafeIntNoError</name>
      <anchorfile>_safe_int_8hh.html</anchorfile>
      <anchor>a704a7e8786f8870a8a0f4238fb4768c9ab9cda9901cedf8ccc7f89e75cb2be6d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SafeIntArithmeticOverflow</name>
      <anchorfile>_safe_int_8hh.html</anchorfile>
      <anchor>a704a7e8786f8870a8a0f4238fb4768c9acb10ad0ce9a45bb36681d094e9d2e479</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SafeIntDivideByZero</name>
      <anchorfile>_safe_int_8hh.html</anchorfile>
      <anchor>a704a7e8786f8870a8a0f4238fb4768c9a83bfa6202a6cee4b7a220276cc80ff32</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>AbsMethod</name>
      <anchorfile>_safe_int_8hh.html</anchorfile>
      <anchor>a95217141ef54dab994f48f370c64e61d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>AbsMethodInt</name>
      <anchorfile>_safe_int_8hh.html</anchorfile>
      <anchor>a95217141ef54dab994f48f370c64e61da844098dc9056b01ba82b87c3fd615e58</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>AbsMethodInt64</name>
      <anchorfile>_safe_int_8hh.html</anchorfile>
      <anchor>a95217141ef54dab994f48f370c64e61da2a2c0eb1ba34d183d0c41865e3f0d007</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>AbsMethodNoop</name>
      <anchorfile>_safe_int_8hh.html</anchorfile>
      <anchor>a95217141ef54dab994f48f370c64e61da701e3c2c1f044aa7e6d00ca714587736</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>CastMethod</name>
      <anchorfile>_safe_int_8hh.html</anchorfile>
      <anchor>a2e52a9d0f080498f26775cb2ebf456a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CastOK</name>
      <anchorfile>_safe_int_8hh.html</anchorfile>
      <anchor>a2e52a9d0f080498f26775cb2ebf456a3ab1dcaec419e03f815e0087e4dabbd4ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CastCheckLTZero</name>
      <anchorfile>_safe_int_8hh.html</anchorfile>
      <anchor>a2e52a9d0f080498f26775cb2ebf456a3a72d2589951bf8a884191292e42572ca6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CastCheckGTMax</name>
      <anchorfile>_safe_int_8hh.html</anchorfile>
      <anchor>a2e52a9d0f080498f26775cb2ebf456a3ab4a8fc9cb63f9230318e38b99cb225db</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CastCheckMinMaxUnsigned</name>
      <anchorfile>_safe_int_8hh.html</anchorfile>
      <anchor>a2e52a9d0f080498f26775cb2ebf456a3aabc3764301b8fb58c5f4668229f9c0c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CastCheckMinMaxSigned</name>
      <anchorfile>_safe_int_8hh.html</anchorfile>
      <anchor>a2e52a9d0f080498f26775cb2ebf456a3a2e765338010007c17e84ccbb3b1fb3bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CastToFloat</name>
      <anchorfile>_safe_int_8hh.html</anchorfile>
      <anchor>a2e52a9d0f080498f26775cb2ebf456a3ad461a4a95972b284bb4b2ec8390a77cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CastFromFloat</name>
      <anchorfile>_safe_int_8hh.html</anchorfile>
      <anchor>a2e52a9d0f080498f26775cb2ebf456a3a0ed974e1411c524d244e9edbde436a4c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CastToBool</name>
      <anchorfile>_safe_int_8hh.html</anchorfile>
      <anchor>a2e52a9d0f080498f26775cb2ebf456a3a7e695f0affcf669a95cb363bf6d2d348</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CastFromBool</name>
      <anchorfile>_safe_int_8hh.html</anchorfile>
      <anchor>a2e52a9d0f080498f26775cb2ebf456a3acc765853bae3e49392fcf56a597f4f0a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>ComparisonMethod</name>
      <anchorfile>_safe_int_8hh.html</anchorfile>
      <anchor>ac131c83a41f5ca3fc18970fa8b66c00b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ComparisonMethod_Ok</name>
      <anchorfile>_safe_int_8hh.html</anchorfile>
      <anchor>ac131c83a41f5ca3fc18970fa8b66c00baf410151662eff30d832e895015c2404e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ComparisonMethod_CastInt</name>
      <anchorfile>_safe_int_8hh.html</anchorfile>
      <anchor>ac131c83a41f5ca3fc18970fa8b66c00ba8dd18e135b466b332b442372159475a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ComparisonMethod_CastInt64</name>
      <anchorfile>_safe_int_8hh.html</anchorfile>
      <anchor>ac131c83a41f5ca3fc18970fa8b66c00bacc0e9b1ccad5db1d144f2e2871adbff4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ComparisonMethod_UnsignedT</name>
      <anchorfile>_safe_int_8hh.html</anchorfile>
      <anchor>ac131c83a41f5ca3fc18970fa8b66c00ba5dd7059d4a9a707d3a070cf92b08c756</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ComparisonMethod_UnsignedU</name>
      <anchorfile>_safe_int_8hh.html</anchorfile>
      <anchor>ac131c83a41f5ca3fc18970fa8b66c00ba45cb28a9e36e4fdb574ef463f71867cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>MultiplicationState</name>
      <anchorfile>_safe_int_8hh.html</anchorfile>
      <anchor>aa6afafc6d7eb36981d9801bba984c24c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MultiplicationState_CastInt</name>
      <anchorfile>_safe_int_8hh.html</anchorfile>
      <anchor>aa6afafc6d7eb36981d9801bba984c24ca4b54d8d3cecb9d26f453a60bcb50ea56</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MultiplicationState_CastInt64</name>
      <anchorfile>_safe_int_8hh.html</anchorfile>
      <anchor>aa6afafc6d7eb36981d9801bba984c24ca146820879440a579367fffa665af3aa3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MultiplicationState_CastUint</name>
      <anchorfile>_safe_int_8hh.html</anchorfile>
      <anchor>aa6afafc6d7eb36981d9801bba984c24ca42f32a3f49f72423d71dcf63d9204981</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MultiplicationState_CastUint64</name>
      <anchorfile>_safe_int_8hh.html</anchorfile>
      <anchor>aa6afafc6d7eb36981d9801bba984c24ca196857540a5d3fa5bcf0ed11eb0ff8cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MultiplicationState_Uint64Uint</name>
      <anchorfile>_safe_int_8hh.html</anchorfile>
      <anchor>aa6afafc6d7eb36981d9801bba984c24caa8edce21c515b77840a1ba83bf3cbb1f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MultiplicationState_Uint64Uint64</name>
      <anchorfile>_safe_int_8hh.html</anchorfile>
      <anchor>aa6afafc6d7eb36981d9801bba984c24ca7923682a4d7529bf564f11e58f97c27c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MultiplicationState_Uint64Int</name>
      <anchorfile>_safe_int_8hh.html</anchorfile>
      <anchor>aa6afafc6d7eb36981d9801bba984c24cada0073290eb23a94b115f12162930b8b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MultiplicationState_Uint64Int64</name>
      <anchorfile>_safe_int_8hh.html</anchorfile>
      <anchor>aa6afafc6d7eb36981d9801bba984c24ca870cce5cc13fbf14c34602a62b1f1fa0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MultiplicationState_UintUint64</name>
      <anchorfile>_safe_int_8hh.html</anchorfile>
      <anchor>aa6afafc6d7eb36981d9801bba984c24ca48bff4116439f8fc9365047a4188e800</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MultiplicationState_UintInt64</name>
      <anchorfile>_safe_int_8hh.html</anchorfile>
      <anchor>aa6afafc6d7eb36981d9801bba984c24ca65933f23d8325dc69d9077d703a7441a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MultiplicationState_Int64Uint</name>
      <anchorfile>_safe_int_8hh.html</anchorfile>
      <anchor>aa6afafc6d7eb36981d9801bba984c24cab46654e913c9769ab8283f6c1856144a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MultiplicationState_Int64Int64</name>
      <anchorfile>_safe_int_8hh.html</anchorfile>
      <anchor>aa6afafc6d7eb36981d9801bba984c24caa766a7ba0a6d14d3bc943b65ca34d19f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MultiplicationState_Int64Int</name>
      <anchorfile>_safe_int_8hh.html</anchorfile>
      <anchor>aa6afafc6d7eb36981d9801bba984c24cabb1cd0608ae936b9761f54f5064a9f37</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MultiplicationState_IntUint64</name>
      <anchorfile>_safe_int_8hh.html</anchorfile>
      <anchor>aa6afafc6d7eb36981d9801bba984c24cafa4143a7831694ac6ac437927006a773</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MultiplicationState_IntInt64</name>
      <anchorfile>_safe_int_8hh.html</anchorfile>
      <anchor>aa6afafc6d7eb36981d9801bba984c24ca0a000b1793ebc278b53b70aa865cac84</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MultiplicationState_Int64Uint64</name>
      <anchorfile>_safe_int_8hh.html</anchorfile>
      <anchor>aa6afafc6d7eb36981d9801bba984c24cacead65a15d10135a17959b0df8aed9a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MultiplicationState_Error</name>
      <anchorfile>_safe_int_8hh.html</anchorfile>
      <anchor>aa6afafc6d7eb36981d9801bba984c24ca8b6ecfe82be1303e10a42899450f1828</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>DivisionState</name>
      <anchorfile>_safe_int_8hh.html</anchorfile>
      <anchor>a60f0f5b9a0d7c76738dc9802f6ff671a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DivisionState_OK</name>
      <anchorfile>_safe_int_8hh.html</anchorfile>
      <anchor>a60f0f5b9a0d7c76738dc9802f6ff671aad87ff2685247a5a13ddf58379cdb9b2d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DivisionState_UnsignedSigned</name>
      <anchorfile>_safe_int_8hh.html</anchorfile>
      <anchor>a60f0f5b9a0d7c76738dc9802f6ff671aa2c89846eb7ca52af42ecc4732db42cd6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DivisionState_SignedUnsigned32</name>
      <anchorfile>_safe_int_8hh.html</anchorfile>
      <anchor>a60f0f5b9a0d7c76738dc9802f6ff671aa211e5d072fd913e0d31c0b53a84afd64</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DivisionState_SignedUnsigned64</name>
      <anchorfile>_safe_int_8hh.html</anchorfile>
      <anchor>a60f0f5b9a0d7c76738dc9802f6ff671aa05d86286f9da93b5280616cde0586090</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DivisionState_SignedUnsigned</name>
      <anchorfile>_safe_int_8hh.html</anchorfile>
      <anchor>a60f0f5b9a0d7c76738dc9802f6ff671aa51fd25f68c6d0143c133f21b96a9ca94</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DivisionState_SignedSigned</name>
      <anchorfile>_safe_int_8hh.html</anchorfile>
      <anchor>a60f0f5b9a0d7c76738dc9802f6ff671aadca2e4ed30319b0fa75c8b5b95b38101</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>AdditionState</name>
      <anchorfile>_safe_int_8hh.html</anchorfile>
      <anchor>a704349a8888bca9dfad88711d71c8ac7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>AdditionState_CastIntCheckMax</name>
      <anchorfile>_safe_int_8hh.html</anchorfile>
      <anchor>a704349a8888bca9dfad88711d71c8ac7a841e7462c7fb4f4626c289c0c493d79b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>AdditionState_CastUintCheckOverflow</name>
      <anchorfile>_safe_int_8hh.html</anchorfile>
      <anchor>a704349a8888bca9dfad88711d71c8ac7ab08ea487e520cceb4338ba307ec1cdc6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>AdditionState_CastUintCheckOverflowMax</name>
      <anchorfile>_safe_int_8hh.html</anchorfile>
      <anchor>a704349a8888bca9dfad88711d71c8ac7af03befdf21ab51956caa11db9fed89d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>AdditionState_CastUint64CheckOverflow</name>
      <anchorfile>_safe_int_8hh.html</anchorfile>
      <anchor>a704349a8888bca9dfad88711d71c8ac7a4d334ae40da3c19d85276c8b4305ae09</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>AdditionState_CastUint64CheckOverflowMax</name>
      <anchorfile>_safe_int_8hh.html</anchorfile>
      <anchor>a704349a8888bca9dfad88711d71c8ac7ae5e9b3e2839999ca2564f87013ec3b59</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>AdditionState_CastIntCheckMinMax</name>
      <anchorfile>_safe_int_8hh.html</anchorfile>
      <anchor>a704349a8888bca9dfad88711d71c8ac7a11cfa99aed9b24b11d2efb8061cd0279</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>AdditionState_CastInt64CheckMinMax</name>
      <anchorfile>_safe_int_8hh.html</anchorfile>
      <anchor>a704349a8888bca9dfad88711d71c8ac7a7290f237cf89ed6c3805ae2b65980100</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>AdditionState_CastInt64CheckMax</name>
      <anchorfile>_safe_int_8hh.html</anchorfile>
      <anchor>a704349a8888bca9dfad88711d71c8ac7a432358ed6f7c3431aabe493bc66d7968</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>AdditionState_CastUint64CheckMinMax</name>
      <anchorfile>_safe_int_8hh.html</anchorfile>
      <anchor>a704349a8888bca9dfad88711d71c8ac7a27fe0a1c703c9e2c3b60d85072ef842f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>AdditionState_CastUint64CheckMinMax2</name>
      <anchorfile>_safe_int_8hh.html</anchorfile>
      <anchor>a704349a8888bca9dfad88711d71c8ac7aac4a81656c11a288b4f7760bea1e40bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>AdditionState_CastInt64CheckOverflow</name>
      <anchorfile>_safe_int_8hh.html</anchorfile>
      <anchor>a704349a8888bca9dfad88711d71c8ac7a63e3de35a27c21622e425df6acd9323c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>AdditionState_CastInt64CheckOverflowMinMax</name>
      <anchorfile>_safe_int_8hh.html</anchorfile>
      <anchor>a704349a8888bca9dfad88711d71c8ac7a7bbe84b387e1332fd19a3828c2d85257</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>AdditionState_CastInt64CheckOverflowMax</name>
      <anchorfile>_safe_int_8hh.html</anchorfile>
      <anchor>a704349a8888bca9dfad88711d71c8ac7ab67ebd9115b7a23c4a8d4884ff6f819a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>AdditionState_ManualCheckInt64Uint64</name>
      <anchorfile>_safe_int_8hh.html</anchorfile>
      <anchor>a704349a8888bca9dfad88711d71c8ac7a1e5be45829052b0953ad6f742bdcf79d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>AdditionState_ManualCheck</name>
      <anchorfile>_safe_int_8hh.html</anchorfile>
      <anchor>a704349a8888bca9dfad88711d71c8ac7af4d42237202abf9f04a4d73b30ac66ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>AdditionState_Error</name>
      <anchorfile>_safe_int_8hh.html</anchorfile>
      <anchor>a704349a8888bca9dfad88711d71c8ac7a0d8e9bda383e7f477ddd022c8aacbb50</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>SubtractionState</name>
      <anchorfile>_safe_int_8hh.html</anchorfile>
      <anchor>a2014e485880d612e9974bf1f30ddb73f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SubtractionState_BothUnsigned</name>
      <anchorfile>_safe_int_8hh.html</anchorfile>
      <anchor>a2014e485880d612e9974bf1f30ddb73faeab4b8dc395f14a5406508f863ad6707</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SubtractionState_CastIntCheckMinMax</name>
      <anchorfile>_safe_int_8hh.html</anchorfile>
      <anchor>a2014e485880d612e9974bf1f30ddb73fa8026defa424cac0e3c823e8a2478e2b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SubtractionState_CastIntCheckMin</name>
      <anchorfile>_safe_int_8hh.html</anchorfile>
      <anchor>a2014e485880d612e9974bf1f30ddb73fa43c0b5b08d73c04f562cfbb58e3793ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SubtractionState_CastInt64CheckMinMax</name>
      <anchorfile>_safe_int_8hh.html</anchorfile>
      <anchor>a2014e485880d612e9974bf1f30ddb73fad26a41cfdb25cbe32a9c6b00e941f1cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SubtractionState_CastInt64CheckMin</name>
      <anchorfile>_safe_int_8hh.html</anchorfile>
      <anchor>a2014e485880d612e9974bf1f30ddb73fa46969a6dfa1fcd2ac0109cf3b8fa0086</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SubtractionState_Uint64Int</name>
      <anchorfile>_safe_int_8hh.html</anchorfile>
      <anchor>a2014e485880d612e9974bf1f30ddb73fa73e1dbad02c118451c2990cd279ea46d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SubtractionState_UintInt64</name>
      <anchorfile>_safe_int_8hh.html</anchorfile>
      <anchor>a2014e485880d612e9974bf1f30ddb73fafaf0c8474f66f21e6456ec65669f5bb4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SubtractionState_Int64Int</name>
      <anchorfile>_safe_int_8hh.html</anchorfile>
      <anchor>a2014e485880d612e9974bf1f30ddb73facd6bee974c9a3279b9d6448d9ce51acd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SubtractionState_IntInt64</name>
      <anchorfile>_safe_int_8hh.html</anchorfile>
      <anchor>a2014e485880d612e9974bf1f30ddb73fa812e98f23c92eb6e131d5a212b4fadfc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SubtractionState_Int64Uint</name>
      <anchorfile>_safe_int_8hh.html</anchorfile>
      <anchor>a2014e485880d612e9974bf1f30ddb73fa7039b8a5bc70e4212866804671fd30a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SubtractionState_IntUint64</name>
      <anchorfile>_safe_int_8hh.html</anchorfile>
      <anchor>a2014e485880d612e9974bf1f30ddb73fae9af0fb12678f63c53c494ae6ab28fc4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SubtractionState_Int64Uint64</name>
      <anchorfile>_safe_int_8hh.html</anchorfile>
      <anchor>a2014e485880d612e9974bf1f30ddb73fa5d8fcda1e03af1de4183b718e8f0d990</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SubtractionState_BothUnsigned2</name>
      <anchorfile>_safe_int_8hh.html</anchorfile>
      <anchor>a2014e485880d612e9974bf1f30ddb73fae43bdf1194c87cc800f5cbeaa1d08a0b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SubtractionState_CastIntCheckMinMax2</name>
      <anchorfile>_safe_int_8hh.html</anchorfile>
      <anchor>a2014e485880d612e9974bf1f30ddb73fa45657848aba6bedaeb4dc3d380165f12</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SubtractionState_CastInt64CheckMinMax2</name>
      <anchorfile>_safe_int_8hh.html</anchorfile>
      <anchor>a2014e485880d612e9974bf1f30ddb73fa136671770c10f1751bdfeb9b64198963</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SubtractionState_Uint64Int2</name>
      <anchorfile>_safe_int_8hh.html</anchorfile>
      <anchor>a2014e485880d612e9974bf1f30ddb73fa16ddef57c6325fab06d495a5ba37b730</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SubtractionState_UintInt642</name>
      <anchorfile>_safe_int_8hh.html</anchorfile>
      <anchor>a2014e485880d612e9974bf1f30ddb73fa4dfffacca38affdce5e5c77fecfa7d9a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SubtractionState_Int64Int2</name>
      <anchorfile>_safe_int_8hh.html</anchorfile>
      <anchor>a2014e485880d612e9974bf1f30ddb73face745b72898f08f63c3a2b145d455c44</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SubtractionState_IntInt642</name>
      <anchorfile>_safe_int_8hh.html</anchorfile>
      <anchor>a2014e485880d612e9974bf1f30ddb73fa25fe1e8ec67b0eabbdad5ca48e581cd5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SubtractionState_Int64Uint2</name>
      <anchorfile>_safe_int_8hh.html</anchorfile>
      <anchor>a2014e485880d612e9974bf1f30ddb73fa44c9678fb8ef0e08ba8c8aa8099dcfb9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SubtractionState_IntUint642</name>
      <anchorfile>_safe_int_8hh.html</anchorfile>
      <anchor>a2014e485880d612e9974bf1f30ddb73fae05ed423a9505fb9f378bc69b62de631</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SubtractionState_Int64Uint642</name>
      <anchorfile>_safe_int_8hh.html</anchorfile>
      <anchor>a2014e485880d612e9974bf1f30ddb73fa09147dbed957ee011e24363f01473160</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SubtractionState_Error</name>
      <anchorfile>_safe_int_8hh.html</anchorfile>
      <anchor>a2014e485880d612e9974bf1f30ddb73faa435a4374ae4dd111d6eaf1bd7c78a66</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>BinaryState</name>
      <anchorfile>_safe_int_8hh.html</anchorfile>
      <anchor>a35dced2409508fd9694e96a81050d966</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BinaryState_OK</name>
      <anchorfile>_safe_int_8hh.html</anchorfile>
      <anchor>a35dced2409508fd9694e96a81050d966a243f1664ed017acd8880480df4a5943e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BinaryState_Int8</name>
      <anchorfile>_safe_int_8hh.html</anchorfile>
      <anchor>a35dced2409508fd9694e96a81050d966ab568071588d60ab02451a999b0ed5ed7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BinaryState_Int16</name>
      <anchorfile>_safe_int_8hh.html</anchorfile>
      <anchor>a35dced2409508fd9694e96a81050d966a4ca586da68b332265ad6ad6756032ca2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BinaryState_Int32</name>
      <anchorfile>_safe_int_8hh.html</anchorfile>
      <anchor>a35dced2409508fd9694e96a81050d966a075dbaddcf3717a09df2ecb566fb730b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SafeIntExceptionAssert</name>
      <anchorfile>_safe_int_8hh.html</anchorfile>
      <anchor>a0d4be3bca9c78e845ba9d0280924f2a7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SafeCast</name>
      <anchorfile>_safe_int_8hh.html</anchorfile>
      <anchor>a133fdef08bae66c13c5b0999f3d0f0aa</anchor>
      <arglist>(const T From, U &amp;To)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SafeEquals</name>
      <anchorfile>_safe_int_8hh.html</anchorfile>
      <anchor>a8c04b0ba01fee065be06f718be127bbf</anchor>
      <arglist>(const T t, const U u)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SafeNotEquals</name>
      <anchorfile>_safe_int_8hh.html</anchorfile>
      <anchor>a823a5ed54eb10a99a251e9f8d4ffcb30</anchor>
      <arglist>(const T t, const U u)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SafeGreaterThan</name>
      <anchorfile>_safe_int_8hh.html</anchorfile>
      <anchor>ac2009b90f55f9c97d8b5dcdcc2a951f3</anchor>
      <arglist>(const T t, const U u)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SafeGreaterThanEquals</name>
      <anchorfile>_safe_int_8hh.html</anchorfile>
      <anchor>af57e3620aa740a24c2304729eb669678</anchor>
      <arglist>(const T t, const U u)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SafeLessThan</name>
      <anchorfile>_safe_int_8hh.html</anchorfile>
      <anchor>ac348b2bc393cee53bfb163508c9a015f</anchor>
      <arglist>(const T t, const U u)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SafeLessThanEquals</name>
      <anchorfile>_safe_int_8hh.html</anchorfile>
      <anchor>aa614f9c11c5033803346bee84db855f9</anchor>
      <arglist>(const T t, const U u)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SafeModulus</name>
      <anchorfile>_safe_int_8hh.html</anchorfile>
      <anchor>a160a1a0a7d29a4d8a815c4f2712eb4d1</anchor>
      <arglist>(const T &amp;t, const U &amp;u, T &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SafeMultiply</name>
      <anchorfile>_safe_int_8hh.html</anchorfile>
      <anchor>a0a05df577b50ccbbd854a3fb11328082</anchor>
      <arglist>(T t, U u, T &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SafeDivide</name>
      <anchorfile>_safe_int_8hh.html</anchorfile>
      <anchor>a0f653b08ad2c3fa35a9989f5dd43a220</anchor>
      <arglist>(T t, U u, T &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SafeAdd</name>
      <anchorfile>_safe_int_8hh.html</anchorfile>
      <anchor>aaa46d1421213f0706858de44b950344a</anchor>
      <arglist>(T t, U u, T &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SafeSubtract</name>
      <anchorfile>_safe_int_8hh.html</anchorfile>
      <anchor>a44b370642f7fa6cdd1a827332b29c430</anchor>
      <arglist>(T t, U u, T &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>SafeInt&lt; ptrdiff_t, CPlusPlusExceptionHandler &gt;</type>
      <name>SafePtrDiff</name>
      <anchorfile>_safe_int_8hh.html</anchorfile>
      <anchor>ad97c6398439f7f27ba8b9119dd8f59e6</anchor>
      <arglist>(const P *p1, const P *p2)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>_safe_int_8hh.html</anchorfile>
      <anchor>ab71a01a0a8223d68693ce732cbedc6a0</anchor>
      <arglist>(U lhs, SafeInt&lt; T, E &gt; rhs)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>_safe_int_8hh.html</anchorfile>
      <anchor>a18d4672a9b9d6286781a845bd7fe6dd2</anchor>
      <arglist>(SafeInt&lt; U, E &gt; lhs, SafeInt&lt; T, E &gt; rhs)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>_safe_int_8hh.html</anchorfile>
      <anchor>a1b345310eecc89d01cf5444a6d7f61a5</anchor>
      <arglist>(U lhs, SafeInt&lt; T, E &gt; rhs)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>_safe_int_8hh.html</anchorfile>
      <anchor>a8affe2023dd58089ccaf320faba79bbb</anchor>
      <arglist>(SafeInt&lt; T, E &gt; lhs, SafeInt&lt; U, E &gt; rhs)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;=</name>
      <anchorfile>_safe_int_8hh.html</anchorfile>
      <anchor>a2636e3c53581277711430ae2467c5b6f</anchor>
      <arglist>(U lhs, SafeInt&lt; T, E &gt; rhs)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;=</name>
      <anchorfile>_safe_int_8hh.html</anchorfile>
      <anchor>a4d974ee1c59d11be6be9fd613ba7fc63</anchor>
      <arglist>(SafeInt&lt; T, E &gt; lhs, SafeInt&lt; U, E &gt; rhs)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;=</name>
      <anchorfile>_safe_int_8hh.html</anchorfile>
      <anchor>aae320ebd003cbdaa0b17e709fd22740b</anchor>
      <arglist>(U lhs, SafeInt&lt; T, E &gt; rhs)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;=</name>
      <anchorfile>_safe_int_8hh.html</anchorfile>
      <anchor>adec18b4bf355ef0b94668d4d07c06837</anchor>
      <arglist>(SafeInt&lt; T, E &gt; lhs, SafeInt&lt; U, E &gt; rhs)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>_safe_int_8hh.html</anchorfile>
      <anchor>aa6a85da3ad4f81ae5c7da296c5a63322</anchor>
      <arglist>(bool lhs, SafeInt&lt; T, E &gt; rhs)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>_safe_int_8hh.html</anchorfile>
      <anchor>a93e1c20baa3509f35882e5dcc4911a6e</anchor>
      <arglist>(U lhs, SafeInt&lt; T, E &gt; rhs)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>_safe_int_8hh.html</anchorfile>
      <anchor>aad2d5aadc0da146814377678e04e613e</anchor>
      <arglist>(SafeInt&lt; T, E &gt; lhs, SafeInt&lt; U, E &gt; rhs)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>_safe_int_8hh.html</anchorfile>
      <anchor>ab6552b8774481aa7367c833b6c200160</anchor>
      <arglist>(U lhs, SafeInt&lt; T, E &gt; rhs)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>_safe_int_8hh.html</anchorfile>
      <anchor>a6f08918dc5ca724e2bab3f18d135a42f</anchor>
      <arglist>(bool lhs, SafeInt&lt; T, E &gt; rhs)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>_safe_int_8hh.html</anchorfile>
      <anchor>a48977847932d31896bbfd6c1fab50734</anchor>
      <arglist>(SafeInt&lt; T, E &gt; lhs, SafeInt&lt; U, E &gt; rhs)</arglist>
    </member>
    <member kind="function">
      <type>SafeInt&lt; T, E &gt;</type>
      <name>operator%</name>
      <anchorfile>_safe_int_8hh.html</anchorfile>
      <anchor>ab6b05b69c5d6f101c37776e0a676e7ed</anchor>
      <arglist>(U lhs, SafeInt&lt; T, E &gt; rhs)</arglist>
    </member>
    <member kind="function">
      <type>SafeInt&lt; T, E &gt;</type>
      <name>operator*</name>
      <anchorfile>_safe_int_8hh.html</anchorfile>
      <anchor>a88ad6d525249379fad873f6bcded234d</anchor>
      <arglist>(U lhs, SafeInt&lt; T, E &gt; rhs)</arglist>
    </member>
    <member kind="function">
      <type>SafeInt&lt; T, E &gt;</type>
      <name>operator/</name>
      <anchorfile>_safe_int_8hh.html</anchorfile>
      <anchor>ac310d9600aba05ac4d482602c9aa9c17</anchor>
      <arglist>(U lhs, SafeInt&lt; T, E &gt; rhs)</arglist>
    </member>
    <member kind="function">
      <type>SafeInt&lt; T, E &gt;</type>
      <name>operator+</name>
      <anchorfile>_safe_int_8hh.html</anchorfile>
      <anchor>a7816738eedcff553e45e966272125b2a</anchor>
      <arglist>(U lhs, SafeInt&lt; T, E &gt; rhs)</arglist>
    </member>
    <member kind="function">
      <type>SafeInt&lt; T, E &gt;</type>
      <name>operator-</name>
      <anchorfile>_safe_int_8hh.html</anchorfile>
      <anchor>a6bd4e80ff09c5129275143461b7f27b2</anchor>
      <arglist>(U lhs, SafeInt&lt; T, E &gt; rhs)</arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>operator+=</name>
      <anchorfile>_safe_int_8hh.html</anchorfile>
      <anchor>a824e1c838953828784597768acf8b4b1</anchor>
      <arglist>(T &amp;lhs, SafeInt&lt; U, E &gt; rhs)</arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>operator-=</name>
      <anchorfile>_safe_int_8hh.html</anchorfile>
      <anchor>afb2f9394f6120b338e65ee4d8cd9f828</anchor>
      <arglist>(T &amp;lhs, SafeInt&lt; U, E &gt; rhs)</arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>operator*=</name>
      <anchorfile>_safe_int_8hh.html</anchorfile>
      <anchor>ac4305db91311ad1fd7f06ec661eb2c17</anchor>
      <arglist>(T &amp;lhs, SafeInt&lt; U, E &gt; rhs)</arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>operator/=</name>
      <anchorfile>_safe_int_8hh.html</anchorfile>
      <anchor>aca055b6ca3a9d1e0bb6a5511b124f7b9</anchor>
      <arglist>(T &amp;lhs, SafeInt&lt; U, E &gt; rhs)</arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>operator%=</name>
      <anchorfile>_safe_int_8hh.html</anchorfile>
      <anchor>a57d0cef4a7ccffff6d9d6abb5c34e695</anchor>
      <arglist>(T &amp;lhs, SafeInt&lt; U, E &gt; rhs)</arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>operator&amp;=</name>
      <anchorfile>_safe_int_8hh.html</anchorfile>
      <anchor>accd471337809f7b93663300e5a2e2c29</anchor>
      <arglist>(T &amp;lhs, SafeInt&lt; U, E &gt; rhs)</arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>operator^=</name>
      <anchorfile>_safe_int_8hh.html</anchorfile>
      <anchor>ac361ab2cda3c94bff50b328eccf6ba89</anchor>
      <arglist>(T &amp;lhs, SafeInt&lt; U, E &gt; rhs)</arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>operator|=</name>
      <anchorfile>_safe_int_8hh.html</anchorfile>
      <anchor>a30ea3da90898d0160d81bf3e3de8c9b0</anchor>
      <arglist>(T &amp;lhs, SafeInt&lt; U, E &gt; rhs)</arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>operator&lt;&lt;=</name>
      <anchorfile>_safe_int_8hh.html</anchorfile>
      <anchor>a49c91b01648ed9cf15528ce258d660dd</anchor>
      <arglist>(T &amp;lhs, SafeInt&lt; U, E &gt; rhs)</arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>operator&gt;&gt;=</name>
      <anchorfile>_safe_int_8hh.html</anchorfile>
      <anchor>a7a739d0e195aea0316d0639f8ba4ad30</anchor>
      <arglist>(T &amp;lhs, SafeInt&lt; U, E &gt; rhs)</arglist>
    </member>
    <member kind="function">
      <type>T *&amp;</type>
      <name>operator+=</name>
      <anchorfile>_safe_int_8hh.html</anchorfile>
      <anchor>ae694c000ab8d7a979c0c79ea636392c0</anchor>
      <arglist>(T *&amp;lhs, SafeInt&lt; U, E &gt; rhs)</arglist>
    </member>
    <member kind="function">
      <type>T *&amp;</type>
      <name>operator-=</name>
      <anchorfile>_safe_int_8hh.html</anchorfile>
      <anchor>add0328cb317bdb1bc96c1f07b11c71bf</anchor>
      <arglist>(T *&amp;lhs, SafeInt&lt; U, E &gt; rhs)</arglist>
    </member>
    <member kind="function">
      <type>T *&amp;</type>
      <name>operator*=</name>
      <anchorfile>_safe_int_8hh.html</anchorfile>
      <anchor>a6f266dce0490866d41903eb4ed801efd</anchor>
      <arglist>(T *&amp;lhs, SafeInt&lt; U, E &gt; rhs)</arglist>
    </member>
    <member kind="function">
      <type>T *&amp;</type>
      <name>operator/=</name>
      <anchorfile>_safe_int_8hh.html</anchorfile>
      <anchor>ac8a5ca0ed3ef2c5f5d759580d180fe39</anchor>
      <arglist>(T *&amp;lhs, SafeInt&lt; U, E &gt; rhs)</arglist>
    </member>
    <member kind="function">
      <type>T *&amp;</type>
      <name>operator%=</name>
      <anchorfile>_safe_int_8hh.html</anchorfile>
      <anchor>a9830ac03144537ef15f7862934375f38</anchor>
      <arglist>(T *&amp;lhs, SafeInt&lt; U, E &gt; rhs)</arglist>
    </member>
    <member kind="function">
      <type>T *&amp;</type>
      <name>operator&amp;=</name>
      <anchorfile>_safe_int_8hh.html</anchorfile>
      <anchor>a1bb22834c520e940bff05ad9fa4f56aa</anchor>
      <arglist>(T *&amp;lhs, SafeInt&lt; U, E &gt; rhs)</arglist>
    </member>
    <member kind="function">
      <type>T *&amp;</type>
      <name>operator^=</name>
      <anchorfile>_safe_int_8hh.html</anchorfile>
      <anchor>ab5a86f694e060ba82ed44e3839901bd4</anchor>
      <arglist>(T *&amp;lhs, SafeInt&lt; U, E &gt; rhs)</arglist>
    </member>
    <member kind="function">
      <type>T *&amp;</type>
      <name>operator|=</name>
      <anchorfile>_safe_int_8hh.html</anchorfile>
      <anchor>a0547866c0c84e01ad2a36d8acec80b17</anchor>
      <arglist>(T *&amp;lhs, SafeInt&lt; U, E &gt; rhs)</arglist>
    </member>
    <member kind="function">
      <type>T *&amp;</type>
      <name>operator&lt;&lt;=</name>
      <anchorfile>_safe_int_8hh.html</anchorfile>
      <anchor>a352b3eb7c69624deaceb25e7d4bb6556</anchor>
      <arglist>(T *&amp;lhs, SafeInt&lt; U, E &gt; rhs)</arglist>
    </member>
    <member kind="function">
      <type>T *&amp;</type>
      <name>operator&gt;&gt;=</name>
      <anchorfile>_safe_int_8hh.html</anchorfile>
      <anchor>a87f488f7df2d4d99e7e16cb626de687a</anchor>
      <arglist>(T *&amp;lhs, SafeInt&lt; U, E &gt; rhs)</arglist>
    </member>
    <member kind="function">
      <type>SafeInt&lt; U, E &gt;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>_safe_int_8hh.html</anchorfile>
      <anchor>a6d910a0ab00c6f4c341c652618a02fb0</anchor>
      <arglist>(U lhs, SafeInt&lt; T, E &gt; bits)</arglist>
    </member>
    <member kind="function">
      <type>SafeInt&lt; U, E &gt;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>_safe_int_8hh.html</anchorfile>
      <anchor>a9ab9d761ffb62167355a1fae307349f5</anchor>
      <arglist>(U lhs, SafeInt&lt; T, E &gt; bits)</arglist>
    </member>
    <member kind="function">
      <type>SafeInt&lt; T, E &gt;</type>
      <name>operator&amp;</name>
      <anchorfile>_safe_int_8hh.html</anchorfile>
      <anchor>a86c03224968471364a22c268d21b3341</anchor>
      <arglist>(U lhs, SafeInt&lt; T, E &gt; rhs)</arglist>
    </member>
    <member kind="function">
      <type>SafeInt&lt; T, E &gt;</type>
      <name>operator^</name>
      <anchorfile>_safe_int_8hh.html</anchorfile>
      <anchor>a492aa956c847d07d757994c0106b17aa</anchor>
      <arglist>(U lhs, SafeInt&lt; T, E &gt; rhs)</arglist>
    </member>
    <member kind="function">
      <type>SafeInt&lt; T, E &gt;</type>
      <name>operator|</name>
      <anchorfile>_safe_int_8hh.html</anchorfile>
      <anchor>ac3a96d970c803d5fa8b4e356a345eef4</anchor>
      <arglist>(U lhs, SafeInt&lt; T, E &gt; rhs)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>sFTPFileImpl.hh</name>
    <path>/.automount/home/home__home1/institut_3a/silva/NanoMUSiC/NanoMUSiC/PxlAnalyzer/Pxl/Pxl/src/</path>
    <filename>s_f_t_p_file_impl_8hh.html</filename>
    <includes id="_file_8hh" name="File.hh" local="yes" imported="no">Pxl/Pxl/interface/pxl/core/File.hh</includes>
    <class kind="class">pxl::sFTPFileImpl</class>
    <namespace>pxl</namespace>
    <member kind="typedef">
      <type>struct _LIBSSH2_SESSION</type>
      <name>LIBSSH2_SESSION</name>
      <anchorfile>s_f_t_p_file_impl_8hh.html</anchorfile>
      <anchor>adefe8ebbc980537f4f68d58dd304b715</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>struct _LIBSSH2_SFTP</type>
      <name>LIBSSH2_SFTP</name>
      <anchorfile>s_f_t_p_file_impl_8hh.html</anchorfile>
      <anchor>ac6d1cc81e9423e071709b1f2e23d88e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>struct _LIBSSH2_SFTP_HANDLE</type>
      <name>LIBSSH2_SFTP_HANDLE</name>
      <anchorfile>s_f_t_p_file_impl_8hh.html</anchorfile>
      <anchor>a5b234f54fe888a00afa7589a57392e20</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>StdFileImpl.hh</name>
    <path>/.automount/home/home__home1/institut_3a/silva/NanoMUSiC/NanoMUSiC/PxlAnalyzer/Pxl/Pxl/src/</path>
    <filename>_std_file_impl_8hh.html</filename>
    <includes id="_file_8hh" name="File.hh" local="yes" imported="no">Pxl/Pxl/interface/pxl/core/File.hh</includes>
    <includes id="macros_8hh" name="macros.hh" local="yes" imported="no">Pxl/Pxl/interface/pxl/core/macros.hh</includes>
    <class kind="class">pxl::StdFileImpl</class>
    <namespace>pxl</namespace>
  </compound>
  <compound kind="file">
    <name>AnyOption.hh</name>
    <path>/.automount/home/home__home1/institut_3a/silva/NanoMUSiC/NanoMUSiC/PxlAnalyzer/Tools/</path>
    <filename>_any_option_8hh.html</filename>
    <class kind="class">AnyOption</class>
    <member kind="define">
      <type>#define</type>
      <name>COMMON_OPT</name>
      <anchorfile>_any_option_8hh.html</anchorfile>
      <anchor>ae4033044ce84b873e994a77b25a72e35</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>COMMAND_OPT</name>
      <anchorfile>_any_option_8hh.html</anchorfile>
      <anchor>a531101fa8675f215fecb9babf6743b37</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>FILE_OPT</name>
      <anchorfile>_any_option_8hh.html</anchorfile>
      <anchor>a4ad818de5e52ccb5fa11001bb18d4026</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>COMMON_FLAG</name>
      <anchorfile>_any_option_8hh.html</anchorfile>
      <anchor>a2830fb821729e8d8071aa82fe53c46c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>COMMAND_FLAG</name>
      <anchorfile>_any_option_8hh.html</anchorfile>
      <anchor>a8f973bdf838bf49da53ce12d4235543f</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>FILE_FLAG</name>
      <anchorfile>_any_option_8hh.html</anchorfile>
      <anchor>a448099619a8df5d49c6f111b6fd45c45</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>COMMAND_OPTION_TYPE</name>
      <anchorfile>_any_option_8hh.html</anchorfile>
      <anchor>a3e1a4bfdbe9f136757cbca4f08a40ae1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>COMMAND_FLAG_TYPE</name>
      <anchorfile>_any_option_8hh.html</anchorfile>
      <anchor>a7710c9a7dfed96306898dff37cd7585f</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>FILE_OPTION_TYPE</name>
      <anchorfile>_any_option_8hh.html</anchorfile>
      <anchor>aa021bf54b565ca2e9b9f6036199c5f99</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>FILE_FLAG_TYPE</name>
      <anchorfile>_any_option_8hh.html</anchorfile>
      <anchor>a0413492e817b1cdf25f27a247bed0241</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UNKNOWN_TYPE</name>
      <anchorfile>_any_option_8hh.html</anchorfile>
      <anchor>a2d08587be7624f46d6e1ce0892ab3ad4</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFAULT_MAXOPTS</name>
      <anchorfile>_any_option_8hh.html</anchorfile>
      <anchor>adea38a711f7e6d388a0cc2bcd70231a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MAX_LONG_PREFIX_LENGTH</name>
      <anchorfile>_any_option_8hh.html</anchorfile>
      <anchor>a46d0759500c4f31d68a7731232ea726e</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFAULT_MAXUSAGE</name>
      <anchorfile>_any_option_8hh.html</anchorfile>
      <anchor>a911c76466245e8d19a3d8d3cad086ade</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFAULT_MAXHELP</name>
      <anchorfile>_any_option_8hh.html</anchorfile>
      <anchor>ac8b82d7d7c12a13c4035728093060fca</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TRUE_FLAG</name>
      <anchorfile>_any_option_8hh.html</anchorfile>
      <anchor>a4702365f45c97fe703b7e92b82f24a62</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>dCacheBuf.hh</name>
    <path>/.automount/home/home__home1/institut_3a/silva/NanoMUSiC/NanoMUSiC/PxlAnalyzer/Tools/dCache/</path>
    <filename>d_cache_buf_8hh.html</filename>
    <includes id="_signal_handler_8hh" name="SignalHandler.hh" local="yes" imported="no">Tools/SignalHandler.hh</includes>
    <class kind="class">dCache_error</class>
    <class kind="class">dCacheBuf</class>
    <class kind="struct">dCacheBuf::read_ahead_data</class>
  </compound>
  <compound kind="file">
    <name>idCacheStream.hh</name>
    <path>/.automount/home/home__home1/institut_3a/silva/NanoMUSiC/NanoMUSiC/PxlAnalyzer/Tools/dCache/</path>
    <filename>id_cache_stream_8hh.html</filename>
    <includes id="d_cache_buf_8hh" name="dCacheBuf.hh" local="yes" imported="no">dCacheBuf.hh</includes>
    <class kind="class">idCacheStream</class>
  </compound>
  <compound kind="file">
    <name>MConfig.hh</name>
    <path>/.automount/home/home__home1/institut_3a/silva/NanoMUSiC/NanoMUSiC/PxlAnalyzer/Tools/</path>
    <filename>_m_config_8hh.html</filename>
    <includes id="_tools_8hh" name="Tools.hh" local="yes" imported="no">Tools.hh</includes>
    <class kind="class">Tools::MConfig</class>
    <namespace>Tools</namespace>
    <member kind="define">
      <type>#define</type>
      <name>GCC_DIAG_OFF</name>
      <anchorfile>_m_config_8hh.html</anchorfile>
      <anchor>a646972e87fa873eb9da1adf5e8651c18</anchor>
      <arglist>(x)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>GCC_DIAG_ON</name>
      <anchorfile>_m_config_8hh.html</anchorfile>
      <anchor>a449bfc1762077f4e7698b86e187f05a4</anchor>
      <arglist>(x)</arglist>
    </member>
    <member kind="function">
      <type>std::map&lt; std::string, confObjType &gt;</type>
      <name>getConfigParticleMap</name>
      <anchorfile>namespace_tools.html</anchorfile>
      <anchor>a78ff41210e7d97d09872fb8e221d97fa</anchor>
      <arglist>(const Tools::MConfig &amp;cfg, const std::string &amp;label, confObjType objDummy)</arglist>
    </member>
    <member kind="function">
      <type>std::map&lt; std::string, confObjType &gt;</type>
      <name>getConfigParticleReverseMap</name>
      <anchorfile>namespace_tools.html</anchorfile>
      <anchor>ab83000996657097563d13304dc44216d</anchor>
      <arglist>(const Tools::MConfig &amp;cfg, const std::string &amp;label, confObjType objDummy)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>PDFInfo.hh</name>
    <path>/.automount/home/home__home1/institut_3a/silva/NanoMUSiC/NanoMUSiC/PxlAnalyzer/Tools/</path>
    <filename>_p_d_f_info_8hh.html</filename>
    <class kind="struct">pdf::PDFInfo</class>
    <namespace>pdf</namespace>
  </compound>
  <compound kind="file">
    <name>JetSubtypeCriterion.hh</name>
    <path>/.automount/home/home__home1/institut_3a/silva/NanoMUSiC/NanoMUSiC/PxlAnalyzer/Tools/PXL/</path>
    <filename>_jet_subtype_criterion_8hh.html</filename>
    <includes id="core_8hh" name="core.hh" local="yes" imported="no">Pxl/Pxl/interface/pxl/core.hh</includes>
    <includes id="hep_8hh" name="hep.hh" local="yes" imported="no">Pxl/Pxl/interface/pxl/hep.hh</includes>
    <class kind="class">JetSubtypeCriterion</class>
  </compound>
  <compound kind="file">
    <name>PXLdCache.hh</name>
    <path>/.automount/home/home__home1/institut_3a/silva/NanoMUSiC/NanoMUSiC/PxlAnalyzer/Tools/PXL/</path>
    <filename>_p_x_ld_cache_8hh.html</filename>
    <includes id="core_8hh" name="core.hh" local="yes" imported="no">Pxl/Pxl/interface/pxl/core.hh</includes>
    <includes id="id_cache_stream_8hh" name="idCacheStream.hh" local="yes" imported="no">Tools/dCache/idCacheStream.hh</includes>
    <class kind="class">pxl::dCacheInputFile</class>
    <namespace>pxl</namespace>
  </compound>
  <compound kind="file">
    <name>Sort.hh</name>
    <path>/.automount/home/home__home1/institut_3a/silva/NanoMUSiC/NanoMUSiC/PxlAnalyzer/Tools/PXL/</path>
    <filename>_sort_8hh.html</filename>
    <includes id="core_8hh" name="core.hh" local="yes" imported="no">Pxl/Pxl/interface/pxl/core.hh</includes>
    <includes id="hep_8hh" name="hep.hh" local="yes" imported="no">Pxl/Pxl/interface/pxl/hep.hh</includes>
    <class kind="class">pxl::ParticlePDGidPtCriterion</class>
    <namespace>pxl</namespace>
    <member kind="function">
      <type>bool</type>
      <name>compPart</name>
      <anchorfile>namespacepxl.html</anchorfile>
      <anchor>aa96953839edd598a6fda4689a5bbf484</anchor>
      <arglist>(pxl::Particle *first, pxl::Particle *second)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sortParticles</name>
      <anchorfile>namespacepxl.html</anchorfile>
      <anchor>a7dbca8a3fe7c607c8fb6d5d64c5a1c74</anchor>
      <arglist>(std::vector&lt; pxl::Particle * &gt; &amp;vec)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SignalHandler.hh</name>
    <path>/.automount/home/home__home1/institut_3a/silva/NanoMUSiC/NanoMUSiC/PxlAnalyzer/Tools/</path>
    <filename>_signal_handler_8hh.html</filename>
    <class kind="class">Tools::EventHandler</class>
    <class kind="class">Tools::SignalHandler</class>
    <namespace>Tools</namespace>
  </compound>
  <compound kind="file">
    <name>Tools.hh</name>
    <path>/.automount/home/home__home1/institut_3a/silva/NanoMUSiC/NanoMUSiC/PxlAnalyzer/Tools/</path>
    <filename>_tools_8hh.html</filename>
    <class kind="class">Tools::value_error</class>
    <class kind="class">Tools::config_error</class>
    <class kind="class">Tools::unsorted_error</class>
    <class kind="class">Tools::file_not_found</class>
    <namespace>Tools</namespace>
    <member kind="typedef">
      <type>boost::filesystem::path</type>
      <name>Path</name>
      <anchorfile>namespace_tools.html</anchorfile>
      <anchor>ad75b68ac70e81e850dbfe8cc5ececdb4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>musicAbsPath</name>
      <anchorfile>namespace_tools.html</anchorfile>
      <anchor>a7db58becf00acaa3519fab94e4f6665d</anchor>
      <arglist>(std::string relPath)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>removeComment</name>
      <anchorfile>namespace_tools.html</anchorfile>
      <anchor>a50243b657b62c7ca509f1f1cb54049c6</anchor>
      <arglist>(std::string line, char const commentChar=&apos;#&apos;)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>random_string</name>
      <anchorfile>namespace_tools.html</anchorfile>
      <anchor>a1a488ac515c63bc9f3b0f3778c7b3981</anchor>
      <arglist>(size_t length)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::string &gt;</type>
      <name>getParticleTypeAbbreviations</name>
      <anchorfile>namespace_tools.html</anchorfile>
      <anchor>a19aec321c0fb11c0a5db5d0f144c9730</anchor>
      <arglist>(bool isRec=true)</arglist>
    </member>
    <member kind="function">
      <type>std::map&lt; int, std::string &gt;</type>
      <name>pdg_id_type_map</name>
      <anchorfile>namespace_tools.html</anchorfile>
      <anchor>a7d05729a64012804c21ae1370a3bdda1</anchor>
      <arglist>(bool useBJet=false)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>toString</name>
      <anchorfile>namespace_tools.html</anchorfile>
      <anchor>a1ac8c9ccc5ea2292e2a5b004a3225baf</anchor>
      <arglist>(T &amp;input)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fromString</name>
      <anchorfile>namespace_tools.html</anchorfile>
      <anchor>a33e5fdbeef6c18029b7b35ed8363d46e</anchor>
      <arglist>(const std::string &amp;valuestring)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>fromString&lt; std::string &gt;</name>
      <anchorfile>namespace_tools.html</anchorfile>
      <anchor>ab89a06dc9302e2de99efb673a9c9cc91</anchor>
      <arglist>(const std::string &amp;input)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>splitString</name>
      <anchorfile>namespace_tools.html</anchorfile>
      <anchor>afa894c72e8a81fc63c03f0edb6b41f32</anchor>
      <arglist>(std::vector&lt; T &gt; &amp;result, const std::string &amp;input, const std::string &amp;sep=&quot;,&quot;, bool ignoreEmpty=false)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; T &gt;</type>
      <name>splitString</name>
      <anchorfile>namespace_tools.html</anchorfile>
      <anchor>aa1b3b57a93ae7c7c4ab47a316d9d0472</anchor>
      <arglist>(const std::string &amp;input, const bool ignoreEmpty=false, const std::string sep=&quot;,&quot;)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>ExpandPath</name>
      <anchorfile>namespace_tools.html</anchorfile>
      <anchor>adc60a3d4a2e21756bf526f4724d61469</anchor>
      <arglist>(Path const &amp;path)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>AbsolutePath</name>
      <anchorfile>namespace_tools.html</anchorfile>
      <anchor>af7ec4031cb991f4e2b1a599a5804c899</anchor>
      <arglist>(Path const &amp;path)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>HistClass.hh</name>
    <path>/.automount/home/home__home1/institut_3a/silva/NanoMUSiC/NanoMUSiC/tools/include/</path>
    <filename>_hist_class_8hh.html</filename>
    <namespace>HistClass</namespace>
    <member kind="define">
      <type>#define</type>
      <name>SUPPRESS_NOT_USED_WARN</name>
      <anchorfile>_hist_class_8hh.html</anchorfile>
      <anchor>a85edd6ac47f5ea2970c76af20855738c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>split</name>
      <anchorfile>namespace_hist_class.html</anchorfile>
      <anchor>a7a3cc1b23690daea1ffb70d196f4a0f0</anchor>
      <arglist>(const std::string &amp;s, char delim, std::vector&lt; std::string &gt; *elems)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::string &gt;</type>
      <name>split</name>
      <anchorfile>namespace_hist_class.html</anchorfile>
      <anchor>a3b9f2e0dd38e3ceb2981c47595ad40c9</anchor>
      <arglist>(const std::string &amp;s, char delim)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>__attribute__</name>
    <filename>struct____attribute____.html</filename>
    <member kind="variable">
      <type>uint8_t</type>
      <name>_version</name>
      <anchorfile>struct____attribute____.html</anchorfile>
      <anchor>a960f675b7cd285af253aa68c7f20142d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint8_t</type>
      <name>_sizeof_float</name>
      <anchorfile>struct____attribute____.html</anchorfile>
      <anchor>a0154d85cb2737ef72ae9d443ceaeeae4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>_count</name>
      <anchorfile>struct____attribute____.html</anchorfile>
      <anchor>abf0c1dd2feae856e796ea376a8ab5019</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>prior</name>
      <anchorfile>struct____attribute____.html</anchorfile>
      <anchor>a6c049cc87fbdef3f47767b0c5e751824</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>size_t</type>
      <name>data_npoints</name>
      <anchorfile>struct____attribute____.html</anchorfile>
      <anchor>abf134745297df0ab1d8ab3c1a86ae977</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>float</type>
      <name>data_lower_block_size</name>
      <anchorfile>struct____attribute____.html</anchorfile>
      <anchor>a53e1c00b0b5847554bf3451c615b2be4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>data_log_block_start</name>
      <anchorfile>struct____attribute____.html</anchorfile>
      <anchor>adae87255824c2e454772fbab3c19822b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>float</type>
      <name>data_log_block_factor</name>
      <anchorfile>struct____attribute____.html</anchorfile>
      <anchor>a66e04914f09b0c735e0ce1eebd6e0742</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>float</type>
      <name>bg_factor_down</name>
      <anchorfile>struct____attribute____.html</anchorfile>
      <anchor>ae31b265b5b3f52e1fe7c8e522e16cb2a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>float</type>
      <name>bg_factor_up</name>
      <anchorfile>struct____attribute____.html</anchorfile>
      <anchor>aedb57c9c683733e8b6029c063dc13114</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>size_t</type>
      <name>bg_npoints_down</name>
      <anchorfile>struct____attribute____.html</anchorfile>
      <anchor>aad6f463fe849dad10a6bffd892129a87</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>size_t</type>
      <name>bg_npoints_up</name>
      <anchorfile>struct____attribute____.html</anchorfile>
      <anchor>a37f07e565ae4c59a7d7bfaa7a6c2f71e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>float</type>
      <name>uncert_min</name>
      <anchorfile>struct____attribute____.html</anchorfile>
      <anchor>a8147b6e3f5faa26c193864d75b1e1a63</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>float</type>
      <name>uncert_factor</name>
      <anchorfile>struct____attribute____.html</anchorfile>
      <anchor>a7eee939d59f6ba4ca5acd82262525b30</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>size_t</type>
      <name>uncert_npoints</name>
      <anchorfile>struct____attribute____.html</anchorfile>
      <anchor>a6f0308a1ca596d3c2c1fd91091248d94</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AbsValueHelper</name>
    <filename>class_abs_value_helper.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>AbsValueHelper&lt; T, AbsMethodInt &gt;</name>
    <filename>class_abs_value_helper_3_01_t_00_01_abs_method_int_01_4.html</filename>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static unsigned __int32</type>
      <name>Abs</name>
      <anchorfile>class_abs_value_helper_3_01_t_00_01_abs_method_int_01_4.html</anchorfile>
      <anchor>a1d1470e2b75681f1e762471a2b132cc1</anchor>
      <arglist>(T t)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AbsValueHelper&lt; T, AbsMethodInt64 &gt;</name>
    <filename>class_abs_value_helper_3_01_t_00_01_abs_method_int64_01_4.html</filename>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static unsigned __int64</type>
      <name>Abs</name>
      <anchorfile>class_abs_value_helper_3_01_t_00_01_abs_method_int64_01_4.html</anchorfile>
      <anchor>a0f691881256e0185f79daf8a30e49d8d</anchor>
      <arglist>(T t)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AbsValueHelper&lt; T, AbsMethodNoop &gt;</name>
    <filename>class_abs_value_helper_3_01_t_00_01_abs_method_noop_01_4.html</filename>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static T</type>
      <name>Abs</name>
      <anchorfile>class_abs_value_helper_3_01_t_00_01_abs_method_noop_01_4.html</anchorfile>
      <anchor>a3db232d0e734639b3724d68f2411885b</anchor>
      <arglist>(T t)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AdditionHelper</name>
    <filename>class_addition_helper.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg>method</templarg>
  </compound>
  <compound kind="class">
    <name>AdditionHelper&lt; T, U, AdditionState_CastInt64CheckMax &gt;</name>
    <filename>class_addition_helper_3_01_t_00_01_u_00_01_addition_state___cast_int64_check_max_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>Addition</name>
      <anchorfile>class_addition_helper_3_01_t_00_01_u_00_01_addition_state___cast_int64_check_max_01_4.html</anchorfile>
      <anchor>aec6ba24fc92ee8cb78f490c86580659c</anchor>
      <arglist>(const T &amp;lhs, const U &amp;rhs, T &amp;result)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>AdditionThrow</name>
      <anchorfile>class_addition_helper_3_01_t_00_01_u_00_01_addition_state___cast_int64_check_max_01_4.html</anchorfile>
      <anchor>a0a366398819b41c080fd8bbe0726be63</anchor>
      <arglist>(const T &amp;lhs, const U &amp;rhs, T &amp;result)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AdditionHelper&lt; T, U, AdditionState_CastInt64CheckMinMax &gt;</name>
    <filename>class_addition_helper_3_01_t_00_01_u_00_01_addition_state___cast_int64_check_min_max_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>Addition</name>
      <anchorfile>class_addition_helper_3_01_t_00_01_u_00_01_addition_state___cast_int64_check_min_max_01_4.html</anchorfile>
      <anchor>ab4b360408f2da620730908f1fb1da96f</anchor>
      <arglist>(const T &amp;lhs, const U &amp;rhs, T &amp;result)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>AdditionThrow</name>
      <anchorfile>class_addition_helper_3_01_t_00_01_u_00_01_addition_state___cast_int64_check_min_max_01_4.html</anchorfile>
      <anchor>a41c6f9f143cb6bb49f602f8d49095e8c</anchor>
      <arglist>(const T &amp;lhs, const U &amp;rhs, T &amp;result)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AdditionHelper&lt; T, U, AdditionState_CastInt64CheckOverflow &gt;</name>
    <filename>class_addition_helper_3_01_t_00_01_u_00_01_addition_state___cast_int64_check_overflow_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>Addition</name>
      <anchorfile>class_addition_helper_3_01_t_00_01_u_00_01_addition_state___cast_int64_check_overflow_01_4.html</anchorfile>
      <anchor>a364ba3af90cd714e28a4997a29a78234</anchor>
      <arglist>(const T &amp;lhs, const U &amp;rhs, T &amp;result)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>AdditionThrow</name>
      <anchorfile>class_addition_helper_3_01_t_00_01_u_00_01_addition_state___cast_int64_check_overflow_01_4.html</anchorfile>
      <anchor>a5044017efcba855d173e1f1f17498dbc</anchor>
      <arglist>(const T &amp;lhs, const U &amp;rhs, T &amp;result)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AdditionHelper&lt; T, U, AdditionState_CastInt64CheckOverflowMax &gt;</name>
    <filename>class_addition_helper_3_01_t_00_01_u_00_01_addition_state___cast_int64_check_overflow_max_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>Addition</name>
      <anchorfile>class_addition_helper_3_01_t_00_01_u_00_01_addition_state___cast_int64_check_overflow_max_01_4.html</anchorfile>
      <anchor>aeb6e64a9331d5d7a9ff5ae719280a94e</anchor>
      <arglist>(const T &amp;lhs, const U &amp;rhs, T &amp;result)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>AdditionThrow</name>
      <anchorfile>class_addition_helper_3_01_t_00_01_u_00_01_addition_state___cast_int64_check_overflow_max_01_4.html</anchorfile>
      <anchor>a9f7736feffa3c5a49c1e42c76d531b9f</anchor>
      <arglist>(const T &amp;lhs, const U &amp;rhs, T &amp;result)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AdditionHelper&lt; T, U, AdditionState_CastInt64CheckOverflowMinMax &gt;</name>
    <filename>class_addition_helper_3_01_t_00_01_u_00_01_addition_state___cast_int64_check_overflow_min_max_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>Addition</name>
      <anchorfile>class_addition_helper_3_01_t_00_01_u_00_01_addition_state___cast_int64_check_overflow_min_max_01_4.html</anchorfile>
      <anchor>a7778bca03f1fde0c898bd85c14f3175d</anchor>
      <arglist>(const T &amp;lhs, const U &amp;rhs, T &amp;result)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>AdditionThrow</name>
      <anchorfile>class_addition_helper_3_01_t_00_01_u_00_01_addition_state___cast_int64_check_overflow_min_max_01_4.html</anchorfile>
      <anchor>a775937a3ccdde48464eeba8c1bdf94ed</anchor>
      <arglist>(const T &amp;lhs, const U &amp;rhs, T &amp;result)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AdditionHelper&lt; T, U, AdditionState_CastIntCheckMax &gt;</name>
    <filename>class_addition_helper_3_01_t_00_01_u_00_01_addition_state___cast_int_check_max_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>Addition</name>
      <anchorfile>class_addition_helper_3_01_t_00_01_u_00_01_addition_state___cast_int_check_max_01_4.html</anchorfile>
      <anchor>acf7a1d60a4399fcf1f0e3b20dfb66351</anchor>
      <arglist>(const T &amp;lhs, const U &amp;rhs, T &amp;result)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>AdditionThrow</name>
      <anchorfile>class_addition_helper_3_01_t_00_01_u_00_01_addition_state___cast_int_check_max_01_4.html</anchorfile>
      <anchor>a49da27e86cd8be00ac5f83f50aa14c78</anchor>
      <arglist>(const T &amp;lhs, const U &amp;rhs, T &amp;result)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AdditionHelper&lt; T, U, AdditionState_CastIntCheckMinMax &gt;</name>
    <filename>class_addition_helper_3_01_t_00_01_u_00_01_addition_state___cast_int_check_min_max_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>Addition</name>
      <anchorfile>class_addition_helper_3_01_t_00_01_u_00_01_addition_state___cast_int_check_min_max_01_4.html</anchorfile>
      <anchor>a82a504446e340a24946959ab4a7af3e3</anchor>
      <arglist>(const T &amp;lhs, const U &amp;rhs, T &amp;result)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>AdditionThrow</name>
      <anchorfile>class_addition_helper_3_01_t_00_01_u_00_01_addition_state___cast_int_check_min_max_01_4.html</anchorfile>
      <anchor>a490a89a5238b537863eb5ed6af37f052</anchor>
      <arglist>(const T &amp;lhs, const U &amp;rhs, T &amp;result)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AdditionHelper&lt; T, U, AdditionState_CastUint64CheckMinMax &gt;</name>
    <filename>class_addition_helper_3_01_t_00_01_u_00_01_addition_state___cast_uint64_check_min_max_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>Addition</name>
      <anchorfile>class_addition_helper_3_01_t_00_01_u_00_01_addition_state___cast_uint64_check_min_max_01_4.html</anchorfile>
      <anchor>a27358045b1f9cdf9fca6778e1d877957</anchor>
      <arglist>(const T &amp;lhs, const U &amp;rhs, T &amp;result)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>AdditionThrow</name>
      <anchorfile>class_addition_helper_3_01_t_00_01_u_00_01_addition_state___cast_uint64_check_min_max_01_4.html</anchorfile>
      <anchor>af429b0374d65b3b5c39ff4ebdbede006</anchor>
      <arglist>(const T &amp;lhs, const U &amp;rhs, T &amp;result)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AdditionHelper&lt; T, U, AdditionState_CastUint64CheckMinMax2 &gt;</name>
    <filename>class_addition_helper_3_01_t_00_01_u_00_01_addition_state___cast_uint64_check_min_max2_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>Addition</name>
      <anchorfile>class_addition_helper_3_01_t_00_01_u_00_01_addition_state___cast_uint64_check_min_max2_01_4.html</anchorfile>
      <anchor>aae5d1241e88a96f06c5b2b620881eea9</anchor>
      <arglist>(const T &amp;lhs, const U &amp;rhs, T &amp;result)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>AdditionThrow</name>
      <anchorfile>class_addition_helper_3_01_t_00_01_u_00_01_addition_state___cast_uint64_check_min_max2_01_4.html</anchorfile>
      <anchor>ad83790592a7ed05089e847d89353fb97</anchor>
      <arglist>(const T &amp;lhs, const U &amp;rhs, T &amp;result)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AdditionHelper&lt; T, U, AdditionState_CastUint64CheckOverflow &gt;</name>
    <filename>class_addition_helper_3_01_t_00_01_u_00_01_addition_state___cast_uint64_check_overflow_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>Addition</name>
      <anchorfile>class_addition_helper_3_01_t_00_01_u_00_01_addition_state___cast_uint64_check_overflow_01_4.html</anchorfile>
      <anchor>afe5fce96964db1577ffc85673edc78e7</anchor>
      <arglist>(const T &amp;lhs, const U &amp;rhs, T &amp;result)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>AdditionThrow</name>
      <anchorfile>class_addition_helper_3_01_t_00_01_u_00_01_addition_state___cast_uint64_check_overflow_01_4.html</anchorfile>
      <anchor>a43a40fddfceb30b0fb85216de06b579e</anchor>
      <arglist>(const T &amp;lhs, const U &amp;rhs, T &amp;result)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AdditionHelper&lt; T, U, AdditionState_CastUint64CheckOverflowMax &gt;</name>
    <filename>class_addition_helper_3_01_t_00_01_u_00_01_addition_state___cast_uint64_check_overflow_max_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>Addition</name>
      <anchorfile>class_addition_helper_3_01_t_00_01_u_00_01_addition_state___cast_uint64_check_overflow_max_01_4.html</anchorfile>
      <anchor>aa4146c525d44afcd19a2d161e312db2b</anchor>
      <arglist>(const T &amp;lhs, const U &amp;rhs, T &amp;result)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>AdditionThrow</name>
      <anchorfile>class_addition_helper_3_01_t_00_01_u_00_01_addition_state___cast_uint64_check_overflow_max_01_4.html</anchorfile>
      <anchor>adbacfadffeebe3341bf8864d868bf732</anchor>
      <arglist>(const T &amp;lhs, const U &amp;rhs, T &amp;result)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AdditionHelper&lt; T, U, AdditionState_CastUintCheckOverflow &gt;</name>
    <filename>class_addition_helper_3_01_t_00_01_u_00_01_addition_state___cast_uint_check_overflow_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>Addition</name>
      <anchorfile>class_addition_helper_3_01_t_00_01_u_00_01_addition_state___cast_uint_check_overflow_01_4.html</anchorfile>
      <anchor>aa5edb7d7e9f24b02da90e57e51a2057a</anchor>
      <arglist>(const T &amp;lhs, const U &amp;rhs, T &amp;result)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>AdditionThrow</name>
      <anchorfile>class_addition_helper_3_01_t_00_01_u_00_01_addition_state___cast_uint_check_overflow_01_4.html</anchorfile>
      <anchor>a837d2b88a5f93696a9ad44a01c2dc58e</anchor>
      <arglist>(const T &amp;lhs, const U &amp;rhs, T &amp;result)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AdditionHelper&lt; T, U, AdditionState_CastUintCheckOverflowMax &gt;</name>
    <filename>class_addition_helper_3_01_t_00_01_u_00_01_addition_state___cast_uint_check_overflow_max_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>Addition</name>
      <anchorfile>class_addition_helper_3_01_t_00_01_u_00_01_addition_state___cast_uint_check_overflow_max_01_4.html</anchorfile>
      <anchor>a70565e3a0014609ce58558ab78017741</anchor>
      <arglist>(const T &amp;lhs, const U &amp;rhs, T &amp;result)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>AdditionThrow</name>
      <anchorfile>class_addition_helper_3_01_t_00_01_u_00_01_addition_state___cast_uint_check_overflow_max_01_4.html</anchorfile>
      <anchor>ac47a0f25fea123586f5689d001a7b87c</anchor>
      <arglist>(const T &amp;lhs, const U &amp;rhs, T &amp;result)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AdditionHelper&lt; T, U, AdditionState_ManualCheck &gt;</name>
    <filename>class_addition_helper_3_01_t_00_01_u_00_01_addition_state___manual_check_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>Addition</name>
      <anchorfile>class_addition_helper_3_01_t_00_01_u_00_01_addition_state___manual_check_01_4.html</anchorfile>
      <anchor>a8f388e64b2104c57b033c118efa13279</anchor>
      <arglist>(const T &amp;lhs, const U &amp;rhs, T &amp;result)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>AdditionThrow</name>
      <anchorfile>class_addition_helper_3_01_t_00_01_u_00_01_addition_state___manual_check_01_4.html</anchorfile>
      <anchor>a8af11b6d9415c78eafc6629ae089c61b</anchor>
      <arglist>(const T &amp;lhs, const U &amp;rhs, T &amp;result)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AdditionHelper&lt; T, U, AdditionState_ManualCheckInt64Uint64 &gt;</name>
    <filename>class_addition_helper_3_01_t_00_01_u_00_01_addition_state___manual_check_int64_uint64_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>Addition</name>
      <anchorfile>class_addition_helper_3_01_t_00_01_u_00_01_addition_state___manual_check_int64_uint64_01_4.html</anchorfile>
      <anchor>aa40cf21e6cd4a99c36549580a7b8f113</anchor>
      <arglist>(const __int64 &amp;lhs, const unsigned __int64 &amp;rhs, __int64 &amp;result)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>AdditionThrow</name>
      <anchorfile>class_addition_helper_3_01_t_00_01_u_00_01_addition_state___manual_check_int64_uint64_01_4.html</anchorfile>
      <anchor>a41a5ae38989bfc3fb371cab5c398b90b</anchor>
      <arglist>(const __int64 &amp;lhs, const unsigned __int64 &amp;rhs, T &amp;result)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AdditionMethod</name>
    <filename>class_addition_method.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="enumvalue">
      <name>method</name>
      <anchorfile>class_addition_method.html</anchorfile>
      <anchor>a88570a176eb155da8ab17bf66c1c57c9ad1a3beb20d4bf8930e2dacd5cda89f3e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>method</name>
      <anchorfile>class_addition_method.html</anchorfile>
      <anchor>a88570a176eb155da8ab17bf66c1c57c9ad1a3beb20d4bf8930e2dacd5cda89f3e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AnalysisComposer</name>
    <filename>class_analysis_composer.html</filename>
    <member kind="function">
      <type></type>
      <name>AnalysisComposer</name>
      <anchorfile>class_analysis_composer.html</anchorfile>
      <anchor>a61c32da66a973dcc91463d1ffd4ff70d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~AnalysisComposer</name>
      <anchorfile>class_analysis_composer.html</anchorfile>
      <anchor>a72fe0cc9d98be1d2a1269593c4f21a8f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>po::options_description</type>
      <name>getCmdArguments</name>
      <anchorfile>class_analysis_composer.html</anchorfile>
      <anchor>a5b657e926156c58df9a1753a2cd9c9d4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>pxl::AnalysisFork</type>
      <name>addForkObjects</name>
      <anchorfile>class_analysis_composer.html</anchorfile>
      <anchor>a0b17d9df31b18535683ac847a6cf1c2f</anchor>
      <arglist>(const Tools::MConfig &amp;config, string outputDirectory, EventSelector &amp;selector, Systematics &amp;syst, const bool debug)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>endAnalysis</name>
      <anchorfile>class_analysis_composer.html</anchorfile>
      <anchor>a0d1220841947a51b228833f23338a632</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>pxl::AnalysisFork</name>
    <filename>classpxl_1_1_analysis_fork.html</filename>
    <base>pxl::ObjectManager</base>
    <member kind="function">
      <type></type>
      <name>AnalysisFork</name>
      <anchorfile>classpxl_1_1_analysis_fork.html</anchorfile>
      <anchor>ad8e6fa275ead99fabeaaf4294c5ad055</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AnalysisFork</name>
      <anchorfile>classpxl_1_1_analysis_fork.html</anchorfile>
      <anchor>ace12c867379bc08a44f237e6d01af895</anchor>
      <arglist>(const AnalysisFork &amp;original)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AnalysisFork</name>
      <anchorfile>classpxl_1_1_analysis_fork.html</anchorfile>
      <anchor>a78cc410f34fda17b071602090dbd6f52</anchor>
      <arglist>(const AnalysisFork *original)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~AnalysisFork</name>
      <anchorfile>classpxl_1_1_analysis_fork.html</anchorfile>
      <anchor>a05b882fec018d7ac638a3479d1763f07</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Id &amp;</type>
      <name>getTypeId</name>
      <anchorfile>classpxl_1_1_analysis_fork.html</anchorfile>
      <anchor>ad35bbfe197995abc770e595d59b11b37</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classpxl_1_1_analysis_fork.html</anchorfile>
      <anchor>ac459942e527685ec378227c93ba24db9</anchor>
      <arglist>(const OutputStream &amp;out) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>deserialize</name>
      <anchorfile>classpxl_1_1_analysis_fork.html</anchorfile>
      <anchor>a647683b83ea9871a0379f32dcc3404d9</anchor>
      <arglist>(const InputStream &amp;in)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>beginJob</name>
      <anchorfile>classpxl_1_1_analysis_fork.html</anchorfile>
      <anchor>a64ede6e543e34b104da4b72a388d5308</anchor>
      <arglist>(const Serializable *input=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>beginRun</name>
      <anchorfile>classpxl_1_1_analysis_fork.html</anchorfile>
      <anchor>abbb58c67e6bb30caa7e947f490b9f6c0</anchor>
      <arglist>(const Serializable *input=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>analyseEvent</name>
      <anchorfile>classpxl_1_1_analysis_fork.html</anchorfile>
      <anchor>ab70b33b832d8a9f634506240c3c28766</anchor>
      <arglist>(const Event *event=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>finishEvent</name>
      <anchorfile>classpxl_1_1_analysis_fork.html</anchorfile>
      <anchor>afd88d62a4978dde19a81f5853d7241b2</anchor>
      <arglist>(const Event *event=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>endRun</name>
      <anchorfile>classpxl_1_1_analysis_fork.html</anchorfile>
      <anchor>ab4d420db308f1fd607529f0831e36736</anchor>
      <arglist>(const Serializable *input=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>endJob</name>
      <anchorfile>classpxl_1_1_analysis_fork.html</anchorfile>
      <anchor>a85e053c10258568d3d6ca43e6e299930</anchor>
      <arglist>(const Serializable *input=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Serializable *</type>
      <name>clone</name>
      <anchorfile>classpxl_1_1_analysis_fork.html</anchorfile>
      <anchor>acf1b3188ccff5b99b38d55c6ff42fff0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::ostream &amp;</type>
      <name>print</name>
      <anchorfile>classpxl_1_1_analysis_fork.html</anchorfile>
      <anchor>a5febcfbe298d2404a27de85a87e960d7</anchor>
      <arglist>(int level=1, std::ostream &amp;os=std::cout, int pan=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual WkPtrBase *</type>
      <name>createSelfWkPtr</name>
      <anchorfile>classpxl_1_1_analysis_fork.html</anchorfile>
      <anchor>a99164c9b56c071e62aabdc946fd25499</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>datatype *</type>
      <name>create</name>
      <anchorfile>classpxl_1_1_object_manager.html</anchorfile>
      <anchor>ad1901dcf17216f56a080382d9195c065</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>datatype *</type>
      <name>createIndexed</name>
      <anchorfile>classpxl_1_1_object_manager.html</anchorfile>
      <anchor>a6eeb2a8f66d6fd3eb6f1851b6d6bcc60</anchor>
      <arglist>(const std::string &amp;key)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insertObject</name>
      <anchorfile>classpxl_1_1_object_manager.html</anchorfile>
      <anchor>aa73094f3d4ce7a64c8b862d8dc504ff5</anchor>
      <arglist>(Relative *obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insertObject</name>
      <anchorfile>classpxl_1_1_object_manager.html</anchorfile>
      <anchor>a56047ba744052038894e21c2ce3f549a</anchor>
      <arglist>(Relative *obj, const std::string &amp;key)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setIndexEntry</name>
      <anchorfile>classpxl_1_1_object_manager.html</anchorfile>
      <anchor>aa0cb7e818bc10b94d4100e95192b483f</anchor>
      <arglist>(const std::string &amp;key, Relative *obj)</arglist>
    </member>
    <member kind="function">
      <type>ObjectOwner &amp;</type>
      <name>getObjectOwner</name>
      <anchorfile>classpxl_1_1_object_manager.html</anchorfile>
      <anchor>ad45c49c34ee75bd675857d22af49bc36</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ObjectOwner &amp;</type>
      <name>getObjectOwner</name>
      <anchorfile>classpxl_1_1_object_manager.html</anchorfile>
      <anchor>a555f045954f82fed896e833d752dd6bb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; Relative * &gt; &amp;</type>
      <name>getObjects</name>
      <anchorfile>classpxl_1_1_object_manager.html</anchorfile>
      <anchor>ab7aaeb59e68a34bd2f70cd1ee8f219f9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getObjectsOfType</name>
      <anchorfile>classpxl_1_1_object_manager.html</anchorfile>
      <anchor>a326cbe576dddc1abee93ba88c943400c</anchor>
      <arglist>(std::vector&lt; objecttype * &gt; &amp;vec) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeObject</name>
      <anchorfile>classpxl_1_1_object_manager.html</anchorfile>
      <anchor>a6d2ecf0d8c88cd2d300e737ca565b9bc</anchor>
      <arglist>(Relative *obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>takeObject</name>
      <anchorfile>classpxl_1_1_object_manager.html</anchorfile>
      <anchor>a997b25e8b80baac5b099f8366e16f03e</anchor>
      <arglist>(Relative *obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearObjects</name>
      <anchorfile>classpxl_1_1_object_manager.html</anchorfile>
      <anchor>a29accdf305964e94611cd866755cc30a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>objecttype *</type>
      <name>findObject</name>
      <anchorfile>classpxl_1_1_object_manager.html</anchorfile>
      <anchor>abd54ba43be0f458e4df4bf7ad6a3f499</anchor>
      <arglist>(const std::string key) const</arglist>
    </member>
    <member kind="function">
      <type>objecttype *</type>
      <name>findCopyOf</name>
      <anchorfile>classpxl_1_1_object_manager.html</anchorfile>
      <anchor>a9e3191cfc62b614788b0111f0c0b7dd9</anchor>
      <arglist>(const Relative *original) const</arglist>
    </member>
    <member kind="function">
      <type>const std::map&lt; Id, Relative * &gt; &amp;</type>
      <name>getCopyHistory</name>
      <anchorfile>classpxl_1_1_object_manager.html</anchorfile>
      <anchor>a0b6e868680ed72c14a3bddc5e535ab3c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearCopyHistory</name>
      <anchorfile>classpxl_1_1_object_manager.html</anchorfile>
      <anchor>a302c2b5833f897a7ff4491ba4bb64039</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const std::map&lt; std::string, Relative * &gt; &amp;</type>
      <name>getIndex</name>
      <anchorfile>classpxl_1_1_object_manager.html</anchorfile>
      <anchor>a0351e7dc05a1141c76a4d763f8474ff3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeIndexEntry</name>
      <anchorfile>classpxl_1_1_object_manager.html</anchorfile>
      <anchor>a11b471a5bd9009f4d80257c949113086</anchor>
      <arglist>(const std::string &amp;key)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearIndex</name>
      <anchorfile>classpxl_1_1_object_manager.html</anchorfile>
      <anchor>ae565bdd64538388084bc30bbe9611e06</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isLocked</name>
      <anchorfile>classpxl_1_1_object.html</anchorfile>
      <anchor>a584e513d1aada593146e4bb4dca8c1fa</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getWorkFlag</name>
      <anchorfile>classpxl_1_1_object.html</anchorfile>
      <anchor>a9e82ee54fca13b8818634ebd8adda493</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLocked</name>
      <anchorfile>classpxl_1_1_object.html</anchorfile>
      <anchor>a1b2dbf2aef26a3bc4a92735572649a94</anchor>
      <arglist>(bool v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setWorkFlag</name>
      <anchorfile>classpxl_1_1_object.html</anchorfile>
      <anchor>a91d83fb75b1a480ae8323e7b2a5276ad</anchor>
      <arglist>(int v)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::ostream &amp;</type>
      <name>printContent</name>
      <anchorfile>classpxl_1_1_object.html</anchorfile>
      <anchor>a434021cf01b990778a93f5144817de2d</anchor>
      <arglist>(int level=1, std::ostream &amp;os=std::cout, int pan=0) const</arglist>
    </member>
    <member kind="function">
      <type>Id</type>
      <name>id</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>a9bf6c17d6fd5b588c00463db4028870b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ObjectOwner *</type>
      <name>owner</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>a556c1cc09bed10e480cceb5da42edb33</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Relations &amp;</type>
      <name>getMotherRelations</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>a10f8728c388408f48a120e90de6298ae</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Relations &amp;</type>
      <name>getDaughterRelations</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>ae3b09cfe9057e042b88cf1adf6b4a036</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Relations &amp;</type>
      <name>getFlatRelations</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>aa8b871a98b21677ef5c159dbb608722d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Relative *</type>
      <name>getMother</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>a53a7b6b11409893dab8a73a0159180ec</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Relative *</type>
      <name>getDaughter</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>a6e7b03ed37eca69cd1063f78fd05b6dc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::set&lt; Relative * &gt; &amp;</type>
      <name>getDaughters</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>a6c4f5b97226fe562ef9144fa14f8c0f5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::set&lt; Relative * &gt; &amp;</type>
      <name>getMothers</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>a1728bea81bb0f966335f32c832a1cffa</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>numberOfDaughters</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>aa92bd45d2b1751fe3bfbbc79c8a21b32</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>numberOfMothers</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>aab1ec876cfe2f1bebf212b60f66ba907</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>linkMother</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>af3f916466c571dad5b0be5f4baded3b3</anchor>
      <arglist>(Relative *target)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>linkDaughter</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>a0a6244c26919bdd6fd45cbb8ea5a8f8b</anchor>
      <arglist>(Relative *target)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>linkFlat</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>a5ee923ece292e0d9268495af7590f060</anchor>
      <arglist>(Relative *target)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unlinkMother</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>a2b75c81e4078d147d36310fe7c3a4800</anchor>
      <arglist>(Relative *target)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unlinkDaughter</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>aaface8521be14a7fbb256ad786355ea4</anchor>
      <arglist>(Relative *target)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unlinkFlat</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>a4a4eba4935e47072056671728c2bd139</anchor>
      <arglist>(Relative *target)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unlinkFlat</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>a8d81b6131cc1532e3ba868e3509cb9b2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unlinkMothers</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>ad51348aae3792d8205823b46da02a564</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unlinkDaughters</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>a3bd2ff6a25aab01fda19df066bb492a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>linkSoft</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>a2ea79223a0f9d9edeeb8398b53ff6ab1</anchor>
      <arglist>(Relative *relative, const std::string &amp;type)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unlinkSoft</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>a1e870e37dbe2b384f85b138b5ec51e0e</anchor>
      <arglist>(Relative *relative, const std::string &amp;type)</arglist>
    </member>
    <member kind="function">
      <type>const SoftRelations &amp;</type>
      <name>getSoftRelations</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>ae5b78c9536de71abbb15a413e31f655e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>SoftRelations &amp;</type>
      <name>getSoftRelations</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>ab72e809de894954b8cc73ff768d757a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getName</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>a5384c8188f28913c4cc898571f133f32</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setName</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>a483a501afd8965daa92d3bafb91b4dfe</anchor>
      <arglist>(const std::string &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>printDecayTree</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>afa50de942d2caa47defa7e39a79df0a9</anchor>
      <arglist>(int level=0, std::ostream &amp;os=std::cout, int pan=1) const</arglist>
    </member>
    <member kind="function">
      <type>const Id &amp;</type>
      <name>getId</name>
      <anchorfile>classpxl_1_1_serializable.html</anchorfile>
      <anchor>a071e3e5bdd7125cee5dd5178807c3647</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const std::string</type>
      <name>toString</name>
      <anchorfile>classpxl_1_1_serializable.html</anchorfile>
      <anchor>abe42afdf47f4fa9cad94e26e9a3d6ba1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const UserRecords &amp;</type>
      <name>getUserRecords</name>
      <anchorfile>classpxl_1_1_user_record_helper.html</anchorfile>
      <anchor>ab7d2e9d7fd53f986163bff24ed9ec2e3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>UserRecords &amp;</type>
      <name>getUserRecords</name>
      <anchorfile>classpxl_1_1_user_record_helper.html</anchorfile>
      <anchor>aed523d427700d001e76af09b138f3355</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setUserRecords</name>
      <anchorfile>classpxl_1_1_user_record_helper.html</anchorfile>
      <anchor>a8bc754ecfd9c00f2a2ccb6395ac0891d</anchor>
      <arglist>(const UserRecords &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setUserRecord</name>
      <anchorfile>classpxl_1_1_user_record_helper.html</anchorfile>
      <anchor>af3ecea27c07445ab7dab72987672a8fd</anchor>
      <arglist>(const std::string &amp;key, const Variant &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>eraseUserRecord</name>
      <anchorfile>classpxl_1_1_user_record_helper.html</anchorfile>
      <anchor>a558dd61337c50bfd93af44f1c65867d7</anchor>
      <arglist>(const std::string &amp;key)</arglist>
    </member>
    <member kind="function">
      <type>const Variant &amp;</type>
      <name>getUserRecord</name>
      <anchorfile>classpxl_1_1_user_record_helper.html</anchorfile>
      <anchor>a0c4e05e6defb9e4eabb75a1aef41d300</anchor>
      <arglist>(const std::string &amp;key) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getUserRecord</name>
      <anchorfile>classpxl_1_1_user_record_helper.html</anchorfile>
      <anchor>a3df9f904d21e126a0527a81663f13ae8</anchor>
      <arglist>(const std::string &amp;key, datatype &amp;item) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasUserRecord</name>
      <anchorfile>classpxl_1_1_user_record_helper.html</anchorfile>
      <anchor>aeae48d210cf0dfd2a52fb7adcfc4bb41</anchor>
      <arglist>(const std::string &amp;key) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const Id &amp;</type>
      <name>getStaticTypeId</name>
      <anchorfile>classpxl_1_1_analysis_fork.html</anchorfile>
      <anchor>acc657370a87b49382076df11aee1d679</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::ostream &amp;</type>
      <name>printPan1st</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>a589f7baac2ec1c61eeb4c2c1e3403526</anchor>
      <arglist>(std::ostream &amp;os, int pan) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::ostream &amp;</type>
      <name>printPan</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>a5038bd2b7584b9aacb4b7d0ac02b26fa</anchor>
      <arglist>(std::ostream &amp;os, int pan) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>pxl::AnalysisProcess</name>
    <filename>classpxl_1_1_analysis_process.html</filename>
    <base>pxl::ObjectManager</base>
    <member kind="function">
      <type></type>
      <name>AnalysisProcess</name>
      <anchorfile>classpxl_1_1_analysis_process.html</anchorfile>
      <anchor>aa9fa219e19f2d357985811c9b5378faf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AnalysisProcess</name>
      <anchorfile>classpxl_1_1_analysis_process.html</anchorfile>
      <anchor>a192a3f4fe19162d2feef8b5c873b43ca</anchor>
      <arglist>(const AnalysisProcess &amp;original)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AnalysisProcess</name>
      <anchorfile>classpxl_1_1_analysis_process.html</anchorfile>
      <anchor>afd63f551966048290d6880b827adb2b6</anchor>
      <arglist>(const AnalysisProcess *original)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~AnalysisProcess</name>
      <anchorfile>classpxl_1_1_analysis_process.html</anchorfile>
      <anchor>a5f38232791052b2402aea73b51b0af45</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Id &amp;</type>
      <name>getTypeId</name>
      <anchorfile>classpxl_1_1_analysis_process.html</anchorfile>
      <anchor>a883a40879a89965d41bb337ebb4727f5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classpxl_1_1_analysis_process.html</anchorfile>
      <anchor>a82faecb44b2f7b42b078dbec6d86ad53</anchor>
      <arglist>(const OutputStream &amp;out) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>deserialize</name>
      <anchorfile>classpxl_1_1_analysis_process.html</anchorfile>
      <anchor>a8e71a9dcb4aeadfb920583cacc719ef2</anchor>
      <arglist>(const InputStream &amp;in)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>buildTemplate</name>
      <anchorfile>classpxl_1_1_analysis_process.html</anchorfile>
      <anchor>a773fa10b8eaa948387809305b24df12e</anchor>
      <arglist>(int mode=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>beginJob</name>
      <anchorfile>classpxl_1_1_analysis_process.html</anchorfile>
      <anchor>a01b66946f83f5a7a7044b32aa16497d5</anchor>
      <arglist>(const Serializable *input=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>beginRun</name>
      <anchorfile>classpxl_1_1_analysis_process.html</anchorfile>
      <anchor>ab4a6c40de42e6d7865af48f84a115e9a</anchor>
      <arglist>(const Serializable *input=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>analyseEvent</name>
      <anchorfile>classpxl_1_1_analysis_process.html</anchorfile>
      <anchor>a69d1767b641e95a306134a830f8dacd3</anchor>
      <arglist>(const Event *event=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>finishEvent</name>
      <anchorfile>classpxl_1_1_analysis_process.html</anchorfile>
      <anchor>ad38dbd94fc2a9d0086dee307a243ae18</anchor>
      <arglist>(const Event *event=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>endRun</name>
      <anchorfile>classpxl_1_1_analysis_process.html</anchorfile>
      <anchor>a9353447a7ddb021735346fb0200aa60c</anchor>
      <arglist>(const Serializable *input=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>endJob</name>
      <anchorfile>classpxl_1_1_analysis_process.html</anchorfile>
      <anchor>a8ea3f1482916de2823f88917e60a3ea9</anchor>
      <arglist>(const Serializable *input=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Serializable *</type>
      <name>clone</name>
      <anchorfile>classpxl_1_1_analysis_process.html</anchorfile>
      <anchor>a6b9b043c70231a18742f0dcb3dba5614</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual WkPtrBase *</type>
      <name>createSelfWkPtr</name>
      <anchorfile>classpxl_1_1_analysis_process.html</anchorfile>
      <anchor>ae0a00d04d8818c1118e62ef4001d3b3d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::ostream &amp;</type>
      <name>print</name>
      <anchorfile>classpxl_1_1_analysis_process.html</anchorfile>
      <anchor>a51653165333f0b4749fd3780bc1a9395</anchor>
      <arglist>(int level=1, std::ostream &amp;os=std::cout, int pan=0) const</arglist>
    </member>
    <member kind="function">
      <type>datatype *</type>
      <name>create</name>
      <anchorfile>classpxl_1_1_object_manager.html</anchorfile>
      <anchor>ad1901dcf17216f56a080382d9195c065</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>datatype *</type>
      <name>createIndexed</name>
      <anchorfile>classpxl_1_1_object_manager.html</anchorfile>
      <anchor>a6eeb2a8f66d6fd3eb6f1851b6d6bcc60</anchor>
      <arglist>(const std::string &amp;key)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insertObject</name>
      <anchorfile>classpxl_1_1_object_manager.html</anchorfile>
      <anchor>aa73094f3d4ce7a64c8b862d8dc504ff5</anchor>
      <arglist>(Relative *obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insertObject</name>
      <anchorfile>classpxl_1_1_object_manager.html</anchorfile>
      <anchor>a56047ba744052038894e21c2ce3f549a</anchor>
      <arglist>(Relative *obj, const std::string &amp;key)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setIndexEntry</name>
      <anchorfile>classpxl_1_1_object_manager.html</anchorfile>
      <anchor>aa0cb7e818bc10b94d4100e95192b483f</anchor>
      <arglist>(const std::string &amp;key, Relative *obj)</arglist>
    </member>
    <member kind="function">
      <type>ObjectOwner &amp;</type>
      <name>getObjectOwner</name>
      <anchorfile>classpxl_1_1_object_manager.html</anchorfile>
      <anchor>ad45c49c34ee75bd675857d22af49bc36</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ObjectOwner &amp;</type>
      <name>getObjectOwner</name>
      <anchorfile>classpxl_1_1_object_manager.html</anchorfile>
      <anchor>a555f045954f82fed896e833d752dd6bb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; Relative * &gt; &amp;</type>
      <name>getObjects</name>
      <anchorfile>classpxl_1_1_object_manager.html</anchorfile>
      <anchor>ab7aaeb59e68a34bd2f70cd1ee8f219f9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getObjectsOfType</name>
      <anchorfile>classpxl_1_1_object_manager.html</anchorfile>
      <anchor>a326cbe576dddc1abee93ba88c943400c</anchor>
      <arglist>(std::vector&lt; objecttype * &gt; &amp;vec) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeObject</name>
      <anchorfile>classpxl_1_1_object_manager.html</anchorfile>
      <anchor>a6d2ecf0d8c88cd2d300e737ca565b9bc</anchor>
      <arglist>(Relative *obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>takeObject</name>
      <anchorfile>classpxl_1_1_object_manager.html</anchorfile>
      <anchor>a997b25e8b80baac5b099f8366e16f03e</anchor>
      <arglist>(Relative *obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearObjects</name>
      <anchorfile>classpxl_1_1_object_manager.html</anchorfile>
      <anchor>a29accdf305964e94611cd866755cc30a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>objecttype *</type>
      <name>findObject</name>
      <anchorfile>classpxl_1_1_object_manager.html</anchorfile>
      <anchor>abd54ba43be0f458e4df4bf7ad6a3f499</anchor>
      <arglist>(const std::string key) const</arglist>
    </member>
    <member kind="function">
      <type>objecttype *</type>
      <name>findCopyOf</name>
      <anchorfile>classpxl_1_1_object_manager.html</anchorfile>
      <anchor>a9e3191cfc62b614788b0111f0c0b7dd9</anchor>
      <arglist>(const Relative *original) const</arglist>
    </member>
    <member kind="function">
      <type>const std::map&lt; Id, Relative * &gt; &amp;</type>
      <name>getCopyHistory</name>
      <anchorfile>classpxl_1_1_object_manager.html</anchorfile>
      <anchor>a0b6e868680ed72c14a3bddc5e535ab3c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearCopyHistory</name>
      <anchorfile>classpxl_1_1_object_manager.html</anchorfile>
      <anchor>a302c2b5833f897a7ff4491ba4bb64039</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const std::map&lt; std::string, Relative * &gt; &amp;</type>
      <name>getIndex</name>
      <anchorfile>classpxl_1_1_object_manager.html</anchorfile>
      <anchor>a0351e7dc05a1141c76a4d763f8474ff3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeIndexEntry</name>
      <anchorfile>classpxl_1_1_object_manager.html</anchorfile>
      <anchor>a11b471a5bd9009f4d80257c949113086</anchor>
      <arglist>(const std::string &amp;key)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearIndex</name>
      <anchorfile>classpxl_1_1_object_manager.html</anchorfile>
      <anchor>ae565bdd64538388084bc30bbe9611e06</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isLocked</name>
      <anchorfile>classpxl_1_1_object.html</anchorfile>
      <anchor>a584e513d1aada593146e4bb4dca8c1fa</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getWorkFlag</name>
      <anchorfile>classpxl_1_1_object.html</anchorfile>
      <anchor>a9e82ee54fca13b8818634ebd8adda493</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLocked</name>
      <anchorfile>classpxl_1_1_object.html</anchorfile>
      <anchor>a1b2dbf2aef26a3bc4a92735572649a94</anchor>
      <arglist>(bool v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setWorkFlag</name>
      <anchorfile>classpxl_1_1_object.html</anchorfile>
      <anchor>a91d83fb75b1a480ae8323e7b2a5276ad</anchor>
      <arglist>(int v)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::ostream &amp;</type>
      <name>printContent</name>
      <anchorfile>classpxl_1_1_object.html</anchorfile>
      <anchor>a434021cf01b990778a93f5144817de2d</anchor>
      <arglist>(int level=1, std::ostream &amp;os=std::cout, int pan=0) const</arglist>
    </member>
    <member kind="function">
      <type>Id</type>
      <name>id</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>a9bf6c17d6fd5b588c00463db4028870b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ObjectOwner *</type>
      <name>owner</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>a556c1cc09bed10e480cceb5da42edb33</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Relations &amp;</type>
      <name>getMotherRelations</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>a10f8728c388408f48a120e90de6298ae</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Relations &amp;</type>
      <name>getDaughterRelations</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>ae3b09cfe9057e042b88cf1adf6b4a036</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Relations &amp;</type>
      <name>getFlatRelations</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>aa8b871a98b21677ef5c159dbb608722d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Relative *</type>
      <name>getMother</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>a53a7b6b11409893dab8a73a0159180ec</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Relative *</type>
      <name>getDaughter</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>a6e7b03ed37eca69cd1063f78fd05b6dc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::set&lt; Relative * &gt; &amp;</type>
      <name>getDaughters</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>a6c4f5b97226fe562ef9144fa14f8c0f5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::set&lt; Relative * &gt; &amp;</type>
      <name>getMothers</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>a1728bea81bb0f966335f32c832a1cffa</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>numberOfDaughters</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>aa92bd45d2b1751fe3bfbbc79c8a21b32</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>numberOfMothers</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>aab1ec876cfe2f1bebf212b60f66ba907</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>linkMother</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>af3f916466c571dad5b0be5f4baded3b3</anchor>
      <arglist>(Relative *target)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>linkDaughter</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>a0a6244c26919bdd6fd45cbb8ea5a8f8b</anchor>
      <arglist>(Relative *target)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>linkFlat</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>a5ee923ece292e0d9268495af7590f060</anchor>
      <arglist>(Relative *target)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unlinkMother</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>a2b75c81e4078d147d36310fe7c3a4800</anchor>
      <arglist>(Relative *target)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unlinkDaughter</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>aaface8521be14a7fbb256ad786355ea4</anchor>
      <arglist>(Relative *target)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unlinkFlat</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>a4a4eba4935e47072056671728c2bd139</anchor>
      <arglist>(Relative *target)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unlinkFlat</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>a8d81b6131cc1532e3ba868e3509cb9b2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unlinkMothers</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>ad51348aae3792d8205823b46da02a564</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unlinkDaughters</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>a3bd2ff6a25aab01fda19df066bb492a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>linkSoft</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>a2ea79223a0f9d9edeeb8398b53ff6ab1</anchor>
      <arglist>(Relative *relative, const std::string &amp;type)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unlinkSoft</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>a1e870e37dbe2b384f85b138b5ec51e0e</anchor>
      <arglist>(Relative *relative, const std::string &amp;type)</arglist>
    </member>
    <member kind="function">
      <type>const SoftRelations &amp;</type>
      <name>getSoftRelations</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>ae5b78c9536de71abbb15a413e31f655e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>SoftRelations &amp;</type>
      <name>getSoftRelations</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>ab72e809de894954b8cc73ff768d757a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getName</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>a5384c8188f28913c4cc898571f133f32</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setName</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>a483a501afd8965daa92d3bafb91b4dfe</anchor>
      <arglist>(const std::string &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>printDecayTree</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>afa50de942d2caa47defa7e39a79df0a9</anchor>
      <arglist>(int level=0, std::ostream &amp;os=std::cout, int pan=1) const</arglist>
    </member>
    <member kind="function">
      <type>const Id &amp;</type>
      <name>getId</name>
      <anchorfile>classpxl_1_1_serializable.html</anchorfile>
      <anchor>a071e3e5bdd7125cee5dd5178807c3647</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const std::string</type>
      <name>toString</name>
      <anchorfile>classpxl_1_1_serializable.html</anchorfile>
      <anchor>abe42afdf47f4fa9cad94e26e9a3d6ba1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const UserRecords &amp;</type>
      <name>getUserRecords</name>
      <anchorfile>classpxl_1_1_user_record_helper.html</anchorfile>
      <anchor>ab7d2e9d7fd53f986163bff24ed9ec2e3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>UserRecords &amp;</type>
      <name>getUserRecords</name>
      <anchorfile>classpxl_1_1_user_record_helper.html</anchorfile>
      <anchor>aed523d427700d001e76af09b138f3355</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setUserRecords</name>
      <anchorfile>classpxl_1_1_user_record_helper.html</anchorfile>
      <anchor>a8bc754ecfd9c00f2a2ccb6395ac0891d</anchor>
      <arglist>(const UserRecords &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setUserRecord</name>
      <anchorfile>classpxl_1_1_user_record_helper.html</anchorfile>
      <anchor>af3ecea27c07445ab7dab72987672a8fd</anchor>
      <arglist>(const std::string &amp;key, const Variant &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>eraseUserRecord</name>
      <anchorfile>classpxl_1_1_user_record_helper.html</anchorfile>
      <anchor>a558dd61337c50bfd93af44f1c65867d7</anchor>
      <arglist>(const std::string &amp;key)</arglist>
    </member>
    <member kind="function">
      <type>const Variant &amp;</type>
      <name>getUserRecord</name>
      <anchorfile>classpxl_1_1_user_record_helper.html</anchorfile>
      <anchor>a0c4e05e6defb9e4eabb75a1aef41d300</anchor>
      <arglist>(const std::string &amp;key) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getUserRecord</name>
      <anchorfile>classpxl_1_1_user_record_helper.html</anchorfile>
      <anchor>a3df9f904d21e126a0527a81663f13ae8</anchor>
      <arglist>(const std::string &amp;key, datatype &amp;item) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasUserRecord</name>
      <anchorfile>classpxl_1_1_user_record_helper.html</anchorfile>
      <anchor>aeae48d210cf0dfd2a52fb7adcfc4bb41</anchor>
      <arglist>(const std::string &amp;key) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const Id &amp;</type>
      <name>getStaticTypeId</name>
      <anchorfile>classpxl_1_1_analysis_process.html</anchorfile>
      <anchor>a9bd85c364b1b9ed841903f4cb1436901</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::ostream &amp;</type>
      <name>printPan1st</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>a589f7baac2ec1c61eeb4c2c1e3403526</anchor>
      <arglist>(std::ostream &amp;os, int pan) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::ostream &amp;</type>
      <name>printPan</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>a5038bd2b7584b9aacb4b7d0ac02b26fa</anchor>
      <arglist>(std::ostream &amp;os, int pan) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AnyOption</name>
    <filename>class_any_option.html</filename>
    <member kind="function">
      <type></type>
      <name>AnyOption</name>
      <anchorfile>class_any_option.html</anchorfile>
      <anchor>a7ad756bb8efd62d1a808b0ee7add6990</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AnyOption</name>
      <anchorfile>class_any_option.html</anchorfile>
      <anchor>a3feb7eaa2c8222054ca745a5aa6916a2</anchor>
      <arglist>(int maxoptions)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AnyOption</name>
      <anchorfile>class_any_option.html</anchorfile>
      <anchor>a8a88d8d2f9345018acb3b6f5993cbddd</anchor>
      <arglist>(int maxoptions, int maxcharoptions)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~AnyOption</name>
      <anchorfile>class_any_option.html</anchorfile>
      <anchor>a98c6f71109a04081087f967d31f77965</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCommandPrefixChar</name>
      <anchorfile>class_any_option.html</anchorfile>
      <anchor>abc3444f2cbbb06f7d6c9a63e49f4992a</anchor>
      <arglist>(char _prefix)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCommandLongPrefix</name>
      <anchorfile>class_any_option.html</anchorfile>
      <anchor>ac0cd7c2ee11e27fc1a8f8097d8bb21fa</anchor>
      <arglist>(char *_prefix)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFileCommentChar</name>
      <anchorfile>class_any_option.html</anchorfile>
      <anchor>a3b164315d146fbc1f8751b0542a8b495</anchor>
      <arglist>(char _comment)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFileDelimiterChar</name>
      <anchorfile>class_any_option.html</anchorfile>
      <anchor>a1076bb812db730236c5309cdb97c8161</anchor>
      <arglist>(char _delimiter)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>useCommandArgs</name>
      <anchorfile>class_any_option.html</anchorfile>
      <anchor>a632154043f99bf2186f23b4eaaa297c8</anchor>
      <arglist>(int _argc, char **_argv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>useFiileName</name>
      <anchorfile>class_any_option.html</anchorfile>
      <anchor>a5b50b3fe6804f0ddce1a94a36d5cc29f</anchor>
      <arglist>(const char *_filename)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>noPOSIX</name>
      <anchorfile>class_any_option.html</anchorfile>
      <anchor>aeca5328f5046690e0d381c745c1872d5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setVerbose</name>
      <anchorfile>class_any_option.html</anchorfile>
      <anchor>a0db06dc9828c5242889610afcc740141</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOption</name>
      <anchorfile>class_any_option.html</anchorfile>
      <anchor>a72320922fa1b9f02d7e744f517dcf479</anchor>
      <arglist>(const char *opt_string)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOption</name>
      <anchorfile>class_any_option.html</anchorfile>
      <anchor>a45d3a142b3b222239640cb15febba737</anchor>
      <arglist>(char opt_char)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOption</name>
      <anchorfile>class_any_option.html</anchorfile>
      <anchor>abc37993c84c44c368e9ec1d425c913f5</anchor>
      <arglist>(const char *opt_string, char opt_char)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFlag</name>
      <anchorfile>class_any_option.html</anchorfile>
      <anchor>a674db5274da842af95a58067e49a8808</anchor>
      <arglist>(const char *opt_string)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFlag</name>
      <anchorfile>class_any_option.html</anchorfile>
      <anchor>a1e90db23b41021bd60d4ecdf0e169eb4</anchor>
      <arglist>(char opt_char)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFlag</name>
      <anchorfile>class_any_option.html</anchorfile>
      <anchor>a6b644d13279528d3c501323f9826f103</anchor>
      <arglist>(const char *opt_string, char opt_char)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCommandOption</name>
      <anchorfile>class_any_option.html</anchorfile>
      <anchor>a7df8a4d9c0970f018c91b04bd4c11022</anchor>
      <arglist>(const char *opt_string)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCommandOption</name>
      <anchorfile>class_any_option.html</anchorfile>
      <anchor>a639b708b4c3953e7017f224b9b8082b3</anchor>
      <arglist>(char opt_char)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCommandOption</name>
      <anchorfile>class_any_option.html</anchorfile>
      <anchor>a232adbe285778b7b1745ebb419bfbced</anchor>
      <arglist>(const char *opt_string, char opt_char)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCommandFlag</name>
      <anchorfile>class_any_option.html</anchorfile>
      <anchor>ab84fbc729395adf0f0989c578a388934</anchor>
      <arglist>(const char *opt_string)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCommandFlag</name>
      <anchorfile>class_any_option.html</anchorfile>
      <anchor>a226781e167bfa77a3c57e7207a0406b9</anchor>
      <arglist>(char opt_char)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCommandFlag</name>
      <anchorfile>class_any_option.html</anchorfile>
      <anchor>ad7720617bda6fb5519d195989c8605f2</anchor>
      <arglist>(const char *opt_string, char opt_char)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFileOption</name>
      <anchorfile>class_any_option.html</anchorfile>
      <anchor>a4eeaaf6a433ae7d0724243581436914b</anchor>
      <arglist>(const char *opt_string)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFileOption</name>
      <anchorfile>class_any_option.html</anchorfile>
      <anchor>a700d49a1544d37247d9a29bf89f7602b</anchor>
      <arglist>(char opt_char)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFileOption</name>
      <anchorfile>class_any_option.html</anchorfile>
      <anchor>a0f0790f91a6bbdba445e8d613c4b1e2d</anchor>
      <arglist>(const char *opt_string, char opt_char)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFileFlag</name>
      <anchorfile>class_any_option.html</anchorfile>
      <anchor>a58332626754ef69f750f2583f7b72a72</anchor>
      <arglist>(const char *opt_string)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFileFlag</name>
      <anchorfile>class_any_option.html</anchorfile>
      <anchor>a19dad4072d02832b2d86b20f6c11c117</anchor>
      <arglist>(char opt_char)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFileFlag</name>
      <anchorfile>class_any_option.html</anchorfile>
      <anchor>a8fa052e644d8b04b7bd95bda48c16cf8</anchor>
      <arglist>(const char *opt_string, char opt_char)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>processOptions</name>
      <anchorfile>class_any_option.html</anchorfile>
      <anchor>a0b123acf86297aa6265229bdd13a827a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>processCommandArgs</name>
      <anchorfile>class_any_option.html</anchorfile>
      <anchor>a1f21716ac11330a364fe1d8a17efa7dc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>processCommandArgs</name>
      <anchorfile>class_any_option.html</anchorfile>
      <anchor>acbb92b2ed06429530419797e27a66835</anchor>
      <arglist>(int max_args)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>processFile</name>
      <anchorfile>class_any_option.html</anchorfile>
      <anchor>ac1de1647788ce0f5bed576d90e518124</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>processCommandArgs</name>
      <anchorfile>class_any_option.html</anchorfile>
      <anchor>a6eb4b1407b58fff76dd94d41f3c5af72</anchor>
      <arglist>(int _argc, char **_argv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>processCommandArgs</name>
      <anchorfile>class_any_option.html</anchorfile>
      <anchor>a3722651e433d69c380f88f76075d7809</anchor>
      <arglist>(int _argc, char **_argv, int max_args)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>processFile</name>
      <anchorfile>class_any_option.html</anchorfile>
      <anchor>a9f28e85054331866e0f32bf5a8088607</anchor>
      <arglist>(const char *_filename)</arglist>
    </member>
    <member kind="function">
      <type>char *</type>
      <name>getValue</name>
      <anchorfile>class_any_option.html</anchorfile>
      <anchor>a516ef573a2daac0caf04894f0b00d01a</anchor>
      <arglist>(const char *_option)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getFlag</name>
      <anchorfile>class_any_option.html</anchorfile>
      <anchor>a4ea37ce527b713f9a6d15d3a3ea837ef</anchor>
      <arglist>(const char *_option)</arglist>
    </member>
    <member kind="function">
      <type>char *</type>
      <name>getValue</name>
      <anchorfile>class_any_option.html</anchorfile>
      <anchor>a9f473c1284e60d5373d8d4d45dcc1378</anchor>
      <arglist>(char _optchar)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getFlag</name>
      <anchorfile>class_any_option.html</anchorfile>
      <anchor>a955d685485036fabc3cedde66f441978</anchor>
      <arglist>(char _optchar)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printUsage</name>
      <anchorfile>class_any_option.html</anchorfile>
      <anchor>a27d72b5ea4ab75eaeb74207b2165b1fe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printAutoUsage</name>
      <anchorfile>class_any_option.html</anchorfile>
      <anchor>a531b07829ead5a4a292ff2f0b3be8f9a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addUsage</name>
      <anchorfile>class_any_option.html</anchorfile>
      <anchor>ad0c5643f303324e20754455d58ff2ff0</anchor>
      <arglist>(const char *line)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printHelp</name>
      <anchorfile>class_any_option.html</anchorfile>
      <anchor>ad10117aa56fe321efbbf0b90bc6ca124</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>autoUsagePrint</name>
      <anchorfile>class_any_option.html</anchorfile>
      <anchor>ab41d990eb6cbe95fbab17e4f961fb365</anchor>
      <arglist>(bool flag)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getArgc</name>
      <anchorfile>class_any_option.html</anchorfile>
      <anchor>a59fd57b36dc2626d49926e7424d5b695</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>char *</type>
      <name>getArgv</name>
      <anchorfile>class_any_option.html</anchorfile>
      <anchor>a4591c05cd94ff2e824157b8961c400b5</anchor>
      <arglist>(int index)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasOptions</name>
      <anchorfile>class_any_option.html</anchorfile>
      <anchor>aefa633ab31303cbe67bc6b3b501649f4</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lumi::bad_config</name>
    <filename>classlumi_1_1bad__config.html</filename>
    <base>std::exception</base>
    <member kind="function">
      <type></type>
      <name>bad_config</name>
      <anchorfile>classlumi_1_1bad__config.html</anchorfile>
      <anchor>aa22446e427ea05614b55fec57c64a460</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>bad_config</name>
      <anchorfile>classlumi_1_1bad__config.html</anchorfile>
      <anchor>a81439aa95736da057dabc6acbcef8b40</anchor>
      <arglist>(const std::string &amp;msg)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>bad_config</name>
      <anchorfile>classlumi_1_1bad__config.html</anchorfile>
      <anchor>ae687de9b9d822a51475936eddd767d9b</anchor>
      <arglist>(const std::string &amp;filename, const std::string &amp;msg)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>bad_config</name>
      <anchorfile>classlumi_1_1bad__config.html</anchorfile>
      <anchor>a49515a48c69d871c5271448421ebefc2</anchor>
      <arglist>(const std::string &amp;filename, const char c)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~bad_config</name>
      <anchorfile>classlumi_1_1bad__config.html</anchorfile>
      <anchor>a647a30bb0a5372840d676bab0ebd592e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>what</name>
      <anchorfile>classlumi_1_1bad__config.html</anchorfile>
      <anchor>a355884156e7db8d1f3231c21aed46800</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>pxl::Variant::bad_conversion</name>
    <filename>classpxl_1_1_variant_1_1bad__conversion.html</filename>
    <base>std::exception</base>
    <member kind="function">
      <type>const char *</type>
      <name>what</name>
      <anchorfile>classpxl_1_1_variant_1_1bad__conversion.html</anchorfile>
      <anchor>aed0b71ad370a756fd99e30a4926a2069</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>bad_conversion</name>
      <anchorfile>classpxl_1_1_variant_1_1bad__conversion.html</anchorfile>
      <anchor>ad46249524b1a003ab3ea3dc1c76154f5</anchor>
      <arglist>(Type f, Type t)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~bad_conversion</name>
      <anchorfile>classpxl_1_1_variant_1_1bad__conversion.html</anchorfile>
      <anchor>a32f3f158025169ab21781103fd1956f3</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>pxl::Basic3Vector</name>
    <filename>classpxl_1_1_basic3_vector.html</filename>
    <member kind="function">
      <type></type>
      <name>Basic3Vector</name>
      <anchorfile>classpxl_1_1_basic3_vector.html</anchorfile>
      <anchor>aade017bce29eb1a034179420e1dec5f6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Basic3Vector</name>
      <anchorfile>classpxl_1_1_basic3_vector.html</anchorfile>
      <anchor>a2fbca5b054d0f5efd82f8675255d02df</anchor>
      <arglist>(const Basic3Vector &amp;orig)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Basic3Vector</name>
      <anchorfile>classpxl_1_1_basic3_vector.html</anchorfile>
      <anchor>a0f2e5b43cadd9112d04acab27054072d</anchor>
      <arglist>(const Basic3Vector *orig)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Basic3Vector</name>
      <anchorfile>classpxl_1_1_basic3_vector.html</anchorfile>
      <anchor>aadc0fbfe86564e5805163fab4d3cad57</anchor>
      <arglist>(double x, double y, double z)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Basic3Vector</name>
      <anchorfile>classpxl_1_1_basic3_vector.html</anchorfile>
      <anchor>a93a0eb10d9e969962049689a861f7436</anchor>
      <arglist>(const double x[3])</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Basic3Vector</name>
      <anchorfile>classpxl_1_1_basic3_vector.html</anchorfile>
      <anchor>a54e275bed026797f2f6d8a2144fcf96e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classpxl_1_1_basic3_vector.html</anchorfile>
      <anchor>a2b6bea783f79ccee256f7758cbd350e2</anchor>
      <arglist>(const OutputStream &amp;out) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>deserialize</name>
      <anchorfile>classpxl_1_1_basic3_vector.html</anchorfile>
      <anchor>ac5f4e88511d2fd25d63c85375b483977</anchor>
      <arglist>(const InputStream &amp;in)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setX</name>
      <anchorfile>classpxl_1_1_basic3_vector.html</anchorfile>
      <anchor>a78ecc3a40440f04672c62b7a10e21ff7</anchor>
      <arglist>(double x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setY</name>
      <anchorfile>classpxl_1_1_basic3_vector.html</anchorfile>
      <anchor>ab521d3a7604dae18411e9dde169c8243</anchor>
      <arglist>(double y)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setZ</name>
      <anchorfile>classpxl_1_1_basic3_vector.html</anchorfile>
      <anchor>a25da9cc3f300e06a65675e50494bfff6</anchor>
      <arglist>(double z)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setXYZ</name>
      <anchorfile>classpxl_1_1_basic3_vector.html</anchorfile>
      <anchor>a1c1c48fad1d133cf44a375636ea6625e</anchor>
      <arglist>(double x, double y, double z)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setElement</name>
      <anchorfile>classpxl_1_1_basic3_vector.html</anchorfile>
      <anchor>a718b8813f4aaa67475aebc01f9943930</anchor>
      <arglist>(int i, double val)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getElement</name>
      <anchorfile>classpxl_1_1_basic3_vector.html</anchorfile>
      <anchor>a9b2d3617c8ff365a4ab1be4bc3688d20</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>double *</type>
      <name>getArray</name>
      <anchorfile>classpxl_1_1_basic3_vector.html</anchorfile>
      <anchor>aff832363a6c68f1c502146d20c2a7303</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const double *</type>
      <name>getConstArray</name>
      <anchorfile>classpxl_1_1_basic3_vector.html</anchorfile>
      <anchor>a60ad1413ba998160e3e8b7aaeea6a8e9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCArray</name>
      <anchorfile>classpxl_1_1_basic3_vector.html</anchorfile>
      <anchor>a5090631840837033f2f96b6a5fb7e93c</anchor>
      <arglist>(double val[3])</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRhoPhi</name>
      <anchorfile>classpxl_1_1_basic3_vector.html</anchorfile>
      <anchor>a7dae1e79e037d57579fbb2ef85b955ea</anchor>
      <arglist>(double perp, double phi)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRhoPhiZ</name>
      <anchorfile>classpxl_1_1_basic3_vector.html</anchorfile>
      <anchor>a2a3622e06509531be07d826801f630e9</anchor>
      <arglist>(double perp, double phi, double z)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRThetaPhi</name>
      <anchorfile>classpxl_1_1_basic3_vector.html</anchorfile>
      <anchor>a46a94561c3423301a1501f41531c8137</anchor>
      <arglist>(double r, double theta, double phi)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getX</name>
      <anchorfile>classpxl_1_1_basic3_vector.html</anchorfile>
      <anchor>a7858260790b9209095c2555d5b33ff25</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getY</name>
      <anchorfile>classpxl_1_1_basic3_vector.html</anchorfile>
      <anchor>af75a95873b336a751482ed07ee57ddb0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getZ</name>
      <anchorfile>classpxl_1_1_basic3_vector.html</anchorfile>
      <anchor>a7ce34d768ccb4d88b4753a8c9db44a80</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNullPerp</name>
      <anchorfile>classpxl_1_1_basic3_vector.html</anchorfile>
      <anchor>ab92aefb77c5fe9c167e8b900df57617f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNull</name>
      <anchorfile>classpxl_1_1_basic3_vector.html</anchorfile>
      <anchor>a35aacab69dc1f5ee928c44b70803aefa</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getPerp2</name>
      <anchorfile>classpxl_1_1_basic3_vector.html</anchorfile>
      <anchor>ab89eb4103211efd939dc8b6ab885a5aa</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getPerp</name>
      <anchorfile>classpxl_1_1_basic3_vector.html</anchorfile>
      <anchor>ad4bf6b0820c320629d6cfe0c283b5707</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getPhi</name>
      <anchorfile>classpxl_1_1_basic3_vector.html</anchorfile>
      <anchor>af23200f99f8f922b086adf60cac0941b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getMag2</name>
      <anchorfile>classpxl_1_1_basic3_vector.html</anchorfile>
      <anchor>a3801cc3d1a6d86b0d9db27df3190ed99</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getMag</name>
      <anchorfile>classpxl_1_1_basic3_vector.html</anchorfile>
      <anchor>a5fbb75f6af15666ef6baa6ae5c6b2402</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getCosTheta</name>
      <anchorfile>classpxl_1_1_basic3_vector.html</anchorfile>
      <anchor>aa1e264713e44ae99bbe2034e05cf730f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getCos2Theta</name>
      <anchorfile>classpxl_1_1_basic3_vector.html</anchorfile>
      <anchor>aa034a014cfa7e94c51e17c8baa13db9f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getTheta</name>
      <anchorfile>classpxl_1_1_basic3_vector.html</anchorfile>
      <anchor>ab0a989aa6dc388c9a31a460f6528c5e8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Basic3Vector</type>
      <name>getETheta</name>
      <anchorfile>classpxl_1_1_basic3_vector.html</anchorfile>
      <anchor>a24291606b0d1476f98f716b0ca7d33af</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Basic3Vector</type>
      <name>getEPhi</name>
      <anchorfile>classpxl_1_1_basic3_vector.html</anchorfile>
      <anchor>ac4d4abe2e6b2b1c0f224233b9eba09fb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>deltaRho</name>
      <anchorfile>classpxl_1_1_basic3_vector.html</anchorfile>
      <anchor>a8c81ef0f0937eac25c6c7f49cd411ae8</anchor>
      <arglist>(const Basic3Vector *fv) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>deltaPhi</name>
      <anchorfile>classpxl_1_1_basic3_vector.html</anchorfile>
      <anchor>af115cb11554fc5baf6f0a85dee75aa69</anchor>
      <arglist>(const Basic3Vector *fv) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>deltaTheta</name>
      <anchorfile>classpxl_1_1_basic3_vector.html</anchorfile>
      <anchor>a61bf1250741c82f8d737c6112c487e56</anchor>
      <arglist>(const Basic3Vector *fv) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>deltaRho</name>
      <anchorfile>classpxl_1_1_basic3_vector.html</anchorfile>
      <anchor>abf2fd8ed29512b60fc43970ceab9edd6</anchor>
      <arglist>(const Basic3Vector &amp;fv) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>deltaPhi</name>
      <anchorfile>classpxl_1_1_basic3_vector.html</anchorfile>
      <anchor>a90e2a5b2456bc4c7d1d76ab0454317f6</anchor>
      <arglist>(const Basic3Vector &amp;fv) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>deltaTheta</name>
      <anchorfile>classpxl_1_1_basic3_vector.html</anchorfile>
      <anchor>a1a1cc72d531a23ed005d8c75d59a320a</anchor>
      <arglist>(const Basic3Vector &amp;fv) const</arglist>
    </member>
    <member kind="function">
      <type>const Basic3Vector &amp;</type>
      <name>operator=</name>
      <anchorfile>classpxl_1_1_basic3_vector.html</anchorfile>
      <anchor>aeac67388836e3cf141ccf3b7b240e8b9</anchor>
      <arglist>(const Basic3Vector &amp;vec)</arglist>
    </member>
    <member kind="function">
      <type>const Basic3Vector &amp;</type>
      <name>operator+=</name>
      <anchorfile>classpxl_1_1_basic3_vector.html</anchorfile>
      <anchor>a96a0af46ad73d52a1e226671128cf2ad</anchor>
      <arglist>(const Basic3Vector &amp;vec)</arglist>
    </member>
    <member kind="function">
      <type>const Basic3Vector &amp;</type>
      <name>operator-=</name>
      <anchorfile>classpxl_1_1_basic3_vector.html</anchorfile>
      <anchor>a2a22f7dd62ec3bdfef7ceaa3455acb91</anchor>
      <arglist>(const Basic3Vector &amp;vec)</arglist>
    </member>
    <member kind="function">
      <type>const Basic3Vector &amp;</type>
      <name>operator*=</name>
      <anchorfile>classpxl_1_1_basic3_vector.html</anchorfile>
      <anchor>a46f28ae26914abdf9e07c67f7202e1d1</anchor>
      <arglist>(double skalar)</arglist>
    </member>
    <member kind="function">
      <type>const Basic3Vector &amp;</type>
      <name>operator/=</name>
      <anchorfile>classpxl_1_1_basic3_vector.html</anchorfile>
      <anchor>a57ef5af99750176855f61009be2637d9</anchor>
      <arglist>(double skalar)</arglist>
    </member>
    <member kind="function">
      <type>Basic3Vector</type>
      <name>operator+</name>
      <anchorfile>classpxl_1_1_basic3_vector.html</anchorfile>
      <anchor>abf57110cf497d895ad1a4305a12bf358</anchor>
      <arglist>(const Basic3Vector &amp;vec)</arglist>
    </member>
    <member kind="function">
      <type>Basic3Vector</type>
      <name>operator-</name>
      <anchorfile>classpxl_1_1_basic3_vector.html</anchorfile>
      <anchor>a6124e5df65838ef47e1dd1e37117a7c3</anchor>
      <arglist>(const Basic3Vector &amp;vec)</arglist>
    </member>
    <member kind="function">
      <type>Basic3Vector</type>
      <name>operator/</name>
      <anchorfile>classpxl_1_1_basic3_vector.html</anchorfile>
      <anchor>a2bae91ef09ddcd64a644b873cc434c0b</anchor>
      <arglist>(double skalar) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>operator*</name>
      <anchorfile>classpxl_1_1_basic3_vector.html</anchorfile>
      <anchor>a3d5e9ea17218ac899a59fbfe81ab55b8</anchor>
      <arglist>(const Basic3Vector &amp;vec) const</arglist>
    </member>
    <member kind="function">
      <type>Basic3Vector</type>
      <name>cross</name>
      <anchorfile>classpxl_1_1_basic3_vector.html</anchorfile>
      <anchor>ad3d1379169dcca3d5f3b40f5f8f7c1a2</anchor>
      <arglist>(const Basic3Vector &amp;p) const</arglist>
    </member>
    <member kind="function">
      <type>Basic3Vector</type>
      <name>operator-</name>
      <anchorfile>classpxl_1_1_basic3_vector.html</anchorfile>
      <anchor>aef17fac1952c67f8b5b7332e67f298f3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>operator()</name>
      <anchorfile>classpxl_1_1_basic3_vector.html</anchorfile>
      <anchor>a3af665cf1c29ab58075d1cd60d3e8422</anchor>
      <arglist>(size_t i)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>norm</name>
      <anchorfile>classpxl_1_1_basic3_vector.html</anchorfile>
      <anchor>ac92f6d1225075648dc42fc1b39cefec3</anchor>
      <arglist>(uint32_t norm) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isUnitVector</name>
      <anchorfile>classpxl_1_1_basic3_vector.html</anchorfile>
      <anchor>a2197c881f9a1d305be8b423ac57f42c8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getAngleTo</name>
      <anchorfile>classpxl_1_1_basic3_vector.html</anchorfile>
      <anchor>a60e4d1d70eb546232c36d45ca8eec67d</anchor>
      <arglist>(const Basic3Vector &amp;vec) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rotate</name>
      <anchorfile>classpxl_1_1_basic3_vector.html</anchorfile>
      <anchor>a958a70e6600a8c60df27a09436a4ac04</anchor>
      <arglist>(const Basic3Vector &amp;axis, double angle)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>normalize</name>
      <anchorfile>classpxl_1_1_basic3_vector.html</anchorfile>
      <anchor>a941f3693d5ba0bb4cabbfe306a7cae4b</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>pxl::BasicContainer</name>
    <filename>classpxl_1_1_basic_container.html</filename>
    <base>pxl::Serializable</base>
    <base>pxl::UserRecordHelper</base>
    <member kind="typedef">
      <type>std::map&lt; std::string, Serializable * &gt;</type>
      <name>map_t</name>
      <anchorfile>classpxl_1_1_basic_container.html</anchorfile>
      <anchor>ad7f46b1df3afca064e2f05a17f2bd351</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; Serializable * &gt;::const_iterator</type>
      <name>const_iterator</name>
      <anchorfile>classpxl_1_1_basic_container.html</anchorfile>
      <anchor>a1dd7af7b731c6f520096426b77182194</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; Serializable * &gt;::iterator</type>
      <name>iterator</name>
      <anchorfile>classpxl_1_1_basic_container.html</anchorfile>
      <anchor>a03faa996921d6eada58e7d528377d14a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BasicContainer</name>
      <anchorfile>classpxl_1_1_basic_container.html</anchorfile>
      <anchor>aeb6f2c77d29c0a24d99f105ce2a3b811</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BasicContainer</name>
      <anchorfile>classpxl_1_1_basic_container.html</anchorfile>
      <anchor>a590113ea0eaa744f55cec8a0387f446f</anchor>
      <arglist>(const BasicContainer &amp;basicContainer)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BasicContainer</name>
      <anchorfile>classpxl_1_1_basic_container.html</anchorfile>
      <anchor>a571a0f39e93fe0b3532b6e6e9158dd73</anchor>
      <arglist>(const BasicContainer *basicContainer)</arglist>
    </member>
    <member kind="function">
      <type>BasicContainer &amp;</type>
      <name>operator=</name>
      <anchorfile>classpxl_1_1_basic_container.html</anchorfile>
      <anchor>ae05bd9de9ae6596da70107fb052d346f</anchor>
      <arglist>(const BasicContainer &amp;original)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>classpxl_1_1_basic_container.html</anchorfile>
      <anchor>ab7968df6944a5510b0859de072f73108</anchor>
      <arglist>(const BasicContainer &amp;basicContainer)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~BasicContainer</name>
      <anchorfile>classpxl_1_1_basic_container.html</anchorfile>
      <anchor>aa0f28bd69e42180b3befe014d1ef54c5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Serializable *</type>
      <name>clone</name>
      <anchorfile>classpxl_1_1_basic_container.html</anchorfile>
      <anchor>a3ed79db1c41ac5a7e5e27cd6feb41a1c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; Serializable * &gt; &amp;</type>
      <name>getObjects</name>
      <anchorfile>classpxl_1_1_basic_container.html</anchorfile>
      <anchor>a7748260b642b71680777802fba3f921a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>objecttype *</type>
      <name>create</name>
      <anchorfile>classpxl_1_1_basic_container.html</anchorfile>
      <anchor>a57d49f584de83f7abea86d8bd4f03566</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>objecttype *</type>
      <name>create</name>
      <anchorfile>classpxl_1_1_basic_container.html</anchorfile>
      <anchor>a972a42a3464846bd05454c5a4dea71bb</anchor>
      <arglist>(const objecttype *original)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insertObject</name>
      <anchorfile>classpxl_1_1_basic_container.html</anchorfile>
      <anchor>a5581fa97496232fe3a4c72be617b7ecc</anchor>
      <arglist>(Serializable *value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove</name>
      <anchorfile>classpxl_1_1_basic_container.html</anchorfile>
      <anchor>a377c40cb1f6514d70835d9bd3cf2442b</anchor>
      <arglist>(Serializable *value)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>removeObjectsOfType</name>
      <anchorfile>classpxl_1_1_basic_container.html</anchorfile>
      <anchor>ad5646a9dc3e180cab70beeb1c46eedfc</anchor>
      <arglist>(const Id &amp;typeId)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>removeObjectsOfType</name>
      <anchorfile>classpxl_1_1_basic_container.html</anchorfile>
      <anchor>abd716177de400eb91806b93cbbe47ed0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>take</name>
      <anchorfile>classpxl_1_1_basic_container.html</anchorfile>
      <anchor>af93ee9bef018b0c0cbeb51f72ab27adf</anchor>
      <arglist>(Serializable *value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has</name>
      <anchorfile>classpxl_1_1_basic_container.html</anchorfile>
      <anchor>acae5960512aeb85c469fcf2329e650c6</anchor>
      <arglist>(const Serializable *value) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearContainer</name>
      <anchorfile>classpxl_1_1_basic_container.html</anchorfile>
      <anchor>affa7a19f2fdf04df5ef52296d0897564</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>begin</name>
      <anchorfile>classpxl_1_1_basic_container.html</anchorfile>
      <anchor>aad46f2b3d7cef9ae17c375385959872b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>begin</name>
      <anchorfile>classpxl_1_1_basic_container.html</anchorfile>
      <anchor>aadabe378bfee9745eb1796d039e225d1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>end</name>
      <anchorfile>classpxl_1_1_basic_container.html</anchorfile>
      <anchor>ab2a2ba629143363df5dc8e445b77ee02</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>end</name>
      <anchorfile>classpxl_1_1_basic_container.html</anchorfile>
      <anchor>ab50730548b6716c8621abb40966ec90d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>size</name>
      <anchorfile>classpxl_1_1_basic_container.html</anchorfile>
      <anchor>a2d6c2db8fa51efc71a2b66aeba1ee682</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>objecttype *</type>
      <name>findObject</name>
      <anchorfile>classpxl_1_1_basic_container.html</anchorfile>
      <anchor>a133cac9e549bc461a64d34fff79fda2c</anchor>
      <arglist>(const std::string &amp;key) const</arglist>
    </member>
    <member kind="function">
      <type>Serializable *</type>
      <name>findObject</name>
      <anchorfile>classpxl_1_1_basic_container.html</anchorfile>
      <anchor>a6793ae796211c99b34e15e2b454f1d13</anchor>
      <arglist>(const std::string &amp;key) const</arglist>
    </member>
    <member kind="function">
      <type>Serializable *</type>
      <name>getById</name>
      <anchorfile>classpxl_1_1_basic_container.html</anchorfile>
      <anchor>acdaacb22a45e32c25fe2a06b04ac9a36</anchor>
      <arglist>(Id id) const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>getObjectsOfType</name>
      <anchorfile>classpxl_1_1_basic_container.html</anchorfile>
      <anchor>ad2b57888d9a25a3752191ae3d93f9e4e</anchor>
      <arglist>(std::vector&lt; objecttype * &gt; &amp;vec) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Id &amp;</type>
      <name>getTypeId</name>
      <anchorfile>classpxl_1_1_basic_container.html</anchorfile>
      <anchor>a34b179deacbf0637259d8794ed2f1063</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classpxl_1_1_basic_container.html</anchorfile>
      <anchor>a9c2cfa0d12e29f54131238e784167151</anchor>
      <arglist>(const OutputStream &amp;out) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>deserialize</name>
      <anchorfile>classpxl_1_1_basic_container.html</anchorfile>
      <anchor>ad3ce2059692a49f67569dc7b3c061e96</anchor>
      <arglist>(const InputStream &amp;in)</arglist>
    </member>
    <member kind="function">
      <type>const map_t &amp;</type>
      <name>getIndexEntry</name>
      <anchorfile>classpxl_1_1_basic_container.html</anchorfile>
      <anchor>aaf329eb08b40f4859789e09177637c90</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeIndexEntry</name>
      <anchorfile>classpxl_1_1_basic_container.html</anchorfile>
      <anchor>af177c7b126d80c997d6c6dc09171788c</anchor>
      <arglist>(const std::string &amp;key)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearIndex</name>
      <anchorfile>classpxl_1_1_basic_container.html</anchorfile>
      <anchor>a5c88810cf2f5df46bc2848227cfbc19a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Id &amp;</type>
      <name>getId</name>
      <anchorfile>classpxl_1_1_serializable.html</anchorfile>
      <anchor>a071e3e5bdd7125cee5dd5178807c3647</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::ostream &amp;</type>
      <name>print</name>
      <anchorfile>classpxl_1_1_serializable.html</anchorfile>
      <anchor>a1de4073599f70247eaaf7e33b2a729f8</anchor>
      <arglist>(int level=1, std::ostream &amp;os=std::cout, int pan=1) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const std::string</type>
      <name>toString</name>
      <anchorfile>classpxl_1_1_serializable.html</anchorfile>
      <anchor>abe42afdf47f4fa9cad94e26e9a3d6ba1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const UserRecords &amp;</type>
      <name>getUserRecords</name>
      <anchorfile>classpxl_1_1_user_record_helper.html</anchorfile>
      <anchor>ab7d2e9d7fd53f986163bff24ed9ec2e3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>UserRecords &amp;</type>
      <name>getUserRecords</name>
      <anchorfile>classpxl_1_1_user_record_helper.html</anchorfile>
      <anchor>aed523d427700d001e76af09b138f3355</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setUserRecords</name>
      <anchorfile>classpxl_1_1_user_record_helper.html</anchorfile>
      <anchor>a8bc754ecfd9c00f2a2ccb6395ac0891d</anchor>
      <arglist>(const UserRecords &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setUserRecord</name>
      <anchorfile>classpxl_1_1_user_record_helper.html</anchorfile>
      <anchor>af3ecea27c07445ab7dab72987672a8fd</anchor>
      <arglist>(const std::string &amp;key, const Variant &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>eraseUserRecord</name>
      <anchorfile>classpxl_1_1_user_record_helper.html</anchorfile>
      <anchor>a558dd61337c50bfd93af44f1c65867d7</anchor>
      <arglist>(const std::string &amp;key)</arglist>
    </member>
    <member kind="function">
      <type>const Variant &amp;</type>
      <name>getUserRecord</name>
      <anchorfile>classpxl_1_1_user_record_helper.html</anchorfile>
      <anchor>a0c4e05e6defb9e4eabb75a1aef41d300</anchor>
      <arglist>(const std::string &amp;key) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getUserRecord</name>
      <anchorfile>classpxl_1_1_user_record_helper.html</anchorfile>
      <anchor>a3df9f904d21e126a0527a81663f13ae8</anchor>
      <arglist>(const std::string &amp;key, datatype &amp;item) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasUserRecord</name>
      <anchorfile>classpxl_1_1_user_record_helper.html</anchorfile>
      <anchor>aeae48d210cf0dfd2a52fb7adcfc4bb41</anchor>
      <arglist>(const std::string &amp;key) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const Id &amp;</type>
      <name>getStaticTypeId</name>
      <anchorfile>classpxl_1_1_basic_container.html</anchorfile>
      <anchor>a5afc15c05dd6ab3c0e47e7e900d6e28d</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>pxl::BasicMatrix</name>
    <filename>classpxl_1_1_basic_matrix.html</filename>
    <base>pxl::Serializable</base>
    <member kind="function">
      <type></type>
      <name>BasicMatrix</name>
      <anchorfile>classpxl_1_1_basic_matrix.html</anchorfile>
      <anchor>ada2966e32b6599b944178a3574a8b21e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BasicMatrix</name>
      <anchorfile>classpxl_1_1_basic_matrix.html</anchorfile>
      <anchor>a4b75f9f860cd670691a9f760515bdf75</anchor>
      <arglist>(size_t size1, size_t size2, std::string name=&quot;BasicMatrix&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BasicMatrix</name>
      <anchorfile>classpxl_1_1_basic_matrix.html</anchorfile>
      <anchor>aa7a0f195918b6f7d172ca77787df18d4</anchor>
      <arglist>(size_t size1, size_t size2, StorageOrder storage, const std::string name=&quot;BasicMatrix&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BasicMatrix</name>
      <anchorfile>classpxl_1_1_basic_matrix.html</anchorfile>
      <anchor>a70133cdc0a8076f3a6bd37b6bdfb3ad1</anchor>
      <arglist>(const BasicMatrix &amp;orig)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BasicMatrix</name>
      <anchorfile>classpxl_1_1_basic_matrix.html</anchorfile>
      <anchor>a46e4b14d2e75ebb7c5d78f3238e6568b</anchor>
      <arglist>(const BasicMatrix *orig)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BasicMatrix</name>
      <anchorfile>classpxl_1_1_basic_matrix.html</anchorfile>
      <anchor>adb3ca4aeb5b37c20e92f4a65f3f0706e</anchor>
      <arglist>(size_t size1, size_t size2, double *data, StorageOrder storage, const std::string name=&quot;BasicMatrix&quot;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~BasicMatrix</name>
      <anchorfile>classpxl_1_1_basic_matrix.html</anchorfile>
      <anchor>ab4154905b43a5ec32bedd9332050bd9a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setName</name>
      <anchorfile>classpxl_1_1_basic_matrix.html</anchorfile>
      <anchor>aec4a5d42afe4c4490585e5d795c2d43f</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getName</name>
      <anchorfile>classpxl_1_1_basic_matrix.html</anchorfile>
      <anchor>a1480a18be1d5b9e5c91afb51f4c37977</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>use</name>
      <anchorfile>classpxl_1_1_basic_matrix.html</anchorfile>
      <anchor>a587703971f483b81de7413cb470a9bda</anchor>
      <arglist>(size_t size1, size_t size2, double *data)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isAlien</name>
      <anchorfile>classpxl_1_1_basic_matrix.html</anchorfile>
      <anchor>a786f5546e7e79a256b685a0cf5a69a85</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRowBasedStorage</name>
      <anchorfile>classpxl_1_1_basic_matrix.html</anchorfile>
      <anchor>a49c7339245f7463f7a47dd6f315b62e4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setColumnBasedStorage</name>
      <anchorfile>classpxl_1_1_basic_matrix.html</anchorfile>
      <anchor>a3d1e22a503d88582187aed32485971c6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isRowBasedStorage</name>
      <anchorfile>classpxl_1_1_basic_matrix.html</anchorfile>
      <anchor>a2e684118a5cb401d7849bde41542214f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isColumnBasedStorage</name>
      <anchorfile>classpxl_1_1_basic_matrix.html</anchorfile>
      <anchor>a878395d3cfe9ff03b3ac83ef92fd51d3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>getSize1</name>
      <anchorfile>classpxl_1_1_basic_matrix.html</anchorfile>
      <anchor>a7778a182e5cd6fcef87cf543088b5cde</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>getSize2</name>
      <anchorfile>classpxl_1_1_basic_matrix.html</anchorfile>
      <anchor>a2bf2100d58300bd4220db486c8e0350d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>getNumberOfRows</name>
      <anchorfile>classpxl_1_1_basic_matrix.html</anchorfile>
      <anchor>a819ced4f6bae68d36de2b8590c2b1762</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>getNumberOfColumns</name>
      <anchorfile>classpxl_1_1_basic_matrix.html</anchorfile>
      <anchor>a16a865f1cf49f6ade4f12a2df64ac765</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classpxl_1_1_basic_matrix.html</anchorfile>
      <anchor>af72d970b05408f91740536ec94e42038</anchor>
      <arglist>(size_t i, size_t j)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reshape</name>
      <anchorfile>classpxl_1_1_basic_matrix.html</anchorfile>
      <anchor>a9a52ad7ab8aa4f6164f9c652e71d55f9</anchor>
      <arglist>(size_t i, size_t j)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getElement</name>
      <anchorfile>classpxl_1_1_basic_matrix.html</anchorfile>
      <anchor>afa9c49730d955737a5b1afdac2f8fa41</anchor>
      <arglist>(size_t i, size_t j) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setElement</name>
      <anchorfile>classpxl_1_1_basic_matrix.html</anchorfile>
      <anchor>aac5c7b204e5e5eaa881652474283e09a</anchor>
      <arglist>(size_t i, size_t j, double val)</arglist>
    </member>
    <member kind="function">
      <type>double *</type>
      <name>getArray</name>
      <anchorfile>classpxl_1_1_basic_matrix.html</anchorfile>
      <anchor>ab97798e7f05e1dc7ca0fa0ef99f3fbdc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const double *</type>
      <name>getConstArray</name>
      <anchorfile>classpxl_1_1_basic_matrix.html</anchorfile>
      <anchor>a078fec6f5e797baa1253b5679f1ef26a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const BasicMatrix &amp;</type>
      <name>operator=</name>
      <anchorfile>classpxl_1_1_basic_matrix.html</anchorfile>
      <anchor>a8558b36a028f081c6e460ef61fffd522</anchor>
      <arglist>(const BasicMatrix &amp;M)</arglist>
    </member>
    <member kind="function">
      <type>BasicMatrix</type>
      <name>operator+</name>
      <anchorfile>classpxl_1_1_basic_matrix.html</anchorfile>
      <anchor>a4d998e8ec6459ca50dec7393c695da5a</anchor>
      <arglist>(const BasicMatrix &amp;M)</arglist>
    </member>
    <member kind="function">
      <type>BasicMatrix</type>
      <name>operator-</name>
      <anchorfile>classpxl_1_1_basic_matrix.html</anchorfile>
      <anchor>a66eb60178fa3316313d9b0dc2af83f1c</anchor>
      <arglist>(const BasicMatrix &amp;M)</arglist>
    </member>
    <member kind="function">
      <type>const BasicMatrix &amp;</type>
      <name>operator+=</name>
      <anchorfile>classpxl_1_1_basic_matrix.html</anchorfile>
      <anchor>adb18acb6a93c9d63a0afaa214ddf59ad</anchor>
      <arglist>(const BasicMatrix &amp;M)</arglist>
    </member>
    <member kind="function">
      <type>const BasicMatrix &amp;</type>
      <name>operator-=</name>
      <anchorfile>classpxl_1_1_basic_matrix.html</anchorfile>
      <anchor>a56461f7c450b6151d80913f9758a55e5</anchor>
      <arglist>(const BasicMatrix &amp;M)</arglist>
    </member>
    <member kind="function">
      <type>const BasicMatrix &amp;</type>
      <name>operator*=</name>
      <anchorfile>classpxl_1_1_basic_matrix.html</anchorfile>
      <anchor>a082b91431384c70238461ac90b6c5728</anchor>
      <arglist>(double skalar)</arglist>
    </member>
    <member kind="function">
      <type>const BasicMatrix &amp;</type>
      <name>operator/=</name>
      <anchorfile>classpxl_1_1_basic_matrix.html</anchorfile>
      <anchor>a54e474f3a51848d2c89bc6e0143e3827</anchor>
      <arglist>(double skalar)</arglist>
    </member>
    <member kind="function">
      <type>const BasicMatrix</type>
      <name>operator/</name>
      <anchorfile>classpxl_1_1_basic_matrix.html</anchorfile>
      <anchor>a1f0270ce6787b59144c0f0886f9768ee</anchor>
      <arglist>(double skalar) const</arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>operator()</name>
      <anchorfile>classpxl_1_1_basic_matrix.html</anchorfile>
      <anchor>a293ee1839c7a7bef4e447abd7255e9f0</anchor>
      <arglist>(size_t i, size_t j)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::ostream &amp;</type>
      <name>print</name>
      <anchorfile>classpxl_1_1_basic_matrix.html</anchorfile>
      <anchor>a3419fcdf8e59273e3039926873de40eb</anchor>
      <arglist>(int level=1, std::ostream &amp;os=std::cout, int pan=1) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Serializable *</type>
      <name>clone</name>
      <anchorfile>classpxl_1_1_basic_matrix.html</anchorfile>
      <anchor>a0ebefddb93ff78ef1e06b4ae7b3d162a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classpxl_1_1_basic_matrix.html</anchorfile>
      <anchor>a972c34855f3cb68717d5ceb4c7ca0bc4</anchor>
      <arglist>(const OutputStream &amp;out) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>deserialize</name>
      <anchorfile>classpxl_1_1_basic_matrix.html</anchorfile>
      <anchor>aaba7e0c2be2abb73fe91bf4087a1c0d6</anchor>
      <arglist>(const InputStream &amp;in)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Id &amp;</type>
      <name>getTypeId</name>
      <anchorfile>classpxl_1_1_basic_matrix.html</anchorfile>
      <anchor>aca22f44e283d058a0bbe7098fe3edb5d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Id &amp;</type>
      <name>getId</name>
      <anchorfile>classpxl_1_1_serializable.html</anchorfile>
      <anchor>a071e3e5bdd7125cee5dd5178807c3647</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const std::string</type>
      <name>toString</name>
      <anchorfile>classpxl_1_1_serializable.html</anchorfile>
      <anchor>abe42afdf47f4fa9cad94e26e9a3d6ba1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const Id &amp;</type>
      <name>getStaticTypeId</name>
      <anchorfile>classpxl_1_1_basic_matrix.html</anchorfile>
      <anchor>acf7b593372d68345d538e4f366fe6c4b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double *</type>
      <name>_data</name>
      <anchorfile>classpxl_1_1_basic_matrix.html</anchorfile>
      <anchor>a75a45c1acc2877006634b7781e89bf56</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>pxl::BasicNVector</name>
    <filename>classpxl_1_1_basic_n_vector.html</filename>
    <base>pxl::Serializable</base>
    <member kind="function">
      <type></type>
      <name>BasicNVector</name>
      <anchorfile>classpxl_1_1_basic_n_vector.html</anchorfile>
      <anchor>a438c82b81e6921fa4492c911f6815e3e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BasicNVector</name>
      <anchorfile>classpxl_1_1_basic_n_vector.html</anchorfile>
      <anchor>a28130ec6c31ff352dad1097af3887883</anchor>
      <arglist>(size_t size)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BasicNVector</name>
      <anchorfile>classpxl_1_1_basic_n_vector.html</anchorfile>
      <anchor>a47075fa4b971ae972a7aad4a0a60b0de</anchor>
      <arglist>(const BasicNVector &amp;orig)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BasicNVector</name>
      <anchorfile>classpxl_1_1_basic_n_vector.html</anchorfile>
      <anchor>a5e690b305bf507ff6030ca4d3ac23f5b</anchor>
      <arglist>(const Basic3Vector &amp;vec)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BasicNVector</name>
      <anchorfile>classpxl_1_1_basic_n_vector.html</anchorfile>
      <anchor>a1a8613fc79a88842b111eb7c4f819e32</anchor>
      <arglist>(const BasicNVector *orig)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BasicNVector</name>
      <anchorfile>classpxl_1_1_basic_n_vector.html</anchorfile>
      <anchor>ace168fdddf6eb797b959d4ed5954d8e9</anchor>
      <arglist>(size_t size, double *data, const std::string name=&quot;BasicNVector&quot;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~BasicNVector</name>
      <anchorfile>classpxl_1_1_basic_n_vector.html</anchorfile>
      <anchor>af3985f53625d6cec00d548f38d8ab9f2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>use</name>
      <anchorfile>classpxl_1_1_basic_n_vector.html</anchorfile>
      <anchor>a4e0e7edfc07c81935bb5a5fb4c3f0a3d</anchor>
      <arglist>(size_t size, double *data)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unUseArray</name>
      <anchorfile>classpxl_1_1_basic_n_vector.html</anchorfile>
      <anchor>a25b354e2c59553ddd62b0c8cd2a708b2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSize</name>
      <anchorfile>classpxl_1_1_basic_n_vector.html</anchorfile>
      <anchor>a1116809d435e1e10c42a6ba45993912e</anchor>
      <arglist>(size_t size)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>getSize</name>
      <anchorfile>classpxl_1_1_basic_n_vector.html</anchorfile>
      <anchor>a359f28d564cfd1f9d9d7a0542508ee5e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setName</name>
      <anchorfile>classpxl_1_1_basic_n_vector.html</anchorfile>
      <anchor>a6decc078ad98fd4529d7f72685321866</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getName</name>
      <anchorfile>classpxl_1_1_basic_n_vector.html</anchorfile>
      <anchor>ac3de6c4378680f67396210b58002b196</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getElement</name>
      <anchorfile>classpxl_1_1_basic_n_vector.html</anchorfile>
      <anchor>ac8713cc1be176c479e6bc33e3382fd09</anchor>
      <arglist>(size_t i) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setElement</name>
      <anchorfile>classpxl_1_1_basic_n_vector.html</anchorfile>
      <anchor>a7bfb41d0c2a17b0ebd134478ff977ab8</anchor>
      <arglist>(size_t i, double value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::ostream &amp;</type>
      <name>print</name>
      <anchorfile>classpxl_1_1_basic_n_vector.html</anchorfile>
      <anchor>a50583bf8e8a5d9e519af1e92104f65c1</anchor>
      <arglist>(int level=1, std::ostream &amp;os=std::cout, int pan=1) const</arglist>
    </member>
    <member kind="function">
      <type>double *</type>
      <name>getArray</name>
      <anchorfile>classpxl_1_1_basic_n_vector.html</anchorfile>
      <anchor>aead36c95d5228b325f310d1ebe0f1988</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const double *</type>
      <name>getConstArray</name>
      <anchorfile>classpxl_1_1_basic_n_vector.html</anchorfile>
      <anchor>ad383b3a13af3c63389e89900c28f47ba</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Serializable *</type>
      <name>clone</name>
      <anchorfile>classpxl_1_1_basic_n_vector.html</anchorfile>
      <anchor>a2523e00d42d69240f09717548f21632d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Id &amp;</type>
      <name>getTypeId</name>
      <anchorfile>classpxl_1_1_basic_n_vector.html</anchorfile>
      <anchor>a5e7cbe2599965abd0048e44aaf16e886</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classpxl_1_1_basic_n_vector.html</anchorfile>
      <anchor>afc01d9be8534563f9b8b3180b32138dd</anchor>
      <arglist>(const OutputStream &amp;out) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>deserialize</name>
      <anchorfile>classpxl_1_1_basic_n_vector.html</anchorfile>
      <anchor>a51b5c504ec5dc2dd54f4892d625207e2</anchor>
      <arglist>(const InputStream &amp;in)</arglist>
    </member>
    <member kind="function">
      <type>const BasicNVector &amp;</type>
      <name>operator=</name>
      <anchorfile>classpxl_1_1_basic_n_vector.html</anchorfile>
      <anchor>a4c9b7a0681e5a5f9ca8eaf8743a30872</anchor>
      <arglist>(const BasicNVector &amp;vec)</arglist>
    </member>
    <member kind="function">
      <type>BasicNVector</type>
      <name>operator+</name>
      <anchorfile>classpxl_1_1_basic_n_vector.html</anchorfile>
      <anchor>a0f66a71f4d7c8ec7c95c1b96608a6c97</anchor>
      <arglist>(const BasicNVector &amp;vec)</arglist>
    </member>
    <member kind="function">
      <type>BasicNVector</type>
      <name>operator-</name>
      <anchorfile>classpxl_1_1_basic_n_vector.html</anchorfile>
      <anchor>abdd599f9706cc9dd2e86d2e3bac66e6f</anchor>
      <arglist>(const BasicNVector &amp;vec)</arglist>
    </member>
    <member kind="function">
      <type>const BasicNVector &amp;</type>
      <name>operator+=</name>
      <anchorfile>classpxl_1_1_basic_n_vector.html</anchorfile>
      <anchor>a711468397eb49952969f95b46fe258fb</anchor>
      <arglist>(const BasicNVector &amp;vec)</arglist>
    </member>
    <member kind="function">
      <type>const BasicNVector &amp;</type>
      <name>operator-=</name>
      <anchorfile>classpxl_1_1_basic_n_vector.html</anchorfile>
      <anchor>ab521d724993375581f2117a4aff8d1f0</anchor>
      <arglist>(const BasicNVector &amp;vec)</arglist>
    </member>
    <member kind="function">
      <type>const BasicNVector &amp;</type>
      <name>operator*=</name>
      <anchorfile>classpxl_1_1_basic_n_vector.html</anchorfile>
      <anchor>a72ec1beb39cae6017d56033cc268e9e6</anchor>
      <arglist>(double skalar)</arglist>
    </member>
    <member kind="function">
      <type>const BasicNVector &amp;</type>
      <name>operator/=</name>
      <anchorfile>classpxl_1_1_basic_n_vector.html</anchorfile>
      <anchor>aee0ad779ec17bff4db989a5f65d8127a</anchor>
      <arglist>(double skalar)</arglist>
    </member>
    <member kind="function">
      <type>const BasicNVector</type>
      <name>operator/</name>
      <anchorfile>classpxl_1_1_basic_n_vector.html</anchorfile>
      <anchor>a978d8271735e6114012f70a209f95eec</anchor>
      <arglist>(double skalar) const</arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>operator()</name>
      <anchorfile>classpxl_1_1_basic_n_vector.html</anchorfile>
      <anchor>ac03be310c4629c4cb709a6fb70a69491</anchor>
      <arglist>(size_t i)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>operator*</name>
      <anchorfile>classpxl_1_1_basic_n_vector.html</anchorfile>
      <anchor>a75dc83dd2aa82754af8e0676524d2851</anchor>
      <arglist>(const BasicNVector &amp;vec) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>norm</name>
      <anchorfile>classpxl_1_1_basic_n_vector.html</anchorfile>
      <anchor>ae4d572a28fc3b8a32b7f29e9a63fecb5</anchor>
      <arglist>(uint32_t norm)</arglist>
    </member>
    <member kind="function">
      <type>const Id &amp;</type>
      <name>getId</name>
      <anchorfile>classpxl_1_1_serializable.html</anchorfile>
      <anchor>a071e3e5bdd7125cee5dd5178807c3647</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const std::string</type>
      <name>toString</name>
      <anchorfile>classpxl_1_1_serializable.html</anchorfile>
      <anchor>abe42afdf47f4fa9cad94e26e9a3d6ba1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const Id &amp;</type>
      <name>getStaticTypeId</name>
      <anchorfile>classpxl_1_1_basic_n_vector.html</anchorfile>
      <anchor>a54926db2fc4cbc34ddf6d4f76b44be29</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BinaryAndHelper</name>
    <filename>class_binary_and_helper.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg>method</templarg>
  </compound>
  <compound kind="class">
    <name>BinaryAndHelper&lt; T, U, BinaryState_Int16 &gt;</name>
    <filename>class_binary_and_helper_3_01_t_00_01_u_00_01_binary_state___int16_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static T</type>
      <name>And</name>
      <anchorfile>class_binary_and_helper_3_01_t_00_01_u_00_01_binary_state___int16_01_4.html</anchorfile>
      <anchor>acb5ff963dc74d2b483cfdb3520bf48b4</anchor>
      <arglist>(T lhs, U rhs)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BinaryAndHelper&lt; T, U, BinaryState_Int32 &gt;</name>
    <filename>class_binary_and_helper_3_01_t_00_01_u_00_01_binary_state___int32_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static T</type>
      <name>And</name>
      <anchorfile>class_binary_and_helper_3_01_t_00_01_u_00_01_binary_state___int32_01_4.html</anchorfile>
      <anchor>a493b8a16f26bc7d52aae08f60eedfbee</anchor>
      <arglist>(T lhs, U rhs)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BinaryAndHelper&lt; T, U, BinaryState_Int8 &gt;</name>
    <filename>class_binary_and_helper_3_01_t_00_01_u_00_01_binary_state___int8_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static T</type>
      <name>And</name>
      <anchorfile>class_binary_and_helper_3_01_t_00_01_u_00_01_binary_state___int8_01_4.html</anchorfile>
      <anchor>a4fcb7c93b2dbe1d436a16350e23e2697</anchor>
      <arglist>(T lhs, U rhs)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BinaryAndHelper&lt; T, U, BinaryState_OK &gt;</name>
    <filename>class_binary_and_helper_3_01_t_00_01_u_00_01_binary_state___o_k_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static T</type>
      <name>And</name>
      <anchorfile>class_binary_and_helper_3_01_t_00_01_u_00_01_binary_state___o_k_01_4.html</anchorfile>
      <anchor>a1aeeb3170ee9cfb424b2e2771111c376</anchor>
      <arglist>(T lhs, U rhs)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BinaryMethod</name>
    <filename>class_binary_method.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="enumvalue">
      <name>method</name>
      <anchorfile>class_binary_method.html</anchorfile>
      <anchor>a029594625f77c2d057fe43cdbebfba0da787190f749a40561ce2d5782aea9ce14</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>method</name>
      <anchorfile>class_binary_method.html</anchorfile>
      <anchor>a029594625f77c2d057fe43cdbebfba0da787190f749a40561ce2d5782aea9ce14</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BinaryOrHelper</name>
    <filename>class_binary_or_helper.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg>method</templarg>
  </compound>
  <compound kind="class">
    <name>BinaryOrHelper&lt; T, U, BinaryState_Int16 &gt;</name>
    <filename>class_binary_or_helper_3_01_t_00_01_u_00_01_binary_state___int16_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static T</type>
      <name>Or</name>
      <anchorfile>class_binary_or_helper_3_01_t_00_01_u_00_01_binary_state___int16_01_4.html</anchorfile>
      <anchor>a151062e2cd4486831bef8453c0ec2455</anchor>
      <arglist>(T lhs, U rhs)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BinaryOrHelper&lt; T, U, BinaryState_Int32 &gt;</name>
    <filename>class_binary_or_helper_3_01_t_00_01_u_00_01_binary_state___int32_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static T</type>
      <name>Or</name>
      <anchorfile>class_binary_or_helper_3_01_t_00_01_u_00_01_binary_state___int32_01_4.html</anchorfile>
      <anchor>aa3bbfcbcb1248a1e9f14cf6e98fb3c20</anchor>
      <arglist>(T lhs, U rhs)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BinaryOrHelper&lt; T, U, BinaryState_Int8 &gt;</name>
    <filename>class_binary_or_helper_3_01_t_00_01_u_00_01_binary_state___int8_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static T</type>
      <name>Or</name>
      <anchorfile>class_binary_or_helper_3_01_t_00_01_u_00_01_binary_state___int8_01_4.html</anchorfile>
      <anchor>abc8f0fd5a0e17e4aee10b8ffffb87059</anchor>
      <arglist>(T lhs, U rhs)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BinaryOrHelper&lt; T, U, BinaryState_OK &gt;</name>
    <filename>class_binary_or_helper_3_01_t_00_01_u_00_01_binary_state___o_k_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static T</type>
      <name>Or</name>
      <anchorfile>class_binary_or_helper_3_01_t_00_01_u_00_01_binary_state___o_k_01_4.html</anchorfile>
      <anchor>a27e64b6faa9db7c5ad968000f1d66e7f</anchor>
      <arglist>(T lhs, U rhs)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BinaryXorHelper</name>
    <filename>class_binary_xor_helper.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg>method</templarg>
  </compound>
  <compound kind="class">
    <name>BinaryXorHelper&lt; T, U, BinaryState_Int16 &gt;</name>
    <filename>class_binary_xor_helper_3_01_t_00_01_u_00_01_binary_state___int16_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static T</type>
      <name>Xor</name>
      <anchorfile>class_binary_xor_helper_3_01_t_00_01_u_00_01_binary_state___int16_01_4.html</anchorfile>
      <anchor>a016f631c6de2afd610a43eff2b289339</anchor>
      <arglist>(T lhs, U rhs)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BinaryXorHelper&lt; T, U, BinaryState_Int32 &gt;</name>
    <filename>class_binary_xor_helper_3_01_t_00_01_u_00_01_binary_state___int32_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static T</type>
      <name>Xor</name>
      <anchorfile>class_binary_xor_helper_3_01_t_00_01_u_00_01_binary_state___int32_01_4.html</anchorfile>
      <anchor>accc1c2745eb835184121e6cbbd303b93</anchor>
      <arglist>(T lhs, U rhs)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BinaryXorHelper&lt; T, U, BinaryState_Int8 &gt;</name>
    <filename>class_binary_xor_helper_3_01_t_00_01_u_00_01_binary_state___int8_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static T</type>
      <name>Xor</name>
      <anchorfile>class_binary_xor_helper_3_01_t_00_01_u_00_01_binary_state___int8_01_4.html</anchorfile>
      <anchor>ae4c62962c6475303378ea92111298f9b</anchor>
      <arglist>(T lhs, U rhs)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BinaryXorHelper&lt; T, U, BinaryState_OK &gt;</name>
    <filename>class_binary_xor_helper_3_01_t_00_01_u_00_01_binary_state___o_k_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static T</type>
      <name>Xor</name>
      <anchorfile>class_binary_xor_helper_3_01_t_00_01_u_00_01_binary_state___o_k_01_4.html</anchorfile>
      <anchor>a22d0452b2435e0319b681cd375e9ded4</anchor>
      <arglist>(T lhs, U rhs)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BinnedMapping</name>
    <filename>class_binned_mapping.html</filename>
    <member kind="function">
      <type></type>
      <name>BinnedMapping</name>
      <anchorfile>class_binned_mapping.html</anchorfile>
      <anchor>a8114ad8e1c1bb2dbdf74777ee9591e0c</anchor>
      <arglist>(Tools::MConfig const &amp;config, std::string const &amp;keyName, std::string const &amp;valueName, std::string const &amp;absBinName=&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~BinnedMapping</name>
      <anchorfile>class_binned_mapping.html</anchorfile>
      <anchor>a2ef69fcfc5956b797c993d6d2095b674</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getValue</name>
      <anchorfile>class_binned_mapping.html</anchorfile>
      <anchor>ab5a5a17e6364fce3e9bb972ffb87b618</anchor>
      <arglist>(double const key) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>indicators::BlockProgressBar</name>
    <filename>classindicators_1_1_block_progress_bar.html</filename>
    <member kind="function">
      <type></type>
      <name>BlockProgressBar</name>
      <anchorfile>classindicators_1_1_block_progress_bar.html</anchorfile>
      <anchor>ae037b1c584c0928bfc2c9b371d0c4d4b</anchor>
      <arglist>(Args &amp;&amp;...args)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_option</name>
      <anchorfile>classindicators_1_1_block_progress_bar.html</anchorfile>
      <anchor>a9b527fc7ceae3e14dee100fcfb214127</anchor>
      <arglist>(details::Setting&lt; T, id &gt; &amp;&amp;setting)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_option</name>
      <anchorfile>classindicators_1_1_block_progress_bar.html</anchorfile>
      <anchor>a98cecacfb8abcbbaf8c9c71e69d0da8f</anchor>
      <arglist>(const details::Setting&lt; T, id &gt; &amp;setting)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_option</name>
      <anchorfile>classindicators_1_1_block_progress_bar.html</anchorfile>
      <anchor>a957d128de11c871b1411687d86f5a4ce</anchor>
      <arglist>(const details::Setting&lt; std::string, details::ProgressBarOption::postfix_text &gt; &amp;setting)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_option</name>
      <anchorfile>classindicators_1_1_block_progress_bar.html</anchorfile>
      <anchor>a9c81001cd33b22c2a5f48f61a0f7f425</anchor>
      <arglist>(details::Setting&lt; std::string, details::ProgressBarOption::postfix_text &gt; &amp;&amp;setting)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_progress</name>
      <anchorfile>classindicators_1_1_block_progress_bar.html</anchorfile>
      <anchor>ac6f65929383c18b2060ce2bde1abf497</anchor>
      <arglist>(float value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>tick</name>
      <anchorfile>classindicators_1_1_block_progress_bar.html</anchorfile>
      <anchor>a7a73a0e8ee2de47e8ec7171d1a99711d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>current</name>
      <anchorfile>classindicators_1_1_block_progress_bar.html</anchorfile>
      <anchor>a304cf88c0bf381c8ed93d4cdbca250e1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_completed</name>
      <anchorfile>classindicators_1_1_block_progress_bar.html</anchorfile>
      <anchor>a8e52f2bc73f227c4eaba4e0b725a8300</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mark_as_completed</name>
      <anchorfile>classindicators_1_1_block_progress_bar.html</anchorfile>
      <anchor>aad220713aac5a49c302c36f3b0cdd6ba</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print_progress</name>
      <anchorfile>classindicators_1_1_block_progress_bar.html</anchorfile>
      <anchor>a115be051ec337a596e57ea823d597991</anchor>
      <arglist>(bool from_multi_progress=false)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>MultiProgress</name>
      <anchorfile>classindicators_1_1_block_progress_bar.html</anchorfile>
      <anchor>aba0b639557318697577be3d2cda61d35</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>DynamicProgress</name>
      <anchorfile>classindicators_1_1_block_progress_bar.html</anchorfile>
      <anchor>a4d812065d3c70107a193597cf718dc24</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>indicators::details::BlockProgressScaleWriter</name>
    <filename>classindicators_1_1details_1_1_block_progress_scale_writer.html</filename>
    <member kind="function">
      <type></type>
      <name>BlockProgressScaleWriter</name>
      <anchorfile>classindicators_1_1details_1_1_block_progress_scale_writer.html</anchorfile>
      <anchor>a5bfd512f82c8446bd8af7f6a7b6d79ac</anchor>
      <arglist>(std::ostream &amp;os, size_t bar_width)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>write</name>
      <anchorfile>classindicators_1_1details_1_1_block_progress_scale_writer.html</anchorfile>
      <anchor>af1fef99aedba3761e483210c564eddab</anchor>
      <arglist>(float progress)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BS::blocks</name>
    <filename>class_b_s_1_1blocks.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>blocks</name>
      <anchorfile>class_b_s_1_1blocks.html</anchorfile>
      <anchor>a2e938fc32ea845e8a0cf23025c6830c7</anchor>
      <arglist>(const T1 first_index_, const T2 index_after_last_, const size_t num_blocks_)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>start</name>
      <anchorfile>class_b_s_1_1blocks.html</anchorfile>
      <anchor>a7d659984a82cf57e54773d9a88d863ae</anchor>
      <arglist>(const size_t i) const</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>end</name>
      <anchorfile>class_b_s_1_1blocks.html</anchorfile>
      <anchor>a0f0e08f9eff06a0d8e3b05bf59833c7b</anchor>
      <arglist>(const size_t i) const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>get_num_blocks</name>
      <anchorfile>class_b_s_1_1blocks.html</anchorfile>
      <anchor>aed50be83dbe428959cb600197df32c95</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>get_total_size</name>
      <anchorfile>class_b_s_1_1blocks.html</anchorfile>
      <anchor>a5f1214e4fdf05ff4d825d08cf8c66b2b</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>pxl::BufferInput</name>
    <filename>classpxl_1_1_buffer_input.html</filename>
    <base>pxl::InputStream</base>
    <member kind="function">
      <type></type>
      <name>BufferInput</name>
      <anchorfile>classpxl_1_1_buffer_input.html</anchorfile>
      <anchor>a3623f6b1124d2f437379f1fb45aeacb6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classpxl_1_1_buffer_input.html</anchorfile>
      <anchor>ac0d3e3d7a3002593c9c04a6a5cada39e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>good</name>
      <anchorfile>classpxl_1_1_buffer_input.html</anchorfile>
      <anchor>a90771d94dd30e5a8f5b903a99d951db8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>available</name>
      <anchorfile>classpxl_1_1_buffer_input.html</anchorfile>
      <anchor>a36be4ab382961ccb63ab3c69067fa71b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read</name>
      <anchorfile>classpxl_1_1_buffer_input.html</anchorfile>
      <anchor>a7990bef5cecac7c36977d817b15f51c7</anchor>
      <arglist>(void *data, size_t size) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read</name>
      <anchorfile>classpxl_1_1_input_stream.html</anchorfile>
      <anchor>a6633804c6b5710e4d728cb272cc41048</anchor>
      <arglist>(char &amp;i) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read</name>
      <anchorfile>classpxl_1_1_input_stream.html</anchorfile>
      <anchor>a0e21a655126e41b9e1a784e25015e996</anchor>
      <arglist>(unsigned char &amp;i) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read</name>
      <anchorfile>classpxl_1_1_input_stream.html</anchorfile>
      <anchor>afa5bfd62418bdb2a335a3035a4e90119</anchor>
      <arglist>(int16_t &amp;i) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read</name>
      <anchorfile>classpxl_1_1_input_stream.html</anchorfile>
      <anchor>ac3636f8e737866bd10bff4b4de887abc</anchor>
      <arglist>(uint16_t &amp;i) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read</name>
      <anchorfile>classpxl_1_1_input_stream.html</anchorfile>
      <anchor>abd73ec066cfa1f7858ec492b19666031</anchor>
      <arglist>(int32_t &amp;i) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read</name>
      <anchorfile>classpxl_1_1_input_stream.html</anchorfile>
      <anchor>ae6ae5cccf9265f0a6c72f8fb3c44b131</anchor>
      <arglist>(uint32_t &amp;i) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read</name>
      <anchorfile>classpxl_1_1_input_stream.html</anchorfile>
      <anchor>a195718a73c741c3b451f2f02e10c84b0</anchor>
      <arglist>(int64_t &amp;i) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read</name>
      <anchorfile>classpxl_1_1_input_stream.html</anchorfile>
      <anchor>a39df37d6f860db25b64dc39d57457b0c</anchor>
      <arglist>(uint64_t &amp;i) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>readChar</name>
      <anchorfile>classpxl_1_1_input_stream.html</anchorfile>
      <anchor>aaf11c702e720f9ac943b874325774311</anchor>
      <arglist>(char &amp;c) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>readUnsignedChar</name>
      <anchorfile>classpxl_1_1_input_stream.html</anchorfile>
      <anchor>a8eb16a166889f58b29ee31abb81cadcc</anchor>
      <arglist>(unsigned char &amp;c) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>readInt</name>
      <anchorfile>classpxl_1_1_input_stream.html</anchorfile>
      <anchor>a82fddb373cf861cf6ba4e92f1a2d193f</anchor>
      <arglist>(int &amp;i) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>readUnsignedInt</name>
      <anchorfile>classpxl_1_1_input_stream.html</anchorfile>
      <anchor>a7f6e0c70a2a96adaf6df8a09c490725f</anchor>
      <arglist>(unsigned int &amp;i) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>readLong</name>
      <anchorfile>classpxl_1_1_input_stream.html</anchorfile>
      <anchor>a0936ab4b82b8a48edc79ce1b8d48696e</anchor>
      <arglist>(long &amp;l) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>readUnsignedLong</name>
      <anchorfile>classpxl_1_1_input_stream.html</anchorfile>
      <anchor>aeab512b2f84364577677972d5f864d81</anchor>
      <arglist>(unsigned long &amp;l) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>readShort</name>
      <anchorfile>classpxl_1_1_input_stream.html</anchorfile>
      <anchor>a78c845b5693c96c73e4dfa19247bf1c8</anchor>
      <arglist>(short &amp;i) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>readUnsignedShort</name>
      <anchorfile>classpxl_1_1_input_stream.html</anchorfile>
      <anchor>aa30a8f1e6a6a4fdc6bd67c2191146ab8</anchor>
      <arglist>(unsigned short &amp;i) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>readBool</name>
      <anchorfile>classpxl_1_1_input_stream.html</anchorfile>
      <anchor>a8d85c7d87cf5b62fe6ab6fc835fa7533</anchor>
      <arglist>(bool &amp;b) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>readString</name>
      <anchorfile>classpxl_1_1_input_stream.html</anchorfile>
      <anchor>a2bbe96189fe3f54dc8047bb4e896fbdd</anchor>
      <arglist>(std::string &amp;s) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>readFloat</name>
      <anchorfile>classpxl_1_1_input_stream.html</anchorfile>
      <anchor>aeb07ba2fc70160072d8d448a8dd182bf</anchor>
      <arglist>(float &amp;i) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>readDouble</name>
      <anchorfile>classpxl_1_1_input_stream.html</anchorfile>
      <anchor>a6965693a86b7bad23cfdd864a4049e0a</anchor>
      <arglist>(double &amp;i) const</arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; char &gt;</type>
      <name>buffer</name>
      <anchorfile>classpxl_1_1_buffer_input.html</anchorfile>
      <anchor>aba6c7453db47e801468aac050a47a0f3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>pxl::BufferOutput</name>
    <filename>classpxl_1_1_buffer_output.html</filename>
    <base>pxl::OutputStream</base>
    <member kind="function">
      <type></type>
      <name>BufferOutput</name>
      <anchorfile>classpxl_1_1_buffer_output.html</anchorfile>
      <anchor>aa75222172329072799dbf1a46befe2ac</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BufferOutput</name>
      <anchorfile>classpxl_1_1_buffer_output.html</anchorfile>
      <anchor>a6cc231d405729f8fbc82e6da3be0e756</anchor>
      <arglist>(size_t bufferSize)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classpxl_1_1_buffer_output.html</anchorfile>
      <anchor>a8d9b274ad4403225c4593b6a2bd94e9b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>classpxl_1_1_buffer_output.html</anchorfile>
      <anchor>a7683369f876187d7991140c9bb214514</anchor>
      <arglist>(const void *data, size_t size) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>classpxl_1_1_output_stream.html</anchorfile>
      <anchor>aa887ed8a5aa5e487e65cced2911732e7</anchor>
      <arglist>(int8_t i) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>classpxl_1_1_output_stream.html</anchorfile>
      <anchor>a5177d5a268c3d192d0b930d4f2230cf4</anchor>
      <arglist>(uint8_t i) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>classpxl_1_1_output_stream.html</anchorfile>
      <anchor>a9d57a2be0efda51a00f98a65479d3c5e</anchor>
      <arglist>(int16_t i) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>classpxl_1_1_output_stream.html</anchorfile>
      <anchor>af6945e5b2b42967e2dec6606606d423a</anchor>
      <arglist>(uint16_t i) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>classpxl_1_1_output_stream.html</anchorfile>
      <anchor>a13a79fcddeb1652ac5309f4d214e61ee</anchor>
      <arglist>(int32_t i) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>classpxl_1_1_output_stream.html</anchorfile>
      <anchor>a49d313a5d16c1c3c179b25ddfefd40e1</anchor>
      <arglist>(uint32_t i) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>classpxl_1_1_output_stream.html</anchorfile>
      <anchor>a5ca6b83cd7c9ef5acf3d1442708f4a5d</anchor>
      <arglist>(int64_t i) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>classpxl_1_1_output_stream.html</anchorfile>
      <anchor>a6e5b131cd9a994dee74b3cf5589fdad9</anchor>
      <arglist>(uint64_t i) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeChar</name>
      <anchorfile>classpxl_1_1_output_stream.html</anchorfile>
      <anchor>ad9bb524eac06efb9fc3289cb6b7319aa</anchor>
      <arglist>(char c) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeUnsignedChar</name>
      <anchorfile>classpxl_1_1_output_stream.html</anchorfile>
      <anchor>a63d4ceb1a8b465050f1353bd103a08aa</anchor>
      <arglist>(unsigned char c) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeString</name>
      <anchorfile>classpxl_1_1_output_stream.html</anchorfile>
      <anchor>a6f4f0ae5dafa92798d297280ca98ff45</anchor>
      <arglist>(const std::string &amp;s) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeFloat</name>
      <anchorfile>classpxl_1_1_output_stream.html</anchorfile>
      <anchor>acd195939c3ff2f59bbedf325e2b706ce</anchor>
      <arglist>(float f) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeDouble</name>
      <anchorfile>classpxl_1_1_output_stream.html</anchorfile>
      <anchor>ad9f0d56ff7f5ba809e93e18bdcf12713</anchor>
      <arglist>(double d) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeInt</name>
      <anchorfile>classpxl_1_1_output_stream.html</anchorfile>
      <anchor>a72ef7399e06185f83be6c13a1543904c</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeUnsignedInt</name>
      <anchorfile>classpxl_1_1_output_stream.html</anchorfile>
      <anchor>a92a5c16f70c4731cdf4c004f6708551a</anchor>
      <arglist>(unsigned int i) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeLong</name>
      <anchorfile>classpxl_1_1_output_stream.html</anchorfile>
      <anchor>afc453ca21b17cb3ce797ea74d178098f</anchor>
      <arglist>(long l) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeUnsignedLong</name>
      <anchorfile>classpxl_1_1_output_stream.html</anchorfile>
      <anchor>ac610daabe2a726c0ada57c63a34a5ffc</anchor>
      <arglist>(unsigned long l) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeShort</name>
      <anchorfile>classpxl_1_1_output_stream.html</anchorfile>
      <anchor>a07052fd4a722747da8ce4af773e842b3</anchor>
      <arglist>(short s) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeUnsignedShort</name>
      <anchorfile>classpxl_1_1_output_stream.html</anchorfile>
      <anchor>a8dc2086d4a9787e20fc29bbf156189e3</anchor>
      <arglist>(unsigned short s) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeBool</name>
      <anchorfile>classpxl_1_1_output_stream.html</anchorfile>
      <anchor>a9bfcda4b8335e066e494fda57289e12b</anchor>
      <arglist>(bool b) const</arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; char &gt;</type>
      <name>buffer</name>
      <anchorfile>classpxl_1_1_buffer_output.html</anchorfile>
      <anchor>afd72f5b93dbe8434da4c6447d48a14b5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ChronoClock</name>
    <filename>class_chrono_clock.html</filename>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>getTime</name>
      <anchorfile>class_chrono_clock.html</anchorfile>
      <anchor>ab29cd5d62c2631bf21221c8c5fc27e08</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>pxl::ChunkReader</name>
    <filename>classpxl_1_1_chunk_reader.html</filename>
    <member kind="enumeration">
      <type></type>
      <name>statusFlag</name>
      <anchorfile>classpxl_1_1_chunk_reader.html</anchorfile>
      <anchor>a8ffe3b9273f0952cdc94483f37dbe450</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>preHeader</name>
      <anchorfile>classpxl_1_1_chunk_reader.html</anchorfile>
      <anchor>a8ffe3b9273f0952cdc94483f37dbe450ac2171742c09cfdffee5083f6498d63f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>evPreBlock</name>
      <anchorfile>classpxl_1_1_chunk_reader.html</anchorfile>
      <anchor>a8ffe3b9273f0952cdc94483f37dbe450a441525adbfa506be00a28f3c3f053d6e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>infoPreBlock</name>
      <anchorfile>classpxl_1_1_chunk_reader.html</anchorfile>
      <anchor>a8ffe3b9273f0952cdc94483f37dbe450a8af5dd5ee541aeb193a760e61d353dcd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>preBlock</name>
      <anchorfile>classpxl_1_1_chunk_reader.html</anchorfile>
      <anchor>a8ffe3b9273f0952cdc94483f37dbe450a7a15e501178c6ed3f4514e7d3d15dc9d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>readMode</name>
      <anchorfile>classpxl_1_1_chunk_reader.html</anchorfile>
      <anchor>ab74fd5ac0ada6b4fdb02509b257c4330</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>all</name>
      <anchorfile>classpxl_1_1_chunk_reader.html</anchorfile>
      <anchor>ab74fd5ac0ada6b4fdb02509b257c4330a64676a40d9994c2684319a18ec79705e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>event</name>
      <anchorfile>classpxl_1_1_chunk_reader.html</anchorfile>
      <anchor>ab74fd5ac0ada6b4fdb02509b257c4330ad28752436393755454e7b7b22a759981</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>infoChunk</name>
      <anchorfile>classpxl_1_1_chunk_reader.html</anchorfile>
      <anchor>ab74fd5ac0ada6b4fdb02509b257c4330a48cf44065a41c332a9d504eb7bb9eb9b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>infoMode</name>
      <anchorfile>classpxl_1_1_chunk_reader.html</anchorfile>
      <anchor>a284d10b81fa491b5fce3d005c5d6b90e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ignore</name>
      <anchorfile>classpxl_1_1_chunk_reader.html</anchorfile>
      <anchor>a284d10b81fa491b5fce3d005c5d6b90eac63ec590f5373896bf63e2599c056bd3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>evaluate</name>
      <anchorfile>classpxl_1_1_chunk_reader.html</anchorfile>
      <anchor>a284d10b81fa491b5fce3d005c5d6b90ea6c987db23dd2aad0df8c9c19eb211393</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>fileMode</name>
      <anchorfile>classpxl_1_1_chunk_reader.html</anchorfile>
      <anchor>aa661c3b7556281e093ef64e5992c51b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>nonSeekable</name>
      <anchorfile>classpxl_1_1_chunk_reader.html</anchorfile>
      <anchor>aa661c3b7556281e093ef64e5992c51b8a264b44e00b2867ad634cd29f0333d5bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>seekable</name>
      <anchorfile>classpxl_1_1_chunk_reader.html</anchorfile>
      <anchor>aa661c3b7556281e093ef64e5992c51b8a6de7d19d89cd00fe8086523d7dbf9614</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>preHeader</name>
      <anchorfile>classpxl_1_1_chunk_reader.html</anchorfile>
      <anchor>a8ffe3b9273f0952cdc94483f37dbe450ac2171742c09cfdffee5083f6498d63f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>evPreBlock</name>
      <anchorfile>classpxl_1_1_chunk_reader.html</anchorfile>
      <anchor>a8ffe3b9273f0952cdc94483f37dbe450a441525adbfa506be00a28f3c3f053d6e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>infoPreBlock</name>
      <anchorfile>classpxl_1_1_chunk_reader.html</anchorfile>
      <anchor>a8ffe3b9273f0952cdc94483f37dbe450a8af5dd5ee541aeb193a760e61d353dcd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>preBlock</name>
      <anchorfile>classpxl_1_1_chunk_reader.html</anchorfile>
      <anchor>a8ffe3b9273f0952cdc94483f37dbe450a7a15e501178c6ed3f4514e7d3d15dc9d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>all</name>
      <anchorfile>classpxl_1_1_chunk_reader.html</anchorfile>
      <anchor>ab74fd5ac0ada6b4fdb02509b257c4330a64676a40d9994c2684319a18ec79705e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>event</name>
      <anchorfile>classpxl_1_1_chunk_reader.html</anchorfile>
      <anchor>ab74fd5ac0ada6b4fdb02509b257c4330ad28752436393755454e7b7b22a759981</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>infoChunk</name>
      <anchorfile>classpxl_1_1_chunk_reader.html</anchorfile>
      <anchor>ab74fd5ac0ada6b4fdb02509b257c4330a48cf44065a41c332a9d504eb7bb9eb9b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ignore</name>
      <anchorfile>classpxl_1_1_chunk_reader.html</anchorfile>
      <anchor>a284d10b81fa491b5fce3d005c5d6b90eac63ec590f5373896bf63e2599c056bd3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>evaluate</name>
      <anchorfile>classpxl_1_1_chunk_reader.html</anchorfile>
      <anchor>a284d10b81fa491b5fce3d005c5d6b90ea6c987db23dd2aad0df8c9c19eb211393</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>nonSeekable</name>
      <anchorfile>classpxl_1_1_chunk_reader.html</anchorfile>
      <anchor>aa661c3b7556281e093ef64e5992c51b8a264b44e00b2867ad634cd29f0333d5bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>seekable</name>
      <anchorfile>classpxl_1_1_chunk_reader.html</anchorfile>
      <anchor>aa661c3b7556281e093ef64e5992c51b8a6de7d19d89cd00fe8086523d7dbf9614</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ChunkReader</name>
      <anchorfile>classpxl_1_1_chunk_reader.html</anchorfile>
      <anchor>a2f1b137cc08185d7de27f572d5836821</anchor>
      <arglist>(FileImpl &amp;stream, fileMode seekMode=seekable)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ChunkReader</name>
      <anchorfile>classpxl_1_1_chunk_reader.html</anchorfile>
      <anchor>a2ee2da887d8170619f7d64506584a3ac</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classpxl_1_1_chunk_reader.html</anchorfile>
      <anchor>addab1028bb6503a58db13302c10f50c5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>unsigned long</type>
      <name>getSectionCount</name>
      <anchorfile>classpxl_1_1_chunk_reader.html</anchorfile>
      <anchor>a1f46523418b60a174b04e1cb65e9da5f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>readHeader</name>
      <anchorfile>classpxl_1_1_chunk_reader.html</anchorfile>
      <anchor>a834684c58f7a214e2b42829925207962</anchor>
      <arglist>(readMode mode, skipMode skip, infoMode checkInfo, const std::string &amp;infoCondition)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>readBlock</name>
      <anchorfile>classpxl_1_1_chunk_reader.html</anchorfile>
      <anchor>aebe5b4f3c3ac37f4a56f7837eb6698ce</anchor>
      <arglist>(skipMode skip, infoMode checkInfo, const std::string &amp;infoCondition)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>skip</name>
      <anchorfile>classpxl_1_1_chunk_reader.html</anchorfile>
      <anchor>ab5b5b21b04484b297f398e72d6a3471b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>previous</name>
      <anchorfile>classpxl_1_1_chunk_reader.html</anchorfile>
      <anchor>a1748cd4066df14eb026488668734d6c0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>next</name>
      <anchorfile>classpxl_1_1_chunk_reader.html</anchorfile>
      <anchor>a694524ee2a5a78fb9fa652d8ac1f6eb4</anchor>
      <arglist>(skipMode skip=on, infoMode checkInfo=ignore, const std::string &amp;infoCondition=&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>nextBlock</name>
      <anchorfile>classpxl_1_1_chunk_reader.html</anchorfile>
      <anchor>a673dc7a6a831c573b335a9c53b719b48</anchor>
      <arglist>(skipMode skip=on, infoMode checkInfo=ignore, const std::string &amp;infoCondition=&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type>const InputStream &amp;</type>
      <name>getInputStream</name>
      <anchorfile>classpxl_1_1_chunk_reader.html</anchorfile>
      <anchor>a6464cfcb6f6c7c0a7ba46457df0a90be</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isBlock</name>
      <anchorfile>classpxl_1_1_chunk_reader.html</anchorfile>
      <anchor>a1b157f7f897d7a767894adf98b63caa1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isEnd</name>
      <anchorfile>classpxl_1_1_chunk_reader.html</anchorfile>
      <anchor>ab07ee8f7556f48293b45c598e9928eb4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>statusFlag</type>
      <name>getStatus</name>
      <anchorfile>classpxl_1_1_chunk_reader.html</anchorfile>
      <anchor>aca7e12bda5e2f9f0a28bafd66212ab06</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStatus</name>
      <anchorfile>classpxl_1_1_chunk_reader.html</anchorfile>
      <anchor>ad2e4f635266bad8f2b036d034ddf4340</anchor>
      <arglist>(statusFlag flag)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>endEvent</name>
      <anchorfile>classpxl_1_1_chunk_reader.html</anchorfile>
      <anchor>ab151c0c004443847cf198d92d1557136</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>getSize</name>
      <anchorfile>classpxl_1_1_chunk_reader.html</anchorfile>
      <anchor>a759b192aaee81f955fe87925903b202b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>getPosition</name>
      <anchorfile>classpxl_1_1_chunk_reader.html</anchorfile>
      <anchor>a28cbf13140cb874f0ff87dcea2fc3f32</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>eof</name>
      <anchorfile>classpxl_1_1_chunk_reader.html</anchorfile>
      <anchor>a4ab5092afd665efe7656efe58caffde9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>unzipEventData</name>
      <anchorfile>classpxl_1_1_chunk_reader.html</anchorfile>
      <anchor>a30f8870777f26e4316577fc91fd69dbc</anchor>
      <arglist>(uint32_t nBytes)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>char</type>
      <name>nextBlockId</name>
      <anchorfile>classpxl_1_1_chunk_reader.html</anchorfile>
      <anchor>a7070bb940afe6f2efb6847a27384500f</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>pxl::ChunkWriter</name>
    <filename>classpxl_1_1_chunk_writer.html</filename>
    <member kind="function">
      <type></type>
      <name>ChunkWriter</name>
      <anchorfile>classpxl_1_1_chunk_writer.html</anchorfile>
      <anchor>a815e9da6cd97affc718d5e9e372b7a23</anchor>
      <arglist>(FileImpl &amp;stream, char compressionMode=&apos;1&apos;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ChunkWriter</name>
      <anchorfile>classpxl_1_1_chunk_writer.html</anchorfile>
      <anchor>aff8d5de4f3a3f57986ae346194bdde7e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>write</name>
      <anchorfile>classpxl_1_1_chunk_writer.html</anchorfile>
      <anchor>ae6490d3ed4e208a9c8d2fdc696f77f02</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>newFileSection</name>
      <anchorfile>classpxl_1_1_chunk_writer.html</anchorfile>
      <anchor>ad28141ff92edb2dbf4fa7ded3b75f284</anchor>
      <arglist>(const std::string &amp;info, char cSectionMarker=&apos;E&apos;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>newBlock</name>
      <anchorfile>classpxl_1_1_chunk_writer.html</anchorfile>
      <anchor>ad5f20a2fa7c96567bfed1fc5e74c01dd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>endFileSection</name>
      <anchorfile>classpxl_1_1_chunk_writer.html</anchorfile>
      <anchor>afe5bb9d47828d366b69efd3d944ce0e3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>write</name>
      <anchorfile>classpxl_1_1_chunk_writer.html</anchorfile>
      <anchor>af0729f10afbce8fc12ce9dc3a4226c6b</anchor>
      <arglist>(std::string info)</arglist>
    </member>
    <member kind="function">
      <type>const BufferOutput &amp;</type>
      <name>getOutputStream</name>
      <anchorfile>classpxl_1_1_chunk_writer.html</anchorfile>
      <anchor>a2f7f2ff65673a17860c165910543d9a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCompressionMode</name>
      <anchorfile>classpxl_1_1_chunk_writer.html</anchorfile>
      <anchor>adbcbad7f7651a67d82c74a854a501814</anchor>
      <arglist>(char compressionMode)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCompressionMode</name>
      <anchorfile>classpxl_1_1_chunk_writer.html</anchorfile>
      <anchor>a6cf251b974ae955c3c882608a655b57a</anchor>
      <arglist>(int compressionMode)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>writeFlag</name>
      <anchorfile>classpxl_1_1_chunk_writer.html</anchorfile>
      <anchor>abe7cb65f11102ccc4fda5cad721524a3</anchor>
      <arglist>(char cEvtMarker)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ClockProfiler</name>
    <filename>class_clock_profiler.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>ClockProfiler</name>
      <anchorfile>class_clock_profiler.html</anchorfile>
      <anchor>adae1eb18074ba7263e795b535b39d046</anchor>
      <arglist>(std::string name=&quot;Unnamed&quot;)</arglist>
    </member>
    <member kind="function">
      <type>seconds</type>
      <name>getTime</name>
      <anchorfile>class_clock_profiler.html</anchorfile>
      <anchor>ad50953567843b0daab849b83aff8da1c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>class_clock_profiler.html</anchorfile>
      <anchor>a2c5b03304846557a05d763329f77a819</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>stop</name>
      <anchorfile>class_clock_profiler.html</anchorfile>
      <anchor>a701f700555c68a388fe48285b54bed9f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>seconds</type>
      <name>min</name>
      <anchorfile>class_clock_profiler.html</anchorfile>
      <anchor>a87f4d536604316141548c5f85a4b788f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>seconds</type>
      <name>max</name>
      <anchorfile>class_clock_profiler.html</anchorfile>
      <anchor>a56d06f7509a8e80bf89ab39a15aa0c77</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>seconds</type>
      <name>mean</name>
      <anchorfile>class_clock_profiler.html</anchorfile>
      <anchor>a79e3abcc96f9a85e462cb49fb03803c6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>seconds</type>
      <name>std</name>
      <anchorfile>class_clock_profiler.html</anchorfile>
      <anchor>ab0fb552070254b638c20bf298f11de4a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>seconds</type>
      <name>sum</name>
      <anchorfile>class_clock_profiler.html</anchorfile>
      <anchor>a2f9c15c6e6ad54ec53845d374dea43c6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>count</name>
      <anchorfile>class_clock_profiler.html</anchorfile>
      <anchor>a530a96dc670e591cf70749354cf7f935</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>class_clock_profiler.html</anchorfile>
      <anchor>a98661b2516733bf5c62d91240fecf0ce</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>class_clock_profiler.html</anchorfile>
      <anchor>a906ac5ca87202d98195e7b82ae6a6912</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>class_clock_profiler.html</anchorfile>
      <anchor>a91f3fc95b1984376523983ce565ab2cc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>rapidjson::Value</type>
      <name>rapidjsonValue</name>
      <anchorfile>class_clock_profiler.html</anchorfile>
      <anchor>a0795e5ef5f25e8b0623bd0f6e6edcee7</anchor>
      <arglist>(rapidjson::Document::AllocatorType &amp;allocator) const</arglist>
    </member>
    <member kind="friend">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>class_clock_profiler.html</anchorfile>
      <anchor>a0adcb03f76c52e3a87d3453e0d72f581</anchor>
      <arglist>(std::ostream &amp;stream, const ClockProfiler &amp;profiler)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ClockProfiler&lt; ChronoClock &gt;</name>
    <filename>class_clock_profiler.html</filename>
    <member kind="function">
      <type></type>
      <name>ClockProfiler</name>
      <anchorfile>class_clock_profiler.html</anchorfile>
      <anchor>adae1eb18074ba7263e795b535b39d046</anchor>
      <arglist>(std::string name=&quot;Unnamed&quot;)</arglist>
    </member>
    <member kind="function">
      <type>seconds</type>
      <name>getTime</name>
      <anchorfile>class_clock_profiler.html</anchorfile>
      <anchor>ad50953567843b0daab849b83aff8da1c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>class_clock_profiler.html</anchorfile>
      <anchor>a2c5b03304846557a05d763329f77a819</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>stop</name>
      <anchorfile>class_clock_profiler.html</anchorfile>
      <anchor>a701f700555c68a388fe48285b54bed9f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>seconds</type>
      <name>min</name>
      <anchorfile>class_clock_profiler.html</anchorfile>
      <anchor>a87f4d536604316141548c5f85a4b788f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>seconds</type>
      <name>max</name>
      <anchorfile>class_clock_profiler.html</anchorfile>
      <anchor>a56d06f7509a8e80bf89ab39a15aa0c77</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>seconds</type>
      <name>mean</name>
      <anchorfile>class_clock_profiler.html</anchorfile>
      <anchor>a79e3abcc96f9a85e462cb49fb03803c6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>seconds</type>
      <name>std</name>
      <anchorfile>class_clock_profiler.html</anchorfile>
      <anchor>ab0fb552070254b638c20bf298f11de4a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>seconds</type>
      <name>sum</name>
      <anchorfile>class_clock_profiler.html</anchorfile>
      <anchor>a2f9c15c6e6ad54ec53845d374dea43c6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>count</name>
      <anchorfile>class_clock_profiler.html</anchorfile>
      <anchor>a530a96dc670e591cf70749354cf7f935</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>class_clock_profiler.html</anchorfile>
      <anchor>a98661b2516733bf5c62d91240fecf0ce</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>class_clock_profiler.html</anchorfile>
      <anchor>a906ac5ca87202d98195e7b82ae6a6912</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>class_clock_profiler.html</anchorfile>
      <anchor>a91f3fc95b1984376523983ce565ab2cc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>rapidjson::Value</type>
      <name>rapidjsonValue</name>
      <anchorfile>class_clock_profiler.html</anchorfile>
      <anchor>a0795e5ef5f25e8b0623bd0f6e6edcee7</anchor>
      <arglist>(rapidjson::Document::AllocatorType &amp;allocator) const</arglist>
    </member>
    <member kind="friend">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>class_clock_profiler.html</anchorfile>
      <anchor>a0adcb03f76c52e3a87d3453e0d72f581</anchor>
      <arglist>(std::ostream &amp;stream, const ClockProfiler &amp;profiler)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>pxl::Collision</name>
    <filename>classpxl_1_1_collision.html</filename>
    <base>pxl::Object</base>
    <member kind="function">
      <type></type>
      <name>Collision</name>
      <anchorfile>classpxl_1_1_collision.html</anchorfile>
      <anchor>a21427880e433b66a09bab2e7ac481770</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Collision</name>
      <anchorfile>classpxl_1_1_collision.html</anchorfile>
      <anchor>a2268f09d7d42660774314807a7e24a29</anchor>
      <arglist>(const Collision &amp;original)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Collision</name>
      <anchorfile>classpxl_1_1_collision.html</anchorfile>
      <anchor>afb56c345670de3ef6098effd0d324ea5</anchor>
      <arglist>(const Collision *original)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual WkPtrBase *</type>
      <name>createSelfWkPtr</name>
      <anchorfile>classpxl_1_1_collision.html</anchorfile>
      <anchor>a8a6456ce71897048e1f28e900cb9acf7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Id &amp;</type>
      <name>getTypeId</name>
      <anchorfile>classpxl_1_1_collision.html</anchorfile>
      <anchor>a3035026f2596965e363ee96df6c5ac8e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classpxl_1_1_collision.html</anchorfile>
      <anchor>acfc86a6a33c05b4558438fc5ae97283e</anchor>
      <arglist>(const OutputStream &amp;out) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>deserialize</name>
      <anchorfile>classpxl_1_1_collision.html</anchorfile>
      <anchor>a9b19c993c16528325fa93fcce1d08b53</anchor>
      <arglist>(const InputStream &amp;in)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Serializable *</type>
      <name>clone</name>
      <anchorfile>classpxl_1_1_collision.html</anchorfile>
      <anchor>a52003f060e6f443eeccbcd831838152b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::ostream &amp;</type>
      <name>print</name>
      <anchorfile>classpxl_1_1_collision.html</anchorfile>
      <anchor>a2d7385f5347d057dabe755029047216a</anchor>
      <arglist>(int level=1, std::ostream &amp;os=std::cout, int pan=0) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isLocked</name>
      <anchorfile>classpxl_1_1_object.html</anchorfile>
      <anchor>a584e513d1aada593146e4bb4dca8c1fa</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getWorkFlag</name>
      <anchorfile>classpxl_1_1_object.html</anchorfile>
      <anchor>a9e82ee54fca13b8818634ebd8adda493</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLocked</name>
      <anchorfile>classpxl_1_1_object.html</anchorfile>
      <anchor>a1b2dbf2aef26a3bc4a92735572649a94</anchor>
      <arglist>(bool v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setWorkFlag</name>
      <anchorfile>classpxl_1_1_object.html</anchorfile>
      <anchor>a91d83fb75b1a480ae8323e7b2a5276ad</anchor>
      <arglist>(int v)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::ostream &amp;</type>
      <name>printContent</name>
      <anchorfile>classpxl_1_1_object.html</anchorfile>
      <anchor>a434021cf01b990778a93f5144817de2d</anchor>
      <arglist>(int level=1, std::ostream &amp;os=std::cout, int pan=0) const</arglist>
    </member>
    <member kind="function">
      <type>Id</type>
      <name>id</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>a9bf6c17d6fd5b588c00463db4028870b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ObjectOwner *</type>
      <name>owner</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>a556c1cc09bed10e480cceb5da42edb33</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Relations &amp;</type>
      <name>getMotherRelations</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>a10f8728c388408f48a120e90de6298ae</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Relations &amp;</type>
      <name>getDaughterRelations</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>ae3b09cfe9057e042b88cf1adf6b4a036</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Relations &amp;</type>
      <name>getFlatRelations</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>aa8b871a98b21677ef5c159dbb608722d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Relative *</type>
      <name>getMother</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>a53a7b6b11409893dab8a73a0159180ec</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Relative *</type>
      <name>getDaughter</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>a6e7b03ed37eca69cd1063f78fd05b6dc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::set&lt; Relative * &gt; &amp;</type>
      <name>getDaughters</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>a6c4f5b97226fe562ef9144fa14f8c0f5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::set&lt; Relative * &gt; &amp;</type>
      <name>getMothers</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>a1728bea81bb0f966335f32c832a1cffa</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>numberOfDaughters</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>aa92bd45d2b1751fe3bfbbc79c8a21b32</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>numberOfMothers</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>aab1ec876cfe2f1bebf212b60f66ba907</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>linkMother</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>af3f916466c571dad5b0be5f4baded3b3</anchor>
      <arglist>(Relative *target)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>linkDaughter</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>a0a6244c26919bdd6fd45cbb8ea5a8f8b</anchor>
      <arglist>(Relative *target)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>linkFlat</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>a5ee923ece292e0d9268495af7590f060</anchor>
      <arglist>(Relative *target)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unlinkMother</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>a2b75c81e4078d147d36310fe7c3a4800</anchor>
      <arglist>(Relative *target)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unlinkDaughter</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>aaface8521be14a7fbb256ad786355ea4</anchor>
      <arglist>(Relative *target)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unlinkFlat</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>a4a4eba4935e47072056671728c2bd139</anchor>
      <arglist>(Relative *target)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unlinkFlat</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>a8d81b6131cc1532e3ba868e3509cb9b2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unlinkMothers</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>ad51348aae3792d8205823b46da02a564</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unlinkDaughters</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>a3bd2ff6a25aab01fda19df066bb492a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>linkSoft</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>a2ea79223a0f9d9edeeb8398b53ff6ab1</anchor>
      <arglist>(Relative *relative, const std::string &amp;type)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unlinkSoft</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>a1e870e37dbe2b384f85b138b5ec51e0e</anchor>
      <arglist>(Relative *relative, const std::string &amp;type)</arglist>
    </member>
    <member kind="function">
      <type>const SoftRelations &amp;</type>
      <name>getSoftRelations</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>ae5b78c9536de71abbb15a413e31f655e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>SoftRelations &amp;</type>
      <name>getSoftRelations</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>ab72e809de894954b8cc73ff768d757a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getName</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>a5384c8188f28913c4cc898571f133f32</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setName</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>a483a501afd8965daa92d3bafb91b4dfe</anchor>
      <arglist>(const std::string &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>printDecayTree</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>afa50de942d2caa47defa7e39a79df0a9</anchor>
      <arglist>(int level=0, std::ostream &amp;os=std::cout, int pan=1) const</arglist>
    </member>
    <member kind="function">
      <type>const Id &amp;</type>
      <name>getId</name>
      <anchorfile>classpxl_1_1_serializable.html</anchorfile>
      <anchor>a071e3e5bdd7125cee5dd5178807c3647</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const std::string</type>
      <name>toString</name>
      <anchorfile>classpxl_1_1_serializable.html</anchorfile>
      <anchor>abe42afdf47f4fa9cad94e26e9a3d6ba1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const UserRecords &amp;</type>
      <name>getUserRecords</name>
      <anchorfile>classpxl_1_1_user_record_helper.html</anchorfile>
      <anchor>ab7d2e9d7fd53f986163bff24ed9ec2e3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>UserRecords &amp;</type>
      <name>getUserRecords</name>
      <anchorfile>classpxl_1_1_user_record_helper.html</anchorfile>
      <anchor>aed523d427700d001e76af09b138f3355</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setUserRecords</name>
      <anchorfile>classpxl_1_1_user_record_helper.html</anchorfile>
      <anchor>a8bc754ecfd9c00f2a2ccb6395ac0891d</anchor>
      <arglist>(const UserRecords &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setUserRecord</name>
      <anchorfile>classpxl_1_1_user_record_helper.html</anchorfile>
      <anchor>af3ecea27c07445ab7dab72987672a8fd</anchor>
      <arglist>(const std::string &amp;key, const Variant &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>eraseUserRecord</name>
      <anchorfile>classpxl_1_1_user_record_helper.html</anchorfile>
      <anchor>a558dd61337c50bfd93af44f1c65867d7</anchor>
      <arglist>(const std::string &amp;key)</arglist>
    </member>
    <member kind="function">
      <type>const Variant &amp;</type>
      <name>getUserRecord</name>
      <anchorfile>classpxl_1_1_user_record_helper.html</anchorfile>
      <anchor>a0c4e05e6defb9e4eabb75a1aef41d300</anchor>
      <arglist>(const std::string &amp;key) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getUserRecord</name>
      <anchorfile>classpxl_1_1_user_record_helper.html</anchorfile>
      <anchor>a3df9f904d21e126a0527a81663f13ae8</anchor>
      <arglist>(const std::string &amp;key, datatype &amp;item) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasUserRecord</name>
      <anchorfile>classpxl_1_1_user_record_helper.html</anchorfile>
      <anchor>aeae48d210cf0dfd2a52fb7adcfc4bb41</anchor>
      <arglist>(const std::string &amp;key) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const Id &amp;</type>
      <name>getStaticTypeId</name>
      <anchorfile>classpxl_1_1_collision.html</anchorfile>
      <anchor>a71e6fdaf8c205652ab48798dbfd9d2dd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::ostream &amp;</type>
      <name>printPan1st</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>a589f7baac2ec1c61eeb4c2c1e3403526</anchor>
      <arglist>(std::ostream &amp;os, int pan) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::ostream &amp;</type>
      <name>printPan</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>a5038bd2b7584b9aacb4b7d0ac02b26fa</anchor>
      <arglist>(std::ostream &amp;os, int pan) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>pxl::CommonParticle</name>
    <filename>classpxl_1_1_common_particle.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CommonParticle</name>
      <anchorfile>classpxl_1_1_common_particle.html</anchorfile>
      <anchor>ac06fc96d3d817b90492166d214935ecf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>getPx</name>
      <anchorfile>classpxl_1_1_common_particle.html</anchorfile>
      <anchor>ae3c6e55a690b2374e4bafb468f6f5418</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>getPy</name>
      <anchorfile>classpxl_1_1_common_particle.html</anchorfile>
      <anchor>ab03a8437a9a904ac94a3a423a735d25d</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>getPz</name>
      <anchorfile>classpxl_1_1_common_particle.html</anchorfile>
      <anchor>a64400d787e3b83fdccaaf6b82c86f2a8</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>getE</name>
      <anchorfile>classpxl_1_1_common_particle.html</anchorfile>
      <anchor>a2c0fb69671b671bf347836eb16a6e766</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>getPt</name>
      <anchorfile>classpxl_1_1_common_particle.html</anchorfile>
      <anchor>a83c387d706be40d6c8f13f9e3531b226</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>getEta</name>
      <anchorfile>classpxl_1_1_common_particle.html</anchorfile>
      <anchor>a232dae19f95463cd3a71203c08730d5e</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>getPhi</name>
      <anchorfile>classpxl_1_1_common_particle.html</anchorfile>
      <anchor>a2d983f621c0fabda97c1d32d8687d126</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>getMass</name>
      <anchorfile>classpxl_1_1_common_particle.html</anchorfile>
      <anchor>aacbab9c8434690658bdf4655c423f264</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>getCharge</name>
      <anchorfile>classpxl_1_1_common_particle.html</anchorfile>
      <anchor>a010199070ca6c264d9d1412efd8f80c6</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setP4</name>
      <anchorfile>classpxl_1_1_common_particle.html</anchorfile>
      <anchor>a0f225bc33e6b01dd7b2f23e386526c87</anchor>
      <arglist>(double px, double py, double pz, double e)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>addP4</name>
      <anchorfile>classpxl_1_1_common_particle.html</anchorfile>
      <anchor>a057175cbf7713e5f77587848e7e3bbbb</anchor>
      <arglist>(double px, double py, double pz, double e)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setCharge</name>
      <anchorfile>classpxl_1_1_common_particle.html</anchorfile>
      <anchor>a044701146f5fa2f86734b18dc99170f1</anchor>
      <arglist>(double q)=0</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; ParticleHelper&lt; objecttype &gt; &gt;</type>
      <name>getAs</name>
      <anchorfile>classpxl_1_1_common_particle.html</anchorfile>
      <anchor>a63143891265c5bb1f3ac7d0683d9ecca</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>pxl::CommonVertex</name>
    <filename>classpxl_1_1_common_vertex.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CommonVertex</name>
      <anchorfile>classpxl_1_1_common_vertex.html</anchorfile>
      <anchor>abec3397d5c0c033a018f534450c1e0f1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>getX</name>
      <anchorfile>classpxl_1_1_common_vertex.html</anchorfile>
      <anchor>a0e0f6ac3e187ab29138e733b4886d978</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>getY</name>
      <anchorfile>classpxl_1_1_common_vertex.html</anchorfile>
      <anchor>a6146f5a1c3dc15db70f9c07f124c8fc7</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>getZ</name>
      <anchorfile>classpxl_1_1_common_vertex.html</anchorfile>
      <anchor>a8d51727a3d91071d6a1123726ce4e83c</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setX</name>
      <anchorfile>classpxl_1_1_common_vertex.html</anchorfile>
      <anchor>ad43e35dbfbbcffb505149b428aa396cf</anchor>
      <arglist>(double x)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setY</name>
      <anchorfile>classpxl_1_1_common_vertex.html</anchorfile>
      <anchor>a4356c8873187b182287c29513eef7cd0</anchor>
      <arglist>(double y)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setZ</name>
      <anchorfile>classpxl_1_1_common_vertex.html</anchorfile>
      <anchor>a9f7d457650ae9e8763b5d55e2d58a931</anchor>
      <arglist>(double z)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setXYZ</name>
      <anchorfile>classpxl_1_1_common_vertex.html</anchorfile>
      <anchor>ab944d04702fbb7db14a8efa696c85765</anchor>
      <arglist>(double x, double y, double z)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>addXYZ</name>
      <anchorfile>classpxl_1_1_common_vertex.html</anchorfile>
      <anchor>a8ce10f2abd6ab1ce1e5281ee3ee29094</anchor>
      <arglist>(double x, double y, double z)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>pxl::ComparatorInterface</name>
    <filename>classpxl_1_1_comparator_interface.html</filename>
    <templarg></templarg>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>operator()</name>
      <anchorfile>classpxl_1_1_comparator_interface.html</anchorfile>
      <anchor>a38d262555a9261ba2275373dba0bbc8f</anchor>
      <arglist>(const comparetype *, const comparetype *)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ComparatorInterface</name>
      <anchorfile>classpxl_1_1_comparator_interface.html</anchorfile>
      <anchor>afd9391244c92baaf35591ee66e37bbf1</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ComparatorInterface&lt; Particle &gt;</name>
    <filename>classpxl_1_1_comparator_interface.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>operator()</name>
      <anchorfile>classpxl_1_1_comparator_interface.html</anchorfile>
      <anchor>a38d262555a9261ba2275373dba0bbc8f</anchor>
      <arglist>(const Particle *, const Particle *)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ComparatorInterface</name>
      <anchorfile>classpxl_1_1_comparator_interface.html</anchorfile>
      <anchor>afd9391244c92baaf35591ee66e37bbf1</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CompileConst</name>
    <filename>class_compile_const.html</filename>
    <templarg>method</templarg>
  </compound>
  <compound kind="class">
    <name>CompileConst&lt; false &gt;</name>
    <filename>class_compile_const_3_01false_01_4.html</filename>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>Value</name>
      <anchorfile>class_compile_const_3_01false_01_4.html</anchorfile>
      <anchor>ae143ad735dee8285ddb2b9533ad9b2ae</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CompileConst&lt; true &gt;</name>
    <filename>class_compile_const_3_01true_01_4.html</filename>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>Value</name>
      <anchorfile>class_compile_const_3_01true_01_4.html</anchorfile>
      <anchor>a2a539fda0bcae69f7705b3c05e100839</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Tools::config_error</name>
    <filename>class_tools_1_1config__error.html</filename>
    <base>std::runtime_error</base>
    <member kind="function">
      <type></type>
      <name>config_error</name>
      <anchorfile>class_tools_1_1config__error.html</anchorfile>
      <anchor>ae81ae934823b710770ce1fab0a58a4bd</anchor>
      <arglist>(std::string const &amp;msg)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>pxl::Configuration</name>
    <filename>classpxl_1_1_configuration.html</filename>
    <member kind="typedef">
      <type>std::pair&lt; std::string, Variant &gt;</type>
      <name>itemType</name>
      <anchorfile>classpxl_1_1_configuration.html</anchorfile>
      <anchor>aa6310be97e7ee3eabca6193ca850ef90</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::multimap&lt; std::string, Variant &gt;</type>
      <name>multimapType</name>
      <anchorfile>classpxl_1_1_configuration.html</anchorfile>
      <anchor>a6e3170ab58d06afdf1516367357e8bdd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>multimapType::const_iterator</type>
      <name>multiMapConstIterator</name>
      <anchorfile>classpxl_1_1_configuration.html</anchorfile>
      <anchor>a48551efd478c230fb447d97bdd99d6e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>multimapType::iterator</type>
      <name>multimapIterator</name>
      <anchorfile>classpxl_1_1_configuration.html</anchorfile>
      <anchor>a451e89560188359835c5d62676683698</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::map&lt; std::string, multimapType &gt;</type>
      <name>mapType</name>
      <anchorfile>classpxl_1_1_configuration.html</anchorfile>
      <anchor>a14d03d0ffdba06ee5ac2b4c68520d895</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>mapType::const_iterator</type>
      <name>mapConstIterator</name>
      <anchorfile>classpxl_1_1_configuration.html</anchorfile>
      <anchor>a7711cdfe09ac78c77ebe9ceded85d89a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>mapType::iterator</type>
      <name>mapIterator</name>
      <anchorfile>classpxl_1_1_configuration.html</anchorfile>
      <anchor>a75204a629ae85eab4d36562524b1db4e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Configuration</name>
      <anchorfile>classpxl_1_1_configuration.html</anchorfile>
      <anchor>ad9ca0212b7a2cde3ccdf6da0c4d00ab5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addItem</name>
      <anchorfile>classpxl_1_1_configuration.html</anchorfile>
      <anchor>a5666939d600444f1f0a21b9bd7a16ff6</anchor>
      <arglist>(const std::string &amp;section, const std::string &amp;key, const Variant &amp;item)</arglist>
    </member>
    <member kind="function">
      <type>const Variant &amp;</type>
      <name>getItem</name>
      <anchorfile>classpxl_1_1_configuration.html</anchorfile>
      <anchor>a684ce201bb1dea10474464101051885e</anchor>
      <arglist>(const std::string &amp;section, const std::string &amp;key)</arglist>
    </member>
    <member kind="function">
      <type>multimapType &amp;</type>
      <name>getSection</name>
      <anchorfile>classpxl_1_1_configuration.html</anchorfile>
      <anchor>aab2685937b80d2c58079c8bc1cd8ee34</anchor>
      <arglist>(const std::string &amp;section)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Configuration &amp;</type>
      <name>instance</name>
      <anchorfile>classpxl_1_1_configuration.html</anchorfile>
      <anchor>a89ccb14166be82a75ccad0dc790db7cd</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>pxl::ConsoleLogHandler</name>
    <filename>classpxl_1_1_console_log_handler.html</filename>
    <base>pxl::LogHandler</base>
    <member kind="function">
      <type></type>
      <name>ConsoleLogHandler</name>
      <anchorfile>classpxl_1_1_console_log_handler.html</anchorfile>
      <anchor>a489e8f40f90cb076fee988c42a152bef</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ConsoleLogHandler</name>
      <anchorfile>classpxl_1_1_console_log_handler.html</anchorfile>
      <anchor>a892410760f797e5bfadfc719b00fc1ea</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>handle</name>
      <anchorfile>classpxl_1_1_console_log_handler.html</anchorfile>
      <anchor>a49df5f331cc770fe8840bb6be20d1dff</anchor>
      <arglist>(LogLevel level, time_t timestamp, const std::string &amp;module, const std::string &amp;message)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>pxl::Core</name>
    <filename>classpxl_1_1_core.html</filename>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>initialize</name>
      <anchorfile>classpxl_1_1_core.html</anchorfile>
      <anchor>a617e3f34d31369956289a8a0ef8c4943</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>shutdown</name>
      <anchorfile>classpxl_1_1_core.html</anchorfile>
      <anchor>ac3aa6eabb2af76236bf928cabd07e66f</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CpuClock</name>
    <filename>class_cpu_clock.html</filename>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>getTime</name>
      <anchorfile>class_cpu_clock.html</anchorfile>
      <anchor>a8a989cfde73866d58541db91648cb2d1</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CrossSectionOrderErrorMap</name>
    <filename>class_cross_section_order_error_map.html</filename>
    <member kind="function">
      <type></type>
      <name>CrossSectionOrderErrorMap</name>
      <anchorfile>class_cross_section_order_error_map.html</anchorfile>
      <anchor>ae677af3ed445158911e2ac183be7d4bd</anchor>
      <arglist>(Tools::MConfig const &amp;cfg)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>at</name>
      <anchorfile>class_cross_section_order_error_map.html</anchorfile>
      <anchor>aaf67d6b8f5452a9b837576574847ea69</anchor>
      <arglist>(std::string key)</arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>operator[]</name>
      <anchorfile>class_cross_section_order_error_map.html</anchorfile>
      <anchor>ad7c15df7edd75f350e735b5a36d40609</anchor>
      <arglist>(std::string key)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>emplace</name>
      <anchorfile>class_cross_section_order_error_map.html</anchorfile>
      <anchor>a5a296bc43bdf2f3c5027623b935c324a</anchor>
      <arglist>(std::string key, double value)</arglist>
    </member>
    <member kind="function">
      <type>std::map&lt; std::string, double &gt;::iterator</type>
      <name>end</name>
      <anchorfile>class_cross_section_order_error_map.html</anchorfile>
      <anchor>a4ef4cc66b334f819779439be6144490c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::map&lt; std::string, double &gt;::iterator</type>
      <name>find</name>
      <anchorfile>class_cross_section_order_error_map.html</anchorfile>
      <anchor>a75131ec982627bd8fee7de0a33adc905</anchor>
      <arglist>(std::string key)</arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; std::string &gt; const</type>
      <name>availableOrders</name>
      <anchorfile>class_cross_section_order_error_map.html</anchorfile>
      <anchor>ab9a9b9f0316e7b9c0ce36f6df126624d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::map&lt; std::string, double &gt;</type>
      <name>weightMap</name>
      <anchorfile>class_cross_section_order_error_map.html</anchorfile>
      <anchor>a251bb81da73a61e1522c865976e8b03d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>dCache_error</name>
    <filename>classd_cache__error.html</filename>
    <base>std::runtime_error</base>
    <member kind="function">
      <type></type>
      <name>dCache_error</name>
      <anchorfile>classd_cache__error.html</anchorfile>
      <anchor>a6a49c6bcb1e5823eeb39bcb07eafff5b</anchor>
      <arglist>(const std::string &amp;what_arg)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>dCacheBuf</name>
    <filename>classd_cache_buf.html</filename>
    <base>std::streambuf</base>
    <base>Tools::EventHandler</base>
    <class kind="struct">dCacheBuf::read_ahead_data</class>
    <member kind="function">
      <type></type>
      <name>dCacheBuf</name>
      <anchorfile>classd_cache_buf.html</anchorfile>
      <anchor>ac15aa4e543ed5ca037dab3b5f192a23c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~dCacheBuf</name>
      <anchorfile>classd_cache_buf.html</anchorfile>
      <anchor>a1c93d94fd5ab22e8ec4be6837b86e3b5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_open</name>
      <anchorfile>classd_cache_buf.html</anchorfile>
      <anchor>a0837facb4d32758c7891d784b6eb97db</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>dCacheBuf *</type>
      <name>open</name>
      <anchorfile>classd_cache_buf.html</anchorfile>
      <anchor>a845e1c2f85971ac70041003c1eaed3ea</anchor>
      <arglist>(const char *name, unsigned int timeout=3600)</arglist>
    </member>
    <member kind="function">
      <type>dCacheBuf *</type>
      <name>open</name>
      <anchorfile>classd_cache_buf.html</anchorfile>
      <anchor>a6a40771034a3d99415932d57fdfe908f</anchor>
      <arglist>(const std::string &amp;name, unsigned int timeout=3600)</arglist>
    </member>
    <member kind="function">
      <type>dCacheBuf *</type>
      <name>close</name>
      <anchorfile>classd_cache_buf.html</anchorfile>
      <anchor>a045ef0786c8472c18be31c5f206ae15a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>handle_signal</name>
      <anchorfile>classd_cache_buf.html</anchorfile>
      <anchor>aadaf2bd5faa62267bc4f80d5bddcaff1</anchor>
      <arglist>(int signum)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::streamsize</type>
      <name>showmanyc</name>
      <anchorfile>classd_cache_buf.html</anchorfile>
      <anchor>a8e27a27e6925557fa8a7ffa952f9cd33</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>underflow</name>
      <anchorfile>classd_cache_buf.html</anchorfile>
      <anchor>ac0dcce8c484719a05ca1222e0fef23d5</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>pxl::dCacheInputFile</name>
    <filename>classpxl_1_1d_cache_input_file.html</filename>
    <base>pxl::InputHandler</base>
    <member kind="function">
      <type></type>
      <name>dCacheInputFile</name>
      <anchorfile>classpxl_1_1d_cache_input_file.html</anchorfile>
      <anchor>a454479cd4545fa5c638d2616c435626c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>dCacheInputFile</name>
      <anchorfile>classpxl_1_1d_cache_input_file.html</anchorfile>
      <anchor>ae5f8e23e8ae6d730eb93aff3c7549241</anchor>
      <arglist>(const char *filename)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>open</name>
      <anchorfile>classpxl_1_1d_cache_input_file.html</anchorfile>
      <anchor>a85ef3bb38601b31bd2ef9d2d769626eb</anchor>
      <arglist>(const std::string &amp;filename, unsigned int timeout=3600)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>close</name>
      <anchorfile>classpxl_1_1d_cache_input_file.html</anchorfile>
      <anchor>ac70960b42d3cc30d8a16c4d4eee518ec</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ChunkReader &amp;</type>
      <name>getChunkReader</name>
      <anchorfile>classpxl_1_1d_cache_input_file.html</anchorfile>
      <anchor>afc5bc1cadb7f39dc6cb3f0d2bebaa773</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>unsigned long</type>
      <name>getSectionCount</name>
      <anchorfile>classpxl_1_1_input_handler.html</anchorfile>
      <anchor>a11ac4d648010645f8bc1888e8c26951b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>nextFileSection</name>
      <anchorfile>classpxl_1_1_input_handler.html</anchorfile>
      <anchor>aceac1f09334e1acdfb79f573d290253d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>nextFileSectionIf</name>
      <anchorfile>classpxl_1_1_input_handler.html</anchorfile>
      <anchor>a10a9a777703b9eed9a20f8902629412e</anchor>
      <arglist>(const std::string &amp;info, skipMode doSkip=on)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>readEvent</name>
      <anchorfile>classpxl_1_1_input_handler.html</anchorfile>
      <anchor>a93134c546c7f58e28ecba7f73c111a0e</anchor>
      <arglist>(Event *event)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>readEventIf</name>
      <anchorfile>classpxl_1_1_input_handler.html</anchorfile>
      <anchor>a3004d6fda71623a921729a84024f1ee9</anchor>
      <arglist>(Event *event, const std::string &amp;blockInfo, skipMode doSkip=on)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>readBasicContainer</name>
      <anchorfile>classpxl_1_1_input_handler.html</anchorfile>
      <anchor>a045966cbc08a8d84ffe1ae8c8cffa1f3</anchor>
      <arglist>(BasicContainer *basicContainer)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>readBasicContainerIf</name>
      <anchorfile>classpxl_1_1_input_handler.html</anchorfile>
      <anchor>a8ea143e4df33f62371a083b56782a8c1</anchor>
      <arglist>(BasicContainer *basicContainer, const std::string &amp;blockInfo, skipMode doSkip=on)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>readInformationChunk</name>
      <anchorfile>classpxl_1_1_input_handler.html</anchorfile>
      <anchor>a533858011acb44fedb61d39d2907b6b4</anchor>
      <arglist>(InformationChunk *chunk)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>readInformationChunkIf</name>
      <anchorfile>classpxl_1_1_input_handler.html</anchorfile>
      <anchor>a1b9495f30c18e58987a2bc0586727a16</anchor>
      <arglist>(InformationChunk *event, const std::string &amp;blockInfo, skipMode doSkip=on)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>skip</name>
      <anchorfile>classpxl_1_1_input_handler.html</anchorfile>
      <anchor>abbd9529482496067eea34632ea147fe8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>previous</name>
      <anchorfile>classpxl_1_1_input_handler.html</anchorfile>
      <anchor>ac1c94d22e40580f40f69344060389ef5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>skipFileSections</name>
      <anchorfile>classpxl_1_1_input_handler.html</anchorfile>
      <anchor>a2be884e47c3bcb1bae8d9da9d6907a31</anchor>
      <arglist>(int n)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>seekToFileSection</name>
      <anchorfile>classpxl_1_1_input_handler.html</anchorfile>
      <anchor>a687dedb636f2c38a30fae01a646ce179</anchor>
      <arglist>(int index)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>readBlock</name>
      <anchorfile>classpxl_1_1_input_handler.html</anchorfile>
      <anchor>a12081dde29e109d02c34423a5bbac815</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>readBlockIf</name>
      <anchorfile>classpxl_1_1_input_handler.html</anchorfile>
      <anchor>abe13a115c4896d62053ccaee526bf997</anchor>
      <arglist>(const std::string &amp;blockInfo, skipMode doSkip=on)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>readObject</name>
      <anchorfile>classpxl_1_1_input_handler.html</anchorfile>
      <anchor>ac018847652ee63143382a6430e81b96a</anchor>
      <arglist>(objecttype *obj)</arglist>
    </member>
    <member kind="function">
      <type>Serializable *</type>
      <name>seekToObject</name>
      <anchorfile>classpxl_1_1_input_handler.html</anchorfile>
      <anchor>a644562434d4a58f279657fc964a4164d</anchor>
      <arglist>(size_t index)</arglist>
    </member>
    <member kind="function">
      <type>Serializable *</type>
      <name>readNextObject</name>
      <anchorfile>classpxl_1_1_input_handler.html</anchorfile>
      <anchor>a0df5ee6f1eeedf06337df6b8f427aaf5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Serializable *</type>
      <name>readPreviousObject</name>
      <anchorfile>classpxl_1_1_input_handler.html</anchorfile>
      <anchor>a2569be1cce4b7c000fee2c274d6e40e9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>readObjects</name>
      <anchorfile>classpxl_1_1_input_handler.html</anchorfile>
      <anchor>a35b2cf0c84c82968fafda2171f3ec818</anchor>
      <arglist>(std::vector&lt; Serializable * &gt; &amp;objects)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>readObjects</name>
      <anchorfile>classpxl_1_1_input_handler.html</anchorfile>
      <anchor>af7ed1cf18808db8126c743e560deb076</anchor>
      <arglist>(BasicContainer *container)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>readObjects</name>
      <anchorfile>classpxl_1_1_input_handler.html</anchorfile>
      <anchor>a8defee7288e17f5f73fe8f7c4fe5bab3</anchor>
      <arglist>(Event *event)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>objectCount</name>
      <anchorfile>classpxl_1_1_input_handler.html</anchorfile>
      <anchor>a9f086768d30c3522ba8936586057b256</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classpxl_1_1_input_handler.html</anchorfile>
      <anchor>ac2400980a57a0650c38b871ada889715</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>getSize</name>
      <anchorfile>classpxl_1_1_input_handler.html</anchorfile>
      <anchor>a825f61894b086fef7c26d3a5ddcb582f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>getPosition</name>
      <anchorfile>classpxl_1_1_input_handler.html</anchorfile>
      <anchor>a7d7c69d66fac700c2725821ab45a4568</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>pxl::dCapFileImpl</name>
    <filename>classpxl_1_1d_cap_file_impl.html</filename>
    <base>pxl::FileImpl</base>
    <member kind="function">
      <type></type>
      <name>dCapFileImpl</name>
      <anchorfile>classpxl_1_1d_cap_file_impl.html</anchorfile>
      <anchor>ad79f386e9eb99931705e271beb8f5399</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>dCapFileImpl</name>
      <anchorfile>classpxl_1_1d_cap_file_impl.html</anchorfile>
      <anchor>af65114855e4375bad30534275e9da9a7</anchor>
      <arglist>(const std::string &amp;filename, int32_t mode)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~dCapFileImpl</name>
      <anchorfile>classpxl_1_1d_cap_file_impl.html</anchorfile>
      <anchor>a84904e14e9cc23c364e2f8ae308b9a44</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>open</name>
      <anchorfile>classpxl_1_1d_cap_file_impl.html</anchorfile>
      <anchor>ae00dea5cf31575eb6c3c928ad7ce416b</anchor>
      <arglist>(const std::string &amp;filename, int32_t mode)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>close</name>
      <anchorfile>classpxl_1_1d_cap_file_impl.html</anchorfile>
      <anchor>ad7b4a50afc606d4da4c73c22999f53aa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isEof</name>
      <anchorfile>classpxl_1_1d_cap_file_impl.html</anchorfile>
      <anchor>ae52447c2c409623e65818f987df398fb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isOpen</name>
      <anchorfile>classpxl_1_1d_cap_file_impl.html</anchorfile>
      <anchor>aebd50658bee902c1e02debb43958d3dd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isBad</name>
      <anchorfile>classpxl_1_1d_cap_file_impl.html</anchorfile>
      <anchor>aa0d32b091889187727ba3c2fa91ff547</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>clear</name>
      <anchorfile>classpxl_1_1d_cap_file_impl.html</anchorfile>
      <anchor>a929134742e6dbc4d59ca3ce2c5811dec</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isGood</name>
      <anchorfile>classpxl_1_1d_cap_file_impl.html</anchorfile>
      <anchor>ac28293e728aafe1f268a3abb8e58c128</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int64_t</type>
      <name>tell</name>
      <anchorfile>classpxl_1_1d_cap_file_impl.html</anchorfile>
      <anchor>a5808773aa402e813f63bdb6261bfe34e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>seek</name>
      <anchorfile>classpxl_1_1d_cap_file_impl.html</anchorfile>
      <anchor>a71cbe6af8e64d6a3d11a1ed8169a0ded</anchor>
      <arglist>(int64_t pos, int32_t d)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int32_t</type>
      <name>peek</name>
      <anchorfile>classpxl_1_1d_cap_file_impl.html</anchorfile>
      <anchor>ace695b582e8df90491eb77573addb41e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int64_t</type>
      <name>read</name>
      <anchorfile>classpxl_1_1d_cap_file_impl.html</anchorfile>
      <anchor>a869aca9f729a15ef3cf0424de7602c7f</anchor>
      <arglist>(char *s, size_t count)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int64_t</type>
      <name>write</name>
      <anchorfile>classpxl_1_1d_cap_file_impl.html</anchorfile>
      <anchor>adac42ff831acf9cf52af2dd54e80ee45</anchor>
      <arglist>(const char *s, size_t count)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ignore</name>
      <anchorfile>classpxl_1_1d_cap_file_impl.html</anchorfile>
      <anchor>a5e6cf5583de7d3ef6716d1afe49d6366</anchor>
      <arglist>(int64_t count)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>destroy</name>
      <anchorfile>classpxl_1_1d_cap_file_impl.html</anchorfile>
      <anchor>a448558c3090e7193d832aaafa1f4320c</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dicer</name>
    <filename>class_dicer.html</filename>
    <member kind="typedef">
      <type>std::mt19937_64</type>
      <name>RNG</name>
      <anchorfile>class_dicer.html</anchorfile>
      <anchor>ac8ed86b49bdc3b712c940fbff30b50eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Dicer</name>
      <anchorfile>class_dicer.html</anchorfile>
      <anchor>af414d435193cf30cc3e345a7f3627232</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSystematicShifts</name>
      <anchorfile>class_dicer.html</anchorfile>
      <anchor>acdf9799d8180e8e4dd2d5938900759d6</anchor>
      <arglist>(const std::map&lt; std::string, std::vector&lt; double &gt;&gt; &amp;shifts)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPoissonSeed</name>
      <anchorfile>class_dicer.html</anchorfile>
      <anchor>a64a7b8715784cefece70069002c769c8</anchor>
      <arglist>(RNG::result_type seed)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; double &gt;</type>
      <name>dicePseudoData</name>
      <anchorfile>class_dicer.html</anchorfile>
      <anchor>afb3f14a110b6d5b0f1ec614a326fed14</anchor>
      <arglist>(const std::vector&lt; MCBin &gt; &amp;bins, unsigned int round, PriorMode prior)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>class_dicer.html</anchorfile>
      <anchor>a115f0820fd9b132573e88b1098c8d03c</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DivisionCornerCaseHelper</name>
    <filename>class_division_corner_case_helper.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg>method</templarg>
  </compound>
  <compound kind="class">
    <name>DivisionCornerCaseHelper2</name>
    <filename>class_division_corner_case_helper2.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg>method</templarg>
  </compound>
  <compound kind="class">
    <name>DivisionCornerCaseHelper2&lt; T, U, E, false &gt;</name>
    <filename>class_division_corner_case_helper2_3_01_t_00_01_u_00_01_e_00_01false_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>DivisionCornerCase2</name>
      <anchorfile>class_division_corner_case_helper2_3_01_t_00_01_u_00_01_e_00_01false_01_4.html</anchorfile>
      <anchor>aba2b6031d39c2da41956ce4a5f348496</anchor>
      <arglist>(U, SafeInt&lt; T, E &gt;, SafeInt&lt; T, E &gt; &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DivisionCornerCaseHelper2&lt; T, U, E, true &gt;</name>
    <filename>class_division_corner_case_helper2_3_01_t_00_01_u_00_01_e_00_01true_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>DivisionCornerCase2</name>
      <anchorfile>class_division_corner_case_helper2_3_01_t_00_01_u_00_01_e_00_01true_01_4.html</anchorfile>
      <anchor>a29bbf56d995189232297194fbdcb963b</anchor>
      <arglist>(U lhs, SafeInt&lt; T, E &gt; rhs, SafeInt&lt; T, E &gt; &amp;result)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DivisionCornerCaseHelper&lt; T, U, E, false &gt;</name>
    <filename>class_division_corner_case_helper_3_01_t_00_01_u_00_01_e_00_01false_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>DivisionCornerCase1</name>
      <anchorfile>class_division_corner_case_helper_3_01_t_00_01_u_00_01_e_00_01false_01_4.html</anchorfile>
      <anchor>a43360de3524a918bfab08bc782e6e242</anchor>
      <arglist>(U, SafeInt&lt; T, E &gt;, SafeInt&lt; T, E &gt; &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DivisionCornerCaseHelper&lt; T, U, E, true &gt;</name>
    <filename>class_division_corner_case_helper_3_01_t_00_01_u_00_01_e_00_01true_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>DivisionCornerCase1</name>
      <anchorfile>class_division_corner_case_helper_3_01_t_00_01_u_00_01_e_00_01true_01_4.html</anchorfile>
      <anchor>a4876f40ec598b86def2f8745fef5da25</anchor>
      <arglist>(U lhs, SafeInt&lt; T, E &gt; rhs, SafeInt&lt; T, E &gt; &amp;result)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DivisionHelper</name>
    <filename>class_division_helper.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg>state</templarg>
  </compound>
  <compound kind="class">
    <name>DivisionHelper&lt; T, U, DivisionState_OK &gt;</name>
    <filename>class_division_helper_3_01_t_00_01_u_00_01_division_state___o_k_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static SafeIntError</type>
      <name>Divide</name>
      <anchorfile>class_division_helper_3_01_t_00_01_u_00_01_division_state___o_k_01_4.html</anchorfile>
      <anchor>a161ec3b42c27112e073f28c159e446b9</anchor>
      <arglist>(const T &amp;t, const U &amp;u, T &amp;result)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>DivideThrow</name>
      <anchorfile>class_division_helper_3_01_t_00_01_u_00_01_division_state___o_k_01_4.html</anchorfile>
      <anchor>af7a310b96ddca34d9040e2fd54c6d070</anchor>
      <arglist>(const T &amp;t, const U &amp;u, T &amp;result)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DivisionHelper&lt; T, U, DivisionState_SignedSigned &gt;</name>
    <filename>class_division_helper_3_01_t_00_01_u_00_01_division_state___signed_signed_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static SafeIntError</type>
      <name>Divide</name>
      <anchorfile>class_division_helper_3_01_t_00_01_u_00_01_division_state___signed_signed_01_4.html</anchorfile>
      <anchor>a287d236ec91f9d32ea1edc111d07e902</anchor>
      <arglist>(const T &amp;t, const U &amp;u, T &amp;result)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>DivideThrow</name>
      <anchorfile>class_division_helper_3_01_t_00_01_u_00_01_division_state___signed_signed_01_4.html</anchorfile>
      <anchor>ae0ff8487d470d5d86954becb5ad750d7</anchor>
      <arglist>(const T &amp;t, const U &amp;u, T &amp;result)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DivisionHelper&lt; T, U, DivisionState_SignedUnsigned &gt;</name>
    <filename>class_division_helper_3_01_t_00_01_u_00_01_division_state___signed_unsigned_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static SafeIntError</type>
      <name>Divide</name>
      <anchorfile>class_division_helper_3_01_t_00_01_u_00_01_division_state___signed_unsigned_01_4.html</anchorfile>
      <anchor>a326a7525edb227e951832d75571e6ffc</anchor>
      <arglist>(const T &amp;t, const U &amp;u, T &amp;result)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>DivideThrow</name>
      <anchorfile>class_division_helper_3_01_t_00_01_u_00_01_division_state___signed_unsigned_01_4.html</anchorfile>
      <anchor>aae287753ac31254bba63751743be20d3</anchor>
      <arglist>(const T &amp;t, const U &amp;u, T &amp;result)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DivisionHelper&lt; T, U, DivisionState_SignedUnsigned32 &gt;</name>
    <filename>class_division_helper_3_01_t_00_01_u_00_01_division_state___signed_unsigned32_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static SafeIntError</type>
      <name>Divide</name>
      <anchorfile>class_division_helper_3_01_t_00_01_u_00_01_division_state___signed_unsigned32_01_4.html</anchorfile>
      <anchor>a959630b57ec0fe0f852dd10c08c39505</anchor>
      <arglist>(const T &amp;t, const U &amp;u, T &amp;result)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>DivideThrow</name>
      <anchorfile>class_division_helper_3_01_t_00_01_u_00_01_division_state___signed_unsigned32_01_4.html</anchorfile>
      <anchor>aafb6e7846e0c125924a248f2ee88a97f</anchor>
      <arglist>(const T &amp;t, const U &amp;u, T &amp;result)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DivisionHelper&lt; T, U, DivisionState_SignedUnsigned64 &gt;</name>
    <filename>class_division_helper_3_01_t_00_01_u_00_01_division_state___signed_unsigned64_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static SafeIntError</type>
      <name>Divide</name>
      <anchorfile>class_division_helper_3_01_t_00_01_u_00_01_division_state___signed_unsigned64_01_4.html</anchorfile>
      <anchor>a5cacdc7b3d6f2e9d21ff71d3b6e64628</anchor>
      <arglist>(const T &amp;t, const unsigned __int64 &amp;u, T &amp;result)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>DivideThrow</name>
      <anchorfile>class_division_helper_3_01_t_00_01_u_00_01_division_state___signed_unsigned64_01_4.html</anchorfile>
      <anchor>a9862de5dceed65fe020cc7c809a0d62c</anchor>
      <arglist>(const T &amp;t, const unsigned __int64 &amp;u, T &amp;result)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DivisionHelper&lt; T, U, DivisionState_UnsignedSigned &gt;</name>
    <filename>class_division_helper_3_01_t_00_01_u_00_01_division_state___unsigned_signed_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static SafeIntError</type>
      <name>Divide</name>
      <anchorfile>class_division_helper_3_01_t_00_01_u_00_01_division_state___unsigned_signed_01_4.html</anchorfile>
      <anchor>a681779d9fab94380d71c7a330e77c1d1</anchor>
      <arglist>(const T &amp;t, const U &amp;u, T &amp;result)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>DivideThrow</name>
      <anchorfile>class_division_helper_3_01_t_00_01_u_00_01_division_state___unsigned_signed_01_4.html</anchorfile>
      <anchor>acc92d303785fc4e3db2e41c0dffa73cf</anchor>
      <arglist>(const T &amp;t, const U &amp;u, T &amp;result)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DivisionMethod</name>
    <filename>class_division_method.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="enumvalue">
      <name>method</name>
      <anchorfile>class_division_method.html</anchorfile>
      <anchor>aaadb1845ab21de844eebf83efe4ea293a255dc58ed4eb3dc860aacc1e718f0985</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>method</name>
      <anchorfile>class_division_method.html</anchorfile>
      <anchor>aaadb1845ab21de844eebf83efe4ea293a255dc58ed4eb3dc860aacc1e718f0985</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DivisionNegativeCornerCaseHelper</name>
    <filename>class_division_negative_corner_case_helper.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg>method</templarg>
  </compound>
  <compound kind="class">
    <name>DivisionNegativeCornerCaseHelper&lt; T, U, E, false &gt;</name>
    <filename>class_division_negative_corner_case_helper_3_01_t_00_01_u_00_01_e_00_01false_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>NegativeCornerCase</name>
      <anchorfile>class_division_negative_corner_case_helper_3_01_t_00_01_u_00_01_e_00_01false_01_4.html</anchorfile>
      <anchor>ae61d78066a56e8b886699937e7cfe554</anchor>
      <arglist>(U, SafeInt&lt; T, E &gt;, SafeInt&lt; T, E &gt; &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DivisionNegativeCornerCaseHelper&lt; T, U, E, true &gt;</name>
    <filename>class_division_negative_corner_case_helper_3_01_t_00_01_u_00_01_e_00_01true_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>NegativeCornerCase</name>
      <anchorfile>class_division_negative_corner_case_helper_3_01_t_00_01_u_00_01_e_00_01true_01_4.html</anchorfile>
      <anchor>ac5474db0d63fa94ba1dcb080da5af770</anchor>
      <arglist>(U lhs, SafeInt&lt; T, E &gt; rhs, SafeInt&lt; T, E &gt; &amp;result)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>indicators::DynamicProgress</name>
    <filename>classindicators_1_1_dynamic_progress.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>DynamicProgress</name>
      <anchorfile>classindicators_1_1_dynamic_progress.html</anchorfile>
      <anchor>aea1673947289aeb8bb6e8b7f424abe9b</anchor>
      <arglist>(Indicators &amp;...bars)</arglist>
    </member>
    <member kind="function">
      <type>Indicator &amp;</type>
      <name>operator[]</name>
      <anchorfile>classindicators_1_1_dynamic_progress.html</anchorfile>
      <anchor>ade80ae6b993dc06dc5cb2f1ca86afe80</anchor>
      <arglist>(size_t index)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>push_back</name>
      <anchorfile>classindicators_1_1_dynamic_progress.html</anchorfile>
      <anchor>a7871aef58e374205e8be543f6aa9c68a</anchor>
      <arglist>(Indicator &amp;bar)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_option</name>
      <anchorfile>classindicators_1_1_dynamic_progress.html</anchorfile>
      <anchor>ad1a5bf28aab9b22dde11acafc352e739</anchor>
      <arglist>(details::Setting&lt; T, id &gt; &amp;&amp;setting)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_option</name>
      <anchorfile>classindicators_1_1_dynamic_progress.html</anchorfile>
      <anchor>a5ff4b630b34f6ff9281fff257a8b6186</anchor>
      <arglist>(const details::Setting&lt; T, id &gt; &amp;setting)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print_progress</name>
      <anchorfile>classindicators_1_1_dynamic_progress.html</anchorfile>
      <anchor>a62f6241f4f2260ae5e642a06732e4db7</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ECScanner</name>
    <filename>class_e_c_scanner.html</filename>
    <member kind="function">
      <type></type>
      <name>ECScanner</name>
      <anchorfile>class_e_c_scanner.html</anchorfile>
      <anchor>afd4d3f61e41e66c43796bfd23edce848</anchor>
      <arglist>(int &amp;rounds, int &amp;startRound)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ECScanner</name>
      <anchorfile>class_e_c_scanner.html</anchorfile>
      <anchor>a7c06384a69091f50b3011a829c856d02</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>finalize</name>
      <anchorfile>class_e_c_scanner.html</anchorfile>
      <anchor>a47d967e00149d20d7709d8366078f67f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>readInputJson</name>
      <anchorfile>class_e_c_scanner.html</anchorfile>
      <anchor>a8015cc9f7e0e81963f49206664ce454e</anchor>
      <arglist>(const std::string jsonFilePath)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>readLookupTable</name>
      <anchorfile>class_e_c_scanner.html</anchorfile>
      <anchor>ae60546cee633ecb699bd35119b5da07c</anchor>
      <arglist>(const std::string lookupTablePath=&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeOutputFiles</name>
      <anchorfile>class_e_c_scanner.html</anchorfile>
      <anchor>abec63540bc05ad78099abe1bbbe4680f</anchor>
      <arglist>(const std::string outputDirectory)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>readMCBinInfo</name>
      <anchorfile>class_e_c_scanner.html</anchorfile>
      <anchor>aa26cc1ad320afae16260fea4080bd3ab</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>readSignalBinInfo</name>
      <anchorfile>class_e_c_scanner.html</anchorfile>
      <anchor>a157361aa3c523ad7cfb37d139f1b9bd7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>readDataBinInfo</name>
      <anchorfile>class_e_c_scanner.html</anchorfile>
      <anchor>ab6321c9d7e093454f24d3f3899a624ea</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>readSystematicShiftsFile</name>
      <anchorfile>class_e_c_scanner.html</anchorfile>
      <anchor>a36858ab8674508b050a5c76682208ff9</anchor>
      <arglist>(const std::string filename)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getMaxFilledBin</name>
      <anchorfile>class_e_c_scanner.html</anchorfile>
      <anchor>a7c6620efed3fe476a9e27706940deba2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>diceMcPseudoData</name>
      <anchorfile>class_e_c_scanner.html</anchorfile>
      <anchor>ac4b13feade1932fc6926f425f0c9ed1d</anchor>
      <arglist>(const unsigned int round)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>diceSignalPseudoData</name>
      <anchorfile>class_e_c_scanner.html</anchorfile>
      <anchor>a2db033fec2cb03afafa4e6fe131f644a</anchor>
      <arglist>(const unsigned int round)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>findRoI</name>
      <anchorfile>class_e_c_scanner.html</anchorfile>
      <anchor>adf14a0653d069069892142371d58ee5f</anchor>
      <arglist>(const std::string scoreType, const bool filtered)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>findRoI</name>
      <anchorfile>class_e_c_scanner.html</anchorfile>
      <anchor>aed85788557b6fd52be42270157be75f2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>calcPvalMUSiC</name>
      <anchorfile>class_e_c_scanner.html</anchorfile>
      <anchor>ab40ac97f839c3f3aa8278c67a8fe3b18</anchor>
      <arglist>(const MCBin &amp;bin, const double data) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>calcSignificance</name>
      <anchorfile>class_e_c_scanner.html</anchorfile>
      <anchor>a36b1a76653b16d3802c1da2ed2d5b55b</anchor>
      <arglist>(const MCBin &amp;bin, const double data) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isDataScan</name>
      <anchorfile>class_e_c_scanner.html</anchorfile>
      <anchor>a2ae6b28030392b98f62ae15a2d7f4e2b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSignalScan</name>
      <anchorfile>class_e_c_scanner.html</anchorfile>
      <anchor>a6e71ba3e9184315702fbd4c6a903ac27</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getDicingRounds</name>
      <anchorfile>class_e_c_scanner.html</anchorfile>
      <anchor>a83f2d411e9eca7395beb65986f8f1805</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getFirstDicingRound</name>
      <anchorfile>class_e_c_scanner.html</anchorfile>
      <anchor>a3055a426b94e66b0ab429a2a5f79ec6b</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>EffectiveArea</name>
    <filename>class_effective_area.html</filename>
    <member kind="enumeration">
      <type></type>
      <name>EffArea</name>
      <anchorfile>class_effective_area.html</anchorfile>
      <anchor>a2efe0229655ac90b4de9d4ec6be7c376</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>chargedHadron</name>
      <anchorfile>class_effective_area.html</anchorfile>
      <anchor>a2efe0229655ac90b4de9d4ec6be7c376af425a7f9cf07e70ef0d414b409381963</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>neutralHadron</name>
      <anchorfile>class_effective_area.html</anchorfile>
      <anchor>a2efe0229655ac90b4de9d4ec6be7c376ab08b1b4a3dc4c9f544ef7794d02d71b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>photon</name>
      <anchorfile>class_effective_area.html</anchorfile>
      <anchor>a2efe0229655ac90b4de9d4ec6be7c376aa60bd4de24f6d59e4f330167f177efe8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>chargedHadron</name>
      <anchorfile>class_effective_area.html</anchorfile>
      <anchor>a2efe0229655ac90b4de9d4ec6be7c376af425a7f9cf07e70ef0d414b409381963</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>neutralHadron</name>
      <anchorfile>class_effective_area.html</anchorfile>
      <anchor>a2efe0229655ac90b4de9d4ec6be7c376ab08b1b4a3dc4c9f544ef7794d02d71b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>photon</name>
      <anchorfile>class_effective_area.html</anchorfile>
      <anchor>a2efe0229655ac90b4de9d4ec6be7c376aa60bd4de24f6d59e4f330167f177efe8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EffectiveArea</name>
      <anchorfile>class_effective_area.html</anchorfile>
      <anchor>aa49c95722c21792886c3aca1819bc9b7</anchor>
      <arglist>(Tools::MConfig const &amp;config, const std::string &amp;ObjectName)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~EffectiveArea</name>
      <anchorfile>class_effective_area.html</anchorfile>
      <anchor>a1a2c9e7ac4e4816ed1eb11f7142b1b03</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getEffectiveArea</name>
      <anchorfile>class_effective_area.html</anchorfile>
      <anchor>ab6a29b86f342e00bf8865cd4c89e5f24</anchor>
      <arglist>(double const eta, unsigned int const type) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>EleSelector</name>
    <filename>class_ele_selector.html</filename>
    <base>ObjectSelector</base>
    <member kind="function">
      <type></type>
      <name>EleSelector</name>
      <anchorfile>class_ele_selector.html</anchorfile>
      <anchor>a6cea2458dfc0e7c4024b58a44166b9bb</anchor>
      <arglist>(const Tools::MConfig &amp;config, OldNameMapper *globalOldNameMap)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~EleSelector</name>
      <anchorfile>class_ele_selector.html</anchorfile>
      <anchor>a0a4eb3b395bb169106fc1ea7febcf860</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>passObjectSelection</name>
      <anchorfile>class_ele_selector.html</anchorfile>
      <anchor>ae6651046cd4b27da1772f304a4fff67e</anchor>
      <arglist>(pxl::Particle *ele, double const objectRho, const std::string &amp;idType, const bool isSyst) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>passKinematics</name>
      <anchorfile>class_object_selector.html</anchorfile>
      <anchor>a96ba15ff2c5195e1797a1d3850c530a8</anchor>
      <arglist>(pxl::Particle *object, const bool isSyst=false) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setScaleFactors</name>
      <anchorfile>class_object_selector.html</anchorfile>
      <anchor>aa5e974f081f10a2e9ca4ab5569c22e7e</anchor>
      <arglist>(pxl::Particle *object)</arglist>
    </member>
    <member kind="variable">
      <type>OldNameMapper *</type>
      <name>oldNameMap</name>
      <anchorfile>class_object_selector.html</anchorfile>
      <anchor>a8944cd815366dde3b857d9b76e28b6bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_object_name</name>
      <anchorfile>class_object_selector.html</anchorfile>
      <anchor>a97be92d352eab8f1f7736e1210142697</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; ScaleFactor &gt;</type>
      <name>m_scale_factors</name>
      <anchorfile>class_object_selector.html</anchorfile>
      <anchor>acb033d208366dd65b0ee20215cde1eed</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>EqualityTest</name>
    <filename>class_equality_test.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg>state</templarg>
  </compound>
  <compound kind="class">
    <name>EqualityTest&lt; T, U, ComparisonMethod_CastInt &gt;</name>
    <filename>class_equality_test_3_01_t_00_01_u_00_01_comparison_method___cast_int_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>IsEquals</name>
      <anchorfile>class_equality_test_3_01_t_00_01_u_00_01_comparison_method___cast_int_01_4.html</anchorfile>
      <anchor>a5df9fddd4e85933411e7147eeaed48cc</anchor>
      <arglist>(const T t, const U u)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>EqualityTest&lt; T, U, ComparisonMethod_CastInt64 &gt;</name>
    <filename>class_equality_test_3_01_t_00_01_u_00_01_comparison_method___cast_int64_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>IsEquals</name>
      <anchorfile>class_equality_test_3_01_t_00_01_u_00_01_comparison_method___cast_int64_01_4.html</anchorfile>
      <anchor>a30a0e9f885659fc783c27a610a86f120</anchor>
      <arglist>(const T t, const U u)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>EqualityTest&lt; T, U, ComparisonMethod_Ok &gt;</name>
    <filename>class_equality_test_3_01_t_00_01_u_00_01_comparison_method___ok_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>IsEquals</name>
      <anchorfile>class_equality_test_3_01_t_00_01_u_00_01_comparison_method___ok_01_4.html</anchorfile>
      <anchor>a5b8abebb4ca90cad2871ac8d02303348</anchor>
      <arglist>(const T t, const U u)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>EqualityTest&lt; T, U, ComparisonMethod_UnsignedT &gt;</name>
    <filename>class_equality_test_3_01_t_00_01_u_00_01_comparison_method___unsigned_t_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>IsEquals</name>
      <anchorfile>class_equality_test_3_01_t_00_01_u_00_01_comparison_method___unsigned_t_01_4.html</anchorfile>
      <anchor>a8218cc916160d077e146fbc43574babe</anchor>
      <arglist>(const T t, const U u)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>EqualityTest&lt; T, U, ComparisonMethod_UnsignedU &gt;</name>
    <filename>class_equality_test_3_01_t_00_01_u_00_01_comparison_method___unsigned_u_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>IsEquals</name>
      <anchorfile>class_equality_test_3_01_t_00_01_u_00_01_comparison_method___unsigned_u_01_4.html</anchorfile>
      <anchor>ab4309c13f98e962495fa4f29fccdb152</anchor>
      <arglist>(const T t, const U u)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>pxl::Event</name>
    <filename>classpxl_1_1_event.html</filename>
    <base>pxl::Serializable</base>
    <base>pxl::UserRecordHelper</base>
    <member kind="function">
      <type></type>
      <name>Event</name>
      <anchorfile>classpxl_1_1_event.html</anchorfile>
      <anchor>aeaee17a78d9e41bdd991cca02dfeb2a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Event</name>
      <anchorfile>classpxl_1_1_event.html</anchorfile>
      <anchor>a12eed883e0accf14921b409bd94254fa</anchor>
      <arglist>(const Event &amp;event)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Event</name>
      <anchorfile>classpxl_1_1_event.html</anchorfile>
      <anchor>ad881c9fbfb3426b1eda6014294537504</anchor>
      <arglist>(const Event *event)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Event</name>
      <anchorfile>classpxl_1_1_event.html</anchorfile>
      <anchor>a782668fb96175d9fd676f3b153cd5fcd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Id &amp;</type>
      <name>getTypeId</name>
      <anchorfile>classpxl_1_1_event.html</anchorfile>
      <anchor>a3eb506ca75aecd12a43b95cf30811823</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classpxl_1_1_event.html</anchorfile>
      <anchor>ad4edae96b99bf4de98dd5f6423c23a65</anchor>
      <arglist>(const OutputStream &amp;out) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>deserialize</name>
      <anchorfile>classpxl_1_1_event.html</anchorfile>
      <anchor>a12f015cfe4389bd5f2bc2a9bb19cf4cb</anchor>
      <arglist>(const InputStream &amp;in)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Serializable *</type>
      <name>clone</name>
      <anchorfile>classpxl_1_1_event.html</anchorfile>
      <anchor>a5c5e7234678e8071b7f3d5b99863c48d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>datatype *</type>
      <name>create</name>
      <anchorfile>classpxl_1_1_event.html</anchorfile>
      <anchor>a7c8f7eee523b3a7976235864f40846bb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>datatype *</type>
      <name>createIndexed</name>
      <anchorfile>classpxl_1_1_event.html</anchorfile>
      <anchor>ae4f6476adecc3dca2471206d055ca8ce</anchor>
      <arglist>(const std::string &amp;key)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insertObject</name>
      <anchorfile>classpxl_1_1_event.html</anchorfile>
      <anchor>a67cd9d482b06ccc63c0099249516e3cb</anchor>
      <arglist>(Relative *obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insertObject</name>
      <anchorfile>classpxl_1_1_event.html</anchorfile>
      <anchor>adb94f522af7030c3c192e2759099545e</anchor>
      <arglist>(Relative *obj, const std::string &amp;key)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setIndex</name>
      <anchorfile>classpxl_1_1_event.html</anchorfile>
      <anchor>aa55f1e600835a2ae341747612dca5458</anchor>
      <arglist>(const std::string &amp;key, Relative *obj)</arglist>
    </member>
    <member kind="function">
      <type>ObjectOwner &amp;</type>
      <name>getObjectOwner</name>
      <anchorfile>classpxl_1_1_event.html</anchorfile>
      <anchor>a036a0bc2cb034b578acaca06c3aedaf7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ObjectOwner &amp;</type>
      <name>getObjectOwner</name>
      <anchorfile>classpxl_1_1_event.html</anchorfile>
      <anchor>abfa0206ff235d90f5e630e70fb51acd6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getObjectsOfType</name>
      <anchorfile>classpxl_1_1_event.html</anchorfile>
      <anchor>a78e786c7d5d81bc145d679a587746ea2</anchor>
      <arglist>(std::vector&lt; objecttype * &gt; &amp;vec) const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; Relative * &gt; &amp;</type>
      <name>getObjects</name>
      <anchorfile>classpxl_1_1_event.html</anchorfile>
      <anchor>addd5764ffb9aec168db8ddc7f7e1f0d6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeObject</name>
      <anchorfile>classpxl_1_1_event.html</anchorfile>
      <anchor>ace6d9b4b53d62e475c25e94e8aea2a4f</anchor>
      <arglist>(Relative *obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>takeObject</name>
      <anchorfile>classpxl_1_1_event.html</anchorfile>
      <anchor>af82e51054c856a60e5ea850643e4a84f</anchor>
      <arglist>(Relative *obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearObjects</name>
      <anchorfile>classpxl_1_1_event.html</anchorfile>
      <anchor>a699f2b95d585482fc8bf8ef385a071e5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>objecttype *</type>
      <name>findObject</name>
      <anchorfile>classpxl_1_1_event.html</anchorfile>
      <anchor>ab6dac82e932ac884ec89cb303336785e</anchor>
      <arglist>(const std::string key) const</arglist>
    </member>
    <member kind="function">
      <type>objecttype *</type>
      <name>findCopyOf</name>
      <anchorfile>classpxl_1_1_event.html</anchorfile>
      <anchor>aa70bd07c9d97fe4a9ae1c09bb2093e30</anchor>
      <arglist>(const Relative *original) const</arglist>
    </member>
    <member kind="function">
      <type>const std::map&lt; std::string, Relative * &gt; &amp;</type>
      <name>getIndex</name>
      <anchorfile>classpxl_1_1_event.html</anchorfile>
      <anchor>a611794e09cf6c6a89b057571faa9043d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeIndex</name>
      <anchorfile>classpxl_1_1_event.html</anchorfile>
      <anchor>a18270a2678374309214975e662c0a839</anchor>
      <arglist>(const std::string &amp;key)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearIndex</name>
      <anchorfile>classpxl_1_1_event.html</anchorfile>
      <anchor>a566c6ca04b9687eaab58b6eb01fefc74</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::ostream &amp;</type>
      <name>print</name>
      <anchorfile>classpxl_1_1_event.html</anchorfile>
      <anchor>a6875eae9a32343a3218f8a2dfe37b93f</anchor>
      <arglist>(int level=1, std::ostream &amp;os=std::cout, int pan=1) const</arglist>
    </member>
    <member kind="function">
      <type>const Id &amp;</type>
      <name>getId</name>
      <anchorfile>classpxl_1_1_serializable.html</anchorfile>
      <anchor>a071e3e5bdd7125cee5dd5178807c3647</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const std::string</type>
      <name>toString</name>
      <anchorfile>classpxl_1_1_serializable.html</anchorfile>
      <anchor>abe42afdf47f4fa9cad94e26e9a3d6ba1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const UserRecords &amp;</type>
      <name>getUserRecords</name>
      <anchorfile>classpxl_1_1_user_record_helper.html</anchorfile>
      <anchor>ab7d2e9d7fd53f986163bff24ed9ec2e3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>UserRecords &amp;</type>
      <name>getUserRecords</name>
      <anchorfile>classpxl_1_1_user_record_helper.html</anchorfile>
      <anchor>aed523d427700d001e76af09b138f3355</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setUserRecords</name>
      <anchorfile>classpxl_1_1_user_record_helper.html</anchorfile>
      <anchor>a8bc754ecfd9c00f2a2ccb6395ac0891d</anchor>
      <arglist>(const UserRecords &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setUserRecord</name>
      <anchorfile>classpxl_1_1_user_record_helper.html</anchorfile>
      <anchor>af3ecea27c07445ab7dab72987672a8fd</anchor>
      <arglist>(const std::string &amp;key, const Variant &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>eraseUserRecord</name>
      <anchorfile>classpxl_1_1_user_record_helper.html</anchorfile>
      <anchor>a558dd61337c50bfd93af44f1c65867d7</anchor>
      <arglist>(const std::string &amp;key)</arglist>
    </member>
    <member kind="function">
      <type>const Variant &amp;</type>
      <name>getUserRecord</name>
      <anchorfile>classpxl_1_1_user_record_helper.html</anchorfile>
      <anchor>a0c4e05e6defb9e4eabb75a1aef41d300</anchor>
      <arglist>(const std::string &amp;key) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getUserRecord</name>
      <anchorfile>classpxl_1_1_user_record_helper.html</anchorfile>
      <anchor>a3df9f904d21e126a0527a81663f13ae8</anchor>
      <arglist>(const std::string &amp;key, datatype &amp;item) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasUserRecord</name>
      <anchorfile>classpxl_1_1_user_record_helper.html</anchorfile>
      <anchor>aeae48d210cf0dfd2a52fb7adcfc4bb41</anchor>
      <arglist>(const std::string &amp;key) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const Id &amp;</type>
      <name>getStaticTypeId</name>
      <anchorfile>classpxl_1_1_event.html</anchorfile>
      <anchor>a57b971cfc98dd76ce84039c7b284bc55</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>EventAdaptor</name>
    <filename>class_event_adaptor.html</filename>
    <member kind="typedef">
      <type>std::vector&lt; pxl::Particle * &gt;</type>
      <name>pxlParticles</name>
      <anchorfile>class_event_adaptor.html</anchorfile>
      <anchor>ae50204c68572d529d06fdfbeeaf111b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EventAdaptor</name>
      <anchorfile>class_event_adaptor.html</anchorfile>
      <anchor>a20458875f395f45377849a6c351b7c64</anchor>
      <arglist>(Tools::MConfig const &amp;cfg, unsigned int const debug=1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~EventAdaptor</name>
      <anchorfile>class_event_adaptor.html</anchorfile>
      <anchor>a7014fac508e263adfdb4d31ea88d98f4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initEvent</name>
      <anchorfile>class_event_adaptor.html</anchorfile>
      <anchor>a958bd66ba7daf0f87648d927a6532349</anchor>
      <arglist>(pxl::EventView const *RecEvtView)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyCocktailMuons</name>
      <anchorfile>class_event_adaptor.html</anchorfile>
      <anchor>a973114dfd00279dba20ba08dbf8d6a67</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyPUPPIFatJets</name>
      <anchorfile>class_event_adaptor.html</anchorfile>
      <anchor>ab52a26fab802ac47911b39f52c6b5310</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyJETMETSmearing</name>
      <anchorfile>class_event_adaptor.html</anchorfile>
      <anchor>a59e14b7176218941e79526d891de6043</anchor>
      <arglist>(pxl::EventView const *GenEvtView, pxl::EventView const *RecEvtView, std::string const &amp;linkName)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyFatJETMETSmearing</name>
      <anchorfile>class_event_adaptor.html</anchorfile>
      <anchor>a5d771da81f43da15778c119abcdd7954</anchor>
      <arglist>(pxl::EventView const *GenEvtView, pxl::EventView const *RecEvtView, std::string const &amp;linkName)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>adaptDoubleEleTrigger</name>
      <anchorfile>class_event_adaptor.html</anchorfile>
      <anchor>ab9b8251cfb1cfb1f1def5d53d461fba2</anchor>
      <arglist>(const int run, pxl::EventView *trigger_view)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>EventClassFactory</name>
    <filename>class_event_class_factory.html</filename>
    <base>pxl::AnalysisProcess</base>
    <class kind="struct">EventClassFactory::EventInfo</class>
    <member kind="function">
      <type></type>
      <name>EventClassFactory</name>
      <anchorfile>class_event_class_factory.html</anchorfile>
      <anchor>a4724740c062511a8a1caf1121ff1ae80</anchor>
      <arglist>(const Tools::MConfig &amp;cutconfig, const Tools::MConfig &amp;xsecs, EventSelector &amp;selector, Systematics &amp;syst_shifter, const std::string outfilename=&quot;&quot;, const string hash=&quot;dummyhash&quot;, const bool debug=1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~EventClassFactory</name>
      <anchorfile>class_event_class_factory.html</anchorfile>
      <anchor>a61f527aaefa4b5d3585b9dca22f85dda</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>endJob</name>
      <anchorfile>class_event_class_factory.html</anchorfile>
      <anchor>acfb5bcdc61ee5f2535ff2329c1fa5066</anchor>
      <arglist>(const Serializable *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>analyseEvent</name>
      <anchorfile>class_event_class_factory.html</anchorfile>
      <anchor>a1638759382a28c3511b87ee0a6c3e1ca</anchor>
      <arglist>(const pxl::Event *event_ptr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Id &amp;</type>
      <name>getTypeId</name>
      <anchorfile>classpxl_1_1_analysis_process.html</anchorfile>
      <anchor>a883a40879a89965d41bb337ebb4727f5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classpxl_1_1_analysis_process.html</anchorfile>
      <anchor>a82faecb44b2f7b42b078dbec6d86ad53</anchor>
      <arglist>(const OutputStream &amp;out) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>deserialize</name>
      <anchorfile>classpxl_1_1_analysis_process.html</anchorfile>
      <anchor>a8e71a9dcb4aeadfb920583cacc719ef2</anchor>
      <arglist>(const InputStream &amp;in)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>buildTemplate</name>
      <anchorfile>classpxl_1_1_analysis_process.html</anchorfile>
      <anchor>a773fa10b8eaa948387809305b24df12e</anchor>
      <arglist>(int mode=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>beginJob</name>
      <anchorfile>classpxl_1_1_analysis_process.html</anchorfile>
      <anchor>a01b66946f83f5a7a7044b32aa16497d5</anchor>
      <arglist>(const Serializable *input=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>beginRun</name>
      <anchorfile>classpxl_1_1_analysis_process.html</anchorfile>
      <anchor>ab4a6c40de42e6d7865af48f84a115e9a</anchor>
      <arglist>(const Serializable *input=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>finishEvent</name>
      <anchorfile>classpxl_1_1_analysis_process.html</anchorfile>
      <anchor>ad38dbd94fc2a9d0086dee307a243ae18</anchor>
      <arglist>(const Event *event=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>endRun</name>
      <anchorfile>classpxl_1_1_analysis_process.html</anchorfile>
      <anchor>a9353447a7ddb021735346fb0200aa60c</anchor>
      <arglist>(const Serializable *input=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>endJob</name>
      <anchorfile>classpxl_1_1_analysis_process.html</anchorfile>
      <anchor>a8ea3f1482916de2823f88917e60a3ea9</anchor>
      <arglist>(const Serializable *input=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Serializable *</type>
      <name>clone</name>
      <anchorfile>classpxl_1_1_analysis_process.html</anchorfile>
      <anchor>a6b9b043c70231a18742f0dcb3dba5614</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual WkPtrBase *</type>
      <name>createSelfWkPtr</name>
      <anchorfile>classpxl_1_1_analysis_process.html</anchorfile>
      <anchor>ae0a00d04d8818c1118e62ef4001d3b3d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::ostream &amp;</type>
      <name>print</name>
      <anchorfile>classpxl_1_1_analysis_process.html</anchorfile>
      <anchor>a51653165333f0b4749fd3780bc1a9395</anchor>
      <arglist>(int level=1, std::ostream &amp;os=std::cout, int pan=0) const</arglist>
    </member>
    <member kind="function">
      <type>datatype *</type>
      <name>create</name>
      <anchorfile>classpxl_1_1_object_manager.html</anchorfile>
      <anchor>ad1901dcf17216f56a080382d9195c065</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>datatype *</type>
      <name>createIndexed</name>
      <anchorfile>classpxl_1_1_object_manager.html</anchorfile>
      <anchor>a6eeb2a8f66d6fd3eb6f1851b6d6bcc60</anchor>
      <arglist>(const std::string &amp;key)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insertObject</name>
      <anchorfile>classpxl_1_1_object_manager.html</anchorfile>
      <anchor>aa73094f3d4ce7a64c8b862d8dc504ff5</anchor>
      <arglist>(Relative *obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insertObject</name>
      <anchorfile>classpxl_1_1_object_manager.html</anchorfile>
      <anchor>a56047ba744052038894e21c2ce3f549a</anchor>
      <arglist>(Relative *obj, const std::string &amp;key)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setIndexEntry</name>
      <anchorfile>classpxl_1_1_object_manager.html</anchorfile>
      <anchor>aa0cb7e818bc10b94d4100e95192b483f</anchor>
      <arglist>(const std::string &amp;key, Relative *obj)</arglist>
    </member>
    <member kind="function">
      <type>ObjectOwner &amp;</type>
      <name>getObjectOwner</name>
      <anchorfile>classpxl_1_1_object_manager.html</anchorfile>
      <anchor>ad45c49c34ee75bd675857d22af49bc36</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ObjectOwner &amp;</type>
      <name>getObjectOwner</name>
      <anchorfile>classpxl_1_1_object_manager.html</anchorfile>
      <anchor>a555f045954f82fed896e833d752dd6bb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; Relative * &gt; &amp;</type>
      <name>getObjects</name>
      <anchorfile>classpxl_1_1_object_manager.html</anchorfile>
      <anchor>ab7aaeb59e68a34bd2f70cd1ee8f219f9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getObjectsOfType</name>
      <anchorfile>classpxl_1_1_object_manager.html</anchorfile>
      <anchor>a326cbe576dddc1abee93ba88c943400c</anchor>
      <arglist>(std::vector&lt; objecttype * &gt; &amp;vec) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeObject</name>
      <anchorfile>classpxl_1_1_object_manager.html</anchorfile>
      <anchor>a6d2ecf0d8c88cd2d300e737ca565b9bc</anchor>
      <arglist>(Relative *obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>takeObject</name>
      <anchorfile>classpxl_1_1_object_manager.html</anchorfile>
      <anchor>a997b25e8b80baac5b099f8366e16f03e</anchor>
      <arglist>(Relative *obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearObjects</name>
      <anchorfile>classpxl_1_1_object_manager.html</anchorfile>
      <anchor>a29accdf305964e94611cd866755cc30a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>objecttype *</type>
      <name>findObject</name>
      <anchorfile>classpxl_1_1_object_manager.html</anchorfile>
      <anchor>abd54ba43be0f458e4df4bf7ad6a3f499</anchor>
      <arglist>(const std::string key) const</arglist>
    </member>
    <member kind="function">
      <type>objecttype *</type>
      <name>findCopyOf</name>
      <anchorfile>classpxl_1_1_object_manager.html</anchorfile>
      <anchor>a9e3191cfc62b614788b0111f0c0b7dd9</anchor>
      <arglist>(const Relative *original) const</arglist>
    </member>
    <member kind="function">
      <type>const std::map&lt; Id, Relative * &gt; &amp;</type>
      <name>getCopyHistory</name>
      <anchorfile>classpxl_1_1_object_manager.html</anchorfile>
      <anchor>a0b6e868680ed72c14a3bddc5e535ab3c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearCopyHistory</name>
      <anchorfile>classpxl_1_1_object_manager.html</anchorfile>
      <anchor>a302c2b5833f897a7ff4491ba4bb64039</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const std::map&lt; std::string, Relative * &gt; &amp;</type>
      <name>getIndex</name>
      <anchorfile>classpxl_1_1_object_manager.html</anchorfile>
      <anchor>a0351e7dc05a1141c76a4d763f8474ff3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeIndexEntry</name>
      <anchorfile>classpxl_1_1_object_manager.html</anchorfile>
      <anchor>a11b471a5bd9009f4d80257c949113086</anchor>
      <arglist>(const std::string &amp;key)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearIndex</name>
      <anchorfile>classpxl_1_1_object_manager.html</anchorfile>
      <anchor>ae565bdd64538388084bc30bbe9611e06</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isLocked</name>
      <anchorfile>classpxl_1_1_object.html</anchorfile>
      <anchor>a584e513d1aada593146e4bb4dca8c1fa</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getWorkFlag</name>
      <anchorfile>classpxl_1_1_object.html</anchorfile>
      <anchor>a9e82ee54fca13b8818634ebd8adda493</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLocked</name>
      <anchorfile>classpxl_1_1_object.html</anchorfile>
      <anchor>a1b2dbf2aef26a3bc4a92735572649a94</anchor>
      <arglist>(bool v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setWorkFlag</name>
      <anchorfile>classpxl_1_1_object.html</anchorfile>
      <anchor>a91d83fb75b1a480ae8323e7b2a5276ad</anchor>
      <arglist>(int v)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::ostream &amp;</type>
      <name>printContent</name>
      <anchorfile>classpxl_1_1_object.html</anchorfile>
      <anchor>a434021cf01b990778a93f5144817de2d</anchor>
      <arglist>(int level=1, std::ostream &amp;os=std::cout, int pan=0) const</arglist>
    </member>
    <member kind="function">
      <type>Id</type>
      <name>id</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>a9bf6c17d6fd5b588c00463db4028870b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ObjectOwner *</type>
      <name>owner</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>a556c1cc09bed10e480cceb5da42edb33</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Relations &amp;</type>
      <name>getMotherRelations</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>a10f8728c388408f48a120e90de6298ae</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Relations &amp;</type>
      <name>getDaughterRelations</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>ae3b09cfe9057e042b88cf1adf6b4a036</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Relations &amp;</type>
      <name>getFlatRelations</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>aa8b871a98b21677ef5c159dbb608722d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Relative *</type>
      <name>getMother</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>a53a7b6b11409893dab8a73a0159180ec</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Relative *</type>
      <name>getDaughter</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>a6e7b03ed37eca69cd1063f78fd05b6dc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::set&lt; Relative * &gt; &amp;</type>
      <name>getDaughters</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>a6c4f5b97226fe562ef9144fa14f8c0f5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::set&lt; Relative * &gt; &amp;</type>
      <name>getMothers</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>a1728bea81bb0f966335f32c832a1cffa</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>numberOfDaughters</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>aa92bd45d2b1751fe3bfbbc79c8a21b32</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>numberOfMothers</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>aab1ec876cfe2f1bebf212b60f66ba907</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>linkMother</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>af3f916466c571dad5b0be5f4baded3b3</anchor>
      <arglist>(Relative *target)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>linkDaughter</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>a0a6244c26919bdd6fd45cbb8ea5a8f8b</anchor>
      <arglist>(Relative *target)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>linkFlat</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>a5ee923ece292e0d9268495af7590f060</anchor>
      <arglist>(Relative *target)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unlinkMother</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>a2b75c81e4078d147d36310fe7c3a4800</anchor>
      <arglist>(Relative *target)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unlinkDaughter</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>aaface8521be14a7fbb256ad786355ea4</anchor>
      <arglist>(Relative *target)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unlinkFlat</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>a4a4eba4935e47072056671728c2bd139</anchor>
      <arglist>(Relative *target)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unlinkFlat</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>a8d81b6131cc1532e3ba868e3509cb9b2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unlinkMothers</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>ad51348aae3792d8205823b46da02a564</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unlinkDaughters</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>a3bd2ff6a25aab01fda19df066bb492a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>linkSoft</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>a2ea79223a0f9d9edeeb8398b53ff6ab1</anchor>
      <arglist>(Relative *relative, const std::string &amp;type)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unlinkSoft</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>a1e870e37dbe2b384f85b138b5ec51e0e</anchor>
      <arglist>(Relative *relative, const std::string &amp;type)</arglist>
    </member>
    <member kind="function">
      <type>const SoftRelations &amp;</type>
      <name>getSoftRelations</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>ae5b78c9536de71abbb15a413e31f655e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>SoftRelations &amp;</type>
      <name>getSoftRelations</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>ab72e809de894954b8cc73ff768d757a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getName</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>a5384c8188f28913c4cc898571f133f32</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setName</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>a483a501afd8965daa92d3bafb91b4dfe</anchor>
      <arglist>(const std::string &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>printDecayTree</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>afa50de942d2caa47defa7e39a79df0a9</anchor>
      <arglist>(int level=0, std::ostream &amp;os=std::cout, int pan=1) const</arglist>
    </member>
    <member kind="function">
      <type>const Id &amp;</type>
      <name>getId</name>
      <anchorfile>classpxl_1_1_serializable.html</anchorfile>
      <anchor>a071e3e5bdd7125cee5dd5178807c3647</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const std::string</type>
      <name>toString</name>
      <anchorfile>classpxl_1_1_serializable.html</anchorfile>
      <anchor>abe42afdf47f4fa9cad94e26e9a3d6ba1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const UserRecords &amp;</type>
      <name>getUserRecords</name>
      <anchorfile>classpxl_1_1_user_record_helper.html</anchorfile>
      <anchor>ab7d2e9d7fd53f986163bff24ed9ec2e3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>UserRecords &amp;</type>
      <name>getUserRecords</name>
      <anchorfile>classpxl_1_1_user_record_helper.html</anchorfile>
      <anchor>aed523d427700d001e76af09b138f3355</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setUserRecords</name>
      <anchorfile>classpxl_1_1_user_record_helper.html</anchorfile>
      <anchor>a8bc754ecfd9c00f2a2ccb6395ac0891d</anchor>
      <arglist>(const UserRecords &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setUserRecord</name>
      <anchorfile>classpxl_1_1_user_record_helper.html</anchorfile>
      <anchor>af3ecea27c07445ab7dab72987672a8fd</anchor>
      <arglist>(const std::string &amp;key, const Variant &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>eraseUserRecord</name>
      <anchorfile>classpxl_1_1_user_record_helper.html</anchorfile>
      <anchor>a558dd61337c50bfd93af44f1c65867d7</anchor>
      <arglist>(const std::string &amp;key)</arglist>
    </member>
    <member kind="function">
      <type>const Variant &amp;</type>
      <name>getUserRecord</name>
      <anchorfile>classpxl_1_1_user_record_helper.html</anchorfile>
      <anchor>a0c4e05e6defb9e4eabb75a1aef41d300</anchor>
      <arglist>(const std::string &amp;key) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getUserRecord</name>
      <anchorfile>classpxl_1_1_user_record_helper.html</anchorfile>
      <anchor>a3df9f904d21e126a0527a81663f13ae8</anchor>
      <arglist>(const std::string &amp;key, datatype &amp;item) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasUserRecord</name>
      <anchorfile>classpxl_1_1_user_record_helper.html</anchorfile>
      <anchor>aeae48d210cf0dfd2a52fb7adcfc4bb41</anchor>
      <arglist>(const std::string &amp;key) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const Id &amp;</type>
      <name>getStaticTypeId</name>
      <anchorfile>classpxl_1_1_analysis_process.html</anchorfile>
      <anchor>a9bd85c364b1b9ed841903f4cb1436901</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::ostream &amp;</type>
      <name>printPan1st</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>a589f7baac2ec1c61eeb4c2c1e3403526</anchor>
      <arglist>(std::ostream &amp;os, int pan) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::ostream &amp;</type>
      <name>printPan</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>a5038bd2b7584b9aacb4b7d0ac02b26fa</anchor>
      <arglist>(std::ostream &amp;os, int pan) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>EventCleaning</name>
    <filename>class_event_cleaning.html</filename>
    <member kind="function">
      <type></type>
      <name>EventCleaning</name>
      <anchorfile>class_event_cleaning.html</anchorfile>
      <anchor>a3ee2297d3895b1a2323d729d06c9d542</anchor>
      <arglist>(Tools::MConfig const &amp;cfg)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~EventCleaning</name>
      <anchorfile>class_event_cleaning.html</anchorfile>
      <anchor>ac060dfb66ba39be97d76ff6f15a9645d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cleanEvent</name>
      <anchorfile>class_event_cleaning.html</anchorfile>
      <anchor>ac67411129b1e9a1ab6ba49c2ee1dab3c</anchor>
      <arglist>(std::map&lt; std::string, std::vector&lt; pxl::Particle * &gt;&gt; &amp;particleMap, bool const isRec) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Tools::EventHandler</name>
    <filename>class_tools_1_1_event_handler.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>handle_signal</name>
      <anchorfile>class_tools_1_1_event_handler.html</anchorfile>
      <anchor>ad2934be6fd61f81efc7c396b7a67655b</anchor>
      <arglist>(int signum)=0</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>EventClassFactory::EventInfo</name>
    <filename>struct_event_class_factory_1_1_event_info.html</filename>
    <member kind="variable">
      <type>double</type>
      <name>sumpt</name>
      <anchorfile>struct_event_class_factory_1_1_event_info.html</anchorfile>
      <anchor>a646b3cac31c40c0c2c454b756d143350</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>minv</name>
      <anchorfile>struct_event_class_factory_1_1_event_info.html</anchorfile>
      <anchor>a4932be7d2ae69cd3634b1b2c430e9a81</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>met</name>
      <anchorfile>struct_event_class_factory_1_1_event_info.html</anchorfile>
      <anchor>a8d06dea6bd1f015c8391ed6e54d1a54f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>run</name>
      <anchorfile>struct_event_class_factory_1_1_event_info.html</anchorfile>
      <anchor>ad05d6e15ddf30e495a66d7ed20074ccd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>lumisection</name>
      <anchorfile>struct_event_class_factory_1_1_event_info.html</anchorfile>
      <anchor>a4a5b45bc51ede389f0c78c8df3142e1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned long</type>
      <name>eventnum</name>
      <anchorfile>struct_event_class_factory_1_1_event_info.html</anchorfile>
      <anchor>a04be9e0de44d00302dd9247885316215</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>dataset</name>
      <anchorfile>struct_event_class_factory_1_1_event_info.html</anchorfile>
      <anchor>a6d8db7192ac6ed5268457f3d8b829472</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>filename</name>
      <anchorfile>struct_event_class_factory_1_1_event_info.html</anchorfile>
      <anchor>ac99689fe4b42ac8c2e8e85e11200ace3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>eventnumpxlio</name>
      <anchorfile>struct_event_class_factory_1_1_event_info.html</anchorfile>
      <anchor>a4f9ef645632c38f9a26146ddd064f07e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>central_weight</name>
      <anchorfile>struct_event_class_factory_1_1_event_info.html</anchorfile>
      <anchor>a2b3b5952bf02bf4163b9de37d65c240c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>pileup</name>
      <anchorfile>struct_event_class_factory_1_1_event_info.html</anchorfile>
      <anchor>a55f202989ef40e7fa84ce138064561bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>pileup_up</name>
      <anchorfile>struct_event_class_factory_1_1_event_info.html</anchorfile>
      <anchor>a6b0f1af9023e093e6b9ad0bafa2aa3e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>pileup_down</name>
      <anchorfile>struct_event_class_factory_1_1_event_info.html</anchorfile>
      <anchor>a843f762b848f6e7e3890c159997c9534</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>prefire_weight</name>
      <anchorfile>struct_event_class_factory_1_1_event_info.html</anchorfile>
      <anchor>a3ddfc817667e2328fbca4f4659a4e7a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>prefire_weight_up</name>
      <anchorfile>struct_event_class_factory_1_1_event_info.html</anchorfile>
      <anchor>a35bf5baa7a3ef6dc1ae26e2dca141c94</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>prefire_weight_down</name>
      <anchorfile>struct_event_class_factory_1_1_event_info.html</anchorfile>
      <anchor>a3a7f5b5b662306018615affee5ad65ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>process</name>
      <anchorfile>struct_event_class_factory_1_1_event_info.html</anchorfile>
      <anchor>a4f3249be647a83082f7582a6b75587c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>qcd_scale</name>
      <anchorfile>struct_event_class_factory_1_1_event_info.html</anchorfile>
      <anchor>aa2880587225d2a4787089c7684d436e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>has_scale_variation</name>
      <anchorfile>struct_event_class_factory_1_1_event_info.html</anchorfile>
      <anchor>adfe2f0d2b0a19dc1330bf8b8287891e8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>EventSelector</name>
    <filename>class_event_selector.html</filename>
    <member kind="function">
      <type></type>
      <name>EventSelector</name>
      <anchorfile>class_event_selector.html</anchorfile>
      <anchor>afbf8d33b3e2ab1a23104617b8fea8d9e</anchor>
      <arglist>(const Tools::MConfig &amp;config)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~EventSelector</name>
      <anchorfile>class_event_selector.html</anchorfile>
      <anchor>a657cc6cc7c4922d9ddf23f4813e4a963</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>performSelection</name>
      <anchorfile>class_event_selector.html</anchorfile>
      <anchor>ad69928a8317de562fddd7b94de4c884e</anchor>
      <arglist>(pxl::EventView *RecEvtView, pxl::EventView *GenEvtView, pxl::EventView *TrigEvtView, pxl::EventView *FilterView, const bool isSyst=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>performKinematicsSelection</name>
      <anchorfile>class_event_selector.html</anchorfile>
      <anchor>a7ac4ee40160996c8de93d2eae85cf28b</anchor>
      <arglist>(pxl::EventView *EvtView, const bool isSyst=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>performTriggerSelection</name>
      <anchorfile>class_event_selector.html</anchorfile>
      <anchor>a39a35e5ebb68e631a0d67f761bdab534</anchor>
      <arglist>(pxl::EventView *RecEvtView, pxl::EventView *TrigEvtView)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>performOfflineTriggerSelection</name>
      <anchorfile>class_event_selector.html</anchorfile>
      <anchor>ac422e6a21b4b536ff4050584d8e7e278</anchor>
      <arglist>(pxl::EventView *RecEvtView, pxl::EventView *TrigEvtView) const</arglist>
    </member>
    <member kind="function">
      <type>std::map&lt; std::string, std::vector&lt; pxl::Particle * &gt; &gt;</type>
      <name>getParticleLists</name>
      <anchorfile>class_event_selector.html</anchorfile>
      <anchor>a78ccda242ffe8278cfc304afaa47000f</anchor>
      <arglist>(const pxl::EventView *EvtView, bool selectedOnly=false, std::list&lt; std::function&lt; void(std::map&lt; std::string, std::vector&lt; pxl::Particle * &gt;&gt; &amp;)&gt;&gt; functions=std::list&lt; std::function&lt; void(std::map&lt; std::string, std::vector&lt; pxl::Particle * &gt;&gt; &amp;)&gt;&gt;()) const</arglist>
    </member>
    <member kind="function">
      <type>std::map&lt; std::string, int &gt;</type>
      <name>getParticleCountMap</name>
      <anchorfile>class_event_selector.html</anchorfile>
      <anchor>a5cd5bbf2881c85e15d98655d1664b67f</anchor>
      <arglist>(const std::map&lt; std::string, std::vector&lt; pxl::Particle * &gt;&gt; &amp;particleLists) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeOverlaps</name>
      <anchorfile>class_event_selector.html</anchorfile>
      <anchor>aacd95aa652b49f84fdecfc39084a79bd</anchor>
      <arglist>(pxl::EventView *RecEvtView) const</arglist>
    </member>
    <member kind="function">
      <type>TriggerSelector const  &amp;</type>
      <name>getTriggerSelector</name>
      <anchorfile>class_event_selector.html</anchorfile>
      <anchor>a157de3a3a138440106b058e109b9a6bf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::map&lt; std::string, int &gt; &amp;</type>
      <name>getFilterMap</name>
      <anchorfile>class_event_selector.html</anchorfile>
      <anchor>aa40dc7b8b8ccc81f5fb98ef5d2c08c51</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ObjectSelector *</type>
      <name>getObjectSelector</name>
      <anchorfile>class_event_selector.html</anchorfile>
      <anchor>ab16747e63c5a3c0f0bf54a2d00542559</anchor>
      <arglist>(const std::string &amp;object) const</arglist>
    </member>
    <member kind="function">
      <type>const GenSelector *</type>
      <name>getGenSelector</name>
      <anchorfile>class_event_selector.html</anchorfile>
      <anchor>adf7f56b7c5035ff318871efa8c0eadf9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::map&lt; std::string, std::vector&lt; pxl::Particle * &gt; &gt;</type>
      <name>getGenParticleLists</name>
      <anchorfile>class_event_selector.html</anchorfile>
      <anchor>ace51eee5bd09ae3affc3154a883f2007</anchor>
      <arglist>(const pxl::EventView *EvtView)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>checkOrder</name>
      <anchorfile>class_event_selector.html</anchorfile>
      <anchor>a73a7553a4ab3c370d4947b07969ffb70</anchor>
      <arglist>(std::vector&lt; pxl::Particle * &gt; const &amp;particles)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>pxl::EventView</name>
    <filename>classpxl_1_1_event_view.html</filename>
    <base>pxl::ObjectManager</base>
    <member kind="function">
      <type></type>
      <name>EventView</name>
      <anchorfile>classpxl_1_1_event_view.html</anchorfile>
      <anchor>ab61b7658a79d96edd6e3533292e6876a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EventView</name>
      <anchorfile>classpxl_1_1_event_view.html</anchorfile>
      <anchor>a6b6356a41b4ad16f074e2076d6b82d7f</anchor>
      <arglist>(const EventView &amp;original)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EventView</name>
      <anchorfile>classpxl_1_1_event_view.html</anchorfile>
      <anchor>a4acc32958143f107dccab902153ec10f</anchor>
      <arglist>(const EventView *original)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual WkPtrBase *</type>
      <name>createSelfWkPtr</name>
      <anchorfile>classpxl_1_1_event_view.html</anchorfile>
      <anchor>a0cd0ec7f9653f6adc17869d387c271f3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Id &amp;</type>
      <name>getTypeId</name>
      <anchorfile>classpxl_1_1_event_view.html</anchorfile>
      <anchor>a871abea52d25c28d7916a756b4210ae3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classpxl_1_1_event_view.html</anchorfile>
      <anchor>a06ffc77f19d9501c72b43c9e774a3ccb</anchor>
      <arglist>(const OutputStream &amp;out) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>deserialize</name>
      <anchorfile>classpxl_1_1_event_view.html</anchorfile>
      <anchor>a15fcc37d85578e1bb951380d82925507</anchor>
      <arglist>(const InputStream &amp;in)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Serializable *</type>
      <name>clone</name>
      <anchorfile>classpxl_1_1_event_view.html</anchorfile>
      <anchor>a830c9592d93ae9d2bfb2001ba14a553a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::ostream &amp;</type>
      <name>print</name>
      <anchorfile>classpxl_1_1_event_view.html</anchorfile>
      <anchor>a4ee793fa721ea6614f39a49e2bd180b9</anchor>
      <arglist>(int level=0, std::ostream &amp;os=std::cout, int pan=1) const</arglist>
    </member>
    <member kind="function">
      <type>datatype *</type>
      <name>create</name>
      <anchorfile>classpxl_1_1_object_manager.html</anchorfile>
      <anchor>ad1901dcf17216f56a080382d9195c065</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>datatype *</type>
      <name>createIndexed</name>
      <anchorfile>classpxl_1_1_object_manager.html</anchorfile>
      <anchor>a6eeb2a8f66d6fd3eb6f1851b6d6bcc60</anchor>
      <arglist>(const std::string &amp;key)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insertObject</name>
      <anchorfile>classpxl_1_1_object_manager.html</anchorfile>
      <anchor>aa73094f3d4ce7a64c8b862d8dc504ff5</anchor>
      <arglist>(Relative *obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insertObject</name>
      <anchorfile>classpxl_1_1_object_manager.html</anchorfile>
      <anchor>a56047ba744052038894e21c2ce3f549a</anchor>
      <arglist>(Relative *obj, const std::string &amp;key)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setIndexEntry</name>
      <anchorfile>classpxl_1_1_object_manager.html</anchorfile>
      <anchor>aa0cb7e818bc10b94d4100e95192b483f</anchor>
      <arglist>(const std::string &amp;key, Relative *obj)</arglist>
    </member>
    <member kind="function">
      <type>ObjectOwner &amp;</type>
      <name>getObjectOwner</name>
      <anchorfile>classpxl_1_1_object_manager.html</anchorfile>
      <anchor>ad45c49c34ee75bd675857d22af49bc36</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ObjectOwner &amp;</type>
      <name>getObjectOwner</name>
      <anchorfile>classpxl_1_1_object_manager.html</anchorfile>
      <anchor>a555f045954f82fed896e833d752dd6bb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; Relative * &gt; &amp;</type>
      <name>getObjects</name>
      <anchorfile>classpxl_1_1_object_manager.html</anchorfile>
      <anchor>ab7aaeb59e68a34bd2f70cd1ee8f219f9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getObjectsOfType</name>
      <anchorfile>classpxl_1_1_object_manager.html</anchorfile>
      <anchor>a326cbe576dddc1abee93ba88c943400c</anchor>
      <arglist>(std::vector&lt; objecttype * &gt; &amp;vec) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeObject</name>
      <anchorfile>classpxl_1_1_object_manager.html</anchorfile>
      <anchor>a6d2ecf0d8c88cd2d300e737ca565b9bc</anchor>
      <arglist>(Relative *obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>takeObject</name>
      <anchorfile>classpxl_1_1_object_manager.html</anchorfile>
      <anchor>a997b25e8b80baac5b099f8366e16f03e</anchor>
      <arglist>(Relative *obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearObjects</name>
      <anchorfile>classpxl_1_1_object_manager.html</anchorfile>
      <anchor>a29accdf305964e94611cd866755cc30a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>objecttype *</type>
      <name>findObject</name>
      <anchorfile>classpxl_1_1_object_manager.html</anchorfile>
      <anchor>abd54ba43be0f458e4df4bf7ad6a3f499</anchor>
      <arglist>(const std::string key) const</arglist>
    </member>
    <member kind="function">
      <type>objecttype *</type>
      <name>findCopyOf</name>
      <anchorfile>classpxl_1_1_object_manager.html</anchorfile>
      <anchor>a9e3191cfc62b614788b0111f0c0b7dd9</anchor>
      <arglist>(const Relative *original) const</arglist>
    </member>
    <member kind="function">
      <type>const std::map&lt; Id, Relative * &gt; &amp;</type>
      <name>getCopyHistory</name>
      <anchorfile>classpxl_1_1_object_manager.html</anchorfile>
      <anchor>a0b6e868680ed72c14a3bddc5e535ab3c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearCopyHistory</name>
      <anchorfile>classpxl_1_1_object_manager.html</anchorfile>
      <anchor>a302c2b5833f897a7ff4491ba4bb64039</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const std::map&lt; std::string, Relative * &gt; &amp;</type>
      <name>getIndex</name>
      <anchorfile>classpxl_1_1_object_manager.html</anchorfile>
      <anchor>a0351e7dc05a1141c76a4d763f8474ff3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeIndexEntry</name>
      <anchorfile>classpxl_1_1_object_manager.html</anchorfile>
      <anchor>a11b471a5bd9009f4d80257c949113086</anchor>
      <arglist>(const std::string &amp;key)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearIndex</name>
      <anchorfile>classpxl_1_1_object_manager.html</anchorfile>
      <anchor>ae565bdd64538388084bc30bbe9611e06</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isLocked</name>
      <anchorfile>classpxl_1_1_object.html</anchorfile>
      <anchor>a584e513d1aada593146e4bb4dca8c1fa</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getWorkFlag</name>
      <anchorfile>classpxl_1_1_object.html</anchorfile>
      <anchor>a9e82ee54fca13b8818634ebd8adda493</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLocked</name>
      <anchorfile>classpxl_1_1_object.html</anchorfile>
      <anchor>a1b2dbf2aef26a3bc4a92735572649a94</anchor>
      <arglist>(bool v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setWorkFlag</name>
      <anchorfile>classpxl_1_1_object.html</anchorfile>
      <anchor>a91d83fb75b1a480ae8323e7b2a5276ad</anchor>
      <arglist>(int v)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::ostream &amp;</type>
      <name>printContent</name>
      <anchorfile>classpxl_1_1_object.html</anchorfile>
      <anchor>a434021cf01b990778a93f5144817de2d</anchor>
      <arglist>(int level=1, std::ostream &amp;os=std::cout, int pan=0) const</arglist>
    </member>
    <member kind="function">
      <type>Id</type>
      <name>id</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>a9bf6c17d6fd5b588c00463db4028870b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ObjectOwner *</type>
      <name>owner</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>a556c1cc09bed10e480cceb5da42edb33</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Relations &amp;</type>
      <name>getMotherRelations</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>a10f8728c388408f48a120e90de6298ae</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Relations &amp;</type>
      <name>getDaughterRelations</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>ae3b09cfe9057e042b88cf1adf6b4a036</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Relations &amp;</type>
      <name>getFlatRelations</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>aa8b871a98b21677ef5c159dbb608722d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Relative *</type>
      <name>getMother</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>a53a7b6b11409893dab8a73a0159180ec</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Relative *</type>
      <name>getDaughter</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>a6e7b03ed37eca69cd1063f78fd05b6dc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::set&lt; Relative * &gt; &amp;</type>
      <name>getDaughters</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>a6c4f5b97226fe562ef9144fa14f8c0f5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::set&lt; Relative * &gt; &amp;</type>
      <name>getMothers</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>a1728bea81bb0f966335f32c832a1cffa</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>numberOfDaughters</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>aa92bd45d2b1751fe3bfbbc79c8a21b32</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>numberOfMothers</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>aab1ec876cfe2f1bebf212b60f66ba907</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>linkMother</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>af3f916466c571dad5b0be5f4baded3b3</anchor>
      <arglist>(Relative *target)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>linkDaughter</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>a0a6244c26919bdd6fd45cbb8ea5a8f8b</anchor>
      <arglist>(Relative *target)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>linkFlat</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>a5ee923ece292e0d9268495af7590f060</anchor>
      <arglist>(Relative *target)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unlinkMother</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>a2b75c81e4078d147d36310fe7c3a4800</anchor>
      <arglist>(Relative *target)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unlinkDaughter</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>aaface8521be14a7fbb256ad786355ea4</anchor>
      <arglist>(Relative *target)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unlinkFlat</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>a4a4eba4935e47072056671728c2bd139</anchor>
      <arglist>(Relative *target)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unlinkFlat</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>a8d81b6131cc1532e3ba868e3509cb9b2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unlinkMothers</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>ad51348aae3792d8205823b46da02a564</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unlinkDaughters</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>a3bd2ff6a25aab01fda19df066bb492a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>linkSoft</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>a2ea79223a0f9d9edeeb8398b53ff6ab1</anchor>
      <arglist>(Relative *relative, const std::string &amp;type)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unlinkSoft</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>a1e870e37dbe2b384f85b138b5ec51e0e</anchor>
      <arglist>(Relative *relative, const std::string &amp;type)</arglist>
    </member>
    <member kind="function">
      <type>const SoftRelations &amp;</type>
      <name>getSoftRelations</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>ae5b78c9536de71abbb15a413e31f655e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>SoftRelations &amp;</type>
      <name>getSoftRelations</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>ab72e809de894954b8cc73ff768d757a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getName</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>a5384c8188f28913c4cc898571f133f32</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setName</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>a483a501afd8965daa92d3bafb91b4dfe</anchor>
      <arglist>(const std::string &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>printDecayTree</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>afa50de942d2caa47defa7e39a79df0a9</anchor>
      <arglist>(int level=0, std::ostream &amp;os=std::cout, int pan=1) const</arglist>
    </member>
    <member kind="function">
      <type>const Id &amp;</type>
      <name>getId</name>
      <anchorfile>classpxl_1_1_serializable.html</anchorfile>
      <anchor>a071e3e5bdd7125cee5dd5178807c3647</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const std::string</type>
      <name>toString</name>
      <anchorfile>classpxl_1_1_serializable.html</anchorfile>
      <anchor>abe42afdf47f4fa9cad94e26e9a3d6ba1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const UserRecords &amp;</type>
      <name>getUserRecords</name>
      <anchorfile>classpxl_1_1_user_record_helper.html</anchorfile>
      <anchor>ab7d2e9d7fd53f986163bff24ed9ec2e3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>UserRecords &amp;</type>
      <name>getUserRecords</name>
      <anchorfile>classpxl_1_1_user_record_helper.html</anchorfile>
      <anchor>aed523d427700d001e76af09b138f3355</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setUserRecords</name>
      <anchorfile>classpxl_1_1_user_record_helper.html</anchorfile>
      <anchor>a8bc754ecfd9c00f2a2ccb6395ac0891d</anchor>
      <arglist>(const UserRecords &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setUserRecord</name>
      <anchorfile>classpxl_1_1_user_record_helper.html</anchorfile>
      <anchor>af3ecea27c07445ab7dab72987672a8fd</anchor>
      <arglist>(const std::string &amp;key, const Variant &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>eraseUserRecord</name>
      <anchorfile>classpxl_1_1_user_record_helper.html</anchorfile>
      <anchor>a558dd61337c50bfd93af44f1c65867d7</anchor>
      <arglist>(const std::string &amp;key)</arglist>
    </member>
    <member kind="function">
      <type>const Variant &amp;</type>
      <name>getUserRecord</name>
      <anchorfile>classpxl_1_1_user_record_helper.html</anchorfile>
      <anchor>a0c4e05e6defb9e4eabb75a1aef41d300</anchor>
      <arglist>(const std::string &amp;key) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getUserRecord</name>
      <anchorfile>classpxl_1_1_user_record_helper.html</anchorfile>
      <anchor>a3df9f904d21e126a0527a81663f13ae8</anchor>
      <arglist>(const std::string &amp;key, datatype &amp;item) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasUserRecord</name>
      <anchorfile>classpxl_1_1_user_record_helper.html</anchorfile>
      <anchor>aeae48d210cf0dfd2a52fb7adcfc4bb41</anchor>
      <arglist>(const std::string &amp;key) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const Id &amp;</type>
      <name>getStaticTypeId</name>
      <anchorfile>classpxl_1_1_event_view.html</anchorfile>
      <anchor>a339c7aa86195d643c9af42a49da7bbc9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::ostream &amp;</type>
      <name>printPan1st</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>a589f7baac2ec1c61eeb4c2c1e3403526</anchor>
      <arglist>(std::ostream &amp;os, int pan) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::ostream &amp;</type>
      <name>printPan</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>a5038bd2b7584b9aacb4b7d0ac02b26fa</anchor>
      <arglist>(std::ostream &amp;os, int pan) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>FatJetSelector</name>
    <filename>class_fat_jet_selector.html</filename>
    <base>JetSelector</base>
    <member kind="function">
      <type></type>
      <name>FatJetSelector</name>
      <anchorfile>class_fat_jet_selector.html</anchorfile>
      <anchor>a57a9af5cb838c362eeb7bfc126e7d0ca</anchor>
      <arglist>(const Tools::MConfig &amp;cfg, OldNameMapper *globalOldNameMap)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>passObjectSelection</name>
      <anchorfile>class_jet_selector.html</anchorfile>
      <anchor>a772e7b2530d3404ec6235593a64f63e5</anchor>
      <arglist>(pxl::Particle *jet, double const jetRho, const std::string &amp;idType, const bool isSyst) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>passKinematics</name>
      <anchorfile>class_object_selector.html</anchorfile>
      <anchor>a96ba15ff2c5195e1797a1d3850c530a8</anchor>
      <arglist>(pxl::Particle *object, const bool isSyst=false) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setScaleFactors</name>
      <anchorfile>class_object_selector.html</anchorfile>
      <anchor>aa5e974f081f10a2e9ca4ab5569c22e7e</anchor>
      <arglist>(pxl::Particle *object)</arglist>
    </member>
    <member kind="variable">
      <type>OldNameMapper *</type>
      <name>oldNameMap</name>
      <anchorfile>class_object_selector.html</anchorfile>
      <anchor>a8944cd815366dde3b857d9b76e28b6bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool const</type>
      <name>m_jet_use</name>
      <anchorfile>class_jet_selector.html</anchorfile>
      <anchor>a08f8f4a89ded017d31134bae00699b28</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double const</type>
      <name>m_jet_pt_min</name>
      <anchorfile>class_jet_selector.html</anchorfile>
      <anchor>aa77641ead84845977a352d09c4da5ca7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool const</type>
      <name>m_jet_isPF</name>
      <anchorfile>class_jet_selector.html</anchorfile>
      <anchor>a66a554c463d11983b3941d6d464a5a54</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool const</type>
      <name>m_jet_ID_use</name>
      <anchorfile>class_jet_selector.html</anchorfile>
      <anchor>a7f11b86ff899614508a26879b76c78af</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string const</type>
      <name>m_jet_ID_type</name>
      <anchorfile>class_jet_selector.html</anchorfile>
      <anchor>a19d5f823bf9085e7453b93dee5f27882</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double const</type>
      <name>m_jet_gen_hadOverEm_min</name>
      <anchorfile>class_jet_selector.html</anchorfile>
      <anchor>a5255b8338bec5af5216468c583e087eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double const</type>
      <name>m_jet_gen_hadEFrac_min</name>
      <anchorfile>class_jet_selector.html</anchorfile>
      <anchor>a2e1dad1abf8829e9b3e8cb09db5f1d3f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double const</type>
      <name>m_jet_nHadEFrac_max</name>
      <anchorfile>class_jet_selector.html</anchorfile>
      <anchor>a8190b0e838b4bf8591ef5984e99c66e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double const</type>
      <name>m_jet_nEMEFrac_max</name>
      <anchorfile>class_jet_selector.html</anchorfile>
      <anchor>a78ad581acfcd769cf800c19700014cef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned long const</type>
      <name>m_jet_numConstituents_min</name>
      <anchorfile>class_jet_selector.html</anchorfile>
      <anchor>aede5a5150d37bedbabb00deedc9c8e5d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double const</type>
      <name>m_jet_cHadEFrac_min</name>
      <anchorfile>class_jet_selector.html</anchorfile>
      <anchor>a404a3583f07929a94b427e2c781e0b50</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double const</type>
      <name>m_jet_cEMEFrac_max</name>
      <anchorfile>class_jet_selector.html</anchorfile>
      <anchor>ac0a7f7a86b0e40d2041f0e02a1afa0f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned long const</type>
      <name>m_jet_cMultiplicity_min</name>
      <anchorfile>class_jet_selector.html</anchorfile>
      <anchor>a292bf25fb03637dcfe9d1a466b722f12</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_object_name</name>
      <anchorfile>class_object_selector.html</anchorfile>
      <anchor>a97be92d352eab8f1f7736e1210142697</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; ScaleFactor &gt;</type>
      <name>m_scale_factors</name>
      <anchorfile>class_object_selector.html</anchorfile>
      <anchor>acb033d208366dd65b0ee20215cde1eed</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>pxl::File</name>
    <filename>classpxl_1_1_file.html</filename>
    <base>pxl::FileImpl</base>
    <member kind="function">
      <type></type>
      <name>File</name>
      <anchorfile>classpxl_1_1_file.html</anchorfile>
      <anchor>adcd9b5a9e9273b79b397211483db393e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>File</name>
      <anchorfile>classpxl_1_1_file.html</anchorfile>
      <anchor>ae52cac994c16047c0bcd66d2eb902d52</anchor>
      <arglist>(const std::string &amp;filename, int32_t mode=OpenRead)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~File</name>
      <anchorfile>classpxl_1_1_file.html</anchorfile>
      <anchor>a0ef52fbb166aefbbc91ccfd4006284bd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>open</name>
      <anchorfile>classpxl_1_1_file.html</anchorfile>
      <anchor>a1143c7e4489e2d4a941c16b1e3c8b628</anchor>
      <arglist>(const std::string &amp;filename, int32_t mode=OpenRead)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>close</name>
      <anchorfile>classpxl_1_1_file.html</anchorfile>
      <anchor>a5f37c2a665a129456225a01f36d8365d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isEof</name>
      <anchorfile>classpxl_1_1_file.html</anchorfile>
      <anchor>aa46c0c349dca31cad2baa53f31bb9307</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isBad</name>
      <anchorfile>classpxl_1_1_file.html</anchorfile>
      <anchor>a18914704a13a7919b3cdbcefa149e114</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isOpen</name>
      <anchorfile>classpxl_1_1_file.html</anchorfile>
      <anchor>a62395ca119b8f40b206b4bb93e113dfb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>clear</name>
      <anchorfile>classpxl_1_1_file.html</anchorfile>
      <anchor>a55422e73ce856b5d9efa600d8b74c1a9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isGood</name>
      <anchorfile>classpxl_1_1_file.html</anchorfile>
      <anchor>aa8b16398b229cf8cf0e29d401fe9ff2c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int64_t</type>
      <name>tell</name>
      <anchorfile>classpxl_1_1_file.html</anchorfile>
      <anchor>ab4b56d30434dda3e378532f41491d2d7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>seek</name>
      <anchorfile>classpxl_1_1_file.html</anchorfile>
      <anchor>afb3f90c758499196aa32b385bfa378a6</anchor>
      <arglist>(int64_t pos, int32_t d=SeekBegin)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int32_t</type>
      <name>peek</name>
      <anchorfile>classpxl_1_1_file.html</anchorfile>
      <anchor>a63c627ce3d793730338db81ce3fcdf2b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int64_t</type>
      <name>read</name>
      <anchorfile>classpxl_1_1_file.html</anchorfile>
      <anchor>aee9505e290b1cd5514c3729b2d217db0</anchor>
      <arglist>(char *s, size_t count)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int64_t</type>
      <name>write</name>
      <anchorfile>classpxl_1_1_file.html</anchorfile>
      <anchor>ad4daf4c367e8505a191b70c27801f841</anchor>
      <arglist>(const char *s, size_t count)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ignore</name>
      <anchorfile>classpxl_1_1_file.html</anchorfile>
      <anchor>a54bc5d669077691ab6d505d489baeaa6</anchor>
      <arglist>(int64_t count)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>destroy</name>
      <anchorfile>classpxl_1_1_file.html</anchorfile>
      <anchor>aa463a38a9e3737c8360bc46f401eb4e5</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Tools::file_not_found</name>
    <filename>class_tools_1_1file__not__found.html</filename>
    <base>std::exception</base>
    <member kind="function">
      <type></type>
      <name>file_not_found</name>
      <anchorfile>class_tools_1_1file__not__found.html</anchorfile>
      <anchor>a24f56c1b9ca974f5c1eb97f36dd12d4e</anchor>
      <arglist>(std::string const &amp;filename, std::string const &amp;filetype=&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~file_not_found</name>
      <anchorfile>class_tools_1_1file__not__found.html</anchorfile>
      <anchor>a11be8264570c300cbfdfecb7350b97ff</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>what</name>
      <anchorfile>class_tools_1_1file__not__found.html</anchorfile>
      <anchor>a671f34842b13d9a5f352f62d62dc95ed</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>pxl::FileFactory</name>
    <filename>classpxl_1_1_file_factory.html</filename>
    <member kind="function">
      <type>FileImpl *</type>
      <name>create</name>
      <anchorfile>classpxl_1_1_file_factory.html</anchorfile>
      <anchor>aa4a38fa241e0f550f44fa97189439b62</anchor>
      <arglist>(const std::string &amp;id)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>registerProducer</name>
      <anchorfile>classpxl_1_1_file_factory.html</anchorfile>
      <anchor>a3662a0c96d081e21e4cdc0edea1de374</anchor>
      <arglist>(const std::string &amp;id, const FileProducerInterface *producer)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unregisterProducer</name>
      <anchorfile>classpxl_1_1_file_factory.html</anchorfile>
      <anchor>a14ae25429e8d20f75ba37b7b468a3148</anchor>
      <arglist>(const FileProducerInterface *producer)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasSchema</name>
      <anchorfile>classpxl_1_1_file_factory.html</anchorfile>
      <anchor>ae7b47624aa9c5eba1e8a472a98191a9c</anchor>
      <arglist>(const std::string &amp;schema)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static FileFactory &amp;</type>
      <name>instance</name>
      <anchorfile>classpxl_1_1_file_factory.html</anchorfile>
      <anchor>a7e9d2bde52cdd7a5c1f88bb2053404ac</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>pxl::FileImpl</name>
    <filename>classpxl_1_1_file_impl.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~FileImpl</name>
      <anchorfile>classpxl_1_1_file_impl.html</anchorfile>
      <anchor>afe96a65ce839046e21511b01fc131d3c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>open</name>
      <anchorfile>classpxl_1_1_file_impl.html</anchorfile>
      <anchor>aa7b099005045dd4b7150d4ffbcac11fa</anchor>
      <arglist>(const std::string &amp;filename, int32_t mode)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>close</name>
      <anchorfile>classpxl_1_1_file_impl.html</anchorfile>
      <anchor>ab6ab6b7f8e037aa2502682c8be570f19</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>isEof</name>
      <anchorfile>classpxl_1_1_file_impl.html</anchorfile>
      <anchor>ab38530abd987ec5ecceb72c0fdf0b06a</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>isBad</name>
      <anchorfile>classpxl_1_1_file_impl.html</anchorfile>
      <anchor>a950928181a552557c95bdbfbe3bad325</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>isOpen</name>
      <anchorfile>classpxl_1_1_file_impl.html</anchorfile>
      <anchor>a109dce0f179538fe0ee7b4a647b97bd7</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>clear</name>
      <anchorfile>classpxl_1_1_file_impl.html</anchorfile>
      <anchor>a62c90ef6e22003384a53883674431d91</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>isGood</name>
      <anchorfile>classpxl_1_1_file_impl.html</anchorfile>
      <anchor>a2c90ee66467c75b3dc73e26d51b2d91c</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int64_t</type>
      <name>tell</name>
      <anchorfile>classpxl_1_1_file_impl.html</anchorfile>
      <anchor>a839af0b6813b89fa84e42b099ac43234</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>seek</name>
      <anchorfile>classpxl_1_1_file_impl.html</anchorfile>
      <anchor>a7ed05d8398cb22148b885111476eecbb</anchor>
      <arglist>(int64_t pos, int32_t d=SeekBegin)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int32_t</type>
      <name>peek</name>
      <anchorfile>classpxl_1_1_file_impl.html</anchorfile>
      <anchor>ac7967fab4500e90cdd29864581d298b9</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int64_t</type>
      <name>read</name>
      <anchorfile>classpxl_1_1_file_impl.html</anchorfile>
      <anchor>a6c66f7da942061ebb5d145702aa6083c</anchor>
      <arglist>(char *s, size_t count)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int64_t</type>
      <name>write</name>
      <anchorfile>classpxl_1_1_file_impl.html</anchorfile>
      <anchor>a0049e58ecdce70ee8c12b30b3fd3df5b</anchor>
      <arglist>(const char *s, size_t count)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>ignore</name>
      <anchorfile>classpxl_1_1_file_impl.html</anchorfile>
      <anchor>acedfcdbbbd65aae3e97474fed42efecd</anchor>
      <arglist>(int64_t count)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>destroy</name>
      <anchorfile>classpxl_1_1_file_impl.html</anchorfile>
      <anchor>a21d9aa98b45f3bb729facd6fbea395df</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>pxl::FileProducerInterface</name>
    <filename>classpxl_1_1_file_producer_interface.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~FileProducerInterface</name>
      <anchorfile>classpxl_1_1_file_producer_interface.html</anchorfile>
      <anchor>aad531e32aa871a186796e12c44459b76</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual FileImpl *</type>
      <name>create</name>
      <anchorfile>classpxl_1_1_file_producer_interface.html</anchorfile>
      <anchor>a0cf912b4dc7d3ffd9485c37405c58061</anchor>
      <arglist>() const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>pxl::FileProducerTemplate</name>
    <filename>classpxl_1_1_file_producer_template.html</filename>
    <templarg></templarg>
    <base>pxl::FileProducerInterface</base>
    <member kind="function">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>classpxl_1_1_file_producer_template.html</anchorfile>
      <anchor>afdd58e72f35995aac3b38aba685de53b</anchor>
      <arglist>(const std::string &amp;schema)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>shutdown</name>
      <anchorfile>classpxl_1_1_file_producer_template.html</anchorfile>
      <anchor>af2ed4f283cb5b27023116668b52e0d2d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>FileImpl *</type>
      <name>create</name>
      <anchorfile>classpxl_1_1_file_producer_template.html</anchorfile>
      <anchor>a9ea4cd85f2876346115bd7e8769fd1f6</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>pxl::Filter</name>
    <filename>classpxl_1_1_filter.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Filter</name>
      <anchorfile>classpxl_1_1_filter.html</anchorfile>
      <anchor>a4ad337f871862ee1df0076c01e9f6c31</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual size_t</type>
      <name>apply</name>
      <anchorfile>classpxl_1_1_filter.html</anchorfile>
      <anchor>ae023ac5cf28b906e22560659c145cce6</anchor>
      <arglist>(const ObjectOwner &amp;objects, std::vector&lt; objecttype * &gt; &amp;fillVector, const FilterCriterionInterface&lt; objecttype &gt; &amp;criterion)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>pxl::FilterCriterionInterface</name>
    <filename>classpxl_1_1_filter_criterion_interface.html</filename>
    <templarg></templarg>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>operator()</name>
      <anchorfile>classpxl_1_1_filter_criterion_interface.html</anchorfile>
      <anchor>ac5587bc6266763ba4fccf1bcad0b9a9e</anchor>
      <arglist>(const objecttype &amp;) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~FilterCriterionInterface</name>
      <anchorfile>classpxl_1_1_filter_criterion_interface.html</anchorfile>
      <anchor>acbf59c33f4e976f86f76d1bba4a9c7fc</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>FilterCriterionInterface&lt; Particle &gt;</name>
    <filename>classpxl_1_1_filter_criterion_interface.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>operator()</name>
      <anchorfile>classpxl_1_1_filter_criterion_interface.html</anchorfile>
      <anchor>ac5587bc6266763ba4fccf1bcad0b9a9e</anchor>
      <arglist>(const Particle &amp;) const=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~FilterCriterionInterface</name>
      <anchorfile>classpxl_1_1_filter_criterion_interface.html</anchorfile>
      <anchor>acbf59c33f4e976f86f76d1bba4a9c7fc</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>FilterCriterionInterface&lt; pxl::Particle &gt;</name>
    <filename>classpxl_1_1_filter_criterion_interface.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>operator()</name>
      <anchorfile>classpxl_1_1_filter_criterion_interface.html</anchorfile>
      <anchor>ac5587bc6266763ba4fccf1bcad0b9a9e</anchor>
      <arglist>(const pxl::Particle &amp;) const=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~FilterCriterionInterface</name>
      <anchorfile>classpxl_1_1_filter_criterion_interface.html</anchorfile>
      <anchor>acbf59c33f4e976f86f76d1bba4a9c7fc</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GammaSelector</name>
    <filename>class_gamma_selector.html</filename>
    <base>ObjectSelector</base>
    <member kind="function">
      <type></type>
      <name>GammaSelector</name>
      <anchorfile>class_gamma_selector.html</anchorfile>
      <anchor>a9661a1746ac810c46c26219ab1d7210e</anchor>
      <arglist>(const Tools::MConfig &amp;cfg, OldNameMapper *globalOldNameMap)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~GammaSelector</name>
      <anchorfile>class_gamma_selector.html</anchorfile>
      <anchor>a4bfb14d166c37f11e388a324d6a0bba1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>passObjectSelection</name>
      <anchorfile>class_gamma_selector.html</anchorfile>
      <anchor>a67e6e0644d1e2d8d9b45f3198af6778d</anchor>
      <arglist>(pxl::Particle *gam, double const gamRho, const std::string &amp;idType, const bool isSyst) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>passKinematics</name>
      <anchorfile>class_object_selector.html</anchorfile>
      <anchor>a96ba15ff2c5195e1797a1d3850c530a8</anchor>
      <arglist>(pxl::Particle *object, const bool isSyst=false) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setScaleFactors</name>
      <anchorfile>class_object_selector.html</anchorfile>
      <anchor>aa5e974f081f10a2e9ca4ab5569c22e7e</anchor>
      <arglist>(pxl::Particle *object)</arglist>
    </member>
    <member kind="variable">
      <type>OldNameMapper *</type>
      <name>oldNameMap</name>
      <anchorfile>class_object_selector.html</anchorfile>
      <anchor>a8944cd815366dde3b857d9b76e28b6bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_object_name</name>
      <anchorfile>class_object_selector.html</anchorfile>
      <anchor>a97be92d352eab8f1f7736e1210142697</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; ScaleFactor &gt;</type>
      <name>m_scale_factors</name>
      <anchorfile>class_object_selector.html</anchorfile>
      <anchor>acb033d208366dd65b0ee20215cde1eed</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>pxl::GenericInputHandler</name>
    <filename>classpxl_1_1_generic_input_handler.html</filename>
    <base>pxl::InputHandler</base>
    <member kind="function">
      <type></type>
      <name>GenericInputHandler</name>
      <anchorfile>classpxl_1_1_generic_input_handler.html</anchorfile>
      <anchor>a8d6c59f94b75a9e54c66f3fb2a1b880d</anchor>
      <arglist>(ChunkReader &amp;reader)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~GenericInputHandler</name>
      <anchorfile>classpxl_1_1_generic_input_handler.html</anchorfile>
      <anchor>a6321053f76e050164424eb2f18ef3580</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ChunkReader &amp;</type>
      <name>getChunkReader</name>
      <anchorfile>classpxl_1_1_generic_input_handler.html</anchorfile>
      <anchor>abd147d60ea48f5317631c6ac5df149fd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setChunkReader</name>
      <anchorfile>classpxl_1_1_generic_input_handler.html</anchorfile>
      <anchor>a2d61f35e5c777ffef91227f224e493f4</anchor>
      <arglist>(ChunkReader *reader)</arglist>
    </member>
    <member kind="function">
      <type>unsigned long</type>
      <name>getSectionCount</name>
      <anchorfile>classpxl_1_1_input_handler.html</anchorfile>
      <anchor>a11ac4d648010645f8bc1888e8c26951b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>nextFileSection</name>
      <anchorfile>classpxl_1_1_input_handler.html</anchorfile>
      <anchor>aceac1f09334e1acdfb79f573d290253d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>nextFileSectionIf</name>
      <anchorfile>classpxl_1_1_input_handler.html</anchorfile>
      <anchor>a10a9a777703b9eed9a20f8902629412e</anchor>
      <arglist>(const std::string &amp;info, skipMode doSkip=on)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>readEvent</name>
      <anchorfile>classpxl_1_1_input_handler.html</anchorfile>
      <anchor>a93134c546c7f58e28ecba7f73c111a0e</anchor>
      <arglist>(Event *event)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>readEventIf</name>
      <anchorfile>classpxl_1_1_input_handler.html</anchorfile>
      <anchor>a3004d6fda71623a921729a84024f1ee9</anchor>
      <arglist>(Event *event, const std::string &amp;blockInfo, skipMode doSkip=on)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>readBasicContainer</name>
      <anchorfile>classpxl_1_1_input_handler.html</anchorfile>
      <anchor>a045966cbc08a8d84ffe1ae8c8cffa1f3</anchor>
      <arglist>(BasicContainer *basicContainer)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>readBasicContainerIf</name>
      <anchorfile>classpxl_1_1_input_handler.html</anchorfile>
      <anchor>a8ea143e4df33f62371a083b56782a8c1</anchor>
      <arglist>(BasicContainer *basicContainer, const std::string &amp;blockInfo, skipMode doSkip=on)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>readInformationChunk</name>
      <anchorfile>classpxl_1_1_input_handler.html</anchorfile>
      <anchor>a533858011acb44fedb61d39d2907b6b4</anchor>
      <arglist>(InformationChunk *chunk)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>readInformationChunkIf</name>
      <anchorfile>classpxl_1_1_input_handler.html</anchorfile>
      <anchor>a1b9495f30c18e58987a2bc0586727a16</anchor>
      <arglist>(InformationChunk *event, const std::string &amp;blockInfo, skipMode doSkip=on)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>skip</name>
      <anchorfile>classpxl_1_1_input_handler.html</anchorfile>
      <anchor>abbd9529482496067eea34632ea147fe8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>previous</name>
      <anchorfile>classpxl_1_1_input_handler.html</anchorfile>
      <anchor>ac1c94d22e40580f40f69344060389ef5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>skipFileSections</name>
      <anchorfile>classpxl_1_1_input_handler.html</anchorfile>
      <anchor>a2be884e47c3bcb1bae8d9da9d6907a31</anchor>
      <arglist>(int n)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>seekToFileSection</name>
      <anchorfile>classpxl_1_1_input_handler.html</anchorfile>
      <anchor>a687dedb636f2c38a30fae01a646ce179</anchor>
      <arglist>(int index)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>readBlock</name>
      <anchorfile>classpxl_1_1_input_handler.html</anchorfile>
      <anchor>a12081dde29e109d02c34423a5bbac815</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>readBlockIf</name>
      <anchorfile>classpxl_1_1_input_handler.html</anchorfile>
      <anchor>abe13a115c4896d62053ccaee526bf997</anchor>
      <arglist>(const std::string &amp;blockInfo, skipMode doSkip=on)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>readObject</name>
      <anchorfile>classpxl_1_1_input_handler.html</anchorfile>
      <anchor>ac018847652ee63143382a6430e81b96a</anchor>
      <arglist>(objecttype *obj)</arglist>
    </member>
    <member kind="function">
      <type>Serializable *</type>
      <name>seekToObject</name>
      <anchorfile>classpxl_1_1_input_handler.html</anchorfile>
      <anchor>a644562434d4a58f279657fc964a4164d</anchor>
      <arglist>(size_t index)</arglist>
    </member>
    <member kind="function">
      <type>Serializable *</type>
      <name>readNextObject</name>
      <anchorfile>classpxl_1_1_input_handler.html</anchorfile>
      <anchor>a0df5ee6f1eeedf06337df6b8f427aaf5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Serializable *</type>
      <name>readPreviousObject</name>
      <anchorfile>classpxl_1_1_input_handler.html</anchorfile>
      <anchor>a2569be1cce4b7c000fee2c274d6e40e9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>readObjects</name>
      <anchorfile>classpxl_1_1_input_handler.html</anchorfile>
      <anchor>a35b2cf0c84c82968fafda2171f3ec818</anchor>
      <arglist>(std::vector&lt; Serializable * &gt; &amp;objects)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>readObjects</name>
      <anchorfile>classpxl_1_1_input_handler.html</anchorfile>
      <anchor>af7ed1cf18808db8126c743e560deb076</anchor>
      <arglist>(BasicContainer *container)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>readObjects</name>
      <anchorfile>classpxl_1_1_input_handler.html</anchorfile>
      <anchor>a8defee7288e17f5f73fe8f7c4fe5bab3</anchor>
      <arglist>(Event *event)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>objectCount</name>
      <anchorfile>classpxl_1_1_input_handler.html</anchorfile>
      <anchor>a9f086768d30c3522ba8936586057b256</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classpxl_1_1_input_handler.html</anchorfile>
      <anchor>ac2400980a57a0650c38b871ada889715</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>getSize</name>
      <anchorfile>classpxl_1_1_input_handler.html</anchorfile>
      <anchor>a825f61894b086fef7c26d3a5ddcb582f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>getPosition</name>
      <anchorfile>classpxl_1_1_input_handler.html</anchorfile>
      <anchor>a7d7c69d66fac700c2725821ab45a4568</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>pxl::GenericOutputHandler</name>
    <filename>classpxl_1_1_generic_output_handler.html</filename>
    <base>pxl::OutputHandler</base>
    <member kind="function">
      <type></type>
      <name>GenericOutputHandler</name>
      <anchorfile>classpxl_1_1_generic_output_handler.html</anchorfile>
      <anchor>a8417c37d60e5b4a529fd82672281ff36</anchor>
      <arglist>(ChunkWriter &amp;writer)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~GenericOutputHandler</name>
      <anchorfile>classpxl_1_1_generic_output_handler.html</anchorfile>
      <anchor>a836e58cb08fd29e37e7906c90dbb7d9b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ChunkWriter &amp;</type>
      <name>getChunkWriter</name>
      <anchorfile>classpxl_1_1_generic_output_handler.html</anchorfile>
      <anchor>ab4cea8322def72328778495acc4e1e3a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setChunkWriter</name>
      <anchorfile>classpxl_1_1_generic_output_handler.html</anchorfile>
      <anchor>a59113dee1c85ae4f096fddddd5311b0d</anchor>
      <arglist>(ChunkWriter *writer)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>streamObject</name>
      <anchorfile>classpxl_1_1_output_handler.html</anchorfile>
      <anchor>a9b4b3a5a8461d9532dfb35b16a5570c4</anchor>
      <arglist>(const Serializable *obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeEvent</name>
      <anchorfile>classpxl_1_1_output_handler.html</anchorfile>
      <anchor>a718ea8389e8d3972f3972001c3a235c7</anchor>
      <arglist>(const Event *event)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeInformationChunk</name>
      <anchorfile>classpxl_1_1_output_handler.html</anchorfile>
      <anchor>ae08ba722ce3d0f69e91aa4ed167c88e3</anchor>
      <arglist>(const InformationChunk *infoChunk)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeBasicContainer</name>
      <anchorfile>classpxl_1_1_output_handler.html</anchorfile>
      <anchor>ae2343629547b573f4409bbfa1b34b57a</anchor>
      <arglist>(const BasicContainer *basicContainer)</arglist>
    </member>
    <member kind="function">
      <type>const BufferOutput &amp;</type>
      <name>getOutputStream</name>
      <anchorfile>classpxl_1_1_output_handler.html</anchorfile>
      <anchor>a7202ab950ab581595d8e614c853f4c87</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>newFileSection</name>
      <anchorfile>classpxl_1_1_output_handler.html</anchorfile>
      <anchor>a4d092fd007ddd8addbfb938b6ef734c6</anchor>
      <arglist>(const std::string &amp;info)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>writeStream</name>
      <anchorfile>classpxl_1_1_output_handler.html</anchorfile>
      <anchor>aa5c3d0064b9f438c98657e901595627f</anchor>
      <arglist>(const std::string &amp;info=&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>writeFileSection</name>
      <anchorfile>classpxl_1_1_output_handler.html</anchorfile>
      <anchor>a47838660300cc6230de8343b7b003db6</anchor>
      <arglist>(const std::string &amp;info=&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>finish</name>
      <anchorfile>classpxl_1_1_output_handler.html</anchorfile>
      <anchor>a924615554f3fa35e12d26b9ce3c9c8eb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMaxNObjects</name>
      <anchorfile>classpxl_1_1_output_handler.html</anchorfile>
      <anchor>acc2b5474647ba10c0898345246bd2859</anchor>
      <arglist>(size_t maxNObjects)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>getMaxNObjects</name>
      <anchorfile>classpxl_1_1_output_handler.html</anchorfile>
      <anchor>acae54d4e7f14a2846b64b7eae5766e34</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMaxSize</name>
      <anchorfile>classpxl_1_1_output_handler.html</anchorfile>
      <anchor>a0b7dfdea5c11a5705998e4d909133a38</anchor>
      <arglist>(size_t maxSize)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>getMaxSize</name>
      <anchorfile>classpxl_1_1_output_handler.html</anchorfile>
      <anchor>a667c162a19891483af8df2135fb83927</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GenRecNameMap</name>
    <filename>class_gen_rec_name_map.html</filename>
    <class kind="struct">GenRecNameMap::GenRecNamePair</class>
    <member kind="typedef">
      <type>std::map&lt; std::string, GenRecNamePair &gt;</type>
      <name>NameMap</name>
      <anchorfile>class_gen_rec_name_map.html</anchorfile>
      <anchor>a426a6314b8b342b38cf9f1afde68564f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>NameMap::const_iterator</type>
      <name>const_iterator</name>
      <anchorfile>class_gen_rec_name_map.html</anchorfile>
      <anchor>a7a074b314d87597e0b69d5672f7fc078</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenRecNameMap</name>
      <anchorfile>class_gen_rec_name_map.html</anchorfile>
      <anchor>ae4b34e3347d4d0f25ab74cb9f29e3c60</anchor>
      <arglist>(Tools::MConfig const &amp;cfg)</arglist>
    </member>
    <member kind="function">
      <type>GenRecNamePair const  &amp;</type>
      <name>get</name>
      <anchorfile>class_gen_rec_name_map.html</anchorfile>
      <anchor>a2ed9ef0bda06d750bd8a4ca8791f3355</anchor>
      <arglist>(std::string const &amp;object) const</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>begin</name>
      <anchorfile>class_gen_rec_name_map.html</anchorfile>
      <anchor>a3ced327b006be61d5ebf02e0abe445f0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>end</name>
      <anchorfile>class_gen_rec_name_map.html</anchorfile>
      <anchor>a76ddf71a9f12f95cc7df53caad269ae1</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>GenRecNameMap::GenRecNamePair</name>
    <filename>struct_gen_rec_name_map_1_1_gen_rec_name_pair.html</filename>
    <member kind="function">
      <type></type>
      <name>GenRecNamePair</name>
      <anchorfile>struct_gen_rec_name_map_1_1_gen_rec_name_pair.html</anchorfile>
      <anchor>ac15ff311734fc11e62b9f191509983c2</anchor>
      <arglist>(std::string const &amp;genName=&quot;&quot;, std::string const &amp;recName=&quot;&quot;)</arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>GenName</name>
      <anchorfile>struct_gen_rec_name_map_1_1_gen_rec_name_pair.html</anchorfile>
      <anchor>ac92d8338cd46903befc91571db64e987</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>RecName</name>
      <anchorfile>struct_gen_rec_name_map_1_1_gen_rec_name_pair.html</anchorfile>
      <anchor>a710f5930fc7457e289079283a160ebf2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>PdgId</name>
      <anchorfile>struct_gen_rec_name_map_1_1_gen_rec_name_pair.html</anchorfile>
      <anchor>ab200c723d895560aed50ad96fecc5ef7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GenSelector</name>
    <filename>class_gen_selector.html</filename>
    <member kind="typedef">
      <type>std::vector&lt; pxl::Particle * &gt;</type>
      <name>pxlParticles</name>
      <anchorfile>class_gen_selector.html</anchorfile>
      <anchor>a78c52619ff95fec7cbb725867092cd30</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenSelector</name>
      <anchorfile>class_gen_selector.html</anchorfile>
      <anchor>a14c6ae7bb994caa2946d755d61167a64</anchor>
      <arglist>(Tools::MConfig const &amp;cfg)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~GenSelector</name>
      <anchorfile>class_gen_selector.html</anchorfile>
      <anchor>aad3424b2cd7ba93aa2d219de25c449f3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>passGeneratorCuts</name>
      <anchorfile>class_gen_selector.html</anchorfile>
      <anchor>a97176dbac7c87e8496e07c2c24f58f38</anchor>
      <arglist>(pxl::EventView *EvtView) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GetAbsMethod</name>
    <filename>class_get_abs_method.html</filename>
    <templarg></templarg>
    <member kind="enumvalue">
      <name>method</name>
      <anchorfile>class_get_abs_method.html</anchorfile>
      <anchor>ac05027a97c37634301331d99c1978bfda2ef547b8e667c1e4fe10d9c4603777a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>method</name>
      <anchorfile>class_get_abs_method.html</anchorfile>
      <anchor>ac05027a97c37634301331d99c1978bfda2ef547b8e667c1e4fe10d9c4603777a3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GetCastMethod</name>
    <filename>class_get_cast_method.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="enumvalue">
      <name>method</name>
      <anchorfile>class_get_cast_method.html</anchorfile>
      <anchor>a04a83ab0fe8ae2517dc99da0f8225c3ba61ab83b41d7f7b66bd797dfc85957785</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>method</name>
      <anchorfile>class_get_cast_method.html</anchorfile>
      <anchor>a04a83ab0fe8ae2517dc99da0f8225c3ba61ab83b41d7f7b66bd797dfc85957785</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GetCastMethod&lt; double, FromType &gt;</name>
    <filename>class_get_cast_method_3_01double_00_01_from_type_01_4.html</filename>
    <templarg></templarg>
    <member kind="enumvalue">
      <name>method</name>
      <anchorfile>class_get_cast_method_3_01double_00_01_from_type_01_4.html</anchorfile>
      <anchor>a4cf3344604b4b2cf0a9284b055943f10a6587d1cf048731d27dc8bd6872e1178a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>method</name>
      <anchorfile>class_get_cast_method_3_01double_00_01_from_type_01_4.html</anchorfile>
      <anchor>a4cf3344604b4b2cf0a9284b055943f10a6587d1cf048731d27dc8bd6872e1178a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GetCastMethod&lt; float, FromType &gt;</name>
    <filename>class_get_cast_method_3_01float_00_01_from_type_01_4.html</filename>
    <templarg></templarg>
    <member kind="enumvalue">
      <name>method</name>
      <anchorfile>class_get_cast_method_3_01float_00_01_from_type_01_4.html</anchorfile>
      <anchor>a1a29871fb51fdaae22d401c6814030eaa1ba4c5d082c513b1123a573ca0075e75</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>method</name>
      <anchorfile>class_get_cast_method_3_01float_00_01_from_type_01_4.html</anchorfile>
      <anchor>a1a29871fb51fdaae22d401c6814030eaa1ba4c5d082c513b1123a573ca0075e75</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GetCastMethod&lt; long double, FromType &gt;</name>
    <filename>class_get_cast_method_3_01long_01double_00_01_from_type_01_4.html</filename>
    <templarg></templarg>
    <member kind="enumvalue">
      <name>method</name>
      <anchorfile>class_get_cast_method_3_01long_01double_00_01_from_type_01_4.html</anchorfile>
      <anchor>aa43e3985694889c7be256e542adf0f83ad18929ba9c17b9949c8e943fd28c1178</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>method</name>
      <anchorfile>class_get_cast_method_3_01long_01double_00_01_from_type_01_4.html</anchorfile>
      <anchor>aa43e3985694889c7be256e542adf0f83ad18929ba9c17b9949c8e943fd28c1178</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GetCastMethod&lt; ToType, double &gt;</name>
    <filename>class_get_cast_method_3_01_to_type_00_01double_01_4.html</filename>
    <templarg></templarg>
    <member kind="enumvalue">
      <name>method</name>
      <anchorfile>class_get_cast_method_3_01_to_type_00_01double_01_4.html</anchorfile>
      <anchor>a02afaab981ed3850dfd06268b3bfa5e4a9114d118a34466b12a42ffd97e62cfd7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>method</name>
      <anchorfile>class_get_cast_method_3_01_to_type_00_01double_01_4.html</anchorfile>
      <anchor>a02afaab981ed3850dfd06268b3bfa5e4a9114d118a34466b12a42ffd97e62cfd7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GetCastMethod&lt; ToType, float &gt;</name>
    <filename>class_get_cast_method_3_01_to_type_00_01float_01_4.html</filename>
    <templarg></templarg>
    <member kind="enumvalue">
      <name>method</name>
      <anchorfile>class_get_cast_method_3_01_to_type_00_01float_01_4.html</anchorfile>
      <anchor>a159a413bc8e559d880c16d6023c42f6ba9873325eb058940cc32504bf829e3d2b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>method</name>
      <anchorfile>class_get_cast_method_3_01_to_type_00_01float_01_4.html</anchorfile>
      <anchor>a159a413bc8e559d880c16d6023c42f6ba9873325eb058940cc32504bf829e3d2b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GetCastMethod&lt; ToType, long double &gt;</name>
    <filename>class_get_cast_method_3_01_to_type_00_01long_01double_01_4.html</filename>
    <templarg></templarg>
    <member kind="enumvalue">
      <name>method</name>
      <anchorfile>class_get_cast_method_3_01_to_type_00_01long_01double_01_4.html</anchorfile>
      <anchor>a18b6ac333fed5e6634e84cb722caf849a41cb992e8afce4fe80aa7a92ec0c17be</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>method</name>
      <anchorfile>class_get_cast_method_3_01_to_type_00_01long_01double_01_4.html</anchorfile>
      <anchor>a18b6ac333fed5e6634e84cb722caf849a41cb992e8afce4fe80aa7a92ec0c17be</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GreaterThanTest</name>
    <filename>class_greater_than_test.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg>state</templarg>
  </compound>
  <compound kind="class">
    <name>GreaterThanTest&lt; T, U, ComparisonMethod_CastInt &gt;</name>
    <filename>class_greater_than_test_3_01_t_00_01_u_00_01_comparison_method___cast_int_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>GreaterThan</name>
      <anchorfile>class_greater_than_test_3_01_t_00_01_u_00_01_comparison_method___cast_int_01_4.html</anchorfile>
      <anchor>a96577c56e8ec4e558da9defa1207eee5</anchor>
      <arglist>(const T t, const U u)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GreaterThanTest&lt; T, U, ComparisonMethod_CastInt64 &gt;</name>
    <filename>class_greater_than_test_3_01_t_00_01_u_00_01_comparison_method___cast_int64_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>GreaterThan</name>
      <anchorfile>class_greater_than_test_3_01_t_00_01_u_00_01_comparison_method___cast_int64_01_4.html</anchorfile>
      <anchor>a6cbf08d83aa6989454715531bb2388c0</anchor>
      <arglist>(const T t, const U u)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GreaterThanTest&lt; T, U, ComparisonMethod_Ok &gt;</name>
    <filename>class_greater_than_test_3_01_t_00_01_u_00_01_comparison_method___ok_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>GreaterThan</name>
      <anchorfile>class_greater_than_test_3_01_t_00_01_u_00_01_comparison_method___ok_01_4.html</anchorfile>
      <anchor>a93a639652c525c3aba44c467653e6047</anchor>
      <arglist>(const T t, const U u)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GreaterThanTest&lt; T, U, ComparisonMethod_UnsignedT &gt;</name>
    <filename>class_greater_than_test_3_01_t_00_01_u_00_01_comparison_method___unsigned_t_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>GreaterThan</name>
      <anchorfile>class_greater_than_test_3_01_t_00_01_u_00_01_comparison_method___unsigned_t_01_4.html</anchorfile>
      <anchor>ada8a4d09c95951de30078609204b9311</anchor>
      <arglist>(const T t, const U u)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GreaterThanTest&lt; T, U, ComparisonMethod_UnsignedU &gt;</name>
    <filename>class_greater_than_test_3_01_t_00_01_u_00_01_comparison_method___unsigned_u_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>GreaterThan</name>
      <anchorfile>class_greater_than_test_3_01_t_00_01_u_00_01_comparison_method___unsigned_u_01_4.html</anchorfile>
      <anchor>a1b0eba652f8ca97dbf99c54a2e053dd5</anchor>
      <arglist>(const T t, const U u)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>pxl::Hep</name>
    <filename>classpxl_1_1_hep.html</filename>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>initialize</name>
      <anchorfile>classpxl_1_1_hep.html</anchorfile>
      <anchor>a1e039b38b6d49d19531c4d5a4588703d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>shutdown</name>
      <anchorfile>classpxl_1_1_hep.html</anchorfile>
      <anchor>a4ed76fd82fbe4c669660f62da3e706df</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>pxl::Id</name>
    <filename>classpxl_1_1_id.html</filename>
    <member kind="function">
      <type></type>
      <name>Id</name>
      <anchorfile>classpxl_1_1_id.html</anchorfile>
      <anchor>a03d50ac32f2c135842ec8e95497baa56</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Id</name>
      <anchorfile>classpxl_1_1_id.html</anchorfile>
      <anchor>a79b2dcf38204c78c7aefe59c5d0177ae</anchor>
      <arglist>(const InputStream &amp;in)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Id</name>
      <anchorfile>classpxl_1_1_id.html</anchorfile>
      <anchor>ac6334024ce72f9ced6832535a74fad98</anchor>
      <arglist>(const char *id)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Id</name>
      <anchorfile>classpxl_1_1_id.html</anchorfile>
      <anchor>a5a98ccf94aac1a3cd50315399942afc1</anchor>
      <arglist>(const std::string &amp;id)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Id</name>
      <anchorfile>classpxl_1_1_id.html</anchorfile>
      <anchor>a59816f4ca31c35089c5adbf74ba4cca2</anchor>
      <arglist>(Random &amp;rand)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>generate</name>
      <anchorfile>classpxl_1_1_id.html</anchorfile>
      <anchor>a11beb0f18fa1955d75c114697ac14eb8</anchor>
      <arglist>(Random &amp;rand)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>generate</name>
      <anchorfile>classpxl_1_1_id.html</anchorfile>
      <anchor>a41dec0a0f214ba43d62debf0ca5d2f24</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classpxl_1_1_id.html</anchorfile>
      <anchor>ad220fa9aef0b89de224ed98fc2aed0c5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classpxl_1_1_id.html</anchorfile>
      <anchor>ab9742dee88b636653a237cb7e3e366fd</anchor>
      <arglist>(const Id &amp;id) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classpxl_1_1_id.html</anchorfile>
      <anchor>ac3f8c0d9245d0136dbaf09a72982391f</anchor>
      <arglist>(const Id &amp;id) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>classpxl_1_1_id.html</anchorfile>
      <anchor>a1ce71df76c8af9a52505beb4ded6f2ae</anchor>
      <arglist>(const Id &amp;op) const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>toString</name>
      <anchorfile>classpxl_1_1_id.html</anchorfile>
      <anchor>a4cda68c6207da92e3fdd24490b4e896f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>serialize</name>
      <anchorfile>classpxl_1_1_id.html</anchorfile>
      <anchor>aca869d8291527b4c219eacda1c67d777</anchor>
      <arglist>(const OutputStream &amp;out) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deserialize</name>
      <anchorfile>classpxl_1_1_id.html</anchorfile>
      <anchor>af8f531e81e9e753fb156652686876116</anchor>
      <arglist>(const InputStream &amp;in)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Id</type>
      <name>create</name>
      <anchorfile>classpxl_1_1_id.html</anchorfile>
      <anchor>ae6b82198721cf23d82e5436da363d935</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>idCacheStream</name>
    <filename>classid_cache_stream.html</filename>
    <base>std::istream</base>
    <member kind="function">
      <type></type>
      <name>idCacheStream</name>
      <anchorfile>classid_cache_stream.html</anchorfile>
      <anchor>a8d5e098262b24516246e8bcab896a627</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>idCacheStream</name>
      <anchorfile>classid_cache_stream.html</anchorfile>
      <anchor>aed2504be72e9ac5fed125125aca98009</anchor>
      <arglist>(const char *filename)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_open</name>
      <anchorfile>classid_cache_stream.html</anchorfile>
      <anchor>a64f65003ee66384bf66ef061495bf76a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>open</name>
      <anchorfile>classid_cache_stream.html</anchorfile>
      <anchor>a8f60e52d6ab689ca9001ff96d490fea9</anchor>
      <arglist>(const char *filename, unsigned int timeout=3600)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>close</name>
      <anchorfile>classid_cache_stream.html</anchorfile>
      <anchor>a8194a7e7556ba0f6b01870d01b09cb48</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>indicators::IndeterminateProgressBar</name>
    <filename>classindicators_1_1_indeterminate_progress_bar.html</filename>
    <member kind="function">
      <type></type>
      <name>IndeterminateProgressBar</name>
      <anchorfile>classindicators_1_1_indeterminate_progress_bar.html</anchorfile>
      <anchor>a6968d762198cfe596b1cb082f7cde4e0</anchor>
      <arglist>(Args &amp;&amp;...args)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_option</name>
      <anchorfile>classindicators_1_1_indeterminate_progress_bar.html</anchorfile>
      <anchor>a952991f48c9bcc69c84a3c1459152fe7</anchor>
      <arglist>(details::Setting&lt; T, id &gt; &amp;&amp;setting)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_option</name>
      <anchorfile>classindicators_1_1_indeterminate_progress_bar.html</anchorfile>
      <anchor>a15a8eab546ea4f8c85300432d27ad3cc</anchor>
      <arglist>(const details::Setting&lt; T, id &gt; &amp;setting)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_option</name>
      <anchorfile>classindicators_1_1_indeterminate_progress_bar.html</anchorfile>
      <anchor>a9581a10119846ebb5f9f9155e68fa473</anchor>
      <arglist>(const details::Setting&lt; std::string, details::ProgressBarOption::postfix_text &gt; &amp;setting)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_option</name>
      <anchorfile>classindicators_1_1_indeterminate_progress_bar.html</anchorfile>
      <anchor>a3716665a78c96ed5d27f6c7d90f116be</anchor>
      <arglist>(details::Setting&lt; std::string, details::ProgressBarOption::postfix_text &gt; &amp;&amp;setting)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>tick</name>
      <anchorfile>classindicators_1_1_indeterminate_progress_bar.html</anchorfile>
      <anchor>aee1d2e5256dbce5a6388767d5a7233c3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_completed</name>
      <anchorfile>classindicators_1_1_indeterminate_progress_bar.html</anchorfile>
      <anchor>a711958e3371909444013d47970749d44</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mark_as_completed</name>
      <anchorfile>classindicators_1_1_indeterminate_progress_bar.html</anchorfile>
      <anchor>a1769481f500119d304d2892594e2e275</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print_progress</name>
      <anchorfile>classindicators_1_1_indeterminate_progress_bar.html</anchorfile>
      <anchor>a2f65c6adde35920002fb28148692f6ba</anchor>
      <arglist>(bool from_multi_progress=false)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>MultiProgress</name>
      <anchorfile>classindicators_1_1_indeterminate_progress_bar.html</anchorfile>
      <anchor>aba0b639557318697577be3d2cda61d35</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>DynamicProgress</name>
      <anchorfile>classindicators_1_1_indeterminate_progress_bar.html</anchorfile>
      <anchor>a4d812065d3c70107a193597cf718dc24</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>indicators::details::IndeterminateProgressScaleWriter</name>
    <filename>classindicators_1_1details_1_1_indeterminate_progress_scale_writer.html</filename>
    <member kind="function">
      <type></type>
      <name>IndeterminateProgressScaleWriter</name>
      <anchorfile>classindicators_1_1details_1_1_indeterminate_progress_scale_writer.html</anchorfile>
      <anchor>a7326d7dba8ebcd9d47f38a6388e1c11e</anchor>
      <arglist>(std::ostream &amp;os, size_t bar_width, const std::string &amp;fill, const std::string &amp;lead)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>write</name>
      <anchorfile>classindicators_1_1details_1_1_indeterminate_progress_scale_writer.html</anchorfile>
      <anchor>a9be726a84b13d1284e93180b9f3b0019</anchor>
      <arglist>(size_t progress)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>pxl::InformationChunk</name>
    <filename>classpxl_1_1_information_chunk.html</filename>
    <base>pxl::Serializable</base>
    <base>pxl::UserRecordHelper</base>
    <member kind="function" virtualness="virtual">
      <type>virtual const Id &amp;</type>
      <name>getTypeId</name>
      <anchorfile>classpxl_1_1_information_chunk.html</anchorfile>
      <anchor>ad00f9e4c2ddaf4ada2fd21c940146838</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classpxl_1_1_information_chunk.html</anchorfile>
      <anchor>a1b10e0a1bd1b061161261b15fe6da35a</anchor>
      <arglist>(const OutputStream &amp;out) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>deserialize</name>
      <anchorfile>classpxl_1_1_information_chunk.html</anchorfile>
      <anchor>af0677579193ea2e401115c55d627127e</anchor>
      <arglist>(const InputStream &amp;in)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Serializable *</type>
      <name>clone</name>
      <anchorfile>classpxl_1_1_information_chunk.html</anchorfile>
      <anchor>a4559f8948cda1e45bc577a2b18b32f8b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setName</name>
      <anchorfile>classpxl_1_1_information_chunk.html</anchorfile>
      <anchor>a9ae1de2c5d387fb932e55676c63d1b48</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getName</name>
      <anchorfile>classpxl_1_1_information_chunk.html</anchorfile>
      <anchor>afde3966eee34ac2087c775256e430aa8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Id &amp;</type>
      <name>getId</name>
      <anchorfile>classpxl_1_1_serializable.html</anchorfile>
      <anchor>a071e3e5bdd7125cee5dd5178807c3647</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::ostream &amp;</type>
      <name>print</name>
      <anchorfile>classpxl_1_1_serializable.html</anchorfile>
      <anchor>a1de4073599f70247eaaf7e33b2a729f8</anchor>
      <arglist>(int level=1, std::ostream &amp;os=std::cout, int pan=1) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const std::string</type>
      <name>toString</name>
      <anchorfile>classpxl_1_1_serializable.html</anchorfile>
      <anchor>abe42afdf47f4fa9cad94e26e9a3d6ba1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const UserRecords &amp;</type>
      <name>getUserRecords</name>
      <anchorfile>classpxl_1_1_user_record_helper.html</anchorfile>
      <anchor>ab7d2e9d7fd53f986163bff24ed9ec2e3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>UserRecords &amp;</type>
      <name>getUserRecords</name>
      <anchorfile>classpxl_1_1_user_record_helper.html</anchorfile>
      <anchor>aed523d427700d001e76af09b138f3355</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setUserRecords</name>
      <anchorfile>classpxl_1_1_user_record_helper.html</anchorfile>
      <anchor>a8bc754ecfd9c00f2a2ccb6395ac0891d</anchor>
      <arglist>(const UserRecords &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setUserRecord</name>
      <anchorfile>classpxl_1_1_user_record_helper.html</anchorfile>
      <anchor>af3ecea27c07445ab7dab72987672a8fd</anchor>
      <arglist>(const std::string &amp;key, const Variant &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>eraseUserRecord</name>
      <anchorfile>classpxl_1_1_user_record_helper.html</anchorfile>
      <anchor>a558dd61337c50bfd93af44f1c65867d7</anchor>
      <arglist>(const std::string &amp;key)</arglist>
    </member>
    <member kind="function">
      <type>const Variant &amp;</type>
      <name>getUserRecord</name>
      <anchorfile>classpxl_1_1_user_record_helper.html</anchorfile>
      <anchor>a0c4e05e6defb9e4eabb75a1aef41d300</anchor>
      <arglist>(const std::string &amp;key) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getUserRecord</name>
      <anchorfile>classpxl_1_1_user_record_helper.html</anchorfile>
      <anchor>a3df9f904d21e126a0527a81663f13ae8</anchor>
      <arglist>(const std::string &amp;key, datatype &amp;item) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasUserRecord</name>
      <anchorfile>classpxl_1_1_user_record_helper.html</anchorfile>
      <anchor>aeae48d210cf0dfd2a52fb7adcfc4bb41</anchor>
      <arglist>(const std::string &amp;key) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const Id &amp;</type>
      <name>getStaticTypeId</name>
      <anchorfile>classpxl_1_1_information_chunk.html</anchorfile>
      <anchor>a7fe5ed6c7c811c83a7c679f4d8dfe55b</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>pxl::InputFile</name>
    <filename>classpxl_1_1_input_file.html</filename>
    <base>pxl::InputHandler</base>
    <member kind="function">
      <type></type>
      <name>InputFile</name>
      <anchorfile>classpxl_1_1_input_file.html</anchorfile>
      <anchor>a79a3a1330832f32a1b56d5517b3adfaa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>InputFile</name>
      <anchorfile>classpxl_1_1_input_file.html</anchorfile>
      <anchor>a0576210b278162c251d009ba2c8c2ab8</anchor>
      <arglist>(const std::string &amp;filename)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>open</name>
      <anchorfile>classpxl_1_1_input_file.html</anchorfile>
      <anchor>af763722c2461f7a2d5cd74b30a70ed06</anchor>
      <arglist>(const std::string &amp;filename)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>close</name>
      <anchorfile>classpxl_1_1_input_file.html</anchorfile>
      <anchor>a6c7eaf7d2c4239e1f0c67c4178bda3b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~InputFile</name>
      <anchorfile>classpxl_1_1_input_file.html</anchorfile>
      <anchor>aa1f15730ff8ad447bf6042385c943c01</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ChunkReader &amp;</type>
      <name>getChunkReader</name>
      <anchorfile>classpxl_1_1_input_file.html</anchorfile>
      <anchor>adb934c41f26078ace2185c28506544d3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>good</name>
      <anchorfile>classpxl_1_1_input_file.html</anchorfile>
      <anchor>ac930b409a4d86b12a3a494a47a30b1a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>eof</name>
      <anchorfile>classpxl_1_1_input_file.html</anchorfile>
      <anchor>aa9020a0c17457c1bbc557c9430022ea5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>bad</name>
      <anchorfile>classpxl_1_1_input_file.html</anchorfile>
      <anchor>a160654fac3e215f2d22218fbfc0cd45c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>unsigned long</type>
      <name>getSectionCount</name>
      <anchorfile>classpxl_1_1_input_handler.html</anchorfile>
      <anchor>a11ac4d648010645f8bc1888e8c26951b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>nextFileSection</name>
      <anchorfile>classpxl_1_1_input_handler.html</anchorfile>
      <anchor>aceac1f09334e1acdfb79f573d290253d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>nextFileSectionIf</name>
      <anchorfile>classpxl_1_1_input_handler.html</anchorfile>
      <anchor>a10a9a777703b9eed9a20f8902629412e</anchor>
      <arglist>(const std::string &amp;info, skipMode doSkip=on)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>readEvent</name>
      <anchorfile>classpxl_1_1_input_handler.html</anchorfile>
      <anchor>a93134c546c7f58e28ecba7f73c111a0e</anchor>
      <arglist>(Event *event)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>readEventIf</name>
      <anchorfile>classpxl_1_1_input_handler.html</anchorfile>
      <anchor>a3004d6fda71623a921729a84024f1ee9</anchor>
      <arglist>(Event *event, const std::string &amp;blockInfo, skipMode doSkip=on)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>readBasicContainer</name>
      <anchorfile>classpxl_1_1_input_handler.html</anchorfile>
      <anchor>a045966cbc08a8d84ffe1ae8c8cffa1f3</anchor>
      <arglist>(BasicContainer *basicContainer)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>readBasicContainerIf</name>
      <anchorfile>classpxl_1_1_input_handler.html</anchorfile>
      <anchor>a8ea143e4df33f62371a083b56782a8c1</anchor>
      <arglist>(BasicContainer *basicContainer, const std::string &amp;blockInfo, skipMode doSkip=on)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>readInformationChunk</name>
      <anchorfile>classpxl_1_1_input_handler.html</anchorfile>
      <anchor>a533858011acb44fedb61d39d2907b6b4</anchor>
      <arglist>(InformationChunk *chunk)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>readInformationChunkIf</name>
      <anchorfile>classpxl_1_1_input_handler.html</anchorfile>
      <anchor>a1b9495f30c18e58987a2bc0586727a16</anchor>
      <arglist>(InformationChunk *event, const std::string &amp;blockInfo, skipMode doSkip=on)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>skip</name>
      <anchorfile>classpxl_1_1_input_handler.html</anchorfile>
      <anchor>abbd9529482496067eea34632ea147fe8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>previous</name>
      <anchorfile>classpxl_1_1_input_handler.html</anchorfile>
      <anchor>ac1c94d22e40580f40f69344060389ef5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>skipFileSections</name>
      <anchorfile>classpxl_1_1_input_handler.html</anchorfile>
      <anchor>a2be884e47c3bcb1bae8d9da9d6907a31</anchor>
      <arglist>(int n)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>seekToFileSection</name>
      <anchorfile>classpxl_1_1_input_handler.html</anchorfile>
      <anchor>a687dedb636f2c38a30fae01a646ce179</anchor>
      <arglist>(int index)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>readBlock</name>
      <anchorfile>classpxl_1_1_input_handler.html</anchorfile>
      <anchor>a12081dde29e109d02c34423a5bbac815</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>readBlockIf</name>
      <anchorfile>classpxl_1_1_input_handler.html</anchorfile>
      <anchor>abe13a115c4896d62053ccaee526bf997</anchor>
      <arglist>(const std::string &amp;blockInfo, skipMode doSkip=on)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>readObject</name>
      <anchorfile>classpxl_1_1_input_handler.html</anchorfile>
      <anchor>ac018847652ee63143382a6430e81b96a</anchor>
      <arglist>(objecttype *obj)</arglist>
    </member>
    <member kind="function">
      <type>Serializable *</type>
      <name>seekToObject</name>
      <anchorfile>classpxl_1_1_input_handler.html</anchorfile>
      <anchor>a644562434d4a58f279657fc964a4164d</anchor>
      <arglist>(size_t index)</arglist>
    </member>
    <member kind="function">
      <type>Serializable *</type>
      <name>readNextObject</name>
      <anchorfile>classpxl_1_1_input_handler.html</anchorfile>
      <anchor>a0df5ee6f1eeedf06337df6b8f427aaf5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Serializable *</type>
      <name>readPreviousObject</name>
      <anchorfile>classpxl_1_1_input_handler.html</anchorfile>
      <anchor>a2569be1cce4b7c000fee2c274d6e40e9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>readObjects</name>
      <anchorfile>classpxl_1_1_input_handler.html</anchorfile>
      <anchor>a35b2cf0c84c82968fafda2171f3ec818</anchor>
      <arglist>(std::vector&lt; Serializable * &gt; &amp;objects)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>readObjects</name>
      <anchorfile>classpxl_1_1_input_handler.html</anchorfile>
      <anchor>af7ed1cf18808db8126c743e560deb076</anchor>
      <arglist>(BasicContainer *container)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>readObjects</name>
      <anchorfile>classpxl_1_1_input_handler.html</anchorfile>
      <anchor>a8defee7288e17f5f73fe8f7c4fe5bab3</anchor>
      <arglist>(Event *event)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>objectCount</name>
      <anchorfile>classpxl_1_1_input_handler.html</anchorfile>
      <anchor>a9f086768d30c3522ba8936586057b256</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classpxl_1_1_input_handler.html</anchorfile>
      <anchor>ac2400980a57a0650c38b871ada889715</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>getSize</name>
      <anchorfile>classpxl_1_1_input_handler.html</anchorfile>
      <anchor>a825f61894b086fef7c26d3a5ddcb582f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>getPosition</name>
      <anchorfile>classpxl_1_1_input_handler.html</anchorfile>
      <anchor>a7d7c69d66fac700c2725821ab45a4568</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>pxl::InputHandler</name>
    <filename>classpxl_1_1_input_handler.html</filename>
    <member kind="function">
      <type></type>
      <name>InputHandler</name>
      <anchorfile>classpxl_1_1_input_handler.html</anchorfile>
      <anchor>ad6b8acccbb6456c0ac0c31f776e386b6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~InputHandler</name>
      <anchorfile>classpxl_1_1_input_handler.html</anchorfile>
      <anchor>a5f4f972c2ffa400c3026808111d65326</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ChunkReader &amp;</type>
      <name>getChunkReader</name>
      <anchorfile>classpxl_1_1_input_handler.html</anchorfile>
      <anchor>ab9303dab5d4a2ca35664b83fdea1a8e1</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <type>unsigned long</type>
      <name>getSectionCount</name>
      <anchorfile>classpxl_1_1_input_handler.html</anchorfile>
      <anchor>a11ac4d648010645f8bc1888e8c26951b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>nextFileSection</name>
      <anchorfile>classpxl_1_1_input_handler.html</anchorfile>
      <anchor>aceac1f09334e1acdfb79f573d290253d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>nextFileSectionIf</name>
      <anchorfile>classpxl_1_1_input_handler.html</anchorfile>
      <anchor>a10a9a777703b9eed9a20f8902629412e</anchor>
      <arglist>(const std::string &amp;info, skipMode doSkip=on)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>readEvent</name>
      <anchorfile>classpxl_1_1_input_handler.html</anchorfile>
      <anchor>a93134c546c7f58e28ecba7f73c111a0e</anchor>
      <arglist>(Event *event)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>readEventIf</name>
      <anchorfile>classpxl_1_1_input_handler.html</anchorfile>
      <anchor>a3004d6fda71623a921729a84024f1ee9</anchor>
      <arglist>(Event *event, const std::string &amp;blockInfo, skipMode doSkip=on)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>readBasicContainer</name>
      <anchorfile>classpxl_1_1_input_handler.html</anchorfile>
      <anchor>a045966cbc08a8d84ffe1ae8c8cffa1f3</anchor>
      <arglist>(BasicContainer *basicContainer)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>readBasicContainerIf</name>
      <anchorfile>classpxl_1_1_input_handler.html</anchorfile>
      <anchor>a8ea143e4df33f62371a083b56782a8c1</anchor>
      <arglist>(BasicContainer *basicContainer, const std::string &amp;blockInfo, skipMode doSkip=on)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>readInformationChunk</name>
      <anchorfile>classpxl_1_1_input_handler.html</anchorfile>
      <anchor>a533858011acb44fedb61d39d2907b6b4</anchor>
      <arglist>(InformationChunk *chunk)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>readInformationChunkIf</name>
      <anchorfile>classpxl_1_1_input_handler.html</anchorfile>
      <anchor>a1b9495f30c18e58987a2bc0586727a16</anchor>
      <arglist>(InformationChunk *event, const std::string &amp;blockInfo, skipMode doSkip=on)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>skip</name>
      <anchorfile>classpxl_1_1_input_handler.html</anchorfile>
      <anchor>abbd9529482496067eea34632ea147fe8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>previous</name>
      <anchorfile>classpxl_1_1_input_handler.html</anchorfile>
      <anchor>ac1c94d22e40580f40f69344060389ef5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>skipFileSections</name>
      <anchorfile>classpxl_1_1_input_handler.html</anchorfile>
      <anchor>a2be884e47c3bcb1bae8d9da9d6907a31</anchor>
      <arglist>(int n)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>seekToFileSection</name>
      <anchorfile>classpxl_1_1_input_handler.html</anchorfile>
      <anchor>a687dedb636f2c38a30fae01a646ce179</anchor>
      <arglist>(int index)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>readBlock</name>
      <anchorfile>classpxl_1_1_input_handler.html</anchorfile>
      <anchor>a12081dde29e109d02c34423a5bbac815</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>readBlockIf</name>
      <anchorfile>classpxl_1_1_input_handler.html</anchorfile>
      <anchor>abe13a115c4896d62053ccaee526bf997</anchor>
      <arglist>(const std::string &amp;blockInfo, skipMode doSkip=on)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>readObject</name>
      <anchorfile>classpxl_1_1_input_handler.html</anchorfile>
      <anchor>ac018847652ee63143382a6430e81b96a</anchor>
      <arglist>(objecttype *obj)</arglist>
    </member>
    <member kind="function">
      <type>Serializable *</type>
      <name>seekToObject</name>
      <anchorfile>classpxl_1_1_input_handler.html</anchorfile>
      <anchor>a644562434d4a58f279657fc964a4164d</anchor>
      <arglist>(size_t index)</arglist>
    </member>
    <member kind="function">
      <type>Serializable *</type>
      <name>readNextObject</name>
      <anchorfile>classpxl_1_1_input_handler.html</anchorfile>
      <anchor>a0df5ee6f1eeedf06337df6b8f427aaf5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Serializable *</type>
      <name>readPreviousObject</name>
      <anchorfile>classpxl_1_1_input_handler.html</anchorfile>
      <anchor>a2569be1cce4b7c000fee2c274d6e40e9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>readObjects</name>
      <anchorfile>classpxl_1_1_input_handler.html</anchorfile>
      <anchor>a35b2cf0c84c82968fafda2171f3ec818</anchor>
      <arglist>(std::vector&lt; Serializable * &gt; &amp;objects)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>readObjects</name>
      <anchorfile>classpxl_1_1_input_handler.html</anchorfile>
      <anchor>af7ed1cf18808db8126c743e560deb076</anchor>
      <arglist>(BasicContainer *container)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>readObjects</name>
      <anchorfile>classpxl_1_1_input_handler.html</anchorfile>
      <anchor>a8defee7288e17f5f73fe8f7c4fe5bab3</anchor>
      <arglist>(Event *event)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>objectCount</name>
      <anchorfile>classpxl_1_1_input_handler.html</anchorfile>
      <anchor>a9f086768d30c3522ba8936586057b256</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classpxl_1_1_input_handler.html</anchorfile>
      <anchor>ac2400980a57a0650c38b871ada889715</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>getSize</name>
      <anchorfile>classpxl_1_1_input_handler.html</anchorfile>
      <anchor>a825f61894b086fef7c26d3a5ddcb582f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>getPosition</name>
      <anchorfile>classpxl_1_1_input_handler.html</anchorfile>
      <anchor>a7d7c69d66fac700c2725821ab45a4568</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>pxl::InputStream</name>
    <filename>classpxl_1_1_input_stream.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~InputStream</name>
      <anchorfile>classpxl_1_1_input_stream.html</anchorfile>
      <anchor>a663830acf6fcea54a4caa6797f2b49a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>read</name>
      <anchorfile>classpxl_1_1_input_stream.html</anchorfile>
      <anchor>a113c56ec364a602b0841d0d069e0cafd</anchor>
      <arglist>(void *data, size_t size) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>good</name>
      <anchorfile>classpxl_1_1_input_stream.html</anchorfile>
      <anchor>a97976e17ab1ae90aacfa88c7682070ad</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read</name>
      <anchorfile>classpxl_1_1_input_stream.html</anchorfile>
      <anchor>a6633804c6b5710e4d728cb272cc41048</anchor>
      <arglist>(char &amp;i) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read</name>
      <anchorfile>classpxl_1_1_input_stream.html</anchorfile>
      <anchor>a0e21a655126e41b9e1a784e25015e996</anchor>
      <arglist>(unsigned char &amp;i) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read</name>
      <anchorfile>classpxl_1_1_input_stream.html</anchorfile>
      <anchor>afa5bfd62418bdb2a335a3035a4e90119</anchor>
      <arglist>(int16_t &amp;i) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read</name>
      <anchorfile>classpxl_1_1_input_stream.html</anchorfile>
      <anchor>ac3636f8e737866bd10bff4b4de887abc</anchor>
      <arglist>(uint16_t &amp;i) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read</name>
      <anchorfile>classpxl_1_1_input_stream.html</anchorfile>
      <anchor>abd73ec066cfa1f7858ec492b19666031</anchor>
      <arglist>(int32_t &amp;i) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read</name>
      <anchorfile>classpxl_1_1_input_stream.html</anchorfile>
      <anchor>ae6ae5cccf9265f0a6c72f8fb3c44b131</anchor>
      <arglist>(uint32_t &amp;i) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read</name>
      <anchorfile>classpxl_1_1_input_stream.html</anchorfile>
      <anchor>a195718a73c741c3b451f2f02e10c84b0</anchor>
      <arglist>(int64_t &amp;i) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read</name>
      <anchorfile>classpxl_1_1_input_stream.html</anchorfile>
      <anchor>a39df37d6f860db25b64dc39d57457b0c</anchor>
      <arglist>(uint64_t &amp;i) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>readChar</name>
      <anchorfile>classpxl_1_1_input_stream.html</anchorfile>
      <anchor>aaf11c702e720f9ac943b874325774311</anchor>
      <arglist>(char &amp;c) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>readUnsignedChar</name>
      <anchorfile>classpxl_1_1_input_stream.html</anchorfile>
      <anchor>a8eb16a166889f58b29ee31abb81cadcc</anchor>
      <arglist>(unsigned char &amp;c) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>readInt</name>
      <anchorfile>classpxl_1_1_input_stream.html</anchorfile>
      <anchor>a82fddb373cf861cf6ba4e92f1a2d193f</anchor>
      <arglist>(int &amp;i) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>readUnsignedInt</name>
      <anchorfile>classpxl_1_1_input_stream.html</anchorfile>
      <anchor>a7f6e0c70a2a96adaf6df8a09c490725f</anchor>
      <arglist>(unsigned int &amp;i) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>readLong</name>
      <anchorfile>classpxl_1_1_input_stream.html</anchorfile>
      <anchor>a0936ab4b82b8a48edc79ce1b8d48696e</anchor>
      <arglist>(long &amp;l) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>readUnsignedLong</name>
      <anchorfile>classpxl_1_1_input_stream.html</anchorfile>
      <anchor>aeab512b2f84364577677972d5f864d81</anchor>
      <arglist>(unsigned long &amp;l) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>readShort</name>
      <anchorfile>classpxl_1_1_input_stream.html</anchorfile>
      <anchor>a78c845b5693c96c73e4dfa19247bf1c8</anchor>
      <arglist>(short &amp;i) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>readUnsignedShort</name>
      <anchorfile>classpxl_1_1_input_stream.html</anchorfile>
      <anchor>aa30a8f1e6a6a4fdc6bd67c2191146ab8</anchor>
      <arglist>(unsigned short &amp;i) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>readBool</name>
      <anchorfile>classpxl_1_1_input_stream.html</anchorfile>
      <anchor>a8d85c7d87cf5b62fe6ab6fc835fa7533</anchor>
      <arglist>(bool &amp;b) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>readString</name>
      <anchorfile>classpxl_1_1_input_stream.html</anchorfile>
      <anchor>a2bbe96189fe3f54dc8047bb4e896fbdd</anchor>
      <arglist>(std::string &amp;s) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>readFloat</name>
      <anchorfile>classpxl_1_1_input_stream.html</anchorfile>
      <anchor>aeb07ba2fc70160072d8d448a8dd182bf</anchor>
      <arglist>(float &amp;i) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>readDouble</name>
      <anchorfile>classpxl_1_1_input_stream.html</anchorfile>
      <anchor>a6965693a86b7bad23cfdd864a4049e0a</anchor>
      <arglist>(double &amp;i) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IntRegion</name>
    <filename>class_int_region.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="enumvalue">
      <name>IntZone_UintLT32_UintLT32</name>
      <anchorfile>class_int_region.html</anchorfile>
      <anchor>a231a3250a5261cbe5adb474c167831caa468213a7e9dcbc7a4382af2f366628a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IntZone_Uint32_UintLT64</name>
      <anchorfile>class_int_region.html</anchorfile>
      <anchor>a231a3250a5261cbe5adb474c167831caa66b58601ebfb3cfea39a62b2ba5f30b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IntZone_UintLT32_Uint32</name>
      <anchorfile>class_int_region.html</anchorfile>
      <anchor>a231a3250a5261cbe5adb474c167831caae3eaad6a583fafca0454933966d826ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IntZone_Uint64_Uint</name>
      <anchorfile>class_int_region.html</anchorfile>
      <anchor>a231a3250a5261cbe5adb474c167831caa65d44c9e8a625efc9c23069d065f53bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IntZone_UintLT64_Uint64</name>
      <anchorfile>class_int_region.html</anchorfile>
      <anchor>a231a3250a5261cbe5adb474c167831caac040c9bcd309110e16651e5c488ccb64</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IntZone_UintLT32_IntLT32</name>
      <anchorfile>class_int_region.html</anchorfile>
      <anchor>a231a3250a5261cbe5adb474c167831caa47717b3b6f21fad9517be74a105007d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IntZone_Uint32_IntLT64</name>
      <anchorfile>class_int_region.html</anchorfile>
      <anchor>a231a3250a5261cbe5adb474c167831caa269fd9b267e744fb1db9a5a797bc3bb2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IntZone_UintLT32_Int32</name>
      <anchorfile>class_int_region.html</anchorfile>
      <anchor>a231a3250a5261cbe5adb474c167831caad1f294831745c1c478ace4b5e272fe18</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IntZone_Uint64_Int</name>
      <anchorfile>class_int_region.html</anchorfile>
      <anchor>a231a3250a5261cbe5adb474c167831caa99673cc12d28506a8585983d0416253e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IntZone_UintLT64_Int64</name>
      <anchorfile>class_int_region.html</anchorfile>
      <anchor>a231a3250a5261cbe5adb474c167831caa024d1709404a6045f81d29d5fef8c796</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IntZone_Uint64_Int64</name>
      <anchorfile>class_int_region.html</anchorfile>
      <anchor>a231a3250a5261cbe5adb474c167831caa3e8faf0426e1fe1fed9d87058149611a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IntZone_IntLT32_IntLT32</name>
      <anchorfile>class_int_region.html</anchorfile>
      <anchor>a231a3250a5261cbe5adb474c167831caac87409d93577a69ab4a10c6223403cee</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IntZone_Int32_IntLT64</name>
      <anchorfile>class_int_region.html</anchorfile>
      <anchor>a231a3250a5261cbe5adb474c167831caae6c5710531cef03eded27a0a5263980f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IntZone_IntLT32_Int32</name>
      <anchorfile>class_int_region.html</anchorfile>
      <anchor>a231a3250a5261cbe5adb474c167831caa1ded6d71787bb6fd2eb7d7923ed7ddc7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IntZone_Int64_Int64</name>
      <anchorfile>class_int_region.html</anchorfile>
      <anchor>a231a3250a5261cbe5adb474c167831caaa22e2f8eca3a01da971c1b707efedd51</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IntZone_Int64_Int</name>
      <anchorfile>class_int_region.html</anchorfile>
      <anchor>a231a3250a5261cbe5adb474c167831caa6adaa63066172d82bd6dade6f69dfd92</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IntZone_IntLT64_Int64</name>
      <anchorfile>class_int_region.html</anchorfile>
      <anchor>a231a3250a5261cbe5adb474c167831caa76c144d5506dd9b3521f1f433015db40</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IntZone_IntLT32_UintLT32</name>
      <anchorfile>class_int_region.html</anchorfile>
      <anchor>a231a3250a5261cbe5adb474c167831caa596f28b599933209114df948c20a4c7d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IntZone_Int32_UintLT32</name>
      <anchorfile>class_int_region.html</anchorfile>
      <anchor>a231a3250a5261cbe5adb474c167831caa376015b5581fb0913fa76aef24a8a4c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IntZone_IntLT64_Uint32</name>
      <anchorfile>class_int_region.html</anchorfile>
      <anchor>a231a3250a5261cbe5adb474c167831caa3e7ff173f418f63f421df594027da7c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IntZone_Int64_UintLT64</name>
      <anchorfile>class_int_region.html</anchorfile>
      <anchor>a231a3250a5261cbe5adb474c167831caa54bf952bb96ef543ef4c13aa16a58a55</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IntZone_Int_Uint64</name>
      <anchorfile>class_int_region.html</anchorfile>
      <anchor>a231a3250a5261cbe5adb474c167831caae9d035e0ae0bc7d5a871674bc01c0987</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IntZone_Int64_Uint64</name>
      <anchorfile>class_int_region.html</anchorfile>
      <anchor>a231a3250a5261cbe5adb474c167831caa830d38c8a144901cc068ba448172468f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IntZone_UintLT32_UintLT32</name>
      <anchorfile>class_int_region.html</anchorfile>
      <anchor>a231a3250a5261cbe5adb474c167831caa468213a7e9dcbc7a4382af2f366628a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IntZone_Uint32_UintLT64</name>
      <anchorfile>class_int_region.html</anchorfile>
      <anchor>a231a3250a5261cbe5adb474c167831caa66b58601ebfb3cfea39a62b2ba5f30b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IntZone_UintLT32_Uint32</name>
      <anchorfile>class_int_region.html</anchorfile>
      <anchor>a231a3250a5261cbe5adb474c167831caae3eaad6a583fafca0454933966d826ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IntZone_Uint64_Uint</name>
      <anchorfile>class_int_region.html</anchorfile>
      <anchor>a231a3250a5261cbe5adb474c167831caa65d44c9e8a625efc9c23069d065f53bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IntZone_UintLT64_Uint64</name>
      <anchorfile>class_int_region.html</anchorfile>
      <anchor>a231a3250a5261cbe5adb474c167831caac040c9bcd309110e16651e5c488ccb64</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IntZone_UintLT32_IntLT32</name>
      <anchorfile>class_int_region.html</anchorfile>
      <anchor>a231a3250a5261cbe5adb474c167831caa47717b3b6f21fad9517be74a105007d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IntZone_Uint32_IntLT64</name>
      <anchorfile>class_int_region.html</anchorfile>
      <anchor>a231a3250a5261cbe5adb474c167831caa269fd9b267e744fb1db9a5a797bc3bb2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IntZone_UintLT32_Int32</name>
      <anchorfile>class_int_region.html</anchorfile>
      <anchor>a231a3250a5261cbe5adb474c167831caad1f294831745c1c478ace4b5e272fe18</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IntZone_Uint64_Int</name>
      <anchorfile>class_int_region.html</anchorfile>
      <anchor>a231a3250a5261cbe5adb474c167831caa99673cc12d28506a8585983d0416253e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IntZone_UintLT64_Int64</name>
      <anchorfile>class_int_region.html</anchorfile>
      <anchor>a231a3250a5261cbe5adb474c167831caa024d1709404a6045f81d29d5fef8c796</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IntZone_Uint64_Int64</name>
      <anchorfile>class_int_region.html</anchorfile>
      <anchor>a231a3250a5261cbe5adb474c167831caa3e8faf0426e1fe1fed9d87058149611a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IntZone_IntLT32_IntLT32</name>
      <anchorfile>class_int_region.html</anchorfile>
      <anchor>a231a3250a5261cbe5adb474c167831caac87409d93577a69ab4a10c6223403cee</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IntZone_Int32_IntLT64</name>
      <anchorfile>class_int_region.html</anchorfile>
      <anchor>a231a3250a5261cbe5adb474c167831caae6c5710531cef03eded27a0a5263980f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IntZone_IntLT32_Int32</name>
      <anchorfile>class_int_region.html</anchorfile>
      <anchor>a231a3250a5261cbe5adb474c167831caa1ded6d71787bb6fd2eb7d7923ed7ddc7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IntZone_Int64_Int64</name>
      <anchorfile>class_int_region.html</anchorfile>
      <anchor>a231a3250a5261cbe5adb474c167831caaa22e2f8eca3a01da971c1b707efedd51</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IntZone_Int64_Int</name>
      <anchorfile>class_int_region.html</anchorfile>
      <anchor>a231a3250a5261cbe5adb474c167831caa6adaa63066172d82bd6dade6f69dfd92</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IntZone_IntLT64_Int64</name>
      <anchorfile>class_int_region.html</anchorfile>
      <anchor>a231a3250a5261cbe5adb474c167831caa76c144d5506dd9b3521f1f433015db40</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IntZone_IntLT32_UintLT32</name>
      <anchorfile>class_int_region.html</anchorfile>
      <anchor>a231a3250a5261cbe5adb474c167831caa596f28b599933209114df948c20a4c7d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IntZone_Int32_UintLT32</name>
      <anchorfile>class_int_region.html</anchorfile>
      <anchor>a231a3250a5261cbe5adb474c167831caa376015b5581fb0913fa76aef24a8a4c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IntZone_IntLT64_Uint32</name>
      <anchorfile>class_int_region.html</anchorfile>
      <anchor>a231a3250a5261cbe5adb474c167831caa3e7ff173f418f63f421df594027da7c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IntZone_Int64_UintLT64</name>
      <anchorfile>class_int_region.html</anchorfile>
      <anchor>a231a3250a5261cbe5adb474c167831caa54bf952bb96ef543ef4c13aa16a58a55</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IntZone_Int_Uint64</name>
      <anchorfile>class_int_region.html</anchorfile>
      <anchor>a231a3250a5261cbe5adb474c167831caae9d035e0ae0bc7d5a871674bc01c0987</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IntZone_Int64_Uint64</name>
      <anchorfile>class_int_region.html</anchorfile>
      <anchor>a231a3250a5261cbe5adb474c167831caa830d38c8a144901cc068ba448172468f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IntTraits</name>
    <filename>class_int_traits.html</filename>
    <templarg></templarg>
    <member kind="enumvalue">
      <name>isSigned</name>
      <anchorfile>class_int_traits.html</anchorfile>
      <anchor>aa5c7de9a8a14ce546662e4f25cdfccd7a1c7362dced97f3e172bca532098c2e82</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>is64Bit</name>
      <anchorfile>class_int_traits.html</anchorfile>
      <anchor>aa5c7de9a8a14ce546662e4f25cdfccd7a7df074c5bbec3906a2928ef3c5524dbd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>is32Bit</name>
      <anchorfile>class_int_traits.html</anchorfile>
      <anchor>aa5c7de9a8a14ce546662e4f25cdfccd7a1e59e843b997443e18eb34e64d2da82f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>is16Bit</name>
      <anchorfile>class_int_traits.html</anchorfile>
      <anchor>aa5c7de9a8a14ce546662e4f25cdfccd7a7320d43b212f6ad4bb60ed4d9081b649</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>is8Bit</name>
      <anchorfile>class_int_traits.html</anchorfile>
      <anchor>aa5c7de9a8a14ce546662e4f25cdfccd7ac35e0c8c90a40aa8c888a928c6d28a5e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>isLT32Bit</name>
      <anchorfile>class_int_traits.html</anchorfile>
      <anchor>aa5c7de9a8a14ce546662e4f25cdfccd7a5514435151a1ad8ea8d2341c5e7795b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>isLT64Bit</name>
      <anchorfile>class_int_traits.html</anchorfile>
      <anchor>aa5c7de9a8a14ce546662e4f25cdfccd7a89f70c20fd7b58f86d0c37037a2339c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>isInt8</name>
      <anchorfile>class_int_traits.html</anchorfile>
      <anchor>aa5c7de9a8a14ce546662e4f25cdfccd7a4cf69a7a7779641d4ba56020fc77e069</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>isUint8</name>
      <anchorfile>class_int_traits.html</anchorfile>
      <anchor>aa5c7de9a8a14ce546662e4f25cdfccd7a72f6b0121a25b95467492f8d255ead2b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>isInt16</name>
      <anchorfile>class_int_traits.html</anchorfile>
      <anchor>aa5c7de9a8a14ce546662e4f25cdfccd7a059051bc3e0826e9f9293c8d3d382c55</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>isUint16</name>
      <anchorfile>class_int_traits.html</anchorfile>
      <anchor>aa5c7de9a8a14ce546662e4f25cdfccd7a03a807ceb2bd240c140bd4536aca7ff7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>isInt32</name>
      <anchorfile>class_int_traits.html</anchorfile>
      <anchor>aa5c7de9a8a14ce546662e4f25cdfccd7aa6c52a118c68fc4ae97b03b306bbef01</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>isUint32</name>
      <anchorfile>class_int_traits.html</anchorfile>
      <anchor>aa5c7de9a8a14ce546662e4f25cdfccd7a9be2a364bfb7e1022222f96e1da54200</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>isInt64</name>
      <anchorfile>class_int_traits.html</anchorfile>
      <anchor>aa5c7de9a8a14ce546662e4f25cdfccd7aa11426f769c60f00f77f58ff2a4ad2f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>isUint64</name>
      <anchorfile>class_int_traits.html</anchorfile>
      <anchor>aa5c7de9a8a14ce546662e4f25cdfccd7ae772e27ced6aa89bec2f64ef376cca27</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>bitCount</name>
      <anchorfile>class_int_traits.html</anchorfile>
      <anchor>aa5c7de9a8a14ce546662e4f25cdfccd7af67bbff4eb55b97cc3f85b13a200bcca</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>isBool</name>
      <anchorfile>class_int_traits.html</anchorfile>
      <anchor>aa5c7de9a8a14ce546662e4f25cdfccd7a1343d2974ad0890171ab2af9e0ac4dbf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>char</type>
      <name>__C_ASSERT__</name>
      <anchorfile>class_int_traits.html</anchorfile>
      <anchor>ab84a9f49e19e0fda87e3ba9099e37bcb</anchor>
      <arglist>[(NumericType&lt; T &gt;::isInt) ? 1 :-1]</arglist>
    </member>
    <member kind="enumvalue">
      <name>isSigned</name>
      <anchorfile>class_int_traits.html</anchorfile>
      <anchor>aa5c7de9a8a14ce546662e4f25cdfccd7a1c7362dced97f3e172bca532098c2e82</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>is64Bit</name>
      <anchorfile>class_int_traits.html</anchorfile>
      <anchor>aa5c7de9a8a14ce546662e4f25cdfccd7a7df074c5bbec3906a2928ef3c5524dbd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>is32Bit</name>
      <anchorfile>class_int_traits.html</anchorfile>
      <anchor>aa5c7de9a8a14ce546662e4f25cdfccd7a1e59e843b997443e18eb34e64d2da82f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>is16Bit</name>
      <anchorfile>class_int_traits.html</anchorfile>
      <anchor>aa5c7de9a8a14ce546662e4f25cdfccd7a7320d43b212f6ad4bb60ed4d9081b649</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>is8Bit</name>
      <anchorfile>class_int_traits.html</anchorfile>
      <anchor>aa5c7de9a8a14ce546662e4f25cdfccd7ac35e0c8c90a40aa8c888a928c6d28a5e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>isLT32Bit</name>
      <anchorfile>class_int_traits.html</anchorfile>
      <anchor>aa5c7de9a8a14ce546662e4f25cdfccd7a5514435151a1ad8ea8d2341c5e7795b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>isLT64Bit</name>
      <anchorfile>class_int_traits.html</anchorfile>
      <anchor>aa5c7de9a8a14ce546662e4f25cdfccd7a89f70c20fd7b58f86d0c37037a2339c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>isInt8</name>
      <anchorfile>class_int_traits.html</anchorfile>
      <anchor>aa5c7de9a8a14ce546662e4f25cdfccd7a4cf69a7a7779641d4ba56020fc77e069</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>isUint8</name>
      <anchorfile>class_int_traits.html</anchorfile>
      <anchor>aa5c7de9a8a14ce546662e4f25cdfccd7a72f6b0121a25b95467492f8d255ead2b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>isInt16</name>
      <anchorfile>class_int_traits.html</anchorfile>
      <anchor>aa5c7de9a8a14ce546662e4f25cdfccd7a059051bc3e0826e9f9293c8d3d382c55</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>isUint16</name>
      <anchorfile>class_int_traits.html</anchorfile>
      <anchor>aa5c7de9a8a14ce546662e4f25cdfccd7a03a807ceb2bd240c140bd4536aca7ff7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>isInt32</name>
      <anchorfile>class_int_traits.html</anchorfile>
      <anchor>aa5c7de9a8a14ce546662e4f25cdfccd7aa6c52a118c68fc4ae97b03b306bbef01</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>isUint32</name>
      <anchorfile>class_int_traits.html</anchorfile>
      <anchor>aa5c7de9a8a14ce546662e4f25cdfccd7a9be2a364bfb7e1022222f96e1da54200</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>isInt64</name>
      <anchorfile>class_int_traits.html</anchorfile>
      <anchor>aa5c7de9a8a14ce546662e4f25cdfccd7aa11426f769c60f00f77f58ff2a4ad2f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>isUint64</name>
      <anchorfile>class_int_traits.html</anchorfile>
      <anchor>aa5c7de9a8a14ce546662e4f25cdfccd7ae772e27ced6aa89bec2f64ef376cca27</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>bitCount</name>
      <anchorfile>class_int_traits.html</anchorfile>
      <anchor>aa5c7de9a8a14ce546662e4f25cdfccd7af67bbff4eb55b97cc3f85b13a200bcca</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>isBool</name>
      <anchorfile>class_int_traits.html</anchorfile>
      <anchor>aa5c7de9a8a14ce546662e4f25cdfccd7a1343d2974ad0890171ab2af9e0ac4dbf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const T</type>
      <name>maxInt</name>
      <anchorfile>class_int_traits.html</anchorfile>
      <anchor>ac0a281193f775174407e4c3840040b36</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const T</type>
      <name>minInt</name>
      <anchorfile>class_int_traits.html</anchorfile>
      <anchor>a84ebe15abef2b05b8f594ac9c358423e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>JetResolution</name>
    <filename>class_jet_resolution.html</filename>
    <member kind="function">
      <type></type>
      <name>JetResolution</name>
      <anchorfile>class_jet_resolution.html</anchorfile>
      <anchor>a4e4fd54150d655ba9c7da934e609e124</anchor>
      <arglist>(Tools::MConfig const &amp;config, std::string const &amp;jetType)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~JetResolution</name>
      <anchorfile>class_jet_resolution.html</anchorfile>
      <anchor>a93ef542825eeee1091be7197dc67034f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getJetResolutionCorrFactor</name>
      <anchorfile>class_jet_resolution.html</anchorfile>
      <anchor>ab768e912ff92f3b12e95a4f2b2d89deb</anchor>
      <arglist>(pxl::Particle const *recJet, pxl::Particle const *genJet, double const npv, double const rho, int const updown)</arglist>
    </member>
    <member kind="function">
      <type>pxl::Particle *</type>
      <name>matchGenJet</name>
      <anchorfile>class_jet_resolution.html</anchorfile>
      <anchor>a1957a17e84b285eadf8cb8653ea27e6f</anchor>
      <arglist>(const pxl::Particle *rec_jet, const std::vector&lt; pxl::Particle * &gt; &amp;gen_jets, const double radius, const double npv) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>JetSelector</name>
    <filename>class_jet_selector.html</filename>
    <base>ObjectSelector</base>
    <member kind="function">
      <type></type>
      <name>JetSelector</name>
      <anchorfile>class_jet_selector.html</anchorfile>
      <anchor>a96525ab5083e27ca6ed00b6be7f64354</anchor>
      <arglist>(const Tools::MConfig &amp;cfg, OldNameMapper *globalOldNameMap, const std::string &amp;name=&quot;Jet&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~JetSelector</name>
      <anchorfile>class_jet_selector.html</anchorfile>
      <anchor>a97ef231e816f866f9359f562b67fef05</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>passObjectSelection</name>
      <anchorfile>class_jet_selector.html</anchorfile>
      <anchor>a772e7b2530d3404ec6235593a64f63e5</anchor>
      <arglist>(pxl::Particle *jet, double const jetRho, const std::string &amp;idType, const bool isSyst) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>passKinematics</name>
      <anchorfile>class_object_selector.html</anchorfile>
      <anchor>a96ba15ff2c5195e1797a1d3850c530a8</anchor>
      <arglist>(pxl::Particle *object, const bool isSyst=false) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setScaleFactors</name>
      <anchorfile>class_object_selector.html</anchorfile>
      <anchor>aa5e974f081f10a2e9ca4ab5569c22e7e</anchor>
      <arglist>(pxl::Particle *object)</arglist>
    </member>
    <member kind="variable">
      <type>OldNameMapper *</type>
      <name>oldNameMap</name>
      <anchorfile>class_object_selector.html</anchorfile>
      <anchor>a8944cd815366dde3b857d9b76e28b6bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool const</type>
      <name>m_jet_use</name>
      <anchorfile>class_jet_selector.html</anchorfile>
      <anchor>a08f8f4a89ded017d31134bae00699b28</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double const</type>
      <name>m_jet_pt_min</name>
      <anchorfile>class_jet_selector.html</anchorfile>
      <anchor>aa77641ead84845977a352d09c4da5ca7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool const</type>
      <name>m_jet_isPF</name>
      <anchorfile>class_jet_selector.html</anchorfile>
      <anchor>a66a554c463d11983b3941d6d464a5a54</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool const</type>
      <name>m_jet_ID_use</name>
      <anchorfile>class_jet_selector.html</anchorfile>
      <anchor>a7f11b86ff899614508a26879b76c78af</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string const</type>
      <name>m_jet_ID_type</name>
      <anchorfile>class_jet_selector.html</anchorfile>
      <anchor>a19d5f823bf9085e7453b93dee5f27882</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double const</type>
      <name>m_jet_gen_hadOverEm_min</name>
      <anchorfile>class_jet_selector.html</anchorfile>
      <anchor>a5255b8338bec5af5216468c583e087eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double const</type>
      <name>m_jet_gen_hadEFrac_min</name>
      <anchorfile>class_jet_selector.html</anchorfile>
      <anchor>a2e1dad1abf8829e9b3e8cb09db5f1d3f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double const</type>
      <name>m_jet_nHadEFrac_max</name>
      <anchorfile>class_jet_selector.html</anchorfile>
      <anchor>a8190b0e838b4bf8591ef5984e99c66e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double const</type>
      <name>m_jet_nEMEFrac_max</name>
      <anchorfile>class_jet_selector.html</anchorfile>
      <anchor>a78ad581acfcd769cf800c19700014cef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned long const</type>
      <name>m_jet_numConstituents_min</name>
      <anchorfile>class_jet_selector.html</anchorfile>
      <anchor>aede5a5150d37bedbabb00deedc9c8e5d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double const</type>
      <name>m_jet_cHadEFrac_min</name>
      <anchorfile>class_jet_selector.html</anchorfile>
      <anchor>a404a3583f07929a94b427e2c781e0b50</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double const</type>
      <name>m_jet_cEMEFrac_max</name>
      <anchorfile>class_jet_selector.html</anchorfile>
      <anchor>ac0a7f7a86b0e40d2041f0e02a1afa0f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned long const</type>
      <name>m_jet_cMultiplicity_min</name>
      <anchorfile>class_jet_selector.html</anchorfile>
      <anchor>a292bf25fb03637dcfe9d1a466b722f12</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_object_name</name>
      <anchorfile>class_object_selector.html</anchorfile>
      <anchor>a97be92d352eab8f1f7736e1210142697</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; ScaleFactor &gt;</type>
      <name>m_scale_factors</name>
      <anchorfile>class_object_selector.html</anchorfile>
      <anchor>acb033d208366dd65b0ee20215cde1eed</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>JetSubtypeCriterion</name>
    <filename>class_jet_subtype_criterion.html</filename>
    <base>FilterCriterionInterface&lt; pxl::Particle &gt;</base>
    <member kind="function">
      <type></type>
      <name>JetSubtypeCriterion</name>
      <anchorfile>class_jet_subtype_criterion.html</anchorfile>
      <anchor>a890d9b525ab8f01e8b1153cc44843c25</anchor>
      <arglist>(const std::string &amp;particleType, const std::string &amp;JetSubtype1, const std::string &amp;JetSubtype2=&quot;&quot;, double ptMin=0.0, double etaMax=0.0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>operator()</name>
      <anchorfile>class_jet_subtype_criterion.html</anchorfile>
      <anchor>a769564a62ac896a897ec036039eb34b3</anchor>
      <arglist>(const pxl::Particle &amp;pa) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>JetTypeWriter</name>
    <filename>class_jet_type_writer.html</filename>
    <member kind="enumeration">
      <type></type>
      <name>BTagVariation</name>
      <anchorfile>class_jet_type_writer.html</anchorfile>
      <anchor>a9b99d70e484786ec57e0963515b483e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DOWN</name>
      <anchorfile>class_jet_type_writer.html</anchorfile>
      <anchor>a9b99d70e484786ec57e0963515b483e8a1bd72eb5173bffbd06a1f6d6b3da6bcc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CENTRAL</name>
      <anchorfile>class_jet_type_writer.html</anchorfile>
      <anchor>a9b99d70e484786ec57e0963515b483e8ac9c93dcec347eee0a53228bf7bb1efd0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UP</name>
      <anchorfile>class_jet_type_writer.html</anchorfile>
      <anchor>a9b99d70e484786ec57e0963515b483e8a83ca78dc11bdd51a1ae3550e4218dd6e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DOWN</name>
      <anchorfile>class_jet_type_writer.html</anchorfile>
      <anchor>a9b99d70e484786ec57e0963515b483e8a1bd72eb5173bffbd06a1f6d6b3da6bcc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CENTRAL</name>
      <anchorfile>class_jet_type_writer.html</anchorfile>
      <anchor>a9b99d70e484786ec57e0963515b483e8ac9c93dcec347eee0a53228bf7bb1efd0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UP</name>
      <anchorfile>class_jet_type_writer.html</anchorfile>
      <anchor>a9b99d70e484786ec57e0963515b483e8a83ca78dc11bdd51a1ae3550e4218dd6e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>JetTypeWriter</name>
      <anchorfile>class_jet_type_writer.html</anchorfile>
      <anchor>aa585799688a2f268e3fa8f48b27c979f</anchor>
      <arglist>(const Tools::MConfig &amp;cfg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeJetTypes</name>
      <anchorfile>class_jet_type_writer.html</anchorfile>
      <anchor>afb5fe29a9289e5c2229942265c5137ab</anchor>
      <arglist>(std::vector&lt; pxl::Particle * &gt; &amp;jets) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBTagScaleFactor</name>
      <anchorfile>class_jet_type_writer.html</anchorfile>
      <anchor>afef3f9bc4e3f2bcb26f2fc92d0be426f</anchor>
      <arglist>(std::vector&lt; pxl::Particle * &gt; &amp;jets, int seed)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>getBTagWeight</name>
      <anchorfile>class_jet_type_writer.html</anchorfile>
      <anchor>a882d5d62cd0daf75f3ef73212c2de34c</anchor>
      <arglist>(const std::map&lt; std::string, std::vector&lt; pxl::Particle * &gt;&gt; &amp;part_map, JetTypeWriter::BTagVariation type, const std::vector&lt; std::string &gt; &amp;names={&quot;Jet&quot;})</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>LargeIntRegMultiply</name>
    <filename>class_large_int_reg_multiply.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>LargeIntRegMultiply&lt; signed __int32, signed __int64 &gt;</name>
    <filename>class_large_int_reg_multiply_3_01signed_01____int32_00_01signed_01____int64_01_4.html</filename>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>RegMultiply</name>
      <anchorfile>class_large_int_reg_multiply_3_01signed_01____int32_00_01signed_01____int64_01_4.html</anchorfile>
      <anchor>a13f234a1a4e4a312acc3ec6d3b3d4496</anchor>
      <arglist>(signed __int32 a, const signed __int64 &amp;b, signed __int32 *pRet)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>RegMultiplyThrow</name>
      <anchorfile>class_large_int_reg_multiply_3_01signed_01____int32_00_01signed_01____int64_01_4.html</anchorfile>
      <anchor>a0c4da00b8137d32b0ebfc009334324c0</anchor>
      <arglist>(signed __int32 a, const signed __int64 &amp;b, signed __int32 *pRet)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>LargeIntRegMultiply&lt; signed __int32, unsigned __int64 &gt;</name>
    <filename>class_large_int_reg_multiply_3_01signed_01____int32_00_01unsigned_01____int64_01_4.html</filename>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>RegMultiply</name>
      <anchorfile>class_large_int_reg_multiply_3_01signed_01____int32_00_01unsigned_01____int64_01_4.html</anchorfile>
      <anchor>a5b96925c2aa7f37a66af5adafd12b6b0</anchor>
      <arglist>(signed __int32 a, const unsigned __int64 &amp;b, signed __int32 *pRet)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>RegMultiplyThrow</name>
      <anchorfile>class_large_int_reg_multiply_3_01signed_01____int32_00_01unsigned_01____int64_01_4.html</anchorfile>
      <anchor>ad3942c55f657d4741504a0e0ff2b23d3</anchor>
      <arglist>(signed __int32 a, const unsigned __int64 &amp;b, signed __int32 *pRet)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>LargeIntRegMultiply&lt; signed __int64, signed __int32 &gt;</name>
    <filename>class_large_int_reg_multiply_3_01signed_01____int64_00_01signed_01____int32_01_4.html</filename>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>RegMultiply</name>
      <anchorfile>class_large_int_reg_multiply_3_01signed_01____int64_00_01signed_01____int32_01_4.html</anchorfile>
      <anchor>a0e7cfcd52c8fa958bd195d836e800128</anchor>
      <arglist>(const signed __int64 &amp;a, signed __int32 b, signed __int64 *pRet)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>RegMultiplyThrow</name>
      <anchorfile>class_large_int_reg_multiply_3_01signed_01____int64_00_01signed_01____int32_01_4.html</anchorfile>
      <anchor>ab2c1d2771145b288a6db8316e4390eb5</anchor>
      <arglist>(signed __int64 a, signed __int32 b, signed __int64 *pRet)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>LargeIntRegMultiply&lt; signed __int64, signed __int64 &gt;</name>
    <filename>class_large_int_reg_multiply_3_01signed_01____int64_00_01signed_01____int64_01_4.html</filename>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>RegMultiply</name>
      <anchorfile>class_large_int_reg_multiply_3_01signed_01____int64_00_01signed_01____int64_01_4.html</anchorfile>
      <anchor>a0c1660e9cd22b5cb4ae01a9c28a2faec</anchor>
      <arglist>(const signed __int64 &amp;a, const signed __int64 &amp;b, signed __int64 *pRet)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>RegMultiplyThrow</name>
      <anchorfile>class_large_int_reg_multiply_3_01signed_01____int64_00_01signed_01____int64_01_4.html</anchorfile>
      <anchor>a1aee62a953e8f50aca39eabe035ef9f6</anchor>
      <arglist>(const signed __int64 &amp;a, const signed __int64 &amp;b, signed __int64 *pRet)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>LargeIntRegMultiply&lt; signed __int64, unsigned __int32 &gt;</name>
    <filename>class_large_int_reg_multiply_3_01signed_01____int64_00_01unsigned_01____int32_01_4.html</filename>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>RegMultiply</name>
      <anchorfile>class_large_int_reg_multiply_3_01signed_01____int64_00_01unsigned_01____int32_01_4.html</anchorfile>
      <anchor>ad29873282eef764896311c615fa97d1a</anchor>
      <arglist>(const signed __int64 &amp;a, unsigned __int32 b, signed __int64 *pRet)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>RegMultiplyThrow</name>
      <anchorfile>class_large_int_reg_multiply_3_01signed_01____int64_00_01unsigned_01____int32_01_4.html</anchorfile>
      <anchor>a08c2756db33ac459ebac7474dcefdf6d</anchor>
      <arglist>(const signed __int64 &amp;a, unsigned __int32 b, signed __int64 *pRet)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>LargeIntRegMultiply&lt; signed __int64, unsigned __int64 &gt;</name>
    <filename>class_large_int_reg_multiply_3_01signed_01____int64_00_01unsigned_01____int64_01_4.html</filename>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>RegMultiply</name>
      <anchorfile>class_large_int_reg_multiply_3_01signed_01____int64_00_01unsigned_01____int64_01_4.html</anchorfile>
      <anchor>a4c2191d90484568061b1c163b2195706</anchor>
      <arglist>(const signed __int64 &amp;a, const unsigned __int64 &amp;b, signed __int64 *pRet)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>RegMultiplyThrow</name>
      <anchorfile>class_large_int_reg_multiply_3_01signed_01____int64_00_01unsigned_01____int64_01_4.html</anchorfile>
      <anchor>ad28f1f7a98f7b707f9563518c3db0932</anchor>
      <arglist>(const signed __int64 &amp;a, const unsigned __int64 &amp;b, signed __int64 *pRet)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>LargeIntRegMultiply&lt; unsigned __int32, signed __int64 &gt;</name>
    <filename>class_large_int_reg_multiply_3_01unsigned_01____int32_00_01signed_01____int64_01_4.html</filename>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>RegMultiply</name>
      <anchorfile>class_large_int_reg_multiply_3_01unsigned_01____int32_00_01signed_01____int64_01_4.html</anchorfile>
      <anchor>a21a64c40681f6bbf5386e3f73c5ec1d4</anchor>
      <arglist>(unsigned __int32 a, const signed __int64 &amp;b, unsigned __int32 *pRet)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>RegMultiplyThrow</name>
      <anchorfile>class_large_int_reg_multiply_3_01unsigned_01____int32_00_01signed_01____int64_01_4.html</anchorfile>
      <anchor>a41ff5b848828f030ce3655d1c0d6beb7</anchor>
      <arglist>(unsigned __int32 a, const signed __int64 &amp;b, unsigned __int32 *pRet)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>LargeIntRegMultiply&lt; unsigned __int32, unsigned __int64 &gt;</name>
    <filename>class_large_int_reg_multiply_3_01unsigned_01____int32_00_01unsigned_01____int64_01_4.html</filename>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>RegMultiply</name>
      <anchorfile>class_large_int_reg_multiply_3_01unsigned_01____int32_00_01unsigned_01____int64_01_4.html</anchorfile>
      <anchor>af3df13a16aa0e41475b862c4b33119ae</anchor>
      <arglist>(unsigned __int32 a, const unsigned __int64 &amp;b, unsigned __int32 *pRet)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>RegMultiplyThrow</name>
      <anchorfile>class_large_int_reg_multiply_3_01unsigned_01____int32_00_01unsigned_01____int64_01_4.html</anchorfile>
      <anchor>a7d6bf77bbf67a5d4c4f607a257cdd1e2</anchor>
      <arglist>(unsigned __int32 a, const unsigned __int64 &amp;b, unsigned __int32 *pRet)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>LargeIntRegMultiply&lt; unsigned __int64, signed __int32 &gt;</name>
    <filename>class_large_int_reg_multiply_3_01unsigned_01____int64_00_01signed_01____int32_01_4.html</filename>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>RegMultiply</name>
      <anchorfile>class_large_int_reg_multiply_3_01unsigned_01____int64_00_01signed_01____int32_01_4.html</anchorfile>
      <anchor>a4500f20b5931b39df2b9bf373bf24a8b</anchor>
      <arglist>(const unsigned __int64 &amp;a, signed __int32 b, unsigned __int64 *pRet)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>RegMultiplyThrow</name>
      <anchorfile>class_large_int_reg_multiply_3_01unsigned_01____int64_00_01signed_01____int32_01_4.html</anchorfile>
      <anchor>a18fb8d17556aa6dd3a2c60f9dd493a4b</anchor>
      <arglist>(const unsigned __int64 &amp;a, signed __int32 b, unsigned __int64 *pRet)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>LargeIntRegMultiply&lt; unsigned __int64, signed __int64 &gt;</name>
    <filename>class_large_int_reg_multiply_3_01unsigned_01____int64_00_01signed_01____int64_01_4.html</filename>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>RegMultiply</name>
      <anchorfile>class_large_int_reg_multiply_3_01unsigned_01____int64_00_01signed_01____int64_01_4.html</anchorfile>
      <anchor>a76fe54f592ec0f3db5d826c86a7ffcb1</anchor>
      <arglist>(const unsigned __int64 &amp;a, signed __int64 b, unsigned __int64 *pRet)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>RegMultiplyThrow</name>
      <anchorfile>class_large_int_reg_multiply_3_01unsigned_01____int64_00_01signed_01____int64_01_4.html</anchorfile>
      <anchor>aa8166c5949189e12414601096c81d268</anchor>
      <arglist>(const unsigned __int64 &amp;a, signed __int64 b, unsigned __int64 *pRet)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>LargeIntRegMultiply&lt; unsigned __int64, unsigned __int32 &gt;</name>
    <filename>class_large_int_reg_multiply_3_01unsigned_01____int64_00_01unsigned_01____int32_01_4.html</filename>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>RegMultiply</name>
      <anchorfile>class_large_int_reg_multiply_3_01unsigned_01____int64_00_01unsigned_01____int32_01_4.html</anchorfile>
      <anchor>a0c3b68eba772eea35840ece77895cd83</anchor>
      <arglist>(const unsigned __int64 &amp;a, unsigned __int32 b, unsigned __int64 *pRet)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>RegMultiplyThrow</name>
      <anchorfile>class_large_int_reg_multiply_3_01unsigned_01____int64_00_01unsigned_01____int32_01_4.html</anchorfile>
      <anchor>ae80844d1d40999ca10d4ea85afa5ed50</anchor>
      <arglist>(const unsigned __int64 &amp;a, unsigned __int32 b, unsigned __int64 *pRet)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>LargeIntRegMultiply&lt; unsigned __int64, unsigned __int64 &gt;</name>
    <filename>class_large_int_reg_multiply_3_01unsigned_01____int64_00_01unsigned_01____int64_01_4.html</filename>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>RegMultiply</name>
      <anchorfile>class_large_int_reg_multiply_3_01unsigned_01____int64_00_01unsigned_01____int64_01_4.html</anchorfile>
      <anchor>a291bad66ccbb7da850e0e6957ec99065</anchor>
      <arglist>(const unsigned __int64 &amp;a, const unsigned __int64 &amp;b, unsigned __int64 *pRet)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>RegMultiplyThrow</name>
      <anchorfile>class_large_int_reg_multiply_3_01unsigned_01____int64_00_01unsigned_01____int64_01_4.html</anchorfile>
      <anchor>a621edbc2444d4a1938bf518edbf07ace</anchor>
      <arglist>(const unsigned __int64 &amp;a, const unsigned __int64 &amp;b, unsigned __int64 *pRet)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>pxl::LocalFileImpl</name>
    <filename>classpxl_1_1_local_file_impl.html</filename>
    <base>pxl::FileImpl</base>
    <member kind="function">
      <type></type>
      <name>LocalFileImpl</name>
      <anchorfile>classpxl_1_1_local_file_impl.html</anchorfile>
      <anchor>a1e6b61a897eba8ed1f1503556122852b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LocalFileImpl</name>
      <anchorfile>classpxl_1_1_local_file_impl.html</anchorfile>
      <anchor>a6dfb9e2c6af261801d90e8a79725592c</anchor>
      <arglist>(const std::string &amp;filename, int32_t mode)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~LocalFileImpl</name>
      <anchorfile>classpxl_1_1_local_file_impl.html</anchorfile>
      <anchor>a8bf292af59279807fd26b8df4cbeb36e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>open</name>
      <anchorfile>classpxl_1_1_local_file_impl.html</anchorfile>
      <anchor>a602e0b0f9d82af1a1126715406556eba</anchor>
      <arglist>(const std::string &amp;filename, int32_t mode)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>close</name>
      <anchorfile>classpxl_1_1_local_file_impl.html</anchorfile>
      <anchor>a92b7a4218dee5ee7f4bb630c78c44f74</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isEof</name>
      <anchorfile>classpxl_1_1_local_file_impl.html</anchorfile>
      <anchor>ac238dc0b52a44fbe276557ca5c782d24</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isOpen</name>
      <anchorfile>classpxl_1_1_local_file_impl.html</anchorfile>
      <anchor>a1b4d7b5ae19a27e667402651d2674f34</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isBad</name>
      <anchorfile>classpxl_1_1_local_file_impl.html</anchorfile>
      <anchor>a4568696c2c9513e0fa72ba2e5b0fc984</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>clear</name>
      <anchorfile>classpxl_1_1_local_file_impl.html</anchorfile>
      <anchor>a7163d75d8150667685d0872f69d39ce5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isGood</name>
      <anchorfile>classpxl_1_1_local_file_impl.html</anchorfile>
      <anchor>abec2b27a71b4ca71fcfa2e3a378eaea1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int64_t</type>
      <name>tell</name>
      <anchorfile>classpxl_1_1_local_file_impl.html</anchorfile>
      <anchor>a2307f54ccdb03b158e1ffc1db041c343</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>seek</name>
      <anchorfile>classpxl_1_1_local_file_impl.html</anchorfile>
      <anchor>ad4473f3299208ade1714f98f94398475</anchor>
      <arglist>(int64_t pos, int32_t d)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int32_t</type>
      <name>peek</name>
      <anchorfile>classpxl_1_1_local_file_impl.html</anchorfile>
      <anchor>aad57d1620b58acb65335e8a7689cc693</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int64_t</type>
      <name>read</name>
      <anchorfile>classpxl_1_1_local_file_impl.html</anchorfile>
      <anchor>aa2b068e42e59757af8020636866d8770</anchor>
      <arglist>(char *s, size_t count)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int64_t</type>
      <name>write</name>
      <anchorfile>classpxl_1_1_local_file_impl.html</anchorfile>
      <anchor>a9ab2aa1494e9fdd4c206841e1422495e</anchor>
      <arglist>(const char *s, size_t count)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ignore</name>
      <anchorfile>classpxl_1_1_local_file_impl.html</anchorfile>
      <anchor>a8feaed99407021e75d05db9965159925</anchor>
      <arglist>(int64_t count)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>destroy</name>
      <anchorfile>classpxl_1_1_local_file_impl.html</anchorfile>
      <anchor>a16405bb312fae03053121459e8029405</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>pxl::LogBuffer</name>
    <filename>classpxl_1_1_log_buffer.html</filename>
    <member kind="function">
      <type></type>
      <name>LogBuffer</name>
      <anchorfile>classpxl_1_1_log_buffer.html</anchorfile>
      <anchor>abc502f5b25f4e7d08f03d503c30bccde</anchor>
      <arglist>(LogLevel level, const char *module)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~LogBuffer</name>
      <anchorfile>classpxl_1_1_log_buffer.html</anchorfile>
      <anchor>abd281aa33a4ded835ef7f1e5a8f96805</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::ostream &amp;</name>
      <anchorfile>classpxl_1_1_log_buffer.html</anchorfile>
      <anchor>a188a437fa794b12c918be4cd8c56656e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>LogBuffer &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classpxl_1_1_log_buffer.html</anchorfile>
      <anchor>a9d0511fa7820371825e71ca042ad92c5</anchor>
      <arglist>(T &amp;data)</arglist>
    </member>
    <member kind="function">
      <type>LogBuffer &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classpxl_1_1_log_buffer.html</anchorfile>
      <anchor>af0536acf584f4dffcee1829d5ed92958</anchor>
      <arglist>(std::ostream &amp;(*func)(std::ostream &amp;))</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>pxl::LogDispatcher</name>
    <filename>classpxl_1_1_log_dispatcher.html</filename>
    <member kind="typedef">
      <type>std::vector&lt; std::pair&lt; LogHandler *, LogLevel &gt; &gt;</type>
      <name>handlers_t</name>
      <anchorfile>classpxl_1_1_log_dispatcher.html</anchorfile>
      <anchor>af28897df915923d8c781513482e1b556</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LogDispatcher</name>
      <anchorfile>classpxl_1_1_log_dispatcher.html</anchorfile>
      <anchor>a6b4e0ab50b868a0e4c4406af1bda07f1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pushIndent</name>
      <anchorfile>classpxl_1_1_log_dispatcher.html</anchorfile>
      <anchor>a4d5d368619b9f08364b7809ce79d548a</anchor>
      <arglist>(char c)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>popIndent</name>
      <anchorfile>classpxl_1_1_log_dispatcher.html</anchorfile>
      <anchor>a9ec27ca85ffd1f937550b3f0f04a3c65</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getIndent</name>
      <anchorfile>classpxl_1_1_log_dispatcher.html</anchorfile>
      <anchor>a7ef286a8d09981cf5f599a561de43bef</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setHandler</name>
      <anchorfile>classpxl_1_1_log_dispatcher.html</anchorfile>
      <anchor>a98edb5177e54c70574254704915c4322</anchor>
      <arglist>(LogHandler *handler, LogLevel loglevel)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeHandler</name>
      <anchorfile>classpxl_1_1_log_dispatcher.html</anchorfile>
      <anchor>ad821c6447927ceeb2d200863ad91fde5</anchor>
      <arglist>(LogHandler *handler)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dispatch</name>
      <anchorfile>classpxl_1_1_log_dispatcher.html</anchorfile>
      <anchor>a788996a66a73b461be1beae4cbca613a</anchor>
      <arglist>(LogLevel level, const std::string &amp;module, const std::string &amp;message)</arglist>
    </member>
    <member kind="function">
      <type>LogLevel</type>
      <name>getLowestLogLevel</name>
      <anchorfile>classpxl_1_1_log_dispatcher.html</anchorfile>
      <anchor>a24dd80cbd26458bef28f84e5bb54af1e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>disableConsoleLogHandler</name>
      <anchorfile>classpxl_1_1_log_dispatcher.html</anchorfile>
      <anchor>a9875eae1693dc74a7300a001f608dc69</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>enableConsoleLogHandler</name>
      <anchorfile>classpxl_1_1_log_dispatcher.html</anchorfile>
      <anchor>a8d0ac447d01d073ea0e8cf9fa9afc26f</anchor>
      <arglist>(LogLevel level)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static LogDispatcher &amp;</type>
      <name>instance</name>
      <anchorfile>classpxl_1_1_log_dispatcher.html</anchorfile>
      <anchor>ab8e3d9a82f881d1663cd7162cd144438</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>pxl::Logger</name>
    <filename>classpxl_1_1_logger.html</filename>
    <member kind="function">
      <type></type>
      <name>Logger</name>
      <anchorfile>classpxl_1_1_logger.html</anchorfile>
      <anchor>a47b45f721fcb1164da751ff468cacfc7</anchor>
      <arglist>(const char *module_name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>log</name>
      <anchorfile>classpxl_1_1_logger.html</anchorfile>
      <anchor>a4fe27428d119462598758e32f55ac180</anchor>
      <arglist>(LogLevel level, const std::string &amp;msg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>classpxl_1_1_logger.html</anchorfile>
      <anchor>ae4d170e53c9726c2f6e1378cff02c54b</anchor>
      <arglist>(LogLevel level, const T0 &amp;t0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>classpxl_1_1_logger.html</anchorfile>
      <anchor>acdaafe66c882ff8f4ecbd4ce1d1d84f5</anchor>
      <arglist>(LogLevel level, const T0 &amp;t0, const T1 &amp;t1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>classpxl_1_1_logger.html</anchorfile>
      <anchor>af2ce6fbce41956188dddb50d4fb1d954</anchor>
      <arglist>(LogLevel level, const T0 &amp;t0, const T1 &amp;t1, const T2 &amp;t2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>classpxl_1_1_logger.html</anchorfile>
      <anchor>acb2991ef3142eda640bd12cf120c72df</anchor>
      <arglist>(LogLevel level, const T0 &amp;t0, const T1 &amp;t1, const T2 &amp;t2, const T3 &amp;t3)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>classpxl_1_1_logger.html</anchorfile>
      <anchor>afb0af920ad3dc9d0193578ffdafa6e14</anchor>
      <arglist>(LogLevel level, const T0 &amp;t0, const T1 &amp;t1, const T2 &amp;t2, const T3 &amp;t3, const T4 &amp;t4)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>classpxl_1_1_logger.html</anchorfile>
      <anchor>aee21d98d68c3b29f4211c96d9bef58ab</anchor>
      <arglist>(LogLevel level, const T0 &amp;t0, const T1 &amp;t1, const T2 &amp;t2, const T3 &amp;t3, const T4 &amp;t4, const T5 &amp;t5)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>classpxl_1_1_logger.html</anchorfile>
      <anchor>a647bb41b52e74135c75795d016b50040</anchor>
      <arglist>(LogLevel level, const T0 &amp;t0, const T1 &amp;t1, const T2 &amp;t2, const T3 &amp;t3, const T4 &amp;t4, const T5 &amp;t5, const T6 &amp;t6)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>pxl::LogHandler</name>
    <filename>classpxl_1_1_log_handler.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~LogHandler</name>
      <anchorfile>classpxl_1_1_log_handler.html</anchorfile>
      <anchor>a661326c92e7da27e9171cec2a882c62d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>handle</name>
      <anchorfile>classpxl_1_1_log_handler.html</anchorfile>
      <anchor>a3758c85a216690f064f699b49c4c2c18</anchor>
      <arglist>(LogLevel level, time_t timestamp, const std::string &amp;module, const std::string &amp;message)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>LookupTable</name>
    <filename>class_lookup_table.html</filename>
    <member kind="function">
      <type></type>
      <name>LookupTable</name>
      <anchorfile>class_lookup_table.html</anchorfile>
      <anchor>a9a4f55efd204cd5600994d831bd7c7dc</anchor>
      <arglist>(bool debug=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~LookupTable</name>
      <anchorfile>class_lookup_table.html</anchorfile>
      <anchor>a8e19c9923a562aa840cc34f0492dc4fc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>generate</name>
      <anchorfile>class_lookup_table.html</anchorfile>
      <anchor>a158927e320ee8bab476130cc6d462e0c</anchor>
      <arglist>(const LookupOptions &amp;options)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>lookup</name>
      <anchorfile>class_lookup_table.html</anchorfile>
      <anchor>a2c29092aff02e3faeb9b084e26736a06</anchor>
      <arglist>(double data, double bg, double uncert) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeFile</name>
      <anchorfile>class_lookup_table.html</anchorfile>
      <anchor>acd2e8e05a0cdf4868221e33549301bd6</anchor>
      <arglist>(std::string filename=&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>readFile</name>
      <anchorfile>class_lookup_table.html</anchorfile>
      <anchor>af582b41687bcb32fa3caa41b932ee1ec</anchor>
      <arglist>(std::string filename=&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>expectedBinarySize</name>
      <anchorfile>class_lookup_table.html</anchorfile>
      <anchor>a24d3d574bd46b15974943d81f2c192c8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isLoaded</name>
      <anchorfile>class_lookup_table.html</anchorfile>
      <anchor>a38aae4a72745ae75ee8117ccaf546977</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>lastLoadedFilename</name>
      <anchorfile>class_lookup_table.html</anchorfile>
      <anchor>ad6d83384366123b8741a68525711448d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printPoints</name>
      <anchorfile>class_lookup_table.html</anchorfile>
      <anchor>ab91a77bbce58f8591994dd291b301885</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>getDefaultLutPath</name>
      <anchorfile>class_lookup_table.html</anchorfile>
      <anchor>aa3d4a0652e49b4e2ab17919995b637d8</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>pxl::LorentzVector</name>
    <filename>classpxl_1_1_lorentz_vector.html</filename>
    <base>pxl::Basic3Vector</base>
    <member kind="function">
      <type></type>
      <name>LorentzVector</name>
      <anchorfile>classpxl_1_1_lorentz_vector.html</anchorfile>
      <anchor>a2938217fa3eb1f656eb64f09e41173ac</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LorentzVector</name>
      <anchorfile>classpxl_1_1_lorentz_vector.html</anchorfile>
      <anchor>ad4e6d5a1062b7b80c08d9f7065117b6f</anchor>
      <arglist>(const Basic3Vector &amp;orig, double t=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LorentzVector</name>
      <anchorfile>classpxl_1_1_lorentz_vector.html</anchorfile>
      <anchor>a24d58580a55f017fb7b55b5d70b1a059</anchor>
      <arglist>(const LorentzVector &amp;orig)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LorentzVector</name>
      <anchorfile>classpxl_1_1_lorentz_vector.html</anchorfile>
      <anchor>ad28c0939367b2784dbe6b29ecc3c82ca</anchor>
      <arglist>(const LorentzVector *orig)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LorentzVector</name>
      <anchorfile>classpxl_1_1_lorentz_vector.html</anchorfile>
      <anchor>a88ef5c01faab91d7b8a4d72967706a68</anchor>
      <arglist>(double x, double y, double z, double t=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~LorentzVector</name>
      <anchorfile>classpxl_1_1_lorentz_vector.html</anchorfile>
      <anchor>ac087c18865b3d5cc9c9bc47bc453523e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classpxl_1_1_lorentz_vector.html</anchorfile>
      <anchor>a6171d72ae73275de867da401a0204b9e</anchor>
      <arglist>(const OutputStream &amp;out) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>deserialize</name>
      <anchorfile>classpxl_1_1_lorentz_vector.html</anchorfile>
      <anchor>a90f56bc69356cbf11f143a3874825697</anchor>
      <arglist>(const InputStream &amp;in)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setT</name>
      <anchorfile>classpxl_1_1_lorentz_vector.html</anchorfile>
      <anchor>a3dbe4ce0b4f93878e444e6f742e9df81</anchor>
      <arglist>(double t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPx</name>
      <anchorfile>classpxl_1_1_lorentz_vector.html</anchorfile>
      <anchor>a0894347ac4781d8b10c271adc36f11ba</anchor>
      <arglist>(double px)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPy</name>
      <anchorfile>classpxl_1_1_lorentz_vector.html</anchorfile>
      <anchor>afd33846e555ba95b9039c47999e5e979</anchor>
      <arglist>(double py)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPz</name>
      <anchorfile>classpxl_1_1_lorentz_vector.html</anchorfile>
      <anchor>af6d06da8650d97b9e75773cf88c3a0a9</anchor>
      <arglist>(double pz)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setE</name>
      <anchorfile>classpxl_1_1_lorentz_vector.html</anchorfile>
      <anchor>a2215ad339ddd7476bb7b7af8accc5d8a</anchor>
      <arglist>(double e)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getT</name>
      <anchorfile>classpxl_1_1_lorentz_vector.html</anchorfile>
      <anchor>a703d9b422378798c13bcf06c4b04580f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getPx</name>
      <anchorfile>classpxl_1_1_lorentz_vector.html</anchorfile>
      <anchor>abb5697f597a2f96ed542586ea3237a67</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getPy</name>
      <anchorfile>classpxl_1_1_lorentz_vector.html</anchorfile>
      <anchor>a41ee972282c2d72cb65e87e0914417b3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getPz</name>
      <anchorfile>classpxl_1_1_lorentz_vector.html</anchorfile>
      <anchor>a1ee94823a2abf838064dceb64d27cd2a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getE</name>
      <anchorfile>classpxl_1_1_lorentz_vector.html</anchorfile>
      <anchor>a4ea7888775225f42ebdf3c933418fbb6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getMass2</name>
      <anchorfile>classpxl_1_1_lorentz_vector.html</anchorfile>
      <anchor>a65698d2b473932f850bd7ab0b992db2a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getMass</name>
      <anchorfile>classpxl_1_1_lorentz_vector.html</anchorfile>
      <anchor>a89bbd3dbc1b442bd0f79940082f0d327</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getPt</name>
      <anchorfile>classpxl_1_1_lorentz_vector.html</anchorfile>
      <anchor>ad0eda1f46def6ed52618c6d071d4ffb9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getP</name>
      <anchorfile>classpxl_1_1_lorentz_vector.html</anchorfile>
      <anchor>aba09043375d64f938158304cf413af41</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getEta</name>
      <anchorfile>classpxl_1_1_lorentz_vector.html</anchorfile>
      <anchor>a8d4f2b3022ae689e6189d00f0d8a1e83</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getRapidity</name>
      <anchorfile>classpxl_1_1_lorentz_vector.html</anchorfile>
      <anchor>adbab43fefea945e4f023966d2474908e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getBeamlineRapidity</name>
      <anchorfile>classpxl_1_1_lorentz_vector.html</anchorfile>
      <anchor>a7ea053e1ddef1838e7279c4a339055de</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getEt2</name>
      <anchorfile>classpxl_1_1_lorentz_vector.html</anchorfile>
      <anchor>a093f7486af8f729555294e102608b750</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getEt</name>
      <anchorfile>classpxl_1_1_lorentz_vector.html</anchorfile>
      <anchor>a694ed34d79ad05c1bb07905ca6fcdaea</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>deltaR</name>
      <anchorfile>classpxl_1_1_lorentz_vector.html</anchorfile>
      <anchor>a4d5233f4665e7e0e5b3c59cf547d0573</anchor>
      <arglist>(const LorentzVector *fv) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>deltaR</name>
      <anchorfile>classpxl_1_1_lorentz_vector.html</anchorfile>
      <anchor>abae512c90a736a4d7304ad3f02ec1caf</anchor>
      <arglist>(const LorentzVector &amp;fv) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>deltaEta</name>
      <anchorfile>classpxl_1_1_lorentz_vector.html</anchorfile>
      <anchor>a97c667eadebcc0c9520341876e3a4599</anchor>
      <arglist>(const LorentzVector *fv) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>deltaEta</name>
      <anchorfile>classpxl_1_1_lorentz_vector.html</anchorfile>
      <anchor>ad2e5801fc147c5927f8a9fa4793780ff</anchor>
      <arglist>(const LorentzVector &amp;fv) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>deltaRapidity</name>
      <anchorfile>classpxl_1_1_lorentz_vector.html</anchorfile>
      <anchor>ab26973b8cc9c4cc8561353e7c991768d</anchor>
      <arglist>(const LorentzVector &amp;fv) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>deltaBeamlineRapidity</name>
      <anchorfile>classpxl_1_1_lorentz_vector.html</anchorfile>
      <anchor>af21036022e55e688882d359237e6e4c1</anchor>
      <arglist>(const LorentzVector &amp;fv) const</arglist>
    </member>
    <member kind="function">
      <type>Basic3Vector</type>
      <name>getBoostVector</name>
      <anchorfile>classpxl_1_1_lorentz_vector.html</anchorfile>
      <anchor>a0d78f7bc0bf0eb833a483151a4bc76ad</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>boost</name>
      <anchorfile>classpxl_1_1_lorentz_vector.html</anchorfile>
      <anchor>a0b4445cd9d7a662295f7c916061063d5</anchor>
      <arglist>(const Basic3Vector &amp;boostvector)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>boost</name>
      <anchorfile>classpxl_1_1_lorentz_vector.html</anchorfile>
      <anchor>a5c0e9e024a1d5962cd90a40193728088</anchor>
      <arglist>(double b_x, double b_y, double b_z)</arglist>
    </member>
    <member kind="function">
      <type>const LorentzVector &amp;</type>
      <name>operator=</name>
      <anchorfile>classpxl_1_1_lorentz_vector.html</anchorfile>
      <anchor>a9d2a4bda6abd4b90d7695d2c0454bd45</anchor>
      <arglist>(const Basic3Vector &amp;vec)</arglist>
    </member>
    <member kind="function">
      <type>const LorentzVector &amp;</type>
      <name>operator=</name>
      <anchorfile>classpxl_1_1_lorentz_vector.html</anchorfile>
      <anchor>a9722cb87e14e77947b0a2f8647bb345c</anchor>
      <arglist>(const LorentzVector &amp;vec)</arglist>
    </member>
    <member kind="function">
      <type>const LorentzVector &amp;</type>
      <name>operator+=</name>
      <anchorfile>classpxl_1_1_lorentz_vector.html</anchorfile>
      <anchor>a66794bb2723d1b76b1d3c1f3747e9cfb</anchor>
      <arglist>(const LorentzVector &amp;vec)</arglist>
    </member>
    <member kind="function">
      <type>const LorentzVector &amp;</type>
      <name>operator-=</name>
      <anchorfile>classpxl_1_1_lorentz_vector.html</anchorfile>
      <anchor>a05deb443195b150fb4fc6a0560956e91</anchor>
      <arglist>(const LorentzVector &amp;vec)</arglist>
    </member>
    <member kind="function">
      <type>LorentzVector</type>
      <name>operator-</name>
      <anchorfile>classpxl_1_1_lorentz_vector.html</anchorfile>
      <anchor>a5738279e4f855bec5b6cc2f64c6f4ae3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>LorentzVector</type>
      <name>operator-</name>
      <anchorfile>classpxl_1_1_lorentz_vector.html</anchorfile>
      <anchor>add0405c9ede579c3751a7b8b1eced40c</anchor>
      <arglist>(const LorentzVector &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>LorentzVector</type>
      <name>operator+</name>
      <anchorfile>classpxl_1_1_lorentz_vector.html</anchorfile>
      <anchor>abc97b9e8f9e5d72ec460635c15355009</anchor>
      <arglist>(const LorentzVector &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setX</name>
      <anchorfile>classpxl_1_1_basic3_vector.html</anchorfile>
      <anchor>a78ecc3a40440f04672c62b7a10e21ff7</anchor>
      <arglist>(double x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setY</name>
      <anchorfile>classpxl_1_1_basic3_vector.html</anchorfile>
      <anchor>ab521d3a7604dae18411e9dde169c8243</anchor>
      <arglist>(double y)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setZ</name>
      <anchorfile>classpxl_1_1_basic3_vector.html</anchorfile>
      <anchor>a25da9cc3f300e06a65675e50494bfff6</anchor>
      <arglist>(double z)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setXYZ</name>
      <anchorfile>classpxl_1_1_basic3_vector.html</anchorfile>
      <anchor>a1c1c48fad1d133cf44a375636ea6625e</anchor>
      <arglist>(double x, double y, double z)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setElement</name>
      <anchorfile>classpxl_1_1_basic3_vector.html</anchorfile>
      <anchor>a718b8813f4aaa67475aebc01f9943930</anchor>
      <arglist>(int i, double val)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getElement</name>
      <anchorfile>classpxl_1_1_basic3_vector.html</anchorfile>
      <anchor>a9b2d3617c8ff365a4ab1be4bc3688d20</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>double *</type>
      <name>getArray</name>
      <anchorfile>classpxl_1_1_basic3_vector.html</anchorfile>
      <anchor>aff832363a6c68f1c502146d20c2a7303</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const double *</type>
      <name>getConstArray</name>
      <anchorfile>classpxl_1_1_basic3_vector.html</anchorfile>
      <anchor>a60ad1413ba998160e3e8b7aaeea6a8e9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCArray</name>
      <anchorfile>classpxl_1_1_basic3_vector.html</anchorfile>
      <anchor>a5090631840837033f2f96b6a5fb7e93c</anchor>
      <arglist>(double val[3])</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRhoPhi</name>
      <anchorfile>classpxl_1_1_basic3_vector.html</anchorfile>
      <anchor>a7dae1e79e037d57579fbb2ef85b955ea</anchor>
      <arglist>(double perp, double phi)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRhoPhiZ</name>
      <anchorfile>classpxl_1_1_basic3_vector.html</anchorfile>
      <anchor>a2a3622e06509531be07d826801f630e9</anchor>
      <arglist>(double perp, double phi, double z)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRThetaPhi</name>
      <anchorfile>classpxl_1_1_basic3_vector.html</anchorfile>
      <anchor>a46a94561c3423301a1501f41531c8137</anchor>
      <arglist>(double r, double theta, double phi)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getX</name>
      <anchorfile>classpxl_1_1_basic3_vector.html</anchorfile>
      <anchor>a7858260790b9209095c2555d5b33ff25</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getY</name>
      <anchorfile>classpxl_1_1_basic3_vector.html</anchorfile>
      <anchor>af75a95873b336a751482ed07ee57ddb0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getZ</name>
      <anchorfile>classpxl_1_1_basic3_vector.html</anchorfile>
      <anchor>a7ce34d768ccb4d88b4753a8c9db44a80</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNullPerp</name>
      <anchorfile>classpxl_1_1_basic3_vector.html</anchorfile>
      <anchor>ab92aefb77c5fe9c167e8b900df57617f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNull</name>
      <anchorfile>classpxl_1_1_basic3_vector.html</anchorfile>
      <anchor>a35aacab69dc1f5ee928c44b70803aefa</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getPerp2</name>
      <anchorfile>classpxl_1_1_basic3_vector.html</anchorfile>
      <anchor>ab89eb4103211efd939dc8b6ab885a5aa</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getPerp</name>
      <anchorfile>classpxl_1_1_basic3_vector.html</anchorfile>
      <anchor>ad4bf6b0820c320629d6cfe0c283b5707</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getPhi</name>
      <anchorfile>classpxl_1_1_basic3_vector.html</anchorfile>
      <anchor>af23200f99f8f922b086adf60cac0941b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getMag2</name>
      <anchorfile>classpxl_1_1_basic3_vector.html</anchorfile>
      <anchor>a3801cc3d1a6d86b0d9db27df3190ed99</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getMag</name>
      <anchorfile>classpxl_1_1_basic3_vector.html</anchorfile>
      <anchor>a5fbb75f6af15666ef6baa6ae5c6b2402</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getCosTheta</name>
      <anchorfile>classpxl_1_1_basic3_vector.html</anchorfile>
      <anchor>aa1e264713e44ae99bbe2034e05cf730f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getCos2Theta</name>
      <anchorfile>classpxl_1_1_basic3_vector.html</anchorfile>
      <anchor>aa034a014cfa7e94c51e17c8baa13db9f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getTheta</name>
      <anchorfile>classpxl_1_1_basic3_vector.html</anchorfile>
      <anchor>ab0a989aa6dc388c9a31a460f6528c5e8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Basic3Vector</type>
      <name>getETheta</name>
      <anchorfile>classpxl_1_1_basic3_vector.html</anchorfile>
      <anchor>a24291606b0d1476f98f716b0ca7d33af</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Basic3Vector</type>
      <name>getEPhi</name>
      <anchorfile>classpxl_1_1_basic3_vector.html</anchorfile>
      <anchor>ac4d4abe2e6b2b1c0f224233b9eba09fb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>deltaRho</name>
      <anchorfile>classpxl_1_1_basic3_vector.html</anchorfile>
      <anchor>a8c81ef0f0937eac25c6c7f49cd411ae8</anchor>
      <arglist>(const Basic3Vector *fv) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>deltaRho</name>
      <anchorfile>classpxl_1_1_basic3_vector.html</anchorfile>
      <anchor>abf2fd8ed29512b60fc43970ceab9edd6</anchor>
      <arglist>(const Basic3Vector &amp;fv) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>deltaPhi</name>
      <anchorfile>classpxl_1_1_basic3_vector.html</anchorfile>
      <anchor>af115cb11554fc5baf6f0a85dee75aa69</anchor>
      <arglist>(const Basic3Vector *fv) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>deltaPhi</name>
      <anchorfile>classpxl_1_1_basic3_vector.html</anchorfile>
      <anchor>a90e2a5b2456bc4c7d1d76ab0454317f6</anchor>
      <arglist>(const Basic3Vector &amp;fv) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>deltaTheta</name>
      <anchorfile>classpxl_1_1_basic3_vector.html</anchorfile>
      <anchor>a61bf1250741c82f8d737c6112c487e56</anchor>
      <arglist>(const Basic3Vector *fv) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>deltaTheta</name>
      <anchorfile>classpxl_1_1_basic3_vector.html</anchorfile>
      <anchor>a1a1cc72d531a23ed005d8c75d59a320a</anchor>
      <arglist>(const Basic3Vector &amp;fv) const</arglist>
    </member>
    <member kind="function">
      <type>const Basic3Vector &amp;</type>
      <name>operator+=</name>
      <anchorfile>classpxl_1_1_basic3_vector.html</anchorfile>
      <anchor>a96a0af46ad73d52a1e226671128cf2ad</anchor>
      <arglist>(const Basic3Vector &amp;vec)</arglist>
    </member>
    <member kind="function">
      <type>const Basic3Vector &amp;</type>
      <name>operator-=</name>
      <anchorfile>classpxl_1_1_basic3_vector.html</anchorfile>
      <anchor>a2a22f7dd62ec3bdfef7ceaa3455acb91</anchor>
      <arglist>(const Basic3Vector &amp;vec)</arglist>
    </member>
    <member kind="function">
      <type>const Basic3Vector &amp;</type>
      <name>operator*=</name>
      <anchorfile>classpxl_1_1_basic3_vector.html</anchorfile>
      <anchor>a46f28ae26914abdf9e07c67f7202e1d1</anchor>
      <arglist>(double skalar)</arglist>
    </member>
    <member kind="function">
      <type>const Basic3Vector &amp;</type>
      <name>operator/=</name>
      <anchorfile>classpxl_1_1_basic3_vector.html</anchorfile>
      <anchor>a57ef5af99750176855f61009be2637d9</anchor>
      <arglist>(double skalar)</arglist>
    </member>
    <member kind="function">
      <type>Basic3Vector</type>
      <name>operator+</name>
      <anchorfile>classpxl_1_1_basic3_vector.html</anchorfile>
      <anchor>abf57110cf497d895ad1a4305a12bf358</anchor>
      <arglist>(const Basic3Vector &amp;vec)</arglist>
    </member>
    <member kind="function">
      <type>Basic3Vector</type>
      <name>operator-</name>
      <anchorfile>classpxl_1_1_basic3_vector.html</anchorfile>
      <anchor>a6124e5df65838ef47e1dd1e37117a7c3</anchor>
      <arglist>(const Basic3Vector &amp;vec)</arglist>
    </member>
    <member kind="function">
      <type>Basic3Vector</type>
      <name>operator/</name>
      <anchorfile>classpxl_1_1_basic3_vector.html</anchorfile>
      <anchor>a2bae91ef09ddcd64a644b873cc434c0b</anchor>
      <arglist>(double skalar) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>operator*</name>
      <anchorfile>classpxl_1_1_basic3_vector.html</anchorfile>
      <anchor>a3d5e9ea17218ac899a59fbfe81ab55b8</anchor>
      <arglist>(const Basic3Vector &amp;vec) const</arglist>
    </member>
    <member kind="function">
      <type>Basic3Vector</type>
      <name>cross</name>
      <anchorfile>classpxl_1_1_basic3_vector.html</anchorfile>
      <anchor>ad3d1379169dcca3d5f3b40f5f8f7c1a2</anchor>
      <arglist>(const Basic3Vector &amp;p) const</arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>operator()</name>
      <anchorfile>classpxl_1_1_basic3_vector.html</anchorfile>
      <anchor>a3af665cf1c29ab58075d1cd60d3e8422</anchor>
      <arglist>(size_t i)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>norm</name>
      <anchorfile>classpxl_1_1_basic3_vector.html</anchorfile>
      <anchor>ac92f6d1225075648dc42fc1b39cefec3</anchor>
      <arglist>(uint32_t norm) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isUnitVector</name>
      <anchorfile>classpxl_1_1_basic3_vector.html</anchorfile>
      <anchor>a2197c881f9a1d305be8b423ac57f42c8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getAngleTo</name>
      <anchorfile>classpxl_1_1_basic3_vector.html</anchorfile>
      <anchor>a60e4d1d70eb546232c36d45ca8eec67d</anchor>
      <arglist>(const Basic3Vector &amp;vec) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rotate</name>
      <anchorfile>classpxl_1_1_basic3_vector.html</anchorfile>
      <anchor>a958a70e6600a8c60df27a09436a4ac04</anchor>
      <arglist>(const Basic3Vector &amp;axis, double angle)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>normalize</name>
      <anchorfile>classpxl_1_1_basic3_vector.html</anchorfile>
      <anchor>a941f3693d5ba0bb4cabbfe306a7cae4b</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lumi::LumiRanges</name>
    <filename>classlumi_1_1_lumi_ranges.html</filename>
    <member kind="typedef">
      <type>std::pair&lt; ID, ID &gt;</type>
      <name>range</name>
      <anchorfile>classlumi_1_1_lumi_ranges.html</anchorfile>
      <anchor>a141651b5ff4b09930512b7c1c13d689c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LumiRanges</name>
      <anchorfile>classlumi_1_1_lumi_ranges.html</anchorfile>
      <anchor>a73f89f7fb36672f2e7853d94daea3790</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addRange</name>
      <anchorfile>classlumi_1_1_lumi_ranges.html</anchorfile>
      <anchor>ad26dfc2e87542d7bbac5040478f34faa</anchor>
      <arglist>(ID min, ID max)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>check</name>
      <anchorfile>classlumi_1_1_lumi_ranges.html</anchorfile>
      <anchor>aa23f38d62143284e407046c4a091a6fa</anchor>
      <arglist>(const ID LS) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MCBin</name>
    <filename>class_m_c_bin.html</filename>
    <member kind="typedef">
      <type>std::vector&lt; std::string &gt;</type>
      <name>name_vector</name>
      <anchorfile>class_m_c_bin.html</anchorfile>
      <anchor>a257a2a1d6de09332c035e6be1ca4d35f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; std::pair&lt; double, double &gt; &gt;</type>
      <name>uncert_vector</name>
      <anchorfile>class_m_c_bin.html</anchorfile>
      <anchor>a4f033c9eb289149e163d30a621977cdb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; double &gt;</type>
      <name>yield_vector</name>
      <anchorfile>class_m_c_bin.html</anchorfile>
      <anchor>a3c32a330ee95dab6a467b979827c36d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MCBin</name>
      <anchorfile>class_m_c_bin.html</anchorfile>
      <anchor>a987823db30080cb84aef09b754ced95d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MCBin</name>
      <anchorfile>class_m_c_bin.html</anchorfile>
      <anchor>a1c6b168bbe5ed7a3867fa8d06ad60a22</anchor>
      <arglist>(const yield_vector &amp;mcEventsPerProcessGroup, const yield_vector &amp;mcStatUncertPerProcessGroup, const name_vector &amp;mcProcessGroupNames, double lowerEdge, double width, const uncert_vector &amp;mcSysUncerts, const name_vector &amp;mcSysUncertNames)</arglist>
    </member>
    <member kind="function">
      <type>MCBin &amp;</type>
      <name>operator+=</name>
      <anchorfile>class_m_c_bin.html</anchorfile>
      <anchor>ad0146946b58ff8af8de54bdd890aa5ed</anchor>
      <arglist>(const MCBin &amp;add)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>class_m_c_bin.html</anchorfile>
      <anchor>a28de156889c4a3d51f9b29a4da2b921d</anchor>
      <arglist>(const MCBin &amp;comp) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isEmpty</name>
      <anchorfile>class_m_c_bin.html</anchorfile>
      <anchor>a6bb82c2ce95a679a8a0d217e1b9797d9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>class_m_c_bin.html</anchorfile>
      <anchor>a368b68de22bb404ba779909bc9a15f6b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getTotalMcUncert</name>
      <anchorfile>class_m_c_bin.html</anchorfile>
      <anchor>a1adb29ef2a5641084e41afe4ddb7a2e9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getTotalMcEvents</name>
      <anchorfile>class_m_c_bin.html</anchorfile>
      <anchor>ab4f35600caad523455277a28e9c4e286</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getTotalMcStatUncert</name>
      <anchorfile>class_m_c_bin.html</anchorfile>
      <anchor>a0467eef840ff85e65f2f8922d2c00ee0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getTotalMcSystUncert</name>
      <anchorfile>class_m_c_bin.html</anchorfile>
      <anchor>a734d3957aac2747b41f8bff56885cd5b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; size_t &gt;</type>
      <name>leadingBackgrounds</name>
      <anchorfile>class_m_c_bin.html</anchorfile>
      <anchor>a650a55b398a1c92580bbf8bce9241b8f</anchor>
      <arglist>(const double threshold) const</arglist>
    </member>
    <member kind="function">
      <type>std::map&lt; size_t, float &gt;</type>
      <name>leadingBackgroundsFractions</name>
      <anchorfile>class_m_c_bin.html</anchorfile>
      <anchor>ae2a4df593e6175ae18028627986e7d36</anchor>
      <arglist>(const double threshold) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>symmetrizeError</name>
      <anchorfile>class_m_c_bin.html</anchorfile>
      <anchor>a847a05166f129a210ef858f98bf40105</anchor>
      <arglist>(const std::pair&lt; double, double &gt; error)</arglist>
    </member>
    <member kind="variable">
      <type>yield_vector</type>
      <name>mcEventsPerProcessGroup</name>
      <anchorfile>class_m_c_bin.html</anchorfile>
      <anchor>a11501340e8b9a4c51356ee8fdd124f4f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>yield_vector</type>
      <name>mcStatUncertPerProcessGroup</name>
      <anchorfile>class_m_c_bin.html</anchorfile>
      <anchor>a42eb0e28b702db7e98e292ec72354254</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>name_vector</type>
      <name>mcProcessGroupNames</name>
      <anchorfile>class_m_c_bin.html</anchorfile>
      <anchor>a3a591890270dbde80d9dac349ad30ee0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>lowerEdge</name>
      <anchorfile>class_m_c_bin.html</anchorfile>
      <anchor>a3180dc05d433c3d5aab8c2662a4300ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>width</name>
      <anchorfile>class_m_c_bin.html</anchorfile>
      <anchor>ac4b513033e1e18e3244224038ffbdc7d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uncert_vector</type>
      <name>mcSysUncerts</name>
      <anchorfile>class_m_c_bin.html</anchorfile>
      <anchor>a22cd1be48c194736f3c1e368c597ae88</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>name_vector</type>
      <name>mcSysUncertNames</name>
      <anchorfile>class_m_c_bin.html</anchorfile>
      <anchor>a6669d2d135ac827fff6bb8fcf8f90927</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>class_m_c_bin.html</anchorfile>
      <anchor>a98e3da5dd98995c0af0e57133f2560ba</anchor>
      <arglist>(std::ostream &amp;out, const MCBin &amp;bin)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Tools::MConfig</name>
    <filename>class_tools_1_1_m_config.html</filename>
    <member kind="function">
      <type></type>
      <name>MConfig</name>
      <anchorfile>class_tools_1_1_m_config.html</anchorfile>
      <anchor>a343415225fea3dc8ba6499e4447fd214</anchor>
      <arglist>(const std::string &amp;path=&quot;&quot;, const std::string &amp;configBasePath=&quot;&quot;, const char commentChar=&apos;#&apos;, const char delimiterChar=&apos;=&apos;, const char quoteChar=&apos;&quot;&apos;, const bool warnOverwrite = false) </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~MConfig</name>
      <anchorfile>class_tools_1_1_m_config.html</anchorfile>
      <anchor>ae9337a487c0a8eee2b003a46ad114670</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddItem</name>
      <anchorfile>class_tools_1_1_m_config.html</anchorfile>
      <anchor>abca1ac2769e38c48b99daffc97037da7</anchor>
      <arglist>(const std::string &amp;key, const std::string &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>CheckItem</name>
      <anchorfile>class_tools_1_1_m_config.html</anchorfile>
      <anchor>acc81b7af1086f5952e3815db4dc51aef</anchor>
      <arglist>(const std::string &amp;key)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ClearItems</name>
      <anchorfile>class_tools_1_1_m_config.html</anchorfile>
      <anchor>a5e7f03cc51be8da3f218e4e15813b8f3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>GetItem</name>
      <anchorfile>class_tools_1_1_m_config.html</anchorfile>
      <anchor>a7c5f527e13b9e8103d18ea9ad39450f2</anchor>
      <arglist>(const std::string &amp;key, const T &amp;defaultItem) const</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>GetItem</name>
      <anchorfile>class_tools_1_1_m_config.html</anchorfile>
      <anchor>afde7471ccc4236e348dd0184b69b3cc9</anchor>
      <arglist>(const std::string &amp;key) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ImportFile</name>
      <anchorfile>class_tools_1_1_m_config.html</anchorfile>
      <anchor>afd94b02bdc8d7cc0ce7a0c06ca28bb37</anchor>
      <arglist>(const std::string &amp;iPath, const std::string &amp;old_string=&quot;&quot;, const std::string &amp;new_string=&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Print</name>
      <anchorfile>class_tools_1_1_m_config.html</anchorfile>
      <anchor>ab4468ae87367cc3e0e57b5cfcd1346aa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>DumpToFile</name>
      <anchorfile>class_tools_1_1_m_config.html</anchorfile>
      <anchor>a0534861e2d36087e6f6171d34718cbfe</anchor>
      <arglist>(std::string filePath)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setYear</name>
      <anchorfile>class_tools_1_1_m_config.html</anchorfile>
      <anchor>a930fac5407dacc496d1d01e418d07aaf</anchor>
      <arglist>(std::string year, std::vector&lt; std::string &gt; possibleYears={&quot;2016APV&quot;, &quot;2016&quot;, &quot;2017&quot;, &quot;2018&quot;})</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>RemoveItem</name>
      <anchorfile>class_tools_1_1_m_config.html</anchorfile>
      <anchor>af443f884b579339d0acb071589ee1299</anchor>
      <arglist>(const std::string &amp;itemtag)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>WriteFile</name>
      <anchorfile>class_tools_1_1_m_config.html</anchorfile>
      <anchor>a3862a5e301833db7a449e70765a1b21e</anchor>
      <arglist>(bool forceWrite=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetWritePathAndName</name>
      <anchorfile>class_tools_1_1_m_config.html</anchorfile>
      <anchor>acd4fe279727e302ab01f9b7b527108a7</anchor>
      <arglist>(const std::string &amp;writePath=&quot;&quot;, const std::string &amp;writeFileName=&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetWriteFile</name>
      <anchorfile>class_tools_1_1_m_config.html</anchorfile>
      <anchor>a1e633ec530452f7cc369b308dfe985b7</anchor>
      <arglist>(const bool &amp;write=true, const std::string &amp;writePath=&quot;&quot;, const std::string &amp;writeFileName=&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type>const char</type>
      <name>GetCommentChar</name>
      <anchorfile>class_tools_1_1_m_config.html</anchorfile>
      <anchor>a073e45588379693ecca8f5dd555779fe</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const char</type>
      <name>GetDelimiterChar</name>
      <anchorfile>class_tools_1_1_m_config.html</anchorfile>
      <anchor>ab4ff104a61b8f80aabe3b6b30be08efd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const char</type>
      <name>GetQuoteChar</name>
      <anchorfile>class_tools_1_1_m_config.html</anchorfile>
      <anchor>ac2fc62bd5e150b1c6b2505183a2c5d8b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>GetConfigBasePath</name>
      <anchorfile>class_tools_1_1_m_config.html</anchorfile>
      <anchor>a04f0a26b0990893e02062959d3405602</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>GetConfigFilePath</name>
      <anchorfile>class_tools_1_1_m_config.html</anchorfile>
      <anchor>aea1d91ea07fda4b99cd0e388677fb9a7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>GetWritePath</name>
      <anchorfile>class_tools_1_1_m_config.html</anchorfile>
      <anchor>a77ee47990f2ce0ecf695936e3492e243</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>GetWriteFileName</name>
      <anchorfile>class_tools_1_1_m_config.html</anchorfile>
      <anchor>a30fee06a6cd19b847183ba387bfe472d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>GetImportIdentifier</name>
      <anchorfile>class_tools_1_1_m_config.html</anchorfile>
      <anchor>a3f5c8cd537048d06abe13fcbe6254001</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetCommentChar</name>
      <anchorfile>class_tools_1_1_m_config.html</anchorfile>
      <anchor>a0881a2932328de0b88bc5dbea7f509b7</anchor>
      <arglist>(const char commentChar)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDelimiterChar</name>
      <anchorfile>class_tools_1_1_m_config.html</anchorfile>
      <anchor>a285483547b8e28e1bd6ccfeb0affc7ef</anchor>
      <arglist>(const char delimiterChar)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetQuoteChar</name>
      <anchorfile>class_tools_1_1_m_config.html</anchorfile>
      <anchor>a7c3b09a3334b691023584fb18a36ab05</anchor>
      <arglist>(const char quoteChar)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetConfigBasePath</name>
      <anchorfile>class_tools_1_1_m_config.html</anchorfile>
      <anchor>a9117bf873de26d1aacdbff388ed52a68</anchor>
      <arglist>(const std::string &amp;path)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetConfigBasePath</name>
      <anchorfile>class_tools_1_1_m_config.html</anchorfile>
      <anchor>aaf47ac144b65ea055a4c4f10d074dea6</anchor>
      <arglist>(const Path &amp;path)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetImportIdentifier</name>
      <anchorfile>class_tools_1_1_m_config.html</anchorfile>
      <anchor>a19cf00f81cab27b5390fd0d8e591b659</anchor>
      <arglist>(const std::string &amp;identfier)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>pxl::MessageDispatcher</name>
    <filename>classpxl_1_1_message_dispatcher.html</filename>
    <member kind="function">
      <type></type>
      <name>MessageDispatcher</name>
      <anchorfile>classpxl_1_1_message_dispatcher.html</anchorfile>
      <anchor>ac2db2d6f6cdd69e2270172ddeaa88006</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~MessageDispatcher</name>
      <anchorfile>classpxl_1_1_message_dispatcher.html</anchorfile>
      <anchor>aefd0060f7b90f588d010f9c8e553ba2c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>publish</name>
      <anchorfile>classpxl_1_1_message_dispatcher.html</anchorfile>
      <anchor>affe76249f6d3e8b9f1206ba05bd222fa</anchor>
      <arglist>(std::string mid, const Variant &amp;parameter)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>publish</name>
      <anchorfile>classpxl_1_1_message_dispatcher.html</anchorfile>
      <anchor>a446eef44a3eceed2d806099a06507cd8</anchor>
      <arglist>(size_t mid, const Variant &amp;parameter)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>subscribe</name>
      <anchorfile>classpxl_1_1_message_dispatcher.html</anchorfile>
      <anchor>acb4f2ee08377955dbb466e4c56de7368</anchor>
      <arglist>(std::string mid, MessageHandler *handler)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>subscribe</name>
      <anchorfile>classpxl_1_1_message_dispatcher.html</anchorfile>
      <anchor>aa6443daa2eb9260c8878fd49618a2e41</anchor>
      <arglist>(size_t mid, MessageHandler *handler)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>unsubscribe</name>
      <anchorfile>classpxl_1_1_message_dispatcher.html</anchorfile>
      <anchor>a08f073f85e71fe248a95229f9d9f881b</anchor>
      <arglist>(std::string mid, MessageHandler *handler)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unsubscribe</name>
      <anchorfile>classpxl_1_1_message_dispatcher.html</anchorfile>
      <anchor>a10109d1d8e731d7a7396afcc3ed27baf</anchor>
      <arglist>(size_t mid, MessageHandler *handler)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unsubscribe</name>
      <anchorfile>classpxl_1_1_message_dispatcher.html</anchorfile>
      <anchor>af8cac5de765bc5b00480443e3067be0f</anchor>
      <arglist>(MessageHandler *handler)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>getId</name>
      <anchorfile>classpxl_1_1_message_dispatcher.html</anchorfile>
      <anchor>ac7e82aba1b1656f45377aee115c8ac3c</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getName</name>
      <anchorfile>classpxl_1_1_message_dispatcher.html</anchorfile>
      <anchor>a35cd295391dfd91cf7938a745ed1b688</anchor>
      <arglist>(const size_t &amp;mid)</arglist>
    </member>
    <member kind="function">
      <type>const std::map&lt; std::string, size_t &gt;</type>
      <name>getIds</name>
      <anchorfile>classpxl_1_1_message_dispatcher.html</anchorfile>
      <anchor>ac937e13e4db164c2f7ab02b1790d768a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MessageDispatcher &amp;</type>
      <name>instance</name>
      <anchorfile>classpxl_1_1_message_dispatcher.html</anchorfile>
      <anchor>abca3efb1e310f0cf70951ad191bd6d15</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>pxl::MessageHandler</name>
    <filename>classpxl_1_1_message_handler.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~MessageHandler</name>
      <anchorfile>classpxl_1_1_message_handler.html</anchorfile>
      <anchor>abac92cd59e6f82912315bb89c5443644</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>handleMessage</name>
      <anchorfile>classpxl_1_1_message_handler.html</anchorfile>
      <anchor>a0b4987d9fadf2324d92b57fef906a367</anchor>
      <arglist>(size_t mid, const Variant &amp;parameter)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>METSelector</name>
    <filename>class_m_e_t_selector.html</filename>
    <base>ObjectSelector</base>
    <member kind="function">
      <type></type>
      <name>METSelector</name>
      <anchorfile>class_m_e_t_selector.html</anchorfile>
      <anchor>a86ad6784530dd778252690981f1ae251</anchor>
      <arglist>(const Tools::MConfig &amp;cfg, OldNameMapper *globalOldNameMap)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~METSelector</name>
      <anchorfile>class_m_e_t_selector.html</anchorfile>
      <anchor>a7e5992b8b029ac35257fca349eb4484e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>passObjectSelection</name>
      <anchorfile>class_m_e_t_selector.html</anchorfile>
      <anchor>a3c5cdbbbcb124d45b44ade89b262d395</anchor>
      <arglist>(pxl::Particle *met, double const metRho, const std::string &amp;idType, const bool isSyst) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>passKinematics</name>
      <anchorfile>class_object_selector.html</anchorfile>
      <anchor>a96ba15ff2c5195e1797a1d3850c530a8</anchor>
      <arglist>(pxl::Particle *object, const bool isSyst=false) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setScaleFactors</name>
      <anchorfile>class_object_selector.html</anchorfile>
      <anchor>aa5e974f081f10a2e9ca4ab5569c22e7e</anchor>
      <arglist>(pxl::Particle *object)</arglist>
    </member>
    <member kind="variable">
      <type>OldNameMapper *</type>
      <name>oldNameMap</name>
      <anchorfile>class_object_selector.html</anchorfile>
      <anchor>a8944cd815366dde3b857d9b76e28b6bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_object_name</name>
      <anchorfile>class_object_selector.html</anchorfile>
      <anchor>a97be92d352eab8f1f7736e1210142697</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; ScaleFactor &gt;</type>
      <name>m_scale_factors</name>
      <anchorfile>class_object_selector.html</anchorfile>
      <anchor>acb033d208366dd65b0ee20215cde1eed</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MinMax</name>
    <filename>class_min_max.html</filename>
    <templarg>fSigned</templarg>
    <templarg>bits</templarg>
  </compound>
  <compound kind="class">
    <name>MinMax&lt; false, 16 &gt;</name>
    <filename>class_min_max_3_01false_00_0116_01_4.html</filename>
    <member kind="variable" static="yes">
      <type>static const unsigned __int16</type>
      <name>min</name>
      <anchorfile>class_min_max_3_01false_00_0116_01_4.html</anchorfile>
      <anchor>a782b3a98dabf141889869ba87fd02d35</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned __int16</type>
      <name>max</name>
      <anchorfile>class_min_max_3_01false_00_0116_01_4.html</anchorfile>
      <anchor>ab550f6f9dc4048e3d69e1fda66e7d153</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MinMax&lt; false, 32 &gt;</name>
    <filename>class_min_max_3_01false_00_0132_01_4.html</filename>
    <member kind="variable" static="yes">
      <type>static const unsigned __int32</type>
      <name>min</name>
      <anchorfile>class_min_max_3_01false_00_0132_01_4.html</anchorfile>
      <anchor>a821c9f61ac76bfab1918551fadfc989e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned __int32</type>
      <name>max</name>
      <anchorfile>class_min_max_3_01false_00_0132_01_4.html</anchorfile>
      <anchor>afb9f98d158821a96e01c91bdfbdbb109</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MinMax&lt; false, 64 &gt;</name>
    <filename>class_min_max_3_01false_00_0164_01_4.html</filename>
    <member kind="variable" static="yes">
      <type>static const unsigned __int64</type>
      <name>min</name>
      <anchorfile>class_min_max_3_01false_00_0164_01_4.html</anchorfile>
      <anchor>ab44218abdf0a14c0784068d7622fa471</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned __int64</type>
      <name>max</name>
      <anchorfile>class_min_max_3_01false_00_0164_01_4.html</anchorfile>
      <anchor>af3d81af6f9f7b82c8a6b9791cd8e6e26</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MinMax&lt; false, 8 &gt;</name>
    <filename>class_min_max_3_01false_00_018_01_4.html</filename>
    <member kind="variable" static="yes">
      <type>static const unsigned __int8</type>
      <name>min</name>
      <anchorfile>class_min_max_3_01false_00_018_01_4.html</anchorfile>
      <anchor>a624b5312a93a88bb180dd606ceb0ca83</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned __int8</type>
      <name>max</name>
      <anchorfile>class_min_max_3_01false_00_018_01_4.html</anchorfile>
      <anchor>a3b17c075b6cb4d65f74a86e8457dc93b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MinMax&lt; true, 16 &gt;</name>
    <filename>class_min_max_3_01true_00_0116_01_4.html</filename>
    <member kind="variable" static="yes">
      <type>static const __int16</type>
      <name>min</name>
      <anchorfile>class_min_max_3_01true_00_0116_01_4.html</anchorfile>
      <anchor>ac6c4e0245a88d442f051f8ccac060929</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const __int16</type>
      <name>max</name>
      <anchorfile>class_min_max_3_01true_00_0116_01_4.html</anchorfile>
      <anchor>a96e498ecc8319890fc5316778e2c2616</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MinMax&lt; true, 32 &gt;</name>
    <filename>class_min_max_3_01true_00_0132_01_4.html</filename>
    <member kind="variable" static="yes">
      <type>static const __int32</type>
      <name>min</name>
      <anchorfile>class_min_max_3_01true_00_0132_01_4.html</anchorfile>
      <anchor>abf28d227417b1e900630097fecc9c178</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const __int32</type>
      <name>max</name>
      <anchorfile>class_min_max_3_01true_00_0132_01_4.html</anchorfile>
      <anchor>a33bcb413a52c13daafb9d21122d8aaed</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MinMax&lt; true, 64 &gt;</name>
    <filename>class_min_max_3_01true_00_0164_01_4.html</filename>
    <member kind="variable" static="yes">
      <type>static const __int64</type>
      <name>min</name>
      <anchorfile>class_min_max_3_01true_00_0164_01_4.html</anchorfile>
      <anchor>ab033f4ad8fdf277e2fd61f3f52137866</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const __int64</type>
      <name>max</name>
      <anchorfile>class_min_max_3_01true_00_0164_01_4.html</anchorfile>
      <anchor>a020dd5790bf52ab70f5825b4bdfc1454</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MinMax&lt; true, 8 &gt;</name>
    <filename>class_min_max_3_01true_00_018_01_4.html</filename>
    <member kind="variable" static="yes">
      <type>static const __int8</type>
      <name>min</name>
      <anchorfile>class_min_max_3_01true_00_018_01_4.html</anchorfile>
      <anchor>a176cbb690f6886b9da7b014bdaacf3bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const __int8</type>
      <name>max</name>
      <anchorfile>class_min_max_3_01true_00_018_01_4.html</anchorfile>
      <anchor>af36739509aa6f2aafd39770b1e6f2541</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Color::Modifier</name>
    <filename>class_color_1_1_modifier.html</filename>
    <member kind="function">
      <type></type>
      <name>Modifier</name>
      <anchorfile>class_color_1_1_modifier.html</anchorfile>
      <anchor>aa65d7f75142f2473a7483a443564fde2</anchor>
      <arglist>(Code pCode, bool pBatch)</arglist>
    </member>
    <member kind="friend">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>class_color_1_1_modifier.html</anchorfile>
      <anchor>ac8f273427118e5ef594503e7ca51ac82</anchor>
      <arglist>(std::ostream &amp;os, const Modifier &amp;mod)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ModulusHelper</name>
    <filename>class_modulus_helper.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg>method</templarg>
  </compound>
  <compound kind="class">
    <name>ModulusHelper&lt; T, U, ComparisonMethod_CastInt &gt;</name>
    <filename>class_modulus_helper_3_01_t_00_01_u_00_01_comparison_method___cast_int_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static SafeIntError</type>
      <name>Modulus</name>
      <anchorfile>class_modulus_helper_3_01_t_00_01_u_00_01_comparison_method___cast_int_01_4.html</anchorfile>
      <anchor>a218f2b087d406c172da994cf18292668</anchor>
      <arglist>(const T &amp;t, const U &amp;u, T &amp;result)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>ModulusThrow</name>
      <anchorfile>class_modulus_helper_3_01_t_00_01_u_00_01_comparison_method___cast_int_01_4.html</anchorfile>
      <anchor>a3e280bb12079414a117e4aafb92027e2</anchor>
      <arglist>(const T &amp;t, const U &amp;u, T &amp;result)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ModulusHelper&lt; T, U, ComparisonMethod_CastInt64 &gt;</name>
    <filename>class_modulus_helper_3_01_t_00_01_u_00_01_comparison_method___cast_int64_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static SafeIntError</type>
      <name>Modulus</name>
      <anchorfile>class_modulus_helper_3_01_t_00_01_u_00_01_comparison_method___cast_int64_01_4.html</anchorfile>
      <anchor>a94a58abd13a10ceb02edacc515ccd2a2</anchor>
      <arglist>(const T &amp;t, const U &amp;u, T &amp;result)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>ModulusThrow</name>
      <anchorfile>class_modulus_helper_3_01_t_00_01_u_00_01_comparison_method___cast_int64_01_4.html</anchorfile>
      <anchor>a69a21dd233eb2e6c0a14043ae82a4c8d</anchor>
      <arglist>(const T &amp;t, const U &amp;u, T &amp;result)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ModulusHelper&lt; T, U, ComparisonMethod_Ok &gt;</name>
    <filename>class_modulus_helper_3_01_t_00_01_u_00_01_comparison_method___ok_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static SafeIntError</type>
      <name>Modulus</name>
      <anchorfile>class_modulus_helper_3_01_t_00_01_u_00_01_comparison_method___ok_01_4.html</anchorfile>
      <anchor>ab4cd316e824a03066363efa5a7fd0033</anchor>
      <arglist>(const T &amp;t, const U &amp;u, T &amp;result)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>ModulusThrow</name>
      <anchorfile>class_modulus_helper_3_01_t_00_01_u_00_01_comparison_method___ok_01_4.html</anchorfile>
      <anchor>a344063760c66969ccacb778eccdeb33c</anchor>
      <arglist>(const T &amp;t, const U &amp;u, T &amp;result)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ModulusHelper&lt; T, U, ComparisonMethod_UnsignedT &gt;</name>
    <filename>class_modulus_helper_3_01_t_00_01_u_00_01_comparison_method___unsigned_t_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static SafeIntError</type>
      <name>Modulus</name>
      <anchorfile>class_modulus_helper_3_01_t_00_01_u_00_01_comparison_method___unsigned_t_01_4.html</anchorfile>
      <anchor>abdd5d530385b20e766b6511d06c4ef06</anchor>
      <arglist>(const T &amp;t, const U &amp;u, T &amp;result)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>ModulusThrow</name>
      <anchorfile>class_modulus_helper_3_01_t_00_01_u_00_01_comparison_method___unsigned_t_01_4.html</anchorfile>
      <anchor>a78b535b510fcbfefb54b7ad71f413398</anchor>
      <arglist>(const T &amp;t, const U &amp;u, T &amp;result)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ModulusHelper&lt; T, U, ComparisonMethod_UnsignedU &gt;</name>
    <filename>class_modulus_helper_3_01_t_00_01_u_00_01_comparison_method___unsigned_u_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static SafeIntError</type>
      <name>Modulus</name>
      <anchorfile>class_modulus_helper_3_01_t_00_01_u_00_01_comparison_method___unsigned_u_01_4.html</anchorfile>
      <anchor>a01eb15222b6cd8c4606bde566b2eb475</anchor>
      <arglist>(const T &amp;t, const U &amp;u, T &amp;result)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>ModulusThrow</name>
      <anchorfile>class_modulus_helper_3_01_t_00_01_u_00_01_comparison_method___unsigned_u_01_4.html</anchorfile>
      <anchor>a0516d70e0043cfd96d071155ef625d44</anchor>
      <arglist>(const T &amp;t, const U &amp;u, T &amp;result)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ModulusSignedCaseHelper</name>
    <filename>class_modulus_signed_case_helper.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg>method</templarg>
  </compound>
  <compound kind="class">
    <name>ModulusSignedCaseHelper&lt; T, E, false &gt;</name>
    <filename>class_modulus_signed_case_helper_3_01_t_00_01_e_00_01false_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>SignedCase</name>
      <anchorfile>class_modulus_signed_case_helper_3_01_t_00_01_e_00_01false_01_4.html</anchorfile>
      <anchor>aa7299054b5674b8498f9442d81c2991e</anchor>
      <arglist>(SafeInt&lt; T, E &gt;, SafeInt&lt; T, E &gt; &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ModulusSignedCaseHelper&lt; T, E, true &gt;</name>
    <filename>class_modulus_signed_case_helper_3_01_t_00_01_e_00_01true_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>SignedCase</name>
      <anchorfile>class_modulus_signed_case_helper_3_01_t_00_01_e_00_01true_01_4.html</anchorfile>
      <anchor>a461bda6d37234d98989bf661b840fd58</anchor>
      <arglist>(SafeInt&lt; T, E &gt; rhs, SafeInt&lt; T, E &gt; &amp;result)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ModulusSimpleCaseHelper</name>
    <filename>class_modulus_simple_case_helper.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg>method</templarg>
  </compound>
  <compound kind="class">
    <name>ModulusSimpleCaseHelper&lt; T, U, E, false &gt;</name>
    <filename>class_modulus_simple_case_helper_3_01_t_00_01_u_00_01_e_00_01false_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>ModulusSimpleCase</name>
      <anchorfile>class_modulus_simple_case_helper_3_01_t_00_01_u_00_01_e_00_01false_01_4.html</anchorfile>
      <anchor>a94d162f5301f5ac2be516922008156d5</anchor>
      <arglist>(U, SafeInt&lt; T, E &gt;, SafeInt&lt; T, E &gt; &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ModulusSimpleCaseHelper&lt; T, U, E, true &gt;</name>
    <filename>class_modulus_simple_case_helper_3_01_t_00_01_u_00_01_e_00_01true_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>ModulusSimpleCase</name>
      <anchorfile>class_modulus_simple_case_helper_3_01_t_00_01_u_00_01_e_00_01true_01_4.html</anchorfile>
      <anchor>ad6d3e988c4d3d7a7b6ea94f86f65426d</anchor>
      <arglist>(U lhs, SafeInt&lt; T, E &gt; rhs, SafeInt&lt; T, E &gt; &amp;result)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BS::multi_future</name>
    <filename>class_b_s_1_1multi__future.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>multi_future</name>
      <anchorfile>class_b_s_1_1multi__future.html</anchorfile>
      <anchor>a320812d6a9287fa2aedf3deab6edee1a</anchor>
      <arglist>(const size_t num_futures_=0)</arglist>
    </member>
    <member kind="function">
      <type>std::conditional_t&lt; std::is_void_v&lt; T &gt;, void, std::vector&lt; T &gt; &gt;</type>
      <name>get</name>
      <anchorfile>class_b_s_1_1multi__future.html</anchorfile>
      <anchor>abc4a07d29c078263b60ae785b7330880</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::future&lt; T &gt; &amp;</type>
      <name>operator[]</name>
      <anchorfile>class_b_s_1_1multi__future.html</anchorfile>
      <anchor>abc96c3ab6b47827071f043f27b1f9501</anchor>
      <arglist>(const size_t i)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push_back</name>
      <anchorfile>class_b_s_1_1multi__future.html</anchorfile>
      <anchor>a6af9fb74e856f779a1722d2018afebee</anchor>
      <arglist>(std::future&lt; T &gt; future)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>size</name>
      <anchorfile>class_b_s_1_1multi__future.html</anchorfile>
      <anchor>abf3325699649c91f9dd88f5a252e742e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>wait</name>
      <anchorfile>class_b_s_1_1multi__future.html</anchorfile>
      <anchor>a05073ed8d37b939c9440ac8789b69ba7</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MultiplicationHelper</name>
    <filename>class_multiplication_helper.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg>state</templarg>
  </compound>
  <compound kind="class">
    <name>MultiplicationHelper&lt; T, U, MultiplicationState_CastInt &gt;</name>
    <filename>class_multiplication_helper_3_01_t_00_01_u_00_01_multiplication_state___cast_int_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>Multiply</name>
      <anchorfile>class_multiplication_helper_3_01_t_00_01_u_00_01_multiplication_state___cast_int_01_4.html</anchorfile>
      <anchor>a93fdf126416209d5c8c2d5d31e4f1641</anchor>
      <arglist>(const T &amp;t, const U &amp;u, T &amp;ret)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>MultiplyThrow</name>
      <anchorfile>class_multiplication_helper_3_01_t_00_01_u_00_01_multiplication_state___cast_int_01_4.html</anchorfile>
      <anchor>a40300e0f2495b9b728514d334db8fcff</anchor>
      <arglist>(const T &amp;t, const U &amp;u, T &amp;ret)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MultiplicationHelper&lt; T, U, MultiplicationState_CastInt64 &gt;</name>
    <filename>class_multiplication_helper_3_01_t_00_01_u_00_01_multiplication_state___cast_int64_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>Multiply</name>
      <anchorfile>class_multiplication_helper_3_01_t_00_01_u_00_01_multiplication_state___cast_int64_01_4.html</anchorfile>
      <anchor>a5ff056d9c25043a7fb10d0d3b9417e76</anchor>
      <arglist>(const T &amp;t, const U &amp;u, T &amp;ret)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>MultiplyThrow</name>
      <anchorfile>class_multiplication_helper_3_01_t_00_01_u_00_01_multiplication_state___cast_int64_01_4.html</anchorfile>
      <anchor>a0231ee7ee449f7b265a8eaeffdd27943</anchor>
      <arglist>(const T &amp;t, const U &amp;u, T &amp;ret)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MultiplicationHelper&lt; T, U, MultiplicationState_CastUint &gt;</name>
    <filename>class_multiplication_helper_3_01_t_00_01_u_00_01_multiplication_state___cast_uint_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>Multiply</name>
      <anchorfile>class_multiplication_helper_3_01_t_00_01_u_00_01_multiplication_state___cast_uint_01_4.html</anchorfile>
      <anchor>ae18bde9cfc31ba354d7935da5e6e25e7</anchor>
      <arglist>(const T &amp;t, const U &amp;u, T &amp;ret)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>MultiplyThrow</name>
      <anchorfile>class_multiplication_helper_3_01_t_00_01_u_00_01_multiplication_state___cast_uint_01_4.html</anchorfile>
      <anchor>add69ee0fb898aa8264a69708722dcf7f</anchor>
      <arglist>(const T &amp;t, const U &amp;u, T &amp;ret)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MultiplicationHelper&lt; T, U, MultiplicationState_CastUint64 &gt;</name>
    <filename>class_multiplication_helper_3_01_t_00_01_u_00_01_multiplication_state___cast_uint64_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>Multiply</name>
      <anchorfile>class_multiplication_helper_3_01_t_00_01_u_00_01_multiplication_state___cast_uint64_01_4.html</anchorfile>
      <anchor>a9a38afa459caf8fc17c0b3628fe90cd0</anchor>
      <arglist>(const T &amp;t, const U &amp;u, T &amp;ret)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>MultiplyThrow</name>
      <anchorfile>class_multiplication_helper_3_01_t_00_01_u_00_01_multiplication_state___cast_uint64_01_4.html</anchorfile>
      <anchor>a90278d39ffc179fb3ed1f2ee8decbf2e</anchor>
      <arglist>(const T &amp;t, const U &amp;u, T &amp;ret)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MultiplicationHelper&lt; T, U, MultiplicationState_Int64Int &gt;</name>
    <filename>class_multiplication_helper_3_01_t_00_01_u_00_01_multiplication_state___int64_int_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>Multiply</name>
      <anchorfile>class_multiplication_helper_3_01_t_00_01_u_00_01_multiplication_state___int64_int_01_4.html</anchorfile>
      <anchor>a7be919661bf9cb2f668269863db6e349</anchor>
      <arglist>(const T &amp;t, U u, T &amp;ret)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>MultiplyThrow</name>
      <anchorfile>class_multiplication_helper_3_01_t_00_01_u_00_01_multiplication_state___int64_int_01_4.html</anchorfile>
      <anchor>aa3008cd07c1d486bc869c997d2ce4c26</anchor>
      <arglist>(const __int64 &amp;t, U u, T &amp;ret)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MultiplicationHelper&lt; T, U, MultiplicationState_Int64Int64 &gt;</name>
    <filename>class_multiplication_helper_3_01_t_00_01_u_00_01_multiplication_state___int64_int64_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>Multiply</name>
      <anchorfile>class_multiplication_helper_3_01_t_00_01_u_00_01_multiplication_state___int64_int64_01_4.html</anchorfile>
      <anchor>af7ad3a64048ce0c6b925bd4583c67834</anchor>
      <arglist>(const T &amp;t, const U &amp;u, T &amp;ret)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>MultiplyThrow</name>
      <anchorfile>class_multiplication_helper_3_01_t_00_01_u_00_01_multiplication_state___int64_int64_01_4.html</anchorfile>
      <anchor>a3d95685088176fc9ca6bff7789a15bb8</anchor>
      <arglist>(const T &amp;t, const U &amp;u, T &amp;ret)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MultiplicationHelper&lt; T, U, MultiplicationState_Int64Uint &gt;</name>
    <filename>class_multiplication_helper_3_01_t_00_01_u_00_01_multiplication_state___int64_uint_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>Multiply</name>
      <anchorfile>class_multiplication_helper_3_01_t_00_01_u_00_01_multiplication_state___int64_uint_01_4.html</anchorfile>
      <anchor>ae3d39e9efb77c6e66ba6c12a3aa08bc2</anchor>
      <arglist>(const T &amp;t, const U &amp;u, T &amp;ret)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>MultiplyThrow</name>
      <anchorfile>class_multiplication_helper_3_01_t_00_01_u_00_01_multiplication_state___int64_uint_01_4.html</anchorfile>
      <anchor>a2e2842df2b496e4c0ade01203c58b6e7</anchor>
      <arglist>(const T &amp;t, const U &amp;u, T &amp;ret)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MultiplicationHelper&lt; T, U, MultiplicationState_Int64Uint64 &gt;</name>
    <filename>class_multiplication_helper_3_01_t_00_01_u_00_01_multiplication_state___int64_uint64_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>Multiply</name>
      <anchorfile>class_multiplication_helper_3_01_t_00_01_u_00_01_multiplication_state___int64_uint64_01_4.html</anchorfile>
      <anchor>ad000f8807525386f4c01b07c9c7dc685</anchor>
      <arglist>(const T &amp;t, const U &amp;u, T &amp;ret)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>MultiplyThrow</name>
      <anchorfile>class_multiplication_helper_3_01_t_00_01_u_00_01_multiplication_state___int64_uint64_01_4.html</anchorfile>
      <anchor>adb4f84676f7b322fd9b9faa402ace08d</anchor>
      <arglist>(const __int64 &amp;t, const unsigned __int64 &amp;u, T &amp;ret)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MultiplicationHelper&lt; T, U, MultiplicationState_IntInt64 &gt;</name>
    <filename>class_multiplication_helper_3_01_t_00_01_u_00_01_multiplication_state___int_int64_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>Multiply</name>
      <anchorfile>class_multiplication_helper_3_01_t_00_01_u_00_01_multiplication_state___int_int64_01_4.html</anchorfile>
      <anchor>aa0a38fa9642d396a4a1307cc9dc985ba</anchor>
      <arglist>(T t, const U &amp;u, T &amp;ret)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>MultiplyThrow</name>
      <anchorfile>class_multiplication_helper_3_01_t_00_01_u_00_01_multiplication_state___int_int64_01_4.html</anchorfile>
      <anchor>a2960b6473c02b7622cf0070baa3347d4</anchor>
      <arglist>(T t, const U &amp;u, T &amp;ret)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MultiplicationHelper&lt; T, U, MultiplicationState_IntUint64 &gt;</name>
    <filename>class_multiplication_helper_3_01_t_00_01_u_00_01_multiplication_state___int_uint64_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>Multiply</name>
      <anchorfile>class_multiplication_helper_3_01_t_00_01_u_00_01_multiplication_state___int_uint64_01_4.html</anchorfile>
      <anchor>ab855a72f8f9660570f24e9b60f96cba8</anchor>
      <arglist>(T t, const U &amp;u, T &amp;ret)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>MultiplyThrow</name>
      <anchorfile>class_multiplication_helper_3_01_t_00_01_u_00_01_multiplication_state___int_uint64_01_4.html</anchorfile>
      <anchor>aafe4e75a23a53776442c96b7463680ad</anchor>
      <arglist>(T t, const unsigned __int64 &amp;u, T &amp;ret)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MultiplicationHelper&lt; T, U, MultiplicationState_Uint64Int &gt;</name>
    <filename>class_multiplication_helper_3_01_t_00_01_u_00_01_multiplication_state___uint64_int_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>Multiply</name>
      <anchorfile>class_multiplication_helper_3_01_t_00_01_u_00_01_multiplication_state___uint64_int_01_4.html</anchorfile>
      <anchor>a6853a32d0e4d8ddf035c1a08ddb3580e</anchor>
      <arglist>(const T &amp;t, const U &amp;u, T &amp;ret)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>MultiplyThrow</name>
      <anchorfile>class_multiplication_helper_3_01_t_00_01_u_00_01_multiplication_state___uint64_int_01_4.html</anchorfile>
      <anchor>ad6498fcad08174efdcdf328a84b6b03b</anchor>
      <arglist>(const T &amp;t, const U &amp;u, T &amp;ret)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MultiplicationHelper&lt; T, U, MultiplicationState_Uint64Int64 &gt;</name>
    <filename>class_multiplication_helper_3_01_t_00_01_u_00_01_multiplication_state___uint64_int64_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>Multiply</name>
      <anchorfile>class_multiplication_helper_3_01_t_00_01_u_00_01_multiplication_state___uint64_int64_01_4.html</anchorfile>
      <anchor>a95aa881cb22b8937647016c413d5f136</anchor>
      <arglist>(const T &amp;t, const U &amp;u, T &amp;ret)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>MultiplyThrow</name>
      <anchorfile>class_multiplication_helper_3_01_t_00_01_u_00_01_multiplication_state___uint64_int64_01_4.html</anchorfile>
      <anchor>a3ac60201dfa24a31c072befbefc451bc</anchor>
      <arglist>(const T &amp;t, const U &amp;u, T &amp;ret)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MultiplicationHelper&lt; T, U, MultiplicationState_Uint64Uint &gt;</name>
    <filename>class_multiplication_helper_3_01_t_00_01_u_00_01_multiplication_state___uint64_uint_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>Multiply</name>
      <anchorfile>class_multiplication_helper_3_01_t_00_01_u_00_01_multiplication_state___uint64_uint_01_4.html</anchorfile>
      <anchor>a866902e8a0fe2a34796065fb48bfbe67</anchor>
      <arglist>(const T &amp;t, const U &amp;u, T &amp;ret)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>MultiplyThrow</name>
      <anchorfile>class_multiplication_helper_3_01_t_00_01_u_00_01_multiplication_state___uint64_uint_01_4.html</anchorfile>
      <anchor>afbc1bab0cce8b03918091ea804509643</anchor>
      <arglist>(const T &amp;t, const U &amp;u, T &amp;ret)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MultiplicationHelper&lt; T, U, MultiplicationState_Uint64Uint64 &gt;</name>
    <filename>class_multiplication_helper_3_01_t_00_01_u_00_01_multiplication_state___uint64_uint64_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>Multiply</name>
      <anchorfile>class_multiplication_helper_3_01_t_00_01_u_00_01_multiplication_state___uint64_uint64_01_4.html</anchorfile>
      <anchor>a8ed19162667a654826766b6d72c83c83</anchor>
      <arglist>(const T &amp;t, const U &amp;u, T &amp;ret)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>MultiplyThrow</name>
      <anchorfile>class_multiplication_helper_3_01_t_00_01_u_00_01_multiplication_state___uint64_uint64_01_4.html</anchorfile>
      <anchor>af05d2c6342a0c30bc89b2943534603a9</anchor>
      <arglist>(const unsigned __int64 &amp;t, const unsigned __int64 &amp;u, T &amp;ret)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MultiplicationHelper&lt; T, U, MultiplicationState_UintInt64 &gt;</name>
    <filename>class_multiplication_helper_3_01_t_00_01_u_00_01_multiplication_state___uint_int64_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>Multiply</name>
      <anchorfile>class_multiplication_helper_3_01_t_00_01_u_00_01_multiplication_state___uint_int64_01_4.html</anchorfile>
      <anchor>a81590117fb226b4720ba304eae0abcfc</anchor>
      <arglist>(const T &amp;t, const U &amp;u, T &amp;ret)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>MultiplyThrow</name>
      <anchorfile>class_multiplication_helper_3_01_t_00_01_u_00_01_multiplication_state___uint_int64_01_4.html</anchorfile>
      <anchor>a9c25877bd867ec9d4da17b0cc9a991c8</anchor>
      <arglist>(const T &amp;t, const U &amp;u, T &amp;ret)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MultiplicationHelper&lt; T, U, MultiplicationState_UintUint64 &gt;</name>
    <filename>class_multiplication_helper_3_01_t_00_01_u_00_01_multiplication_state___uint_uint64_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>Multiply</name>
      <anchorfile>class_multiplication_helper_3_01_t_00_01_u_00_01_multiplication_state___uint_uint64_01_4.html</anchorfile>
      <anchor>ac4239eccb08ae03cbf2fe6d6cf4530a6</anchor>
      <arglist>(const T &amp;t, const U &amp;u, T &amp;ret)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>MultiplyThrow</name>
      <anchorfile>class_multiplication_helper_3_01_t_00_01_u_00_01_multiplication_state___uint_uint64_01_4.html</anchorfile>
      <anchor>a7ae6887b1501a0711e97824fb4f8671f</anchor>
      <arglist>(const T &amp;t, const U &amp;u, T &amp;ret)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MultiplicationMethod</name>
    <filename>class_multiplication_method.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="enumvalue">
      <name>method</name>
      <anchorfile>class_multiplication_method.html</anchorfile>
      <anchor>a6abf199606dc37364024e4d46d8bf066a5c12e594641e62076a804847190d6855</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>method</name>
      <anchorfile>class_multiplication_method.html</anchorfile>
      <anchor>a6abf199606dc37364024e4d46d8bf066a5c12e594641e62076a804847190d6855</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>indicators::MultiProgress</name>
    <filename>classindicators_1_1_multi_progress.html</filename>
    <templarg></templarg>
    <templarg>count</templarg>
    <member kind="function">
      <type></type>
      <name>MultiProgress</name>
      <anchorfile>classindicators_1_1_multi_progress.html</anchorfile>
      <anchor>ab50239852be3defd9b0972a176cc9171</anchor>
      <arglist>(Indicators &amp;...bars)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt;(index &gt;=0 &amp;&amp;index&lt; count), void &gt;::type</type>
      <name>set_progress</name>
      <anchorfile>classindicators_1_1_multi_progress.html</anchorfile>
      <anchor>a74e9ec4143061b6eafb1f99a94cc6b30</anchor>
      <arglist>(size_t value)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt;(index &gt;=0 &amp;&amp;index&lt; count), void &gt;::type</type>
      <name>set_progress</name>
      <anchorfile>classindicators_1_1_multi_progress.html</anchorfile>
      <anchor>a70fbe9cd7432179dee67e1eedab5afab</anchor>
      <arglist>(float value)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt;(index &gt;=0 &amp;&amp;index&lt; count), void &gt;::type</type>
      <name>tick</name>
      <anchorfile>classindicators_1_1_multi_progress.html</anchorfile>
      <anchor>ac3180ca1604efac926a3df2652a3d008</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt;(index &gt;=0 &amp;&amp;index&lt; count), bool &gt;::type</type>
      <name>is_completed</name>
      <anchorfile>classindicators_1_1_multi_progress.html</anchorfile>
      <anchor>a116d30976209e26395af93034fe9ae33</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print_progress</name>
      <anchorfile>classindicators_1_1_multi_progress.html</anchorfile>
      <anchor>acfd3185c3d0a90eb7d5a8e77de108129</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MuonSelector</name>
    <filename>class_muon_selector.html</filename>
    <base>ObjectSelector</base>
    <member kind="function">
      <type></type>
      <name>MuonSelector</name>
      <anchorfile>class_muon_selector.html</anchorfile>
      <anchor>a3098ea27ce237ea4128a2094c8bbe0c5</anchor>
      <arglist>(const Tools::MConfig &amp;config, OldNameMapper *globalOldNameMap)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~MuonSelector</name>
      <anchorfile>class_muon_selector.html</anchorfile>
      <anchor>ab2c5aa302400ba7d6cd6567f16b711ba</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>passMuon</name>
      <anchorfile>class_muon_selector.html</anchorfile>
      <anchor>aa7901c870430d5c1a6da13afcdaa313c</anchor>
      <arglist>(pxl::Particle *muon, double const rho, const bool &amp;isRec) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>passObjectSelection</name>
      <anchorfile>class_muon_selector.html</anchorfile>
      <anchor>a81b637ef240148f42faee5f40aae7f87</anchor>
      <arglist>(pxl::Particle *muon, double const muonRho, const std::string &amp;idType, const bool isSyst) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>passKinematics</name>
      <anchorfile>class_object_selector.html</anchorfile>
      <anchor>a96ba15ff2c5195e1797a1d3850c530a8</anchor>
      <arglist>(pxl::Particle *object, const bool isSyst=false) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setScaleFactors</name>
      <anchorfile>class_object_selector.html</anchorfile>
      <anchor>aa5e974f081f10a2e9ca4ab5569c22e7e</anchor>
      <arglist>(pxl::Particle *object)</arglist>
    </member>
    <member kind="variable">
      <type>OldNameMapper *</type>
      <name>oldNameMap</name>
      <anchorfile>class_object_selector.html</anchorfile>
      <anchor>a8944cd815366dde3b857d9b76e28b6bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_object_name</name>
      <anchorfile>class_object_selector.html</anchorfile>
      <anchor>a97be92d352eab8f1f7736e1210142697</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; ScaleFactor &gt;</type>
      <name>m_scale_factors</name>
      <anchorfile>class_object_selector.html</anchorfile>
      <anchor>acb033d208366dd65b0ee20215cde1eed</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>pxl::NamedTMPFile</name>
    <filename>classpxl_1_1_named_t_m_p_file.html</filename>
    <member kind="function">
      <type></type>
      <name>NamedTMPFile</name>
      <anchorfile>classpxl_1_1_named_t_m_p_file.html</anchorfile>
      <anchor>a90a842aacdf6dce96f732c6b5ab174e4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~NamedTMPFile</name>
      <anchorfile>classpxl_1_1_named_t_m_p_file.html</anchorfile>
      <anchor>ad83ea0b1e8e483fc92034cca5ecc39ec</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getName</name>
      <anchorfile>classpxl_1_1_named_t_m_p_file.html</anchorfile>
      <anchor>a164bb6554dd9fdd9e620dd3b6b471e69</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NanoAODReader</name>
    <filename>class_nano_a_o_d_reader.html</filename>
    <member kind="function">
      <type></type>
      <name>NanoAODReader</name>
      <anchorfile>class_nano_a_o_d_reader.html</anchorfile>
      <anchor>ae9365d7247be2409309262b303a4cda0</anchor>
      <arglist>(TTree &amp;tree)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~NanoAODReader</name>
      <anchorfile>class_nano_a_o_d_reader.html</anchorfile>
      <anchor>ab1c3e6149cca8409167a97ee335b03cd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>TTreeReader *</type>
      <name>getReader</name>
      <anchorfile>class_nano_a_o_d_reader.html</anchorfile>
      <anchor>ac0bebb2c36d1fc7ca199e6c9937ef952</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::string &gt;</type>
      <name>getListOfBranches</name>
      <anchorfile>class_nano_a_o_d_reader.html</anchorfile>
      <anchor>abbb059bfe9a52adfddcff5a3b23919d8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>next</name>
      <anchorfile>class_nano_a_o_d_reader.html</anchorfile>
      <anchor>a1da261c2457ed53cd1fa52c3805accc4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printContent</name>
      <anchorfile>class_nano_a_o_d_reader.html</anchorfile>
      <anchor>a068552411e809a188e48d6d5edea9a08</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getTemplate</name>
      <anchorfile>class_nano_a_o_d_reader.html</anchorfile>
      <anchor>a470d82fe4fb340d96874db376197c8cb</anchor>
      <arglist>(std::string &amp;particle)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>eraseSubString</name>
      <anchorfile>class_nano_a_o_d_reader.html</anchorfile>
      <anchor>a6711134aa8639c79cd42b6219476abbc</anchor>
      <arglist>(std::string mainStr, const std::string &amp;toErase)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>checkIfBranchExists</name>
      <anchorfile>class_nano_a_o_d_reader.html</anchorfile>
      <anchor>a75cfe0fb4a4224e7a69b8c758e39b55b</anchor>
      <arglist>(std::string branch_name)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>GetTypeName</name>
      <anchorfile>class_nano_a_o_d_reader.html</anchorfile>
      <anchor>afdc76e8cc3f4fc2b9e9d2ef8474da9af</anchor>
      <arglist>(const std::type_info &amp;ti)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>getVal</name>
      <anchorfile>class_nano_a_o_d_reader.html</anchorfile>
      <anchor>a0fb2493dae0db7c237b2ed79ddbec5cd</anchor>
      <arglist>(std::string valueName)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; T2 &gt;</type>
      <name>getVec</name>
      <anchorfile>class_nano_a_o_d_reader.html</anchorfile>
      <anchor>acf429b48d5c52b5d9f304ce27eea0b80</anchor>
      <arglist>(std::string vectorName)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; UInt_t &gt;</type>
      <name>getVec</name>
      <anchorfile>class_nano_a_o_d_reader.html</anchorfile>
      <anchor>a68b096b1493a22cac381e9f783731fe4</anchor>
      <arglist>(std::string vectorName)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NegationAssertHelper</name>
    <filename>class_negation_assert_helper.html</filename>
    <templarg>method</templarg>
  </compound>
  <compound kind="class">
    <name>NegationAssertHelper&lt; false &gt;</name>
    <filename>class_negation_assert_helper_3_01false_01_4.html</filename>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>BehaviorWarning</name>
      <anchorfile>class_negation_assert_helper_3_01false_01_4.html</anchorfile>
      <anchor>a2208fccf90048541b2aadfd2f932f4fb</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NegationAssertHelper&lt; true &gt;</name>
    <filename>class_negation_assert_helper_3_01true_01_4.html</filename>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>BehaviorWarning</name>
      <anchorfile>class_negation_assert_helper_3_01true_01_4.html</anchorfile>
      <anchor>a171cce6c632cfe4a0c0b04229ffc5fed</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NegationHelper</name>
    <filename>class_negation_helper.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>NegationHelper&lt; T, false &gt;</name>
    <filename>class_negation_helper_3_01_t_00_01false_01_4.html</filename>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static T</type>
      <name>NegativeThrow</name>
      <anchorfile>class_negation_helper_3_01_t_00_01false_01_4.html</anchorfile>
      <anchor>a6ad1cbbeaf93f96841e01414d2e0ed50</anchor>
      <arglist>(T t)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>Negative</name>
      <anchorfile>class_negation_helper_3_01_t_00_01false_01_4.html</anchorfile>
      <anchor>a23d3541b39be91c10d1288855cc4234d</anchor>
      <arglist>(T t, T &amp;ret)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NegationHelper&lt; T, true &gt;</name>
    <filename>class_negation_helper_3_01_t_00_01true_01_4.html</filename>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static T</type>
      <name>NegativeThrow</name>
      <anchorfile>class_negation_helper_3_01_t_00_01true_01_4.html</anchorfile>
      <anchor>ad28f531ca417cb8b9ff5a9f3db0bb614</anchor>
      <arglist>(T t)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>Negative</name>
      <anchorfile>class_negation_helper_3_01_t_00_01true_01_4.html</anchorfile>
      <anchor>ad9f7be287b3a7c76b0f03daec489d43a</anchor>
      <arglist>(T t, T &amp;ret)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NumericType</name>
    <filename>class_numeric_type.html</filename>
    <templarg></templarg>
    <member kind="enumvalue">
      <name>isBool</name>
      <anchorfile>class_numeric_type.html</anchorfile>
      <anchor>af22fa32c75fe4a67b65b12b63e2f5b51a9b42004a3f199131ef5d74fcd585bd5d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>isFloat</name>
      <anchorfile>class_numeric_type.html</anchorfile>
      <anchor>af22fa32c75fe4a67b65b12b63e2f5b51a72fe2fd120b0c9f786520a41e27d57da</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>isInt</name>
      <anchorfile>class_numeric_type.html</anchorfile>
      <anchor>af22fa32c75fe4a67b65b12b63e2f5b51a3c4c0460a88cd939ed8788485d45c100</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>isBool</name>
      <anchorfile>class_numeric_type.html</anchorfile>
      <anchor>af22fa32c75fe4a67b65b12b63e2f5b51a9b42004a3f199131ef5d74fcd585bd5d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>isFloat</name>
      <anchorfile>class_numeric_type.html</anchorfile>
      <anchor>af22fa32c75fe4a67b65b12b63e2f5b51a72fe2fd120b0c9f786520a41e27d57da</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>isInt</name>
      <anchorfile>class_numeric_type.html</anchorfile>
      <anchor>af22fa32c75fe4a67b65b12b63e2f5b51a3c4c0460a88cd939ed8788485d45c100</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NumericType&lt; __int64 &gt;</name>
    <filename>class_numeric_type_3_01____int64_01_4.html</filename>
    <member kind="enumvalue">
      <name>isBool</name>
      <anchorfile>class_numeric_type_3_01____int64_01_4.html</anchorfile>
      <anchor>a35e4448b3df517dbdfcc4e5460cbbd0fac22325316dacc0a54b1224bc18a020b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>isFloat</name>
      <anchorfile>class_numeric_type_3_01____int64_01_4.html</anchorfile>
      <anchor>a35e4448b3df517dbdfcc4e5460cbbd0fa408f509c6c81c4a02a0fa4dd3387e71a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>isInt</name>
      <anchorfile>class_numeric_type_3_01____int64_01_4.html</anchorfile>
      <anchor>a35e4448b3df517dbdfcc4e5460cbbd0fa52761cd546e4d0e869dca377cf0d9e89</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>isBool</name>
      <anchorfile>class_numeric_type_3_01____int64_01_4.html</anchorfile>
      <anchor>a35e4448b3df517dbdfcc4e5460cbbd0fac22325316dacc0a54b1224bc18a020b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>isFloat</name>
      <anchorfile>class_numeric_type_3_01____int64_01_4.html</anchorfile>
      <anchor>a35e4448b3df517dbdfcc4e5460cbbd0fa408f509c6c81c4a02a0fa4dd3387e71a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>isInt</name>
      <anchorfile>class_numeric_type_3_01____int64_01_4.html</anchorfile>
      <anchor>a35e4448b3df517dbdfcc4e5460cbbd0fa52761cd546e4d0e869dca377cf0d9e89</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NumericType&lt; bool &gt;</name>
    <filename>class_numeric_type_3_01bool_01_4.html</filename>
    <member kind="enumvalue">
      <name>isBool</name>
      <anchorfile>class_numeric_type_3_01bool_01_4.html</anchorfile>
      <anchor>a982c35abfec2807381c363a09323e344afd3e6ada157c2349eb7e8e1e796a822d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>isFloat</name>
      <anchorfile>class_numeric_type_3_01bool_01_4.html</anchorfile>
      <anchor>a982c35abfec2807381c363a09323e344a82371782823d3b747331873e663ff43c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>isInt</name>
      <anchorfile>class_numeric_type_3_01bool_01_4.html</anchorfile>
      <anchor>a982c35abfec2807381c363a09323e344a7cb2694c38774092a03cbe2c4dde51c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>isBool</name>
      <anchorfile>class_numeric_type_3_01bool_01_4.html</anchorfile>
      <anchor>a982c35abfec2807381c363a09323e344afd3e6ada157c2349eb7e8e1e796a822d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>isFloat</name>
      <anchorfile>class_numeric_type_3_01bool_01_4.html</anchorfile>
      <anchor>a982c35abfec2807381c363a09323e344a82371782823d3b747331873e663ff43c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>isInt</name>
      <anchorfile>class_numeric_type_3_01bool_01_4.html</anchorfile>
      <anchor>a982c35abfec2807381c363a09323e344a7cb2694c38774092a03cbe2c4dde51c0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NumericType&lt; char &gt;</name>
    <filename>class_numeric_type_3_01char_01_4.html</filename>
    <member kind="enumvalue">
      <name>isBool</name>
      <anchorfile>class_numeric_type_3_01char_01_4.html</anchorfile>
      <anchor>a0e9a956e59a1a7338ff64b4f66eaad00a4671f04e9f6be159a25c27d06c380937</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>isFloat</name>
      <anchorfile>class_numeric_type_3_01char_01_4.html</anchorfile>
      <anchor>a0e9a956e59a1a7338ff64b4f66eaad00abc762459c66656f05416f74600c6c8ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>isInt</name>
      <anchorfile>class_numeric_type_3_01char_01_4.html</anchorfile>
      <anchor>a0e9a956e59a1a7338ff64b4f66eaad00a69351c2bfefae603ae6f66653bd8f5f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>isBool</name>
      <anchorfile>class_numeric_type_3_01char_01_4.html</anchorfile>
      <anchor>a0e9a956e59a1a7338ff64b4f66eaad00a4671f04e9f6be159a25c27d06c380937</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>isFloat</name>
      <anchorfile>class_numeric_type_3_01char_01_4.html</anchorfile>
      <anchor>a0e9a956e59a1a7338ff64b4f66eaad00abc762459c66656f05416f74600c6c8ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>isInt</name>
      <anchorfile>class_numeric_type_3_01char_01_4.html</anchorfile>
      <anchor>a0e9a956e59a1a7338ff64b4f66eaad00a69351c2bfefae603ae6f66653bd8f5f9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NumericType&lt; double &gt;</name>
    <filename>class_numeric_type_3_01double_01_4.html</filename>
    <member kind="enumvalue">
      <name>isBool</name>
      <anchorfile>class_numeric_type_3_01double_01_4.html</anchorfile>
      <anchor>a377fa78a5e42f6ad0c0c444e3d978a79a70e003a7042dacfa1d033c1e7c6785e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>isFloat</name>
      <anchorfile>class_numeric_type_3_01double_01_4.html</anchorfile>
      <anchor>a377fa78a5e42f6ad0c0c444e3d978a79a46084544744f6e2407494c97917735ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>isInt</name>
      <anchorfile>class_numeric_type_3_01double_01_4.html</anchorfile>
      <anchor>a377fa78a5e42f6ad0c0c444e3d978a79a4c092dc946232373f79efa2cb990f6ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>isBool</name>
      <anchorfile>class_numeric_type_3_01double_01_4.html</anchorfile>
      <anchor>a377fa78a5e42f6ad0c0c444e3d978a79a70e003a7042dacfa1d033c1e7c6785e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>isFloat</name>
      <anchorfile>class_numeric_type_3_01double_01_4.html</anchorfile>
      <anchor>a377fa78a5e42f6ad0c0c444e3d978a79a46084544744f6e2407494c97917735ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>isInt</name>
      <anchorfile>class_numeric_type_3_01double_01_4.html</anchorfile>
      <anchor>a377fa78a5e42f6ad0c0c444e3d978a79a4c092dc946232373f79efa2cb990f6ac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NumericType&lt; float &gt;</name>
    <filename>class_numeric_type_3_01float_01_4.html</filename>
    <member kind="enumvalue">
      <name>isBool</name>
      <anchorfile>class_numeric_type_3_01float_01_4.html</anchorfile>
      <anchor>a160a69cddd400f9d5eb9c2b3e161bb42aa13dbaa287ba52e87deea862edf4665e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>isFloat</name>
      <anchorfile>class_numeric_type_3_01float_01_4.html</anchorfile>
      <anchor>a160a69cddd400f9d5eb9c2b3e161bb42a75877500d4306e76438da6b1e29d5c14</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>isInt</name>
      <anchorfile>class_numeric_type_3_01float_01_4.html</anchorfile>
      <anchor>a160a69cddd400f9d5eb9c2b3e161bb42abf7866a303bd9fde95751ae63f3fb28d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>isBool</name>
      <anchorfile>class_numeric_type_3_01float_01_4.html</anchorfile>
      <anchor>a160a69cddd400f9d5eb9c2b3e161bb42aa13dbaa287ba52e87deea862edf4665e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>isFloat</name>
      <anchorfile>class_numeric_type_3_01float_01_4.html</anchorfile>
      <anchor>a160a69cddd400f9d5eb9c2b3e161bb42a75877500d4306e76438da6b1e29d5c14</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>isInt</name>
      <anchorfile>class_numeric_type_3_01float_01_4.html</anchorfile>
      <anchor>a160a69cddd400f9d5eb9c2b3e161bb42abf7866a303bd9fde95751ae63f3fb28d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NumericType&lt; int &gt;</name>
    <filename>class_numeric_type_3_01int_01_4.html</filename>
    <member kind="enumvalue">
      <name>isBool</name>
      <anchorfile>class_numeric_type_3_01int_01_4.html</anchorfile>
      <anchor>a9f6e91d784fe6c2053a4b576aed96aaaa1e488d8f65b8311f09a0da8df517e6fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>isFloat</name>
      <anchorfile>class_numeric_type_3_01int_01_4.html</anchorfile>
      <anchor>a9f6e91d784fe6c2053a4b576aed96aaaaf591eaf076bcb5a71fcf2a2c46bb5cc1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>isInt</name>
      <anchorfile>class_numeric_type_3_01int_01_4.html</anchorfile>
      <anchor>a9f6e91d784fe6c2053a4b576aed96aaaad36a9e03642c8b5a78f5cf3db73aa2be</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>isBool</name>
      <anchorfile>class_numeric_type_3_01int_01_4.html</anchorfile>
      <anchor>a9f6e91d784fe6c2053a4b576aed96aaaa1e488d8f65b8311f09a0da8df517e6fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>isFloat</name>
      <anchorfile>class_numeric_type_3_01int_01_4.html</anchorfile>
      <anchor>a9f6e91d784fe6c2053a4b576aed96aaaaf591eaf076bcb5a71fcf2a2c46bb5cc1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>isInt</name>
      <anchorfile>class_numeric_type_3_01int_01_4.html</anchorfile>
      <anchor>a9f6e91d784fe6c2053a4b576aed96aaaad36a9e03642c8b5a78f5cf3db73aa2be</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NumericType&lt; long &gt;</name>
    <filename>class_numeric_type_3_01long_01_4.html</filename>
    <member kind="enumvalue">
      <name>isBool</name>
      <anchorfile>class_numeric_type_3_01long_01_4.html</anchorfile>
      <anchor>a6bb34b0ba38d2985ef22c63cc23f5a4fa02be44ea0d6cda226c64b410066c37e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>isFloat</name>
      <anchorfile>class_numeric_type_3_01long_01_4.html</anchorfile>
      <anchor>a6bb34b0ba38d2985ef22c63cc23f5a4fa232d2579f0dfad381538c650b12307e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>isInt</name>
      <anchorfile>class_numeric_type_3_01long_01_4.html</anchorfile>
      <anchor>a6bb34b0ba38d2985ef22c63cc23f5a4fab385b38bc259abb7d13790a9d5afe149</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>isBool</name>
      <anchorfile>class_numeric_type_3_01long_01_4.html</anchorfile>
      <anchor>a6bb34b0ba38d2985ef22c63cc23f5a4fa02be44ea0d6cda226c64b410066c37e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>isFloat</name>
      <anchorfile>class_numeric_type_3_01long_01_4.html</anchorfile>
      <anchor>a6bb34b0ba38d2985ef22c63cc23f5a4fa232d2579f0dfad381538c650b12307e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>isInt</name>
      <anchorfile>class_numeric_type_3_01long_01_4.html</anchorfile>
      <anchor>a6bb34b0ba38d2985ef22c63cc23f5a4fab385b38bc259abb7d13790a9d5afe149</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NumericType&lt; long double &gt;</name>
    <filename>class_numeric_type_3_01long_01double_01_4.html</filename>
    <member kind="enumvalue">
      <name>isBool</name>
      <anchorfile>class_numeric_type_3_01long_01double_01_4.html</anchorfile>
      <anchor>a00132c392c8feb05a9d693cd256a48e0abf533daf57a1b029fc2034063890b1a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>isFloat</name>
      <anchorfile>class_numeric_type_3_01long_01double_01_4.html</anchorfile>
      <anchor>a00132c392c8feb05a9d693cd256a48e0ad92877954e22ba1d0ebac07b9724b716</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>isInt</name>
      <anchorfile>class_numeric_type_3_01long_01double_01_4.html</anchorfile>
      <anchor>a00132c392c8feb05a9d693cd256a48e0a9026d3a702f1280d67f04c8d8fea4ef7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>isBool</name>
      <anchorfile>class_numeric_type_3_01long_01double_01_4.html</anchorfile>
      <anchor>a00132c392c8feb05a9d693cd256a48e0abf533daf57a1b029fc2034063890b1a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>isFloat</name>
      <anchorfile>class_numeric_type_3_01long_01double_01_4.html</anchorfile>
      <anchor>a00132c392c8feb05a9d693cd256a48e0ad92877954e22ba1d0ebac07b9724b716</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>isInt</name>
      <anchorfile>class_numeric_type_3_01long_01double_01_4.html</anchorfile>
      <anchor>a00132c392c8feb05a9d693cd256a48e0a9026d3a702f1280d67f04c8d8fea4ef7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NumericType&lt; short &gt;</name>
    <filename>class_numeric_type_3_01short_01_4.html</filename>
    <member kind="enumvalue">
      <name>isBool</name>
      <anchorfile>class_numeric_type_3_01short_01_4.html</anchorfile>
      <anchor>a97c6c827cb69f4a226f424d882763aeca43aecee03cde0ffe8a243f38b60885f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>isFloat</name>
      <anchorfile>class_numeric_type_3_01short_01_4.html</anchorfile>
      <anchor>a97c6c827cb69f4a226f424d882763aeca3b4800cfe7b28db717355a69b8c56850</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>isInt</name>
      <anchorfile>class_numeric_type_3_01short_01_4.html</anchorfile>
      <anchor>a97c6c827cb69f4a226f424d882763aeca647e4b69e097ed5e00880f04fbc3f6d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>isBool</name>
      <anchorfile>class_numeric_type_3_01short_01_4.html</anchorfile>
      <anchor>a97c6c827cb69f4a226f424d882763aeca43aecee03cde0ffe8a243f38b60885f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>isFloat</name>
      <anchorfile>class_numeric_type_3_01short_01_4.html</anchorfile>
      <anchor>a97c6c827cb69f4a226f424d882763aeca3b4800cfe7b28db717355a69b8c56850</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>isInt</name>
      <anchorfile>class_numeric_type_3_01short_01_4.html</anchorfile>
      <anchor>a97c6c827cb69f4a226f424d882763aeca647e4b69e097ed5e00880f04fbc3f6d4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NumericType&lt; signed char &gt;</name>
    <filename>class_numeric_type_3_01signed_01char_01_4.html</filename>
    <member kind="enumvalue">
      <name>isBool</name>
      <anchorfile>class_numeric_type_3_01signed_01char_01_4.html</anchorfile>
      <anchor>acc704746f9d43ca5f330372f301d612babc5908005d227d68df5d57b6c51e409b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>isFloat</name>
      <anchorfile>class_numeric_type_3_01signed_01char_01_4.html</anchorfile>
      <anchor>acc704746f9d43ca5f330372f301d612ba184d8639ca8cbedda688daf53860e5bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>isInt</name>
      <anchorfile>class_numeric_type_3_01signed_01char_01_4.html</anchorfile>
      <anchor>acc704746f9d43ca5f330372f301d612bace87a195de2165491629a3359f78b263</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>isBool</name>
      <anchorfile>class_numeric_type_3_01signed_01char_01_4.html</anchorfile>
      <anchor>acc704746f9d43ca5f330372f301d612babc5908005d227d68df5d57b6c51e409b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>isFloat</name>
      <anchorfile>class_numeric_type_3_01signed_01char_01_4.html</anchorfile>
      <anchor>acc704746f9d43ca5f330372f301d612ba184d8639ca8cbedda688daf53860e5bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>isInt</name>
      <anchorfile>class_numeric_type_3_01signed_01char_01_4.html</anchorfile>
      <anchor>acc704746f9d43ca5f330372f301d612bace87a195de2165491629a3359f78b263</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NumericType&lt; unsigned __int64 &gt;</name>
    <filename>class_numeric_type_3_01unsigned_01____int64_01_4.html</filename>
    <member kind="enumvalue">
      <name>isBool</name>
      <anchorfile>class_numeric_type_3_01unsigned_01____int64_01_4.html</anchorfile>
      <anchor>a071a6c0b9d7ab4e553fef28b7444adeaa3a223d893f18ed98500a11880d770ba0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>isFloat</name>
      <anchorfile>class_numeric_type_3_01unsigned_01____int64_01_4.html</anchorfile>
      <anchor>a071a6c0b9d7ab4e553fef28b7444adeaa0a4746668de98d5a3950b8f13f836802</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>isInt</name>
      <anchorfile>class_numeric_type_3_01unsigned_01____int64_01_4.html</anchorfile>
      <anchor>a071a6c0b9d7ab4e553fef28b7444adeaaf7ed01dbe8bbac157c8c744d3f09dc2d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>isBool</name>
      <anchorfile>class_numeric_type_3_01unsigned_01____int64_01_4.html</anchorfile>
      <anchor>a071a6c0b9d7ab4e553fef28b7444adeaa3a223d893f18ed98500a11880d770ba0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>isFloat</name>
      <anchorfile>class_numeric_type_3_01unsigned_01____int64_01_4.html</anchorfile>
      <anchor>a071a6c0b9d7ab4e553fef28b7444adeaa0a4746668de98d5a3950b8f13f836802</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>isInt</name>
      <anchorfile>class_numeric_type_3_01unsigned_01____int64_01_4.html</anchorfile>
      <anchor>a071a6c0b9d7ab4e553fef28b7444adeaaf7ed01dbe8bbac157c8c744d3f09dc2d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NumericType&lt; unsigned char &gt;</name>
    <filename>class_numeric_type_3_01unsigned_01char_01_4.html</filename>
    <member kind="enumvalue">
      <name>isBool</name>
      <anchorfile>class_numeric_type_3_01unsigned_01char_01_4.html</anchorfile>
      <anchor>a816ffdc114d845254881e325deef954aa25f7d5c67011f822b6f8a485842682a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>isFloat</name>
      <anchorfile>class_numeric_type_3_01unsigned_01char_01_4.html</anchorfile>
      <anchor>a816ffdc114d845254881e325deef954aa9c6517f1ac3fe85f8c15353facf655ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>isInt</name>
      <anchorfile>class_numeric_type_3_01unsigned_01char_01_4.html</anchorfile>
      <anchor>a816ffdc114d845254881e325deef954aa1fdfae28e312d72c5b0bf5a0983a6f96</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>isBool</name>
      <anchorfile>class_numeric_type_3_01unsigned_01char_01_4.html</anchorfile>
      <anchor>a816ffdc114d845254881e325deef954aa25f7d5c67011f822b6f8a485842682a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>isFloat</name>
      <anchorfile>class_numeric_type_3_01unsigned_01char_01_4.html</anchorfile>
      <anchor>a816ffdc114d845254881e325deef954aa9c6517f1ac3fe85f8c15353facf655ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>isInt</name>
      <anchorfile>class_numeric_type_3_01unsigned_01char_01_4.html</anchorfile>
      <anchor>a816ffdc114d845254881e325deef954aa1fdfae28e312d72c5b0bf5a0983a6f96</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NumericType&lt; unsigned int &gt;</name>
    <filename>class_numeric_type_3_01unsigned_01int_01_4.html</filename>
    <member kind="enumvalue">
      <name>isBool</name>
      <anchorfile>class_numeric_type_3_01unsigned_01int_01_4.html</anchorfile>
      <anchor>a32fde8d91244fd42683866b7c5d8d4d5aa667fe9ef38218d11ac91661264c3359</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>isFloat</name>
      <anchorfile>class_numeric_type_3_01unsigned_01int_01_4.html</anchorfile>
      <anchor>a32fde8d91244fd42683866b7c5d8d4d5a7fad60185c22bb59975f7925d6d47a33</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>isInt</name>
      <anchorfile>class_numeric_type_3_01unsigned_01int_01_4.html</anchorfile>
      <anchor>a32fde8d91244fd42683866b7c5d8d4d5a682d070e6a6602727897d7c2428ceaca</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>isBool</name>
      <anchorfile>class_numeric_type_3_01unsigned_01int_01_4.html</anchorfile>
      <anchor>a32fde8d91244fd42683866b7c5d8d4d5aa667fe9ef38218d11ac91661264c3359</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>isFloat</name>
      <anchorfile>class_numeric_type_3_01unsigned_01int_01_4.html</anchorfile>
      <anchor>a32fde8d91244fd42683866b7c5d8d4d5a7fad60185c22bb59975f7925d6d47a33</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>isInt</name>
      <anchorfile>class_numeric_type_3_01unsigned_01int_01_4.html</anchorfile>
      <anchor>a32fde8d91244fd42683866b7c5d8d4d5a682d070e6a6602727897d7c2428ceaca</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NumericType&lt; unsigned long &gt;</name>
    <filename>class_numeric_type_3_01unsigned_01long_01_4.html</filename>
    <member kind="enumvalue">
      <name>isBool</name>
      <anchorfile>class_numeric_type_3_01unsigned_01long_01_4.html</anchorfile>
      <anchor>a5a7ce712ff8de3e7699ccc86ae6b238fadc5cf964c8db41f68c8a29f262a1bc44</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>isFloat</name>
      <anchorfile>class_numeric_type_3_01unsigned_01long_01_4.html</anchorfile>
      <anchor>a5a7ce712ff8de3e7699ccc86ae6b238fa69f662ec63dfae12b20dc87719c29dd8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>isInt</name>
      <anchorfile>class_numeric_type_3_01unsigned_01long_01_4.html</anchorfile>
      <anchor>a5a7ce712ff8de3e7699ccc86ae6b238fa254b85449b74e7946a7f64f4a7c32e1f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>isBool</name>
      <anchorfile>class_numeric_type_3_01unsigned_01long_01_4.html</anchorfile>
      <anchor>a5a7ce712ff8de3e7699ccc86ae6b238fadc5cf964c8db41f68c8a29f262a1bc44</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>isFloat</name>
      <anchorfile>class_numeric_type_3_01unsigned_01long_01_4.html</anchorfile>
      <anchor>a5a7ce712ff8de3e7699ccc86ae6b238fa69f662ec63dfae12b20dc87719c29dd8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>isInt</name>
      <anchorfile>class_numeric_type_3_01unsigned_01long_01_4.html</anchorfile>
      <anchor>a5a7ce712ff8de3e7699ccc86ae6b238fa254b85449b74e7946a7f64f4a7c32e1f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NumericType&lt; unsigned short &gt;</name>
    <filename>class_numeric_type_3_01unsigned_01short_01_4.html</filename>
    <member kind="enumvalue">
      <name>isBool</name>
      <anchorfile>class_numeric_type_3_01unsigned_01short_01_4.html</anchorfile>
      <anchor>adf6189c24dc18df6af5c1b875168608baf600aad0eb0c307e81f1fb4a1e420a90</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>isFloat</name>
      <anchorfile>class_numeric_type_3_01unsigned_01short_01_4.html</anchorfile>
      <anchor>adf6189c24dc18df6af5c1b875168608baa0a381f9f7bd8dd7771d53b4f8886021</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>isInt</name>
      <anchorfile>class_numeric_type_3_01unsigned_01short_01_4.html</anchorfile>
      <anchor>adf6189c24dc18df6af5c1b875168608ba3ad40380a9a8212f3762764a9c1c89f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>isBool</name>
      <anchorfile>class_numeric_type_3_01unsigned_01short_01_4.html</anchorfile>
      <anchor>adf6189c24dc18df6af5c1b875168608baf600aad0eb0c307e81f1fb4a1e420a90</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>isFloat</name>
      <anchorfile>class_numeric_type_3_01unsigned_01short_01_4.html</anchorfile>
      <anchor>adf6189c24dc18df6af5c1b875168608baa0a381f9f7bd8dd7771d53b4f8886021</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>isInt</name>
      <anchorfile>class_numeric_type_3_01unsigned_01short_01_4.html</anchorfile>
      <anchor>adf6189c24dc18df6af5c1b875168608ba3ad40380a9a8212f3762764a9c1c89f0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>pxl::Object</name>
    <filename>classpxl_1_1_object.html</filename>
    <base>pxl::Relative</base>
    <base>pxl::UserRecordHelper</base>
    <member kind="function">
      <type></type>
      <name>Object</name>
      <anchorfile>classpxl_1_1_object.html</anchorfile>
      <anchor>a092b28a9b17282d1fcb1beb2f635ad42</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Object</name>
      <anchorfile>classpxl_1_1_object.html</anchorfile>
      <anchor>afb6da02e023f27f032db86470d7f7fe9</anchor>
      <arglist>(const Object &amp;original)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Object</name>
      <anchorfile>classpxl_1_1_object.html</anchorfile>
      <anchor>a7a0843449647853dbde94052d36694c5</anchor>
      <arglist>(const Object *original)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Id &amp;</type>
      <name>getTypeId</name>
      <anchorfile>classpxl_1_1_object.html</anchorfile>
      <anchor>a3c0bcc205886e8558a808672e5c52fcd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classpxl_1_1_object.html</anchorfile>
      <anchor>a8c7e7e2cadde95b896767a9b6231c0fe</anchor>
      <arglist>(const OutputStream &amp;out) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>deserialize</name>
      <anchorfile>classpxl_1_1_object.html</anchorfile>
      <anchor>a3bedf0b11d31942d828a9ee93696685d</anchor>
      <arglist>(const InputStream &amp;in)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Serializable *</type>
      <name>clone</name>
      <anchorfile>classpxl_1_1_object.html</anchorfile>
      <anchor>a171374cf7d8239dfd8f2ed04e8f37e63</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isLocked</name>
      <anchorfile>classpxl_1_1_object.html</anchorfile>
      <anchor>a584e513d1aada593146e4bb4dca8c1fa</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getWorkFlag</name>
      <anchorfile>classpxl_1_1_object.html</anchorfile>
      <anchor>a9e82ee54fca13b8818634ebd8adda493</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLocked</name>
      <anchorfile>classpxl_1_1_object.html</anchorfile>
      <anchor>a1b2dbf2aef26a3bc4a92735572649a94</anchor>
      <arglist>(bool v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setWorkFlag</name>
      <anchorfile>classpxl_1_1_object.html</anchorfile>
      <anchor>a91d83fb75b1a480ae8323e7b2a5276ad</anchor>
      <arglist>(int v)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::ostream &amp;</type>
      <name>print</name>
      <anchorfile>classpxl_1_1_object.html</anchorfile>
      <anchor>aeba527a0c3888e075d412a8e86a822e4</anchor>
      <arglist>(int level=1, std::ostream &amp;os=std::cout, int pan=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::ostream &amp;</type>
      <name>printContent</name>
      <anchorfile>classpxl_1_1_object.html</anchorfile>
      <anchor>a434021cf01b990778a93f5144817de2d</anchor>
      <arglist>(int level=1, std::ostream &amp;os=std::cout, int pan=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual WkPtrBase *</type>
      <name>createSelfWkPtr</name>
      <anchorfile>classpxl_1_1_object.html</anchorfile>
      <anchor>a0bea63fb2d1460f19eee438c30bf514a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Id</type>
      <name>id</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>a9bf6c17d6fd5b588c00463db4028870b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ObjectOwner *</type>
      <name>owner</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>a556c1cc09bed10e480cceb5da42edb33</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Relations &amp;</type>
      <name>getMotherRelations</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>a10f8728c388408f48a120e90de6298ae</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Relations &amp;</type>
      <name>getDaughterRelations</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>ae3b09cfe9057e042b88cf1adf6b4a036</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Relations &amp;</type>
      <name>getFlatRelations</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>aa8b871a98b21677ef5c159dbb608722d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Relative *</type>
      <name>getMother</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>a53a7b6b11409893dab8a73a0159180ec</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Relative *</type>
      <name>getDaughter</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>a6e7b03ed37eca69cd1063f78fd05b6dc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::set&lt; Relative * &gt; &amp;</type>
      <name>getDaughters</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>a6c4f5b97226fe562ef9144fa14f8c0f5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::set&lt; Relative * &gt; &amp;</type>
      <name>getMothers</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>a1728bea81bb0f966335f32c832a1cffa</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>numberOfDaughters</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>aa92bd45d2b1751fe3bfbbc79c8a21b32</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>numberOfMothers</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>aab1ec876cfe2f1bebf212b60f66ba907</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>linkMother</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>af3f916466c571dad5b0be5f4baded3b3</anchor>
      <arglist>(Relative *target)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>linkDaughter</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>a0a6244c26919bdd6fd45cbb8ea5a8f8b</anchor>
      <arglist>(Relative *target)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>linkFlat</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>a5ee923ece292e0d9268495af7590f060</anchor>
      <arglist>(Relative *target)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unlinkMother</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>a2b75c81e4078d147d36310fe7c3a4800</anchor>
      <arglist>(Relative *target)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unlinkDaughter</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>aaface8521be14a7fbb256ad786355ea4</anchor>
      <arglist>(Relative *target)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unlinkFlat</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>a4a4eba4935e47072056671728c2bd139</anchor>
      <arglist>(Relative *target)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unlinkFlat</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>a8d81b6131cc1532e3ba868e3509cb9b2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unlinkMothers</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>ad51348aae3792d8205823b46da02a564</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unlinkDaughters</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>a3bd2ff6a25aab01fda19df066bb492a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>linkSoft</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>a2ea79223a0f9d9edeeb8398b53ff6ab1</anchor>
      <arglist>(Relative *relative, const std::string &amp;type)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unlinkSoft</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>a1e870e37dbe2b384f85b138b5ec51e0e</anchor>
      <arglist>(Relative *relative, const std::string &amp;type)</arglist>
    </member>
    <member kind="function">
      <type>const SoftRelations &amp;</type>
      <name>getSoftRelations</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>ae5b78c9536de71abbb15a413e31f655e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>SoftRelations &amp;</type>
      <name>getSoftRelations</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>ab72e809de894954b8cc73ff768d757a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getName</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>a5384c8188f28913c4cc898571f133f32</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setName</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>a483a501afd8965daa92d3bafb91b4dfe</anchor>
      <arglist>(const std::string &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>printDecayTree</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>afa50de942d2caa47defa7e39a79df0a9</anchor>
      <arglist>(int level=0, std::ostream &amp;os=std::cout, int pan=1) const</arglist>
    </member>
    <member kind="function">
      <type>const Id &amp;</type>
      <name>getId</name>
      <anchorfile>classpxl_1_1_serializable.html</anchorfile>
      <anchor>a071e3e5bdd7125cee5dd5178807c3647</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const std::string</type>
      <name>toString</name>
      <anchorfile>classpxl_1_1_serializable.html</anchorfile>
      <anchor>abe42afdf47f4fa9cad94e26e9a3d6ba1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const UserRecords &amp;</type>
      <name>getUserRecords</name>
      <anchorfile>classpxl_1_1_user_record_helper.html</anchorfile>
      <anchor>ab7d2e9d7fd53f986163bff24ed9ec2e3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>UserRecords &amp;</type>
      <name>getUserRecords</name>
      <anchorfile>classpxl_1_1_user_record_helper.html</anchorfile>
      <anchor>aed523d427700d001e76af09b138f3355</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setUserRecords</name>
      <anchorfile>classpxl_1_1_user_record_helper.html</anchorfile>
      <anchor>a8bc754ecfd9c00f2a2ccb6395ac0891d</anchor>
      <arglist>(const UserRecords &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setUserRecord</name>
      <anchorfile>classpxl_1_1_user_record_helper.html</anchorfile>
      <anchor>af3ecea27c07445ab7dab72987672a8fd</anchor>
      <arglist>(const std::string &amp;key, const Variant &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>eraseUserRecord</name>
      <anchorfile>classpxl_1_1_user_record_helper.html</anchorfile>
      <anchor>a558dd61337c50bfd93af44f1c65867d7</anchor>
      <arglist>(const std::string &amp;key)</arglist>
    </member>
    <member kind="function">
      <type>const Variant &amp;</type>
      <name>getUserRecord</name>
      <anchorfile>classpxl_1_1_user_record_helper.html</anchorfile>
      <anchor>a0c4e05e6defb9e4eabb75a1aef41d300</anchor>
      <arglist>(const std::string &amp;key) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getUserRecord</name>
      <anchorfile>classpxl_1_1_user_record_helper.html</anchorfile>
      <anchor>a3df9f904d21e126a0527a81663f13ae8</anchor>
      <arglist>(const std::string &amp;key, datatype &amp;item) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasUserRecord</name>
      <anchorfile>classpxl_1_1_user_record_helper.html</anchorfile>
      <anchor>aeae48d210cf0dfd2a52fb7adcfc4bb41</anchor>
      <arglist>(const std::string &amp;key) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const Id &amp;</type>
      <name>getStaticTypeId</name>
      <anchorfile>classpxl_1_1_object.html</anchorfile>
      <anchor>af3947c7a00715d50c0aae1052cf22a83</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::ostream &amp;</type>
      <name>printPan1st</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>a589f7baac2ec1c61eeb4c2c1e3403526</anchor>
      <arglist>(std::ostream &amp;os, int pan) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::ostream &amp;</type>
      <name>printPan</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>a5038bd2b7584b9aacb4b7d0ac02b26fa</anchor>
      <arglist>(std::ostream &amp;os, int pan) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>pxl::ObjectFactory</name>
    <filename>classpxl_1_1_object_factory.html</filename>
    <member kind="function">
      <type>Serializable *</type>
      <name>create</name>
      <anchorfile>classpxl_1_1_object_factory.html</anchorfile>
      <anchor>a943674ae96181e2f850dabcf9896c05a</anchor>
      <arglist>(const Id &amp;id)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>registerProducer</name>
      <anchorfile>classpxl_1_1_object_factory.html</anchorfile>
      <anchor>a732873d9d19e3de941faddb849422460</anchor>
      <arglist>(const Id &amp;id, const ObjectProducerInterface *producer)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unregisterProducer</name>
      <anchorfile>classpxl_1_1_object_factory.html</anchorfile>
      <anchor>aad6ee358374462e2881753c44ecf870f</anchor>
      <arglist>(const ObjectProducerInterface *producer)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ObjectFactory &amp;</type>
      <name>instance</name>
      <anchorfile>classpxl_1_1_object_factory.html</anchorfile>
      <anchor>a2992882e39c3ac0e909fcebfb9b098fe</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>pxl::ObjectManager</name>
    <filename>classpxl_1_1_object_manager.html</filename>
    <base>pxl::Object</base>
    <member kind="function">
      <type></type>
      <name>ObjectManager</name>
      <anchorfile>classpxl_1_1_object_manager.html</anchorfile>
      <anchor>a491a221501a0a5857d57b8f8cfcf42da</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ObjectManager</name>
      <anchorfile>classpxl_1_1_object_manager.html</anchorfile>
      <anchor>a573391f49c723fe453d4b57e3a67d429</anchor>
      <arglist>(const ObjectManager &amp;original)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ObjectManager</name>
      <anchorfile>classpxl_1_1_object_manager.html</anchorfile>
      <anchor>aeae78c6030c6ea09ed6fc8440207f862</anchor>
      <arglist>(const ObjectManager *original)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Id &amp;</type>
      <name>getTypeId</name>
      <anchorfile>classpxl_1_1_object_manager.html</anchorfile>
      <anchor>ae51de8de452363d020684161db92a06e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classpxl_1_1_object_manager.html</anchorfile>
      <anchor>abb960e80d389b1fa4690a65624744954</anchor>
      <arglist>(const OutputStream &amp;out) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>deserialize</name>
      <anchorfile>classpxl_1_1_object_manager.html</anchorfile>
      <anchor>aa2d18ef1da285d824ec87bdbb79ef31e</anchor>
      <arglist>(const InputStream &amp;in)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Serializable *</type>
      <name>clone</name>
      <anchorfile>classpxl_1_1_object_manager.html</anchorfile>
      <anchor>a19b605e1285edded7deb2f87f18b3ef4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>datatype *</type>
      <name>create</name>
      <anchorfile>classpxl_1_1_object_manager.html</anchorfile>
      <anchor>ad1901dcf17216f56a080382d9195c065</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>datatype *</type>
      <name>createIndexed</name>
      <anchorfile>classpxl_1_1_object_manager.html</anchorfile>
      <anchor>a6eeb2a8f66d6fd3eb6f1851b6d6bcc60</anchor>
      <arglist>(const std::string &amp;key)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insertObject</name>
      <anchorfile>classpxl_1_1_object_manager.html</anchorfile>
      <anchor>aa73094f3d4ce7a64c8b862d8dc504ff5</anchor>
      <arglist>(Relative *obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insertObject</name>
      <anchorfile>classpxl_1_1_object_manager.html</anchorfile>
      <anchor>a56047ba744052038894e21c2ce3f549a</anchor>
      <arglist>(Relative *obj, const std::string &amp;key)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setIndexEntry</name>
      <anchorfile>classpxl_1_1_object_manager.html</anchorfile>
      <anchor>aa0cb7e818bc10b94d4100e95192b483f</anchor>
      <arglist>(const std::string &amp;key, Relative *obj)</arglist>
    </member>
    <member kind="function">
      <type>ObjectOwner &amp;</type>
      <name>getObjectOwner</name>
      <anchorfile>classpxl_1_1_object_manager.html</anchorfile>
      <anchor>ad45c49c34ee75bd675857d22af49bc36</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ObjectOwner &amp;</type>
      <name>getObjectOwner</name>
      <anchorfile>classpxl_1_1_object_manager.html</anchorfile>
      <anchor>a555f045954f82fed896e833d752dd6bb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; Relative * &gt; &amp;</type>
      <name>getObjects</name>
      <anchorfile>classpxl_1_1_object_manager.html</anchorfile>
      <anchor>ab7aaeb59e68a34bd2f70cd1ee8f219f9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getObjectsOfType</name>
      <anchorfile>classpxl_1_1_object_manager.html</anchorfile>
      <anchor>a326cbe576dddc1abee93ba88c943400c</anchor>
      <arglist>(std::vector&lt; objecttype * &gt; &amp;vec) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeObject</name>
      <anchorfile>classpxl_1_1_object_manager.html</anchorfile>
      <anchor>a6d2ecf0d8c88cd2d300e737ca565b9bc</anchor>
      <arglist>(Relative *obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>takeObject</name>
      <anchorfile>classpxl_1_1_object_manager.html</anchorfile>
      <anchor>a997b25e8b80baac5b099f8366e16f03e</anchor>
      <arglist>(Relative *obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearObjects</name>
      <anchorfile>classpxl_1_1_object_manager.html</anchorfile>
      <anchor>a29accdf305964e94611cd866755cc30a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>objecttype *</type>
      <name>findObject</name>
      <anchorfile>classpxl_1_1_object_manager.html</anchorfile>
      <anchor>abd54ba43be0f458e4df4bf7ad6a3f499</anchor>
      <arglist>(const std::string key) const</arglist>
    </member>
    <member kind="function">
      <type>objecttype *</type>
      <name>findCopyOf</name>
      <anchorfile>classpxl_1_1_object_manager.html</anchorfile>
      <anchor>a9e3191cfc62b614788b0111f0c0b7dd9</anchor>
      <arglist>(const Relative *original) const</arglist>
    </member>
    <member kind="function">
      <type>const std::map&lt; Id, Relative * &gt; &amp;</type>
      <name>getCopyHistory</name>
      <anchorfile>classpxl_1_1_object_manager.html</anchorfile>
      <anchor>a0b6e868680ed72c14a3bddc5e535ab3c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearCopyHistory</name>
      <anchorfile>classpxl_1_1_object_manager.html</anchorfile>
      <anchor>a302c2b5833f897a7ff4491ba4bb64039</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const std::map&lt; std::string, Relative * &gt; &amp;</type>
      <name>getIndex</name>
      <anchorfile>classpxl_1_1_object_manager.html</anchorfile>
      <anchor>a0351e7dc05a1141c76a4d763f8474ff3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeIndexEntry</name>
      <anchorfile>classpxl_1_1_object_manager.html</anchorfile>
      <anchor>a11b471a5bd9009f4d80257c949113086</anchor>
      <arglist>(const std::string &amp;key)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearIndex</name>
      <anchorfile>classpxl_1_1_object_manager.html</anchorfile>
      <anchor>ae565bdd64538388084bc30bbe9611e06</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual WkPtrBase *</type>
      <name>createSelfWkPtr</name>
      <anchorfile>classpxl_1_1_object_manager.html</anchorfile>
      <anchor>a406c3790ff639c1d5cee10659cad6887</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isLocked</name>
      <anchorfile>classpxl_1_1_object.html</anchorfile>
      <anchor>a584e513d1aada593146e4bb4dca8c1fa</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getWorkFlag</name>
      <anchorfile>classpxl_1_1_object.html</anchorfile>
      <anchor>a9e82ee54fca13b8818634ebd8adda493</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLocked</name>
      <anchorfile>classpxl_1_1_object.html</anchorfile>
      <anchor>a1b2dbf2aef26a3bc4a92735572649a94</anchor>
      <arglist>(bool v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setWorkFlag</name>
      <anchorfile>classpxl_1_1_object.html</anchorfile>
      <anchor>a91d83fb75b1a480ae8323e7b2a5276ad</anchor>
      <arglist>(int v)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::ostream &amp;</type>
      <name>print</name>
      <anchorfile>classpxl_1_1_object.html</anchorfile>
      <anchor>aeba527a0c3888e075d412a8e86a822e4</anchor>
      <arglist>(int level=1, std::ostream &amp;os=std::cout, int pan=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::ostream &amp;</type>
      <name>printContent</name>
      <anchorfile>classpxl_1_1_object.html</anchorfile>
      <anchor>a434021cf01b990778a93f5144817de2d</anchor>
      <arglist>(int level=1, std::ostream &amp;os=std::cout, int pan=0) const</arglist>
    </member>
    <member kind="function">
      <type>Id</type>
      <name>id</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>a9bf6c17d6fd5b588c00463db4028870b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ObjectOwner *</type>
      <name>owner</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>a556c1cc09bed10e480cceb5da42edb33</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Relations &amp;</type>
      <name>getMotherRelations</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>a10f8728c388408f48a120e90de6298ae</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Relations &amp;</type>
      <name>getDaughterRelations</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>ae3b09cfe9057e042b88cf1adf6b4a036</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Relations &amp;</type>
      <name>getFlatRelations</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>aa8b871a98b21677ef5c159dbb608722d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Relative *</type>
      <name>getMother</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>a53a7b6b11409893dab8a73a0159180ec</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Relative *</type>
      <name>getDaughter</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>a6e7b03ed37eca69cd1063f78fd05b6dc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::set&lt; Relative * &gt; &amp;</type>
      <name>getDaughters</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>a6c4f5b97226fe562ef9144fa14f8c0f5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::set&lt; Relative * &gt; &amp;</type>
      <name>getMothers</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>a1728bea81bb0f966335f32c832a1cffa</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>numberOfDaughters</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>aa92bd45d2b1751fe3bfbbc79c8a21b32</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>numberOfMothers</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>aab1ec876cfe2f1bebf212b60f66ba907</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>linkMother</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>af3f916466c571dad5b0be5f4baded3b3</anchor>
      <arglist>(Relative *target)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>linkDaughter</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>a0a6244c26919bdd6fd45cbb8ea5a8f8b</anchor>
      <arglist>(Relative *target)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>linkFlat</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>a5ee923ece292e0d9268495af7590f060</anchor>
      <arglist>(Relative *target)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unlinkMother</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>a2b75c81e4078d147d36310fe7c3a4800</anchor>
      <arglist>(Relative *target)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unlinkDaughter</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>aaface8521be14a7fbb256ad786355ea4</anchor>
      <arglist>(Relative *target)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unlinkFlat</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>a4a4eba4935e47072056671728c2bd139</anchor>
      <arglist>(Relative *target)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unlinkFlat</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>a8d81b6131cc1532e3ba868e3509cb9b2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unlinkMothers</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>ad51348aae3792d8205823b46da02a564</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unlinkDaughters</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>a3bd2ff6a25aab01fda19df066bb492a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>linkSoft</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>a2ea79223a0f9d9edeeb8398b53ff6ab1</anchor>
      <arglist>(Relative *relative, const std::string &amp;type)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unlinkSoft</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>a1e870e37dbe2b384f85b138b5ec51e0e</anchor>
      <arglist>(Relative *relative, const std::string &amp;type)</arglist>
    </member>
    <member kind="function">
      <type>const SoftRelations &amp;</type>
      <name>getSoftRelations</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>ae5b78c9536de71abbb15a413e31f655e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>SoftRelations &amp;</type>
      <name>getSoftRelations</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>ab72e809de894954b8cc73ff768d757a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getName</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>a5384c8188f28913c4cc898571f133f32</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setName</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>a483a501afd8965daa92d3bafb91b4dfe</anchor>
      <arglist>(const std::string &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>printDecayTree</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>afa50de942d2caa47defa7e39a79df0a9</anchor>
      <arglist>(int level=0, std::ostream &amp;os=std::cout, int pan=1) const</arglist>
    </member>
    <member kind="function">
      <type>const Id &amp;</type>
      <name>getId</name>
      <anchorfile>classpxl_1_1_serializable.html</anchorfile>
      <anchor>a071e3e5bdd7125cee5dd5178807c3647</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const std::string</type>
      <name>toString</name>
      <anchorfile>classpxl_1_1_serializable.html</anchorfile>
      <anchor>abe42afdf47f4fa9cad94e26e9a3d6ba1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const UserRecords &amp;</type>
      <name>getUserRecords</name>
      <anchorfile>classpxl_1_1_user_record_helper.html</anchorfile>
      <anchor>ab7d2e9d7fd53f986163bff24ed9ec2e3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>UserRecords &amp;</type>
      <name>getUserRecords</name>
      <anchorfile>classpxl_1_1_user_record_helper.html</anchorfile>
      <anchor>aed523d427700d001e76af09b138f3355</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setUserRecords</name>
      <anchorfile>classpxl_1_1_user_record_helper.html</anchorfile>
      <anchor>a8bc754ecfd9c00f2a2ccb6395ac0891d</anchor>
      <arglist>(const UserRecords &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setUserRecord</name>
      <anchorfile>classpxl_1_1_user_record_helper.html</anchorfile>
      <anchor>af3ecea27c07445ab7dab72987672a8fd</anchor>
      <arglist>(const std::string &amp;key, const Variant &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>eraseUserRecord</name>
      <anchorfile>classpxl_1_1_user_record_helper.html</anchorfile>
      <anchor>a558dd61337c50bfd93af44f1c65867d7</anchor>
      <arglist>(const std::string &amp;key)</arglist>
    </member>
    <member kind="function">
      <type>const Variant &amp;</type>
      <name>getUserRecord</name>
      <anchorfile>classpxl_1_1_user_record_helper.html</anchorfile>
      <anchor>a0c4e05e6defb9e4eabb75a1aef41d300</anchor>
      <arglist>(const std::string &amp;key) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getUserRecord</name>
      <anchorfile>classpxl_1_1_user_record_helper.html</anchorfile>
      <anchor>a3df9f904d21e126a0527a81663f13ae8</anchor>
      <arglist>(const std::string &amp;key, datatype &amp;item) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasUserRecord</name>
      <anchorfile>classpxl_1_1_user_record_helper.html</anchorfile>
      <anchor>aeae48d210cf0dfd2a52fb7adcfc4bb41</anchor>
      <arglist>(const std::string &amp;key) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const Id &amp;</type>
      <name>getStaticTypeId</name>
      <anchorfile>classpxl_1_1_object_manager.html</anchorfile>
      <anchor>ac2a68a34f9e0d9dc9b733782f39add17</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::ostream &amp;</type>
      <name>printPan1st</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>a589f7baac2ec1c61eeb4c2c1e3403526</anchor>
      <arglist>(std::ostream &amp;os, int pan) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::ostream &amp;</type>
      <name>printPan</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>a5038bd2b7584b9aacb4b7d0ac02b26fa</anchor>
      <arglist>(std::ostream &amp;os, int pan) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>pxl::ObjectOwner</name>
    <filename>classpxl_1_1_object_owner.html</filename>
    <member kind="typedef">
      <type>std::vector&lt; Relative * &gt;::const_iterator</type>
      <name>const_iterator</name>
      <anchorfile>classpxl_1_1_object_owner.html</anchorfile>
      <anchor>a2368b37513fbe18a4c0d5bfdc17cfd49</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; Relative * &gt;::iterator</type>
      <name>iterator</name>
      <anchorfile>classpxl_1_1_object_owner.html</anchorfile>
      <anchor>a403591beff9196bc75ce5006064dc1c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ObjectOwner</name>
      <anchorfile>classpxl_1_1_object_owner.html</anchorfile>
      <anchor>afd5d28af87e7210182669ae8274f6dc2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ObjectOwner</name>
      <anchorfile>classpxl_1_1_object_owner.html</anchorfile>
      <anchor>a813b0c190be97411f40209af35bad081</anchor>
      <arglist>(const ObjectOwner &amp;original)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ObjectOwner</name>
      <anchorfile>classpxl_1_1_object_owner.html</anchorfile>
      <anchor>a1f8e9270fe8472d6bc528814715d869f</anchor>
      <arglist>(const ObjectOwner *original)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ObjectOwner</name>
      <anchorfile>classpxl_1_1_object_owner.html</anchorfile>
      <anchor>aa5e4ccfc5401dbcbb126f1afcac11526</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ObjectOwner &amp;</type>
      <name>operator=</name>
      <anchorfile>classpxl_1_1_object_owner.html</anchorfile>
      <anchor>a5e4a9052948e755278c75ab38c07c195</anchor>
      <arglist>(const ObjectOwner &amp;original)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classpxl_1_1_object_owner.html</anchorfile>
      <anchor>aab2e2c1c8b928aa0546808aac85701fc</anchor>
      <arglist>(const OutputStream &amp;out) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>deserialize</name>
      <anchorfile>classpxl_1_1_object_owner.html</anchorfile>
      <anchor>ae1dbec65b1b96ff7db7174ee32381123</anchor>
      <arglist>(const InputStream &amp;in)</arglist>
    </member>
    <member kind="function">
      <type>objecttype *</type>
      <name>create</name>
      <anchorfile>classpxl_1_1_object_owner.html</anchorfile>
      <anchor>a6f4e19d9ec3ecd032ab5e73e04a02c40</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>objecttype *</type>
      <name>create</name>
      <anchorfile>classpxl_1_1_object_owner.html</anchorfile>
      <anchor>a993338fb5151d1876f734cc591b2e5c5</anchor>
      <arglist>(const objecttype *original)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classpxl_1_1_object_owner.html</anchorfile>
      <anchor>a1668898157f16738bca68adc7c332b2f</anchor>
      <arglist>(Relative *value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insert</name>
      <anchorfile>classpxl_1_1_object_owner.html</anchorfile>
      <anchor>ac1db33b7febfb80ec0b5856f9daeecb6</anchor>
      <arglist>(Relative *value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove</name>
      <anchorfile>classpxl_1_1_object_owner.html</anchorfile>
      <anchor>ab0d54291d6213081558f8038c3363ae7</anchor>
      <arglist>(Relative *value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>take</name>
      <anchorfile>classpxl_1_1_object_owner.html</anchorfile>
      <anchor>a8b4dbb9058b08822df81d3c1104a1748</anchor>
      <arglist>(Relative *value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has</name>
      <anchorfile>classpxl_1_1_object_owner.html</anchorfile>
      <anchor>acd1338c671993a2d8f5b5494cbb286e7</anchor>
      <arglist>(const Relative *value) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearContainer</name>
      <anchorfile>classpxl_1_1_object_owner.html</anchorfile>
      <anchor>a9ce86b4ecebc40bbc9a3ab3655355ce3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>objecttype *</type>
      <name>findObject</name>
      <anchorfile>classpxl_1_1_object_owner.html</anchorfile>
      <anchor>a1f28c2d10ad70c41d32474321f33677b</anchor>
      <arglist>(const std::string &amp;key) const</arglist>
    </member>
    <member kind="function">
      <type>Relative *</type>
      <name>findObject</name>
      <anchorfile>classpxl_1_1_object_owner.html</anchorfile>
      <anchor>ae65bc9f2d54a4ec9c73f7a4345de8726</anchor>
      <arglist>(const std::string &amp;key) const</arglist>
    </member>
    <member kind="function">
      <type>Relative *</type>
      <name>getById</name>
      <anchorfile>classpxl_1_1_object_owner.html</anchorfile>
      <anchor>ae247f1d1b8d30abccbad8e975bb54eac</anchor>
      <arglist>(Id id) const</arglist>
    </member>
    <member kind="function">
      <type>objecttype *</type>
      <name>findCopyOf</name>
      <anchorfile>classpxl_1_1_object_owner.html</anchorfile>
      <anchor>af7c790afe0f6e0586e87b96f307ce5fc</anchor>
      <arglist>(const Relative *original) const</arglist>
    </member>
    <member kind="function">
      <type>const std::map&lt; Id, Relative * &gt; &amp;</type>
      <name>getCopyHistory</name>
      <anchorfile>classpxl_1_1_object_owner.html</anchorfile>
      <anchor>a36835f88785c2dafd81726cd9896beda</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearCopyHistory</name>
      <anchorfile>classpxl_1_1_object_owner.html</anchorfile>
      <anchor>ae98ed90e2b56abafdeff49117df5fac9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setIndexEntry</name>
      <anchorfile>classpxl_1_1_object_owner.html</anchorfile>
      <anchor>aa7125ebabafda157cfec319a6826d457</anchor>
      <arglist>(const std::string &amp;key, Relative *obj, bool overwrite=false)</arglist>
    </member>
    <member kind="function">
      <type>const std::map&lt; std::string, Relative * &gt; &amp;</type>
      <name>getIndexEntry</name>
      <anchorfile>classpxl_1_1_object_owner.html</anchorfile>
      <anchor>a66f2d20108fc56439484a364f13e34b6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeIndexEntry</name>
      <anchorfile>classpxl_1_1_object_owner.html</anchorfile>
      <anchor>ad6880b6bc94cde8955673bdc9690d855</anchor>
      <arglist>(const std::string &amp;key)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearIndex</name>
      <anchorfile>classpxl_1_1_object_owner.html</anchorfile>
      <anchor>a5629ef63e5f9ca8c1c02d9c093125164</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; Relative * &gt; &amp;</type>
      <name>getObjects</name>
      <anchorfile>classpxl_1_1_object_owner.html</anchorfile>
      <anchor>a4a85d57ddc50a78ef452d8404423aceb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>begin</name>
      <anchorfile>classpxl_1_1_object_owner.html</anchorfile>
      <anchor>ada04af27ff2a0b6c9bb7f12c1cd2113f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>begin</name>
      <anchorfile>classpxl_1_1_object_owner.html</anchorfile>
      <anchor>ae37b7d802768ceb90b1a876295eb0d46</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>end</name>
      <anchorfile>classpxl_1_1_object_owner.html</anchorfile>
      <anchor>ac6f641e13709a6894c37f917611ee10b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>end</name>
      <anchorfile>classpxl_1_1_object_owner.html</anchorfile>
      <anchor>a3cf95ea176296c035f0b4473fc0eab5b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>size</name>
      <anchorfile>classpxl_1_1_object_owner.html</anchorfile>
      <anchor>ae292091a1dd9962f02e37348ab00c375</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>getObjectsOfType</name>
      <anchorfile>classpxl_1_1_object_owner.html</anchorfile>
      <anchor>ab3b5976feaaf04e3d4d89a2d040b2ce4</anchor>
      <arglist>(std::vector&lt; objecttype * &gt; &amp;vec) const</arglist>
    </member>
    <member kind="function">
      <type>const ObjectOwnerTypeIterator&lt; objecttype &gt;</type>
      <name>begin</name>
      <anchorfile>classpxl_1_1_object_owner.html</anchorfile>
      <anchor>a85c43c92d826db63628681f49753d4f5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sort</name>
      <anchorfile>classpxl_1_1_object_owner.html</anchorfile>
      <anchor>afdf5fec07ec562d7f69e7fed0a165ba3</anchor>
      <arglist>(int(*comp)(Relative *, Relative *))</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>pxl::ObjectOwnerTypeIterator</name>
    <filename>classpxl_1_1_object_owner_type_iterator.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>ObjectOwnerTypeIterator</name>
      <anchorfile>classpxl_1_1_object_owner_type_iterator.html</anchorfile>
      <anchor>a9ae5d9daca3cd788c23ca2b7acff87bf</anchor>
      <arglist>(const ObjectOwnerTypeIterator &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ObjectOwnerTypeIterator</name>
      <anchorfile>classpxl_1_1_object_owner_type_iterator.html</anchorfile>
      <anchor>ada460b9c01ab891e8a10455d894ed030</anchor>
      <arglist>(const ObjectOwner &amp;container)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ObjectOwnerTypeIterator</name>
      <anchorfile>classpxl_1_1_object_owner_type_iterator.html</anchorfile>
      <anchor>aef5708cd6ed3d6be1b9664e90ceef261</anchor>
      <arglist>(const ObjectOwner *container)</arglist>
    </member>
    <member kind="function">
      <type>const ObjectOwnerTypeIterator&lt; objecttype &gt;</type>
      <name>operator++</name>
      <anchorfile>classpxl_1_1_object_owner_type_iterator.html</anchorfile>
      <anchor>a334a1d18358ba0516ffa88a2ab86ce25</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>const ObjectOwnerTypeIterator&lt; objecttype &gt; &amp;</type>
      <name>operator++</name>
      <anchorfile>classpxl_1_1_object_owner_type_iterator.html</anchorfile>
      <anchor>a06279cf6b33593af0fb2d0fbc916260c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>objecttype *</type>
      <name>operator*</name>
      <anchorfile>classpxl_1_1_object_owner_type_iterator.html</anchorfile>
      <anchor>a1774acc821b1695d79748bd3761669a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classpxl_1_1_object_owner_type_iterator.html</anchorfile>
      <anchor>a92a864e4627bdc48c9cf04eb6a6d671c</anchor>
      <arglist>(const_iterator iter)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classpxl_1_1_object_owner_type_iterator.html</anchorfile>
      <anchor>ab56a6c35f075381304200ac433f623ac</anchor>
      <arglist>(const_iterator iter)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>pxl::ObjectProducerInterface</name>
    <filename>classpxl_1_1_object_producer_interface.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ObjectProducerInterface</name>
      <anchorfile>classpxl_1_1_object_producer_interface.html</anchorfile>
      <anchor>a24d964c9de6e45b774a78fcaa8f1083a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Serializable *</type>
      <name>create</name>
      <anchorfile>classpxl_1_1_object_producer_interface.html</anchorfile>
      <anchor>ac4cb9399b008755462a601f0ecc85203</anchor>
      <arglist>() const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>pxl::ObjectProducerTemplate</name>
    <filename>classpxl_1_1_object_producer_template.html</filename>
    <templarg></templarg>
    <base>pxl::ObjectProducerInterface</base>
    <member kind="function">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>classpxl_1_1_object_producer_template.html</anchorfile>
      <anchor>a13f0af3b3ee299ea8ffaefc9556eb247</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>shutdown</name>
      <anchorfile>classpxl_1_1_object_producer_template.html</anchorfile>
      <anchor>a4291d6c9a42d97745850f36dad3c602f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Serializable *</type>
      <name>create</name>
      <anchorfile>classpxl_1_1_object_producer_template.html</anchorfile>
      <anchor>afd282b7888f89434fce14d544ff147f2</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ObjectSelector</name>
    <filename>class_object_selector.html</filename>
    <member kind="function">
      <type></type>
      <name>ObjectSelector</name>
      <anchorfile>class_object_selector.html</anchorfile>
      <anchor>ac6d0174e8c525b2e3579222b6c2511ee</anchor>
      <arglist>(const Tools::MConfig &amp;cfg, OldNameMapper *globalOldNameMap, const std::string &amp;onjectName, bool endcap_eta_cuts, std::string alternative_eta_label=&quot;&quot;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ObjectSelector</name>
      <anchorfile>class_object_selector.html</anchorfile>
      <anchor>a1ca129985aa2834bf1a71786bf4498a7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>passObjectSelection</name>
      <anchorfile>class_object_selector.html</anchorfile>
      <anchor>a01285a0dc4d7e2c9ce6b33b11ac6599b</anchor>
      <arglist>(pxl::Particle *object, double const objectRho, const std::string &amp;idType, const bool isSyst) const =0</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>passKinematics</name>
      <anchorfile>class_object_selector.html</anchorfile>
      <anchor>a96ba15ff2c5195e1797a1d3850c530a8</anchor>
      <arglist>(pxl::Particle *object, const bool isSyst=false) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setScaleFactors</name>
      <anchorfile>class_object_selector.html</anchorfile>
      <anchor>aa5e974f081f10a2e9ca4ab5569c22e7e</anchor>
      <arglist>(pxl::Particle *object)</arglist>
    </member>
    <member kind="variable">
      <type>OldNameMapper *</type>
      <name>oldNameMap</name>
      <anchorfile>class_object_selector.html</anchorfile>
      <anchor>a8944cd815366dde3b857d9b76e28b6bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_object_name</name>
      <anchorfile>class_object_selector.html</anchorfile>
      <anchor>a97be92d352eab8f1f7736e1210142697</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; ScaleFactor &gt;</type>
      <name>m_scale_factors</name>
      <anchorfile>class_object_selector.html</anchorfile>
      <anchor>acb033d208366dd65b0ee20215cde1eed</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OldNameMapper</name>
    <filename>class_old_name_mapper.html</filename>
    <member kind="function">
      <type></type>
      <name>OldNameMapper</name>
      <anchorfile>class_old_name_mapper.html</anchorfile>
      <anchor>a4dd203e2f3a7cf9fae19a72918744a8e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~OldNameMapper</name>
      <anchorfile>class_old_name_mapper.html</anchorfile>
      <anchor>a9e9c9c8bd80475dd993317be0490a7af</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getUserRecordName</name>
      <anchorfile>class_old_name_mapper.html</anchorfile>
      <anchor>ab08bcd8b13b64db8a7b23f925b550e9d</anchor>
      <arglist>(const pxl::Object *obj, std::string variableName)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getUserRecordName</name>
      <anchorfile>class_old_name_mapper.html</anchorfile>
      <anchor>a104f680057fced10b2d88d55e44eb1f6</anchor>
      <arglist>(const pxl::Object *obj, const std::string &amp;partName, std::string variableName)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getUserRecordName</name>
      <anchorfile>class_old_name_mapper.html</anchorfile>
      <anchor>a351b5ba8ae2a04dfed6048302bee580d</anchor>
      <arglist>(const pxl::Object *obj, std::string variableName, std::vector&lt; ReplacementInfo &gt; baseReplacementMap, std::map&lt; std::string, std::string &gt; &amp;cacheReplacementMap, bool isToplevel=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addReplacement</name>
      <anchorfile>class_old_name_mapper.html</anchorfile>
      <anchor>a93148285ae1e24beeef4cf04f2497725</anchor>
      <arglist>(std::string variableName, std::string replacement, std::vector&lt; ReplacementInfo &gt; &amp;baseReplacementVec)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addReplacement</name>
      <anchorfile>class_old_name_mapper.html</anchorfile>
      <anchor>aeb6a741ec8a57152fed04ce09dd05253</anchor>
      <arglist>(std::string variableName, std::string replacement)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addReplacement</name>
      <anchorfile>class_old_name_mapper.html</anchorfile>
      <anchor>ae2eec395b3242434e9f817a1bbf0a76e</anchor>
      <arglist>(const std::string &amp;partName, std::string variableName, std::string replacement)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>pxl::OutputFile</name>
    <filename>classpxl_1_1_output_file.html</filename>
    <base>pxl::OutputHandler</base>
    <member kind="function">
      <type></type>
      <name>OutputFile</name>
      <anchorfile>classpxl_1_1_output_file.html</anchorfile>
      <anchor>a0686f2f7a2a6777a1c92c9d3d61208b7</anchor>
      <arglist>(const std::string &amp;filename, size_t maxBlockSize=1048576, size_t maxNObjects=1000)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~OutputFile</name>
      <anchorfile>classpxl_1_1_output_file.html</anchorfile>
      <anchor>aa9c1eff90e4948ce9fec338782121738</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>open</name>
      <anchorfile>classpxl_1_1_output_file.html</anchorfile>
      <anchor>ab90eb8b08afda7af7570ca65fbbc0345</anchor>
      <arglist>(const std::string &amp;filename)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>close</name>
      <anchorfile>classpxl_1_1_output_file.html</anchorfile>
      <anchor>a91c9555a02efc0335b9c7dd86e28411f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ChunkWriter &amp;</type>
      <name>getChunkWriter</name>
      <anchorfile>classpxl_1_1_output_file.html</anchorfile>
      <anchor>a30fea95fcc810ad5dfa6e7b7f79c9323</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCompressionMode</name>
      <anchorfile>classpxl_1_1_output_file.html</anchorfile>
      <anchor>a593e571b848c953d6b71ba4fece3b07c</anchor>
      <arglist>(int compressionMode)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>streamObject</name>
      <anchorfile>classpxl_1_1_output_handler.html</anchorfile>
      <anchor>a9b4b3a5a8461d9532dfb35b16a5570c4</anchor>
      <arglist>(const Serializable *obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeEvent</name>
      <anchorfile>classpxl_1_1_output_handler.html</anchorfile>
      <anchor>a718ea8389e8d3972f3972001c3a235c7</anchor>
      <arglist>(const Event *event)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeInformationChunk</name>
      <anchorfile>classpxl_1_1_output_handler.html</anchorfile>
      <anchor>ae08ba722ce3d0f69e91aa4ed167c88e3</anchor>
      <arglist>(const InformationChunk *infoChunk)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeBasicContainer</name>
      <anchorfile>classpxl_1_1_output_handler.html</anchorfile>
      <anchor>ae2343629547b573f4409bbfa1b34b57a</anchor>
      <arglist>(const BasicContainer *basicContainer)</arglist>
    </member>
    <member kind="function">
      <type>const BufferOutput &amp;</type>
      <name>getOutputStream</name>
      <anchorfile>classpxl_1_1_output_handler.html</anchorfile>
      <anchor>a7202ab950ab581595d8e614c853f4c87</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>newFileSection</name>
      <anchorfile>classpxl_1_1_output_handler.html</anchorfile>
      <anchor>a4d092fd007ddd8addbfb938b6ef734c6</anchor>
      <arglist>(const std::string &amp;info)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>writeStream</name>
      <anchorfile>classpxl_1_1_output_handler.html</anchorfile>
      <anchor>aa5c3d0064b9f438c98657e901595627f</anchor>
      <arglist>(const std::string &amp;info=&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>writeFileSection</name>
      <anchorfile>classpxl_1_1_output_handler.html</anchorfile>
      <anchor>a47838660300cc6230de8343b7b003db6</anchor>
      <arglist>(const std::string &amp;info=&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>finish</name>
      <anchorfile>classpxl_1_1_output_handler.html</anchorfile>
      <anchor>a924615554f3fa35e12d26b9ce3c9c8eb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMaxNObjects</name>
      <anchorfile>classpxl_1_1_output_handler.html</anchorfile>
      <anchor>acc2b5474647ba10c0898345246bd2859</anchor>
      <arglist>(size_t maxNObjects)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>getMaxNObjects</name>
      <anchorfile>classpxl_1_1_output_handler.html</anchorfile>
      <anchor>acae54d4e7f14a2846b64b7eae5766e34</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMaxSize</name>
      <anchorfile>classpxl_1_1_output_handler.html</anchorfile>
      <anchor>a0b7dfdea5c11a5705998e4d909133a38</anchor>
      <arglist>(size_t maxSize)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>getMaxSize</name>
      <anchorfile>classpxl_1_1_output_handler.html</anchorfile>
      <anchor>a667c162a19891483af8df2135fb83927</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>pxl::OutputHandler</name>
    <filename>classpxl_1_1_output_handler.html</filename>
    <member kind="function">
      <type></type>
      <name>OutputHandler</name>
      <anchorfile>classpxl_1_1_output_handler.html</anchorfile>
      <anchor>a2af9e90a1bf86963c7392c2a9d949ab6</anchor>
      <arglist>(size_t maxSize=1048576, size_t maxNObjects=1000)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~OutputHandler</name>
      <anchorfile>classpxl_1_1_output_handler.html</anchorfile>
      <anchor>a0751df8b8b547ac15621b828c0640e54</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ChunkWriter &amp;</type>
      <name>getChunkWriter</name>
      <anchorfile>classpxl_1_1_output_handler.html</anchorfile>
      <anchor>a668bf787af5d8fe0286ee1171157529d</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>streamObject</name>
      <anchorfile>classpxl_1_1_output_handler.html</anchorfile>
      <anchor>a9b4b3a5a8461d9532dfb35b16a5570c4</anchor>
      <arglist>(const Serializable *obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeEvent</name>
      <anchorfile>classpxl_1_1_output_handler.html</anchorfile>
      <anchor>a718ea8389e8d3972f3972001c3a235c7</anchor>
      <arglist>(const Event *event)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeInformationChunk</name>
      <anchorfile>classpxl_1_1_output_handler.html</anchorfile>
      <anchor>ae08ba722ce3d0f69e91aa4ed167c88e3</anchor>
      <arglist>(const InformationChunk *infoChunk)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeBasicContainer</name>
      <anchorfile>classpxl_1_1_output_handler.html</anchorfile>
      <anchor>ae2343629547b573f4409bbfa1b34b57a</anchor>
      <arglist>(const BasicContainer *basicContainer)</arglist>
    </member>
    <member kind="function">
      <type>const BufferOutput &amp;</type>
      <name>getOutputStream</name>
      <anchorfile>classpxl_1_1_output_handler.html</anchorfile>
      <anchor>a7202ab950ab581595d8e614c853f4c87</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>newFileSection</name>
      <anchorfile>classpxl_1_1_output_handler.html</anchorfile>
      <anchor>a4d092fd007ddd8addbfb938b6ef734c6</anchor>
      <arglist>(const std::string &amp;info)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>writeStream</name>
      <anchorfile>classpxl_1_1_output_handler.html</anchorfile>
      <anchor>aa5c3d0064b9f438c98657e901595627f</anchor>
      <arglist>(const std::string &amp;info=&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>writeFileSection</name>
      <anchorfile>classpxl_1_1_output_handler.html</anchorfile>
      <anchor>a47838660300cc6230de8343b7b003db6</anchor>
      <arglist>(const std::string &amp;info=&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>finish</name>
      <anchorfile>classpxl_1_1_output_handler.html</anchorfile>
      <anchor>a924615554f3fa35e12d26b9ce3c9c8eb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMaxNObjects</name>
      <anchorfile>classpxl_1_1_output_handler.html</anchorfile>
      <anchor>acc2b5474647ba10c0898345246bd2859</anchor>
      <arglist>(size_t maxNObjects)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>getMaxNObjects</name>
      <anchorfile>classpxl_1_1_output_handler.html</anchorfile>
      <anchor>acae54d4e7f14a2846b64b7eae5766e34</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMaxSize</name>
      <anchorfile>classpxl_1_1_output_handler.html</anchorfile>
      <anchor>a0b7dfdea5c11a5705998e4d909133a38</anchor>
      <arglist>(size_t maxSize)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>getMaxSize</name>
      <anchorfile>classpxl_1_1_output_handler.html</anchorfile>
      <anchor>a667c162a19891483af8df2135fb83927</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>pxl::OutputStream</name>
    <filename>classpxl_1_1_output_stream.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~OutputStream</name>
      <anchorfile>classpxl_1_1_output_stream.html</anchorfile>
      <anchor>a929f30bd19d92728d618b061ecc40ae4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>write</name>
      <anchorfile>classpxl_1_1_output_stream.html</anchorfile>
      <anchor>a1f9e442fe17f1f11630e211466d876fb</anchor>
      <arglist>(const void *data, size_t size) const =0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeChar</name>
      <anchorfile>classpxl_1_1_output_stream.html</anchorfile>
      <anchor>ad9bb524eac06efb9fc3289cb6b7319aa</anchor>
      <arglist>(char c) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeUnsignedChar</name>
      <anchorfile>classpxl_1_1_output_stream.html</anchorfile>
      <anchor>a63d4ceb1a8b465050f1353bd103a08aa</anchor>
      <arglist>(unsigned char c) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeString</name>
      <anchorfile>classpxl_1_1_output_stream.html</anchorfile>
      <anchor>a6f4f0ae5dafa92798d297280ca98ff45</anchor>
      <arglist>(const std::string &amp;s) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeFloat</name>
      <anchorfile>classpxl_1_1_output_stream.html</anchorfile>
      <anchor>acd195939c3ff2f59bbedf325e2b706ce</anchor>
      <arglist>(float f) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeDouble</name>
      <anchorfile>classpxl_1_1_output_stream.html</anchorfile>
      <anchor>ad9f0d56ff7f5ba809e93e18bdcf12713</anchor>
      <arglist>(double d) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>classpxl_1_1_output_stream.html</anchorfile>
      <anchor>aa887ed8a5aa5e487e65cced2911732e7</anchor>
      <arglist>(int8_t i) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>classpxl_1_1_output_stream.html</anchorfile>
      <anchor>a5177d5a268c3d192d0b930d4f2230cf4</anchor>
      <arglist>(uint8_t i) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>classpxl_1_1_output_stream.html</anchorfile>
      <anchor>a9d57a2be0efda51a00f98a65479d3c5e</anchor>
      <arglist>(int16_t i) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>classpxl_1_1_output_stream.html</anchorfile>
      <anchor>af6945e5b2b42967e2dec6606606d423a</anchor>
      <arglist>(uint16_t i) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>classpxl_1_1_output_stream.html</anchorfile>
      <anchor>a13a79fcddeb1652ac5309f4d214e61ee</anchor>
      <arglist>(int32_t i) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>classpxl_1_1_output_stream.html</anchorfile>
      <anchor>a49d313a5d16c1c3c179b25ddfefd40e1</anchor>
      <arglist>(uint32_t i) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>classpxl_1_1_output_stream.html</anchorfile>
      <anchor>a5ca6b83cd7c9ef5acf3d1442708f4a5d</anchor>
      <arglist>(int64_t i) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>classpxl_1_1_output_stream.html</anchorfile>
      <anchor>a6e5b131cd9a994dee74b3cf5589fdad9</anchor>
      <arglist>(uint64_t i) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeInt</name>
      <anchorfile>classpxl_1_1_output_stream.html</anchorfile>
      <anchor>a72ef7399e06185f83be6c13a1543904c</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeUnsignedInt</name>
      <anchorfile>classpxl_1_1_output_stream.html</anchorfile>
      <anchor>a92a5c16f70c4731cdf4c004f6708551a</anchor>
      <arglist>(unsigned int i) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeLong</name>
      <anchorfile>classpxl_1_1_output_stream.html</anchorfile>
      <anchor>afc453ca21b17cb3ce797ea74d178098f</anchor>
      <arglist>(long l) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeUnsignedLong</name>
      <anchorfile>classpxl_1_1_output_stream.html</anchorfile>
      <anchor>ac610daabe2a726c0ada57c63a34a5ffc</anchor>
      <arglist>(unsigned long l) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeShort</name>
      <anchorfile>classpxl_1_1_output_stream.html</anchorfile>
      <anchor>a07052fd4a722747da8ce4af773e842b3</anchor>
      <arglist>(short s) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeUnsignedShort</name>
      <anchorfile>classpxl_1_1_output_stream.html</anchorfile>
      <anchor>a8dc2086d4a9787e20fc29bbf156189e3</anchor>
      <arglist>(unsigned short s) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeBool</name>
      <anchorfile>classpxl_1_1_output_stream.html</anchorfile>
      <anchor>a9bfcda4b8335e066e494fda57289e12b</anchor>
      <arglist>(bool b) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>pxl::Particle</name>
    <filename>classpxl_1_1_particle.html</filename>
    <base>pxl::Object</base>
    <base>pxl::CommonParticle</base>
    <member kind="function">
      <type></type>
      <name>Particle</name>
      <anchorfile>classpxl_1_1_particle.html</anchorfile>
      <anchor>a8b4dc32c30badbe654aee47289fe326f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Particle</name>
      <anchorfile>classpxl_1_1_particle.html</anchorfile>
      <anchor>a6723bd91dab721a674ed6b242d6e39fe</anchor>
      <arglist>(const Particle &amp;original)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Particle</name>
      <anchorfile>classpxl_1_1_particle.html</anchorfile>
      <anchor>a84d228cf05a81dbafe932a690a59bee0</anchor>
      <arglist>(const Particle *original)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Id &amp;</type>
      <name>getTypeId</name>
      <anchorfile>classpxl_1_1_particle.html</anchorfile>
      <anchor>abc22a6c7ef54f95db8231b041f3bbad0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classpxl_1_1_particle.html</anchorfile>
      <anchor>a740d2f30e1a6d04349b5d3ef01ed34ff</anchor>
      <arglist>(const OutputStream &amp;out) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>deserialize</name>
      <anchorfile>classpxl_1_1_particle.html</anchorfile>
      <anchor>ae466847fb71a67adcf718767113fe6d4</anchor>
      <arglist>(const InputStream &amp;in)</arglist>
    </member>
    <member kind="function">
      <type>const LorentzVector &amp;</type>
      <name>getVector</name>
      <anchorfile>classpxl_1_1_particle.html</anchorfile>
      <anchor>ac90ab51200c15fd50d2678b785cc0e4d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>LorentzVector &amp;</type>
      <name>getVector</name>
      <anchorfile>classpxl_1_1_particle.html</anchorfile>
      <anchor>a89ee86b0a88dbbd5d44d214fa5dceed4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getCharge</name>
      <anchorfile>classpxl_1_1_particle.html</anchorfile>
      <anchor>a82994564582123d73fff69c5a3b59ffd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCharge</name>
      <anchorfile>classpxl_1_1_particle.html</anchorfile>
      <anchor>a06472e1692f0e3e50b78b5debe6fafb6</anchor>
      <arglist>(double v)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getPdgNumber</name>
      <anchorfile>classpxl_1_1_particle.html</anchorfile>
      <anchor>a9b4d20e1a3cf2d73d3ddb54d223b8260</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPdgNumber</name>
      <anchorfile>classpxl_1_1_particle.html</anchorfile>
      <anchor>aa5e30608e3f4bb72978b7451246a8468</anchor>
      <arglist>(int v)</arglist>
    </member>
    <member kind="function">
      <type>const Particle &amp;</type>
      <name>operator+=</name>
      <anchorfile>classpxl_1_1_particle.html</anchorfile>
      <anchor>ae8cd545134a7ef275fe7fa7c3e3013b1</anchor>
      <arglist>(const Particle &amp;pa)</arglist>
    </member>
    <member kind="function">
      <type>const Particle &amp;</type>
      <name>operator-=</name>
      <anchorfile>classpxl_1_1_particle.html</anchorfile>
      <anchor>ac150e38afdf77677f9215318bb918e41</anchor>
      <arglist>(const Particle &amp;pa)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Serializable *</type>
      <name>clone</name>
      <anchorfile>classpxl_1_1_particle.html</anchorfile>
      <anchor>af90e2c99fe76df5849ea8097cd71dde3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getPx</name>
      <anchorfile>classpxl_1_1_particle.html</anchorfile>
      <anchor>a86240aa3aad5427921b08e31f0710c3d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getPy</name>
      <anchorfile>classpxl_1_1_particle.html</anchorfile>
      <anchor>a61afcbb74d66fe49ce388a3efb9ea0dc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getPz</name>
      <anchorfile>classpxl_1_1_particle.html</anchorfile>
      <anchor>a08884106699fe5106234167519456b79</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getP</name>
      <anchorfile>classpxl_1_1_particle.html</anchorfile>
      <anchor>ac40a0480d87deef1f089e15eaf169f89</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getE</name>
      <anchorfile>classpxl_1_1_particle.html</anchorfile>
      <anchor>ae0fc8016d4e9b41a2d6f24bea0e075cc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getMass</name>
      <anchorfile>classpxl_1_1_particle.html</anchorfile>
      <anchor>ad9bd2d6c54bb3af303e5538a35ec5f44</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getPt</name>
      <anchorfile>classpxl_1_1_particle.html</anchorfile>
      <anchor>afa1e042db07e9a2f0b2de9a77e6cc68a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getEta</name>
      <anchorfile>classpxl_1_1_particle.html</anchorfile>
      <anchor>a7a4d21827e027a2c1bee5df24b4ef1e5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getEt</name>
      <anchorfile>classpxl_1_1_particle.html</anchorfile>
      <anchor>a3049496b2e4b284b5d12e15404a4559c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getPhi</name>
      <anchorfile>classpxl_1_1_particle.html</anchorfile>
      <anchor>a0c22d7c602771ab6da69953103edd5c6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getTheta</name>
      <anchorfile>classpxl_1_1_particle.html</anchorfile>
      <anchor>ab8e9234f395097ac403772f7c316a8e9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setP4</name>
      <anchorfile>classpxl_1_1_particle.html</anchorfile>
      <anchor>ae98145ef8c5a4bf8c34d3c1d862e37f9</anchor>
      <arglist>(double px, double py, double pz, double e)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setXYZM</name>
      <anchorfile>classpxl_1_1_particle.html</anchorfile>
      <anchor>a506a642f8cfebc0d23b158f0435bf078</anchor>
      <arglist>(double x, double y, double z, double m)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPtEtaPhiM</name>
      <anchorfile>classpxl_1_1_particle.html</anchorfile>
      <anchor>af2757659355830cbe971105ace1f8d33</anchor>
      <arglist>(double pt, double eta, double phi, double m)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPtEtaPhiE</name>
      <anchorfile>classpxl_1_1_particle.html</anchorfile>
      <anchor>a814bc58a5b5698cf0abd1ce3323216f9</anchor>
      <arglist>(double pt, double eta, double phi, double e)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setP4</name>
      <anchorfile>classpxl_1_1_particle.html</anchorfile>
      <anchor>a6fb8f728602fa35cdc63228cedae59db</anchor>
      <arglist>(const LorentzVector &amp;vector)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setVector</name>
      <anchorfile>classpxl_1_1_particle.html</anchorfile>
      <anchor>aa6cfed7547d59b59037d48bded0b371e</anchor>
      <arglist>(const LorentzVector &amp;vector)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addP4</name>
      <anchorfile>classpxl_1_1_particle.html</anchorfile>
      <anchor>a0ee95f7f04f25d99efbf8c643e013cfb</anchor>
      <arglist>(double px, double py, double pz, double e)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setP4FromDaughters</name>
      <anchorfile>classpxl_1_1_particle.html</anchorfile>
      <anchor>a3630b4cc5f0f26fa4c55b98fb7c9b7b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setP4FromDaughtersRecursive</name>
      <anchorfile>classpxl_1_1_particle.html</anchorfile>
      <anchor>a065d21944ebf03ede6c251b755da266c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addP4</name>
      <anchorfile>classpxl_1_1_particle.html</anchorfile>
      <anchor>a4375a9bd81968fed3bcfef461cb6baf5</anchor>
      <arglist>(const LorentzVector &amp;vector)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addVector</name>
      <anchorfile>classpxl_1_1_particle.html</anchorfile>
      <anchor>adae59493a897c6e8a914a2b78ccc60ea</anchor>
      <arglist>(const LorentzVector &amp;vector)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addP4</name>
      <anchorfile>classpxl_1_1_particle.html</anchorfile>
      <anchor>af710f47d0cd6820d8e9b9f59801a0d85</anchor>
      <arglist>(const Particle *particle)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addParticle</name>
      <anchorfile>classpxl_1_1_particle.html</anchorfile>
      <anchor>a52734a3f4da510b32bb5f230b157f93d</anchor>
      <arglist>(const Particle *pa)</arglist>
    </member>
    <member kind="function">
      <type>Basic3Vector</type>
      <name>getBoostVector</name>
      <anchorfile>classpxl_1_1_particle.html</anchorfile>
      <anchor>ae6efbf1c52ee861530e9f190de87fe12</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>boost</name>
      <anchorfile>classpxl_1_1_particle.html</anchorfile>
      <anchor>aee34f0233a59c0b1cb229b4bcb053b00</anchor>
      <arglist>(const Basic3Vector &amp;boostvector)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>boost</name>
      <anchorfile>classpxl_1_1_particle.html</anchorfile>
      <anchor>a33f451be915256643be758db9d265c69</anchor>
      <arglist>(double b_x, double b_y, double b_z)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::ostream &amp;</type>
      <name>print</name>
      <anchorfile>classpxl_1_1_particle.html</anchorfile>
      <anchor>a7b799273f511b3bb4b3958da934b8164</anchor>
      <arglist>(int level=1, std::ostream &amp;os=std::cout, int pan=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual WkPtrBase *</type>
      <name>createSelfWkPtr</name>
      <anchorfile>classpxl_1_1_particle.html</anchorfile>
      <anchor>a76c8147a106f2f3723f700d78b4aa191</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isLocked</name>
      <anchorfile>classpxl_1_1_object.html</anchorfile>
      <anchor>a584e513d1aada593146e4bb4dca8c1fa</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getWorkFlag</name>
      <anchorfile>classpxl_1_1_object.html</anchorfile>
      <anchor>a9e82ee54fca13b8818634ebd8adda493</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLocked</name>
      <anchorfile>classpxl_1_1_object.html</anchorfile>
      <anchor>a1b2dbf2aef26a3bc4a92735572649a94</anchor>
      <arglist>(bool v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setWorkFlag</name>
      <anchorfile>classpxl_1_1_object.html</anchorfile>
      <anchor>a91d83fb75b1a480ae8323e7b2a5276ad</anchor>
      <arglist>(int v)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::ostream &amp;</type>
      <name>printContent</name>
      <anchorfile>classpxl_1_1_object.html</anchorfile>
      <anchor>a434021cf01b990778a93f5144817de2d</anchor>
      <arglist>(int level=1, std::ostream &amp;os=std::cout, int pan=0) const</arglist>
    </member>
    <member kind="function">
      <type>Id</type>
      <name>id</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>a9bf6c17d6fd5b588c00463db4028870b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ObjectOwner *</type>
      <name>owner</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>a556c1cc09bed10e480cceb5da42edb33</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Relations &amp;</type>
      <name>getMotherRelations</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>a10f8728c388408f48a120e90de6298ae</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Relations &amp;</type>
      <name>getDaughterRelations</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>ae3b09cfe9057e042b88cf1adf6b4a036</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Relations &amp;</type>
      <name>getFlatRelations</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>aa8b871a98b21677ef5c159dbb608722d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Relative *</type>
      <name>getMother</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>a53a7b6b11409893dab8a73a0159180ec</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Relative *</type>
      <name>getDaughter</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>a6e7b03ed37eca69cd1063f78fd05b6dc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::set&lt; Relative * &gt; &amp;</type>
      <name>getDaughters</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>a6c4f5b97226fe562ef9144fa14f8c0f5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::set&lt; Relative * &gt; &amp;</type>
      <name>getMothers</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>a1728bea81bb0f966335f32c832a1cffa</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>numberOfDaughters</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>aa92bd45d2b1751fe3bfbbc79c8a21b32</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>numberOfMothers</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>aab1ec876cfe2f1bebf212b60f66ba907</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>linkMother</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>af3f916466c571dad5b0be5f4baded3b3</anchor>
      <arglist>(Relative *target)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>linkDaughter</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>a0a6244c26919bdd6fd45cbb8ea5a8f8b</anchor>
      <arglist>(Relative *target)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>linkFlat</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>a5ee923ece292e0d9268495af7590f060</anchor>
      <arglist>(Relative *target)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unlinkMother</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>a2b75c81e4078d147d36310fe7c3a4800</anchor>
      <arglist>(Relative *target)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unlinkDaughter</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>aaface8521be14a7fbb256ad786355ea4</anchor>
      <arglist>(Relative *target)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unlinkFlat</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>a4a4eba4935e47072056671728c2bd139</anchor>
      <arglist>(Relative *target)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unlinkFlat</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>a8d81b6131cc1532e3ba868e3509cb9b2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unlinkMothers</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>ad51348aae3792d8205823b46da02a564</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unlinkDaughters</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>a3bd2ff6a25aab01fda19df066bb492a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>linkSoft</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>a2ea79223a0f9d9edeeb8398b53ff6ab1</anchor>
      <arglist>(Relative *relative, const std::string &amp;type)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unlinkSoft</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>a1e870e37dbe2b384f85b138b5ec51e0e</anchor>
      <arglist>(Relative *relative, const std::string &amp;type)</arglist>
    </member>
    <member kind="function">
      <type>const SoftRelations &amp;</type>
      <name>getSoftRelations</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>ae5b78c9536de71abbb15a413e31f655e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>SoftRelations &amp;</type>
      <name>getSoftRelations</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>ab72e809de894954b8cc73ff768d757a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getName</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>a5384c8188f28913c4cc898571f133f32</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setName</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>a483a501afd8965daa92d3bafb91b4dfe</anchor>
      <arglist>(const std::string &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>printDecayTree</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>afa50de942d2caa47defa7e39a79df0a9</anchor>
      <arglist>(int level=0, std::ostream &amp;os=std::cout, int pan=1) const</arglist>
    </member>
    <member kind="function">
      <type>const Id &amp;</type>
      <name>getId</name>
      <anchorfile>classpxl_1_1_serializable.html</anchorfile>
      <anchor>a071e3e5bdd7125cee5dd5178807c3647</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const std::string</type>
      <name>toString</name>
      <anchorfile>classpxl_1_1_serializable.html</anchorfile>
      <anchor>abe42afdf47f4fa9cad94e26e9a3d6ba1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const UserRecords &amp;</type>
      <name>getUserRecords</name>
      <anchorfile>classpxl_1_1_user_record_helper.html</anchorfile>
      <anchor>ab7d2e9d7fd53f986163bff24ed9ec2e3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>UserRecords &amp;</type>
      <name>getUserRecords</name>
      <anchorfile>classpxl_1_1_user_record_helper.html</anchorfile>
      <anchor>aed523d427700d001e76af09b138f3355</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setUserRecords</name>
      <anchorfile>classpxl_1_1_user_record_helper.html</anchorfile>
      <anchor>a8bc754ecfd9c00f2a2ccb6395ac0891d</anchor>
      <arglist>(const UserRecords &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setUserRecord</name>
      <anchorfile>classpxl_1_1_user_record_helper.html</anchorfile>
      <anchor>af3ecea27c07445ab7dab72987672a8fd</anchor>
      <arglist>(const std::string &amp;key, const Variant &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>eraseUserRecord</name>
      <anchorfile>classpxl_1_1_user_record_helper.html</anchorfile>
      <anchor>a558dd61337c50bfd93af44f1c65867d7</anchor>
      <arglist>(const std::string &amp;key)</arglist>
    </member>
    <member kind="function">
      <type>const Variant &amp;</type>
      <name>getUserRecord</name>
      <anchorfile>classpxl_1_1_user_record_helper.html</anchorfile>
      <anchor>a0c4e05e6defb9e4eabb75a1aef41d300</anchor>
      <arglist>(const std::string &amp;key) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getUserRecord</name>
      <anchorfile>classpxl_1_1_user_record_helper.html</anchorfile>
      <anchor>a3df9f904d21e126a0527a81663f13ae8</anchor>
      <arglist>(const std::string &amp;key, datatype &amp;item) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasUserRecord</name>
      <anchorfile>classpxl_1_1_user_record_helper.html</anchorfile>
      <anchor>aeae48d210cf0dfd2a52fb7adcfc4bb41</anchor>
      <arglist>(const std::string &amp;key) const</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; ParticleHelper&lt; objecttype &gt; &gt;</type>
      <name>getAs</name>
      <anchorfile>classpxl_1_1_common_particle.html</anchorfile>
      <anchor>a63143891265c5bb1f3ac7d0683d9ecca</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const Id &amp;</type>
      <name>getStaticTypeId</name>
      <anchorfile>classpxl_1_1_particle.html</anchorfile>
      <anchor>ab7526917716e14ae0a67ffbb178a42d6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::ostream &amp;</type>
      <name>printPan1st</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>a589f7baac2ec1c61eeb4c2c1e3403526</anchor>
      <arglist>(std::ostream &amp;os, int pan) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::ostream &amp;</type>
      <name>printPan</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>a5038bd2b7584b9aacb4b7d0ac02b26fa</anchor>
      <arglist>(std::ostream &amp;os, int pan) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ParticleMap</name>
    <filename>class_particle_map.html</filename>
    <member kind="function">
      <type></type>
      <name>ParticleMap</name>
      <anchorfile>class_particle_map.html</anchorfile>
      <anchor>a47de6079d64e7513342f89355657e272</anchor>
      <arglist>(const std::map&lt; std::string, std::vector&lt; pxl::Particle * &gt;&gt; &amp;particleMap)</arglist>
    </member>
    <member kind="function">
      <type>const ParticleVector &amp;</type>
      <name>getParticleVector</name>
      <anchorfile>class_particle_map.html</anchorfile>
      <anchor>ab2004a78a90ada67240a73293953ae2d</anchor>
      <arglist>(std::string &amp;name) const</arglist>
    </member>
    <member kind="function">
      <type>std::map&lt; std::string, int &gt;</type>
      <name>getCountMap</name>
      <anchorfile>class_particle_map.html</anchorfile>
      <anchor>a584c51ccac9236108d46d5d5e7d92f68</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getLeptonCharge</name>
      <anchorfile>class_particle_map.html</anchorfile>
      <anchor>aa3ea40f616b90106f5ad05a0cb382650</anchor>
      <arglist>(const std::map&lt; std::string, int &gt; &amp;countMap) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getSumPt</name>
      <anchorfile>class_particle_map.html</anchorfile>
      <anchor>a09e2e4f36b81feb67f816ec54618efd2</anchor>
      <arglist>(const std::map&lt; std::string, int &gt; &amp;countMap) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getMass</name>
      <anchorfile>class_particle_map.html</anchorfile>
      <anchor>a8f11148b13d45b73e3a32ab096b5d18b</anchor>
      <arglist>(const std::map&lt; std::string, int &gt; &amp;countMap) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getTransverseMass</name>
      <anchorfile>class_particle_map.html</anchorfile>
      <anchor>acd822372c0d7d517e44c875fd328db74</anchor>
      <arglist>(const std::map&lt; std::string, int &gt; &amp;countMap) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getInvMass</name>
      <anchorfile>class_particle_map.html</anchorfile>
      <anchor>a5ce8bdd76614f7477dc50fbce249389b</anchor>
      <arglist>(const std::map&lt; std::string, int &gt; &amp;countMap) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getMET</name>
      <anchorfile>class_particle_map.html</anchorfile>
      <anchor>a4312a1fc0dfd6377409366d1bd7ea67b</anchor>
      <arglist>(const std::map&lt; std::string, int &gt; &amp;countMap) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getScaleFactor</name>
      <anchorfile>class_particle_map.html</anchorfile>
      <anchor>ae020540d6247ca1a588f1d41bd8ee122</anchor>
      <arglist>(const std::map&lt; std::string, int &gt; &amp;countMap) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getScaleFactorStatError</name>
      <anchorfile>class_particle_map.html</anchorfile>
      <anchor>ad47f5feda61f51b4fda9e046d41c992d</anchor>
      <arglist>(const std::map&lt; std::string, int &gt; &amp;countMap) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getScaleFactorSystError</name>
      <anchorfile>class_particle_map.html</anchorfile>
      <anchor>acfb818e588c17a3354d3010ac4c62796</anchor>
      <arglist>(const std::map&lt; std::string, int &gt; &amp;countMap) const</arglist>
    </member>
    <member kind="function">
      <type>std::map&lt; std::string, int &gt;</type>
      <name>getFakeMap</name>
      <anchorfile>class_particle_map.html</anchorfile>
      <anchor>adb3a7ccec1cf53ddc96718172cf16964</anchor>
      <arglist>(const std::map&lt; std::string, int &gt; &amp;countMap) const</arglist>
    </member>
    <member kind="function">
      <type>std::map&lt; std::string, int &gt;</type>
      <name>getChargeFakeMap</name>
      <anchorfile>class_particle_map.html</anchorfile>
      <anchor>ae207d089874a336f2dbb79c0dd5f458e</anchor>
      <arglist>(const std::map&lt; std::string, int &gt; &amp;countMap) const</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; double &gt;</type>
      <name>getBinLimits</name>
      <anchorfile>class_particle_map.html</anchorfile>
      <anchor>a1cfa8cefbd958660b5ae2ee43f3bc77c</anchor>
      <arglist>(std::string distribution, std::map&lt; std::string, int &gt; &amp;countMap, double min, double max, double step_size, double const fudge=1) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getRealResolution</name>
      <anchorfile>class_particle_map.html</anchorfile>
      <anchor>a8727f09ce0b6d9385ea1a354e43f9eff</anchor>
      <arglist>(const std::map&lt; std::string, int &gt; &amp;countMap) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getApproximateResolution</name>
      <anchorfile>class_particle_map.html</anchorfile>
      <anchor>a592b0659d60a68519d990088ea46dd29</anchor>
      <arglist>(const std::map&lt; std::string, int &gt; &amp;countMap, double const fudge=1) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ParticleMatcher</name>
    <filename>class_particle_matcher.html</filename>
    <member kind="function">
      <type></type>
      <name>ParticleMatcher</name>
      <anchorfile>class_particle_matcher.html</anchorfile>
      <anchor>a6eb80cf73a93b7b6c7359ed8d4dc1975</anchor>
      <arglist>(Tools::MConfig const &amp;cfg, int const debug=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ParticleMatcher</name>
      <anchorfile>class_particle_matcher.html</anchorfile>
      <anchor>abb9da0f524ab9ab09309c4335bccfaac</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>matchObjects</name>
      <anchorfile>class_particle_matcher.html</anchorfile>
      <anchor>a72560c853070917c260a5d8f091c3094</anchor>
      <arglist>(pxl::EventView const *GenEvtView, pxl::EventView const *RecEvtView, std::string const &amp;defaultLinkName=&quot;priv-gen-rec&quot;, bool const CustomMatch=false) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>makeMatching</name>
      <anchorfile>class_particle_matcher.html</anchorfile>
      <anchor>a8833da07c5afdab29548c21f54e834be</anchor>
      <arglist>(std::vector&lt; pxl::Particle * &gt; &amp;gen_particles, std::vector&lt; pxl::Particle * &gt; &amp;rec_particles, const std::string &amp;Match=&quot;Match&quot;, const std::string &amp;hctaM=&quot;hctaM&quot;, const std::string &amp;linkname=&quot;priv-gen-rec&quot;) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>pxl::ParticlePDGidPtCriterion</name>
    <filename>classpxl_1_1_particle_p_d_gid_pt_criterion.html</filename>
    <base>FilterCriterionInterface&lt; Particle &gt;</base>
    <member kind="function">
      <type></type>
      <name>ParticlePDGidPtCriterion</name>
      <anchorfile>classpxl_1_1_particle_p_d_gid_pt_criterion.html</anchorfile>
      <anchor>a2cb536d10d8ad3abbe1a00a46f0007c0</anchor>
      <arglist>(const int &amp;id, double ptMin=0.0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>operator()</name>
      <anchorfile>classpxl_1_1_particle_p_d_gid_pt_criterion.html</anchorfile>
      <anchor>a7896a6b84f6a7a210444854e58aa915d</anchor>
      <arglist>(const Particle &amp;pa) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>pxl::ParticlePtComparator</name>
    <filename>classpxl_1_1_particle_pt_comparator.html</filename>
    <base>ComparatorInterface&lt; Particle &gt;</base>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>operator()</name>
      <anchorfile>classpxl_1_1_particle_pt_comparator.html</anchorfile>
      <anchor>aa356e9834b7d1e55355b4a49dcfa76ac</anchor>
      <arglist>(const Particle *p1, const Particle *p2)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>pxl::ParticlePtCriterion</name>
    <filename>classpxl_1_1_particle_pt_criterion.html</filename>
    <base>FilterCriterionInterface&lt; Particle &gt;</base>
    <member kind="function">
      <type></type>
      <name>ParticlePtCriterion</name>
      <anchorfile>classpxl_1_1_particle_pt_criterion.html</anchorfile>
      <anchor>aa3c5a4a0e2a4faabddb179433a6be89d</anchor>
      <arglist>(double ptMin=0.0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>operator()</name>
      <anchorfile>classpxl_1_1_particle_pt_criterion.html</anchorfile>
      <anchor>ac25c308d36e907a815c0d80eec2b0ee1</anchor>
      <arglist>(const Particle &amp;pa) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>pxl::ParticlePtEtaNameCriterion</name>
    <filename>classpxl_1_1_particle_pt_eta_name_criterion.html</filename>
    <base>FilterCriterionInterface&lt; Particle &gt;</base>
    <member kind="function">
      <type></type>
      <name>ParticlePtEtaNameCriterion</name>
      <anchorfile>classpxl_1_1_particle_pt_eta_name_criterion.html</anchorfile>
      <anchor>a5ee4d43112ef46a94860eca6e42f1539</anchor>
      <arglist>(const std::string &amp;name, double ptMin=0.0, double etaMax=0.0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>operator()</name>
      <anchorfile>classpxl_1_1_particle_pt_eta_name_criterion.html</anchorfile>
      <anchor>a910def60c031dafc6d5c37ca2913edbe</anchor>
      <arglist>(const Particle &amp;pa) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ParticleVector</name>
    <filename>class_particle_vector.html</filename>
    <member kind="function">
      <type></type>
      <name>ParticleVector</name>
      <anchorfile>class_particle_vector.html</anchorfile>
      <anchor>a3ba538be4df22f1bbfd1c30f0efa597d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ParticleVector</name>
      <anchorfile>class_particle_vector.html</anchorfile>
      <anchor>a3c30b677d69fc106dc3bd47921277eb2</anchor>
      <arglist>(const std::string &amp;name, const std::vector&lt; pxl::Particle * &gt; &amp;vec)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getParticleName</name>
      <anchorfile>class_particle_vector.html</anchorfile>
      <anchor>aa2bbc23ebfabc78ca84fe4e1b073c31e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; pxl::Particle * &gt; &amp;</type>
      <name>getParticles</name>
      <anchorfile>class_particle_vector.html</anchorfile>
      <anchor>a4480cb7f4c7d09179b6acbf9390cc866</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getCount</name>
      <anchorfile>class_particle_vector.html</anchorfile>
      <anchor>a9ef3d07ada7663302bb9954dfccc62d4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const pxl::Particle *</type>
      <name>at</name>
      <anchorfile>class_particle_vector.html</anchorfile>
      <anchor>a7b3efe13c8953eb23869d1ac1334c8dd</anchor>
      <arglist>(const size_t index) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>pdf::PDFInfo</name>
    <filename>structpdf_1_1_p_d_f_info.html</filename>
    <member kind="function">
      <type></type>
      <name>PDFInfo</name>
      <anchorfile>structpdf_1_1_p_d_f_info.html</anchorfile>
      <anchor>a222fc076c822e766ba85ff4cbd29e221</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getNumPDFs</name>
      <anchorfile>structpdf_1_1_p_d_f_info.html</anchorfile>
      <anchor>a123f231bcc4ccdfcf8bae46dc0fed822</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>init</name>
      <anchorfile>structpdf_1_1_p_d_f_info.html</anchorfile>
      <anchor>ad121a359e981eabf7e2ea15ee4277004</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>n_cteq</name>
      <anchorfile>structpdf_1_1_p_d_f_info.html</anchorfile>
      <anchor>aa4871eeddb0af4e2e50a21732b2cfb41</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>n_mstw</name>
      <anchorfile>structpdf_1_1_p_d_f_info.html</anchorfile>
      <anchor>a07dd393be1f005c8b2d8e0422ba6ceb2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>n_nnpdf</name>
      <anchorfile>structpdf_1_1_p_d_f_info.html</anchorfile>
      <anchor>a0c5e057f6f753cf6b3a3834fa7098a8a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>n_alpha_cteq</name>
      <anchorfile>structpdf_1_1_p_d_f_info.html</anchorfile>
      <anchor>a0f1dce0d39cacf10abd8545235d66724</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>n_alpha_mstw</name>
      <anchorfile>structpdf_1_1_p_d_f_info.html</anchorfile>
      <anchor>aa87680006156679787a8f6fc68d28e86</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>TEventClass::PDFResult</name>
    <filename>struct_t_event_class_1_1_p_d_f_result.html</filename>
    <member kind="variable">
      <type>float</type>
      <name>mean</name>
      <anchorfile>struct_t_event_class_1_1_p_d_f_result.html</anchorfile>
      <anchor>a2a2805ac3116b91460ff37286de77c16</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>float</type>
      <name>up</name>
      <anchorfile>struct_t_event_class_1_1_p_d_f_result.html</anchorfile>
      <anchor>a5018023cb3fab49ec4498aeb4ac80b0e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>float</type>
      <name>down</name>
      <anchorfile>struct_t_event_class_1_1_p_d_f_result.html</anchorfile>
      <anchor>a8548f9cf470d0b353c748aca7a84482e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>pdf::PDFTool</name>
    <filename>classpdf_1_1_p_d_f_tool.html</filename>
    <member kind="typedef">
      <type>std::vector&lt; std::string &gt;</type>
      <name>vstring</name>
      <anchorfile>classpdf_1_1_p_d_f_tool.html</anchorfile>
      <anchor>a7292d53db3f73321788aa0229f84eb44</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; unsigned int &gt;</type>
      <name>vuint</name>
      <anchorfile>classpdf_1_1_p_d_f_tool.html</anchorfile>
      <anchor>ad5496cb6a44e4679fa7df0936a657678</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; LHAPDF::PDF * &gt;</type>
      <name>PDFSets</name>
      <anchorfile>classpdf_1_1_p_d_f_tool.html</anchorfile>
      <anchor>aeb251101d63c60e6539bc9474ab37b96</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PDFTool</name>
      <anchorfile>classpdf_1_1_p_d_f_tool.html</anchorfile>
      <anchor>aab9adb27419282ac671b0ad8cd470150</anchor>
      <arglist>(Tools::MConfig const &amp;config, unsigned int const debug=1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~PDFTool</name>
      <anchorfile>classpdf_1_1_p_d_f_tool.html</anchorfile>
      <anchor>acb1117870ae68ba5a65c9d3cd01fd016</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPDFWeights</name>
      <anchorfile>classpdf_1_1_p_d_f_tool.html</anchorfile>
      <anchor>a1e1b318c732ef6d980ad9923eaf7cd0a</anchor>
      <arglist>(pxl::Event &amp;event) const</arglist>
    </member>
    <member kind="function">
      <type>pdf::PDFInfo const  &amp;</type>
      <name>getPDFInfo</name>
      <anchorfile>classpdf_1_1_p_d_f_tool.html</anchorfile>
      <anchor>a394c469cdff4795d0225f5749e514ceb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>calculatePdfAsUncertainty</name>
      <anchorfile>classpdf_1_1_p_d_f_tool.html</anchorfile>
      <anchor>a5d35515609ffdb25fd4cadd5acc2030e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPDFWeights</name>
      <anchorfile>classpdf_1_1_p_d_f_tool.html</anchorfile>
      <anchor>a15ee64fa2d002ce76cacd51e1b2f96ed</anchor>
      <arglist>(pxl::EventView const *genEvtView)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; float &gt;</type>
      <name>getPDFWeights</name>
      <anchorfile>classpdf_1_1_p_d_f_tool.html</anchorfile>
      <anchor>ac45b3f08f8b663f11200d408055374ad</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; double, double &gt;</type>
      <name>getAsWeights</name>
      <anchorfile>classpdf_1_1_p_d_f_tool.html</anchorfile>
      <anchor>a439e480de6c2d811e18c04246f106e0a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable">
      <type>PDFInfo</type>
      <name>m_pdfInfo</name>
      <anchorfile>classpdf_1_1_p_d_f_tool.html</anchorfile>
      <anchor>aabb23bb5859d294a87cb4c7759bc7017</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PhotonEffectiveArea</name>
    <filename>class_photon_effective_area.html</filename>
    <member kind="enumeration">
      <type></type>
      <name>EffArea</name>
      <anchorfile>class_photon_effective_area.html</anchorfile>
      <anchor>a91b454005c6f0d694f7eff89fc71554f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>chargedHadron</name>
      <anchorfile>class_photon_effective_area.html</anchorfile>
      <anchor>a91b454005c6f0d694f7eff89fc71554fa3ece76ad6f2edab74180cfb1735a4e17</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>neutralHadron</name>
      <anchorfile>class_photon_effective_area.html</anchorfile>
      <anchor>a91b454005c6f0d694f7eff89fc71554faa6b6363876ea09b231429aae6162297b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>photon</name>
      <anchorfile>class_photon_effective_area.html</anchorfile>
      <anchor>a91b454005c6f0d694f7eff89fc71554fa2f7652f181e5d50eb1919c37b3c9e1f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>chargedHadron</name>
      <anchorfile>class_photon_effective_area.html</anchorfile>
      <anchor>a91b454005c6f0d694f7eff89fc71554fa3ece76ad6f2edab74180cfb1735a4e17</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>neutralHadron</name>
      <anchorfile>class_photon_effective_area.html</anchorfile>
      <anchor>a91b454005c6f0d694f7eff89fc71554faa6b6363876ea09b231429aae6162297b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>photon</name>
      <anchorfile>class_photon_effective_area.html</anchorfile>
      <anchor>a91b454005c6f0d694f7eff89fc71554fa2f7652f181e5d50eb1919c37b3c9e1f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PhotonEffectiveArea</name>
      <anchorfile>class_photon_effective_area.html</anchorfile>
      <anchor>a58d41a81c5476645cee4c4dca95fc353</anchor>
      <arglist>(Tools::MConfig const &amp;config)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~PhotonEffectiveArea</name>
      <anchorfile>class_photon_effective_area.html</anchorfile>
      <anchor>acbf4f507d25b1d5b81f3847819fd196d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getEffectiveArea</name>
      <anchorfile>class_photon_effective_area.html</anchorfile>
      <anchor>ae78d124a7c18003fe1008e65cd5a595e</anchor>
      <arglist>(double const eta, unsigned int const type) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>pxl::PluginManager</name>
    <filename>classpxl_1_1_plugin_manager.html</filename>
    <member kind="function">
      <type></type>
      <name>PluginManager</name>
      <anchorfile>classpxl_1_1_plugin_manager.html</anchorfile>
      <anchor>a93abe6dc15d9d90f57a6f34ac7c870c9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PluginManager</name>
      <anchorfile>classpxl_1_1_plugin_manager.html</anchorfile>
      <anchor>a455c783cbb697253e90ad61d12c68a61</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>shutdown</name>
      <anchorfile>classpxl_1_1_plugin_manager.html</anchorfile>
      <anchor>abe2778efa6220f6456991629b76fd3b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>loadPlugin</name>
      <anchorfile>classpxl_1_1_plugin_manager.html</anchorfile>
      <anchor>aaf1b313b47f6f57b0f405326807f2e58</anchor>
      <arglist>(const std::string &amp;filename)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>loadPluginsFromDirectory</name>
      <anchorfile>classpxl_1_1_plugin_manager.html</anchorfile>
      <anchor>aff4bbb1f403afece64f3c052b88d7579</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>loadPlugins</name>
      <anchorfile>classpxl_1_1_plugin_manager.html</anchorfile>
      <anchor>abb130712fa7982d56710be74fdfaf991</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>loadConfiguration</name>
      <anchorfile>classpxl_1_1_plugin_manager.html</anchorfile>
      <anchor>aeebd0ef7135af12a57234858e6e88fb6</anchor>
      <arglist>(const std::string &amp;filename)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PluginManager &amp;</type>
      <name>instance</name>
      <anchorfile>classpxl_1_1_plugin_manager.html</anchorfile>
      <anchor>a2b8ac35f2c4cbe9245bbb90851c611c9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>getUserPluginDirectory</name>
      <anchorfile>classpxl_1_1_plugin_manager.html</anchorfile>
      <anchor>aaa04244b3c6edd13b16e0eb836cafbcf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>getDefaultPluginDirectory</name>
      <anchorfile>classpxl_1_1_plugin_manager.html</anchorfile>
      <anchor>ab72d424dc9d8a285ce2fb5d27a057ab5</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>indicators::ProgressBar</name>
    <filename>classindicators_1_1_progress_bar.html</filename>
    <member kind="function">
      <type></type>
      <name>ProgressBar</name>
      <anchorfile>classindicators_1_1_progress_bar.html</anchorfile>
      <anchor>a61c4f4acaee05b4d89479a0393752217</anchor>
      <arglist>(Args &amp;&amp;...args)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_option</name>
      <anchorfile>classindicators_1_1_progress_bar.html</anchorfile>
      <anchor>a90401014eebdd75082046afbf6aec3b8</anchor>
      <arglist>(details::Setting&lt; T, id &gt; &amp;&amp;setting)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_option</name>
      <anchorfile>classindicators_1_1_progress_bar.html</anchorfile>
      <anchor>a8e2b5b1c5ecddfc68fdc7367999d5aa2</anchor>
      <arglist>(const details::Setting&lt; T, id &gt; &amp;setting)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_option</name>
      <anchorfile>classindicators_1_1_progress_bar.html</anchorfile>
      <anchor>a94ca8670bd0aa163cedeaa054cb6a463</anchor>
      <arglist>(const details::Setting&lt; std::string, details::ProgressBarOption::postfix_text &gt; &amp;setting)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_option</name>
      <anchorfile>classindicators_1_1_progress_bar.html</anchorfile>
      <anchor>a179547f2b69a6e0abaccd64b369c57db</anchor>
      <arglist>(details::Setting&lt; std::string, details::ProgressBarOption::postfix_text &gt; &amp;&amp;setting)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_progress</name>
      <anchorfile>classindicators_1_1_progress_bar.html</anchorfile>
      <anchor>ae2f336118824f3c020a8faf856df2f79</anchor>
      <arglist>(size_t new_progress)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>tick</name>
      <anchorfile>classindicators_1_1_progress_bar.html</anchorfile>
      <anchor>acfbed07ba6cf5e298b9ea844138cb1f6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>current</name>
      <anchorfile>classindicators_1_1_progress_bar.html</anchorfile>
      <anchor>ac621cc58e0ef7c48a2e058fd4aebb258</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_completed</name>
      <anchorfile>classindicators_1_1_progress_bar.html</anchorfile>
      <anchor>a210f3de1499a4b9b59d31c2d8dc408e1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mark_as_completed</name>
      <anchorfile>classindicators_1_1_progress_bar.html</anchorfile>
      <anchor>a488a351536779e2b7b8b3ff9ebb89692</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print_progress</name>
      <anchorfile>classindicators_1_1_progress_bar.html</anchorfile>
      <anchor>a123b1e0e78b71b64e218fef22beae786</anchor>
      <arglist>(bool from_multi_progress=false)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>MultiProgress</name>
      <anchorfile>classindicators_1_1_progress_bar.html</anchorfile>
      <anchor>aba0b639557318697577be3d2cda61d35</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>DynamicProgress</name>
      <anchorfile>classindicators_1_1_progress_bar.html</anchorfile>
      <anchor>a4d812065d3c70107a193597cf718dc24</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>indicators::details::ProgressScaleWriter</name>
    <filename>classindicators_1_1details_1_1_progress_scale_writer.html</filename>
    <member kind="function">
      <type></type>
      <name>ProgressScaleWriter</name>
      <anchorfile>classindicators_1_1details_1_1_progress_scale_writer.html</anchorfile>
      <anchor>a684f5b7c8dca4703690578d62d145b30</anchor>
      <arglist>(std::ostream &amp;os, size_t bar_width, const std::string &amp;fill, const std::string &amp;lead, const std::string &amp;remainder)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>write</name>
      <anchorfile>classindicators_1_1details_1_1_progress_scale_writer.html</anchorfile>
      <anchor>af937a8eed8a20f0ac68bd2aea2e17d9f</anchor>
      <arglist>(float progress)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>indicators::ProgressSpinner</name>
    <filename>classindicators_1_1_progress_spinner.html</filename>
    <member kind="function">
      <type></type>
      <name>ProgressSpinner</name>
      <anchorfile>classindicators_1_1_progress_spinner.html</anchorfile>
      <anchor>a7e448ea949301eb151a4ffbc8fc552da</anchor>
      <arglist>(Args &amp;&amp;...args)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_option</name>
      <anchorfile>classindicators_1_1_progress_spinner.html</anchorfile>
      <anchor>a57c2643de744ab3a11667e2a1fbd6f3a</anchor>
      <arglist>(details::Setting&lt; T, id &gt; &amp;&amp;setting)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_option</name>
      <anchorfile>classindicators_1_1_progress_spinner.html</anchorfile>
      <anchor>a9bcdf47a4e51c56d64fa61c109eb7f51</anchor>
      <arglist>(const details::Setting&lt; T, id &gt; &amp;setting)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_option</name>
      <anchorfile>classindicators_1_1_progress_spinner.html</anchorfile>
      <anchor>aca9da0179f7f8a753c4d518f933a1cb9</anchor>
      <arglist>(const details::Setting&lt; std::string, details::ProgressBarOption::postfix_text &gt; &amp;setting)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_option</name>
      <anchorfile>classindicators_1_1_progress_spinner.html</anchorfile>
      <anchor>a5178c1684996630642bfed79e41331d9</anchor>
      <arglist>(details::Setting&lt; std::string, details::ProgressBarOption::postfix_text &gt; &amp;&amp;setting)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_progress</name>
      <anchorfile>classindicators_1_1_progress_spinner.html</anchorfile>
      <anchor>a0bb59a0b2124b635cfc11c0fdc03b91e</anchor>
      <arglist>(size_t value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>tick</name>
      <anchorfile>classindicators_1_1_progress_spinner.html</anchorfile>
      <anchor>a9ecd6a6e5eb66fecef6ff942bf87aa63</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>current</name>
      <anchorfile>classindicators_1_1_progress_spinner.html</anchorfile>
      <anchor>a0542647bd0c7e79bf8fba9a7cb3a48a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_completed</name>
      <anchorfile>classindicators_1_1_progress_spinner.html</anchorfile>
      <anchor>ad5dd728558dde319a7a361ef2f8ecf8e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mark_as_completed</name>
      <anchorfile>classindicators_1_1_progress_spinner.html</anchorfile>
      <anchor>ad5cbd323897836466eea91bae356a57c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print_progress</name>
      <anchorfile>classindicators_1_1_progress_spinner.html</anchorfile>
      <anchor>a6b8faf5a1118967f8f9650a5519c3167</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>pxl::Random</name>
    <filename>classpxl_1_1_random.html</filename>
    <member kind="enumvalue">
      <name>N</name>
      <anchorfile>classpxl_1_1_random.html</anchorfile>
      <anchor>aa7229f878c6f44f974c3e6c6af27dba4ae0831b38bd85831d5e1b3c36ee57af53</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SAVE</name>
      <anchorfile>classpxl_1_1_random.html</anchorfile>
      <anchor>a31db36c3f550d7787f6ffdf2e903b1d4a307f714d394e05ca9111a43394da61e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned long</type>
      <name>uint32</name>
      <anchorfile>classpxl_1_1_random.html</anchorfile>
      <anchor>a9beef106d185fcfbe952211e21b33e7a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>N</name>
      <anchorfile>classpxl_1_1_random.html</anchorfile>
      <anchor>aa7229f878c6f44f974c3e6c6af27dba4ae0831b38bd85831d5e1b3c36ee57af53</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SAVE</name>
      <anchorfile>classpxl_1_1_random.html</anchorfile>
      <anchor>a31db36c3f550d7787f6ffdf2e903b1d4a307f714d394e05ca9111a43394da61e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Random</name>
      <anchorfile>classpxl_1_1_random.html</anchorfile>
      <anchor>a8a94a6e2672cc5a3067accf5b5baef49</anchor>
      <arglist>(const uint32 &amp;oneSeed)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Random</name>
      <anchorfile>classpxl_1_1_random.html</anchorfile>
      <anchor>a2d1ba1a8f4eb12b1be96ea7616d80bf5</anchor>
      <arglist>(uint32 *const bigSeed, uint32 const seedLength=N)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Random</name>
      <anchorfile>classpxl_1_1_random.html</anchorfile>
      <anchor>a61ab50b21bd7e64b0dfb7fc7dbe67859</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>rand</name>
      <anchorfile>classpxl_1_1_random.html</anchorfile>
      <anchor>a2dd528ec27efd3f091c48e06d1129fba</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>rand</name>
      <anchorfile>classpxl_1_1_random.html</anchorfile>
      <anchor>a0a5fa66bca3b60ce009a90b7130e0c8c</anchor>
      <arglist>(const double &amp;n)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>randExc</name>
      <anchorfile>classpxl_1_1_random.html</anchorfile>
      <anchor>ab40432ac224f5dc0c916d9bdb89a3513</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>randExc</name>
      <anchorfile>classpxl_1_1_random.html</anchorfile>
      <anchor>adcb7b804ca6f7ef991a4cefbc6e8b423</anchor>
      <arglist>(const double &amp;n)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>randDblExc</name>
      <anchorfile>classpxl_1_1_random.html</anchorfile>
      <anchor>a57b272c4948c671fdd92567c8e1576e2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>randDblExc</name>
      <anchorfile>classpxl_1_1_random.html</anchorfile>
      <anchor>a832d0bdbaf4f542446e22b671cb09810</anchor>
      <arglist>(const double &amp;n)</arglist>
    </member>
    <member kind="function">
      <type>uint32</type>
      <name>randInt</name>
      <anchorfile>classpxl_1_1_random.html</anchorfile>
      <anchor>a9feb67ec890dc7bcfb790b1bf2d758e7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>uint32</type>
      <name>randInt</name>
      <anchorfile>classpxl_1_1_random.html</anchorfile>
      <anchor>aaaee05e86cd35b85f2469d1bddf68aac</anchor>
      <arglist>(const uint32 &amp;n)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>operator()</name>
      <anchorfile>classpxl_1_1_random.html</anchorfile>
      <anchor>a58a58d61ae14613ba80b3b189bd0c233</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>rand53</name>
      <anchorfile>classpxl_1_1_random.html</anchorfile>
      <anchor>a8e2eba37eebcdbf3caf3a12040c6cb60</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>randExponential</name>
      <anchorfile>classpxl_1_1_random.html</anchorfile>
      <anchor>a7e7be5823ab3451fd1b0e5ec3ba051b7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>randNorm</name>
      <anchorfile>classpxl_1_1_random.html</anchorfile>
      <anchor>a0300d765adb62a3e2b0c22ca902fd115</anchor>
      <arglist>(const double &amp;mean=0.0, const double &amp;variance=1.0)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>randUniform</name>
      <anchorfile>classpxl_1_1_random.html</anchorfile>
      <anchor>ad47f46fbec995c2ba3ee7690488249f3</anchor>
      <arglist>(double min, double max)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>randRayleigh</name>
      <anchorfile>classpxl_1_1_random.html</anchorfile>
      <anchor>a095f4941485a27d941733c17c2f8c3b8</anchor>
      <arglist>(double sigma)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>randFisher</name>
      <anchorfile>classpxl_1_1_random.html</anchorfile>
      <anchor>a469cd66d082a90cdaec4ffec6efb69b5</anchor>
      <arglist>(double k)</arglist>
    </member>
    <member kind="function">
      <type>Basic3Vector</type>
      <name>randFisher</name>
      <anchorfile>classpxl_1_1_random.html</anchorfile>
      <anchor>a58c1124d28cfe3ff5097ae6b444097a8</anchor>
      <arglist>(const Basic3Vector &amp;meanDirection, double kappa)</arglist>
    </member>
    <member kind="function">
      <type>Basic3Vector</type>
      <name>randFisher</name>
      <anchorfile>classpxl_1_1_random.html</anchorfile>
      <anchor>aa935d95b5e9caa3676c269c892289d74</anchor>
      <arglist>(const Basic3Vector *meanDirection, double kappa)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>randPowerLaw</name>
      <anchorfile>classpxl_1_1_random.html</anchorfile>
      <anchor>a2b2b23221fdbaba7ade923a5d33454a9</anchor>
      <arglist>(double index, double min, double max)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>randBrokenPowerLaw</name>
      <anchorfile>classpxl_1_1_random.html</anchorfile>
      <anchor>a1980cd14ddd26af2b4c5e11ae40d6254</anchor>
      <arglist>(double index1, double index2, double breakpoint, double min, double max)</arglist>
    </member>
    <member kind="function">
      <type>Basic3Vector</type>
      <name>randUnitVectorOnSphere</name>
      <anchorfile>classpxl_1_1_random.html</anchorfile>
      <anchor>aab1d088429cceddbfa1c2b3c8200af67</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>seed</name>
      <anchorfile>classpxl_1_1_random.html</anchorfile>
      <anchor>a2ea91bd61482c4baa8d5dcc4b0932243</anchor>
      <arglist>(const uint32 oneSeed)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>seed</name>
      <anchorfile>classpxl_1_1_random.html</anchorfile>
      <anchor>ab1006592980ebe163d5ef12c8db719b6</anchor>
      <arglist>(uint32 *const bigSeed, const uint32 seedLength=N)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>seed</name>
      <anchorfile>classpxl_1_1_random.html</anchorfile>
      <anchor>a05431d09150e08d7963bb52b9a4b21c9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>save</name>
      <anchorfile>classpxl_1_1_random.html</anchorfile>
      <anchor>a9a33172d7e29b38fb8f6a602c99dca69</anchor>
      <arglist>(uint32 *saveArray) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>load</name>
      <anchorfile>classpxl_1_1_random.html</anchorfile>
      <anchor>a051f7c63b3e3d6aa5f2e04586198c890</anchor>
      <arglist>(uint32 *const loadArray)</arglist>
    </member>
    <member kind="enumvalue" protection="protected">
      <name>M</name>
      <anchorfile>classpxl_1_1_random.html</anchorfile>
      <anchor>abf8d08a1cefe0bad2abf269cfff091e1a3d006b3678db06034c531421acd4e1ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="protected">
      <name>M</name>
      <anchorfile>classpxl_1_1_random.html</anchorfile>
      <anchor>abf8d08a1cefe0bad2abf269cfff091e1a3d006b3678db06034c531421acd4e1ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>classpxl_1_1_random.html</anchorfile>
      <anchor>a1426a1ae595ad8c3511818ede8f8f4d2</anchor>
      <arglist>(const uint32 oneSeed)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>reload</name>
      <anchorfile>classpxl_1_1_random.html</anchorfile>
      <anchor>a6d5188f6228ed81b7be11a697d9c98ed</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>uint32</type>
      <name>hiBit</name>
      <anchorfile>classpxl_1_1_random.html</anchorfile>
      <anchor>a3695d23419835dbd87341d138af01eb0</anchor>
      <arglist>(const uint32 &amp;u) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>uint32</type>
      <name>loBit</name>
      <anchorfile>classpxl_1_1_random.html</anchorfile>
      <anchor>a31639678a8134800f3af0a98a4a92044</anchor>
      <arglist>(const uint32 &amp;u) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>uint32</type>
      <name>loBits</name>
      <anchorfile>classpxl_1_1_random.html</anchorfile>
      <anchor>ad5a7da870f02c38dcc32959f34cf29d4</anchor>
      <arglist>(const uint32 &amp;u) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>uint32</type>
      <name>mixBits</name>
      <anchorfile>classpxl_1_1_random.html</anchorfile>
      <anchor>af08abff0c2907468bd257ef394361450</anchor>
      <arglist>(const uint32 &amp;u, const uint32 &amp;v) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>uint32</type>
      <name>twist</name>
      <anchorfile>classpxl_1_1_random.html</anchorfile>
      <anchor>abb894786afc5e516eb98de23138632b7</anchor>
      <arglist>(const uint32 &amp;m, const uint32 &amp;s0, const uint32 &amp;s1) const</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static uint32</type>
      <name>hash</name>
      <anchorfile>classpxl_1_1_random.html</anchorfile>
      <anchor>a4047c55499cef3bd28dec9b14cdaddc3</anchor>
      <arglist>(time_t t, clock_t c)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint32</type>
      <name>state</name>
      <anchorfile>classpxl_1_1_random.html</anchorfile>
      <anchor>a1883c00924b0c32f5dadd7279a174767</anchor>
      <arglist>[N]</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint32 *</type>
      <name>pNext</name>
      <anchorfile>classpxl_1_1_random.html</anchorfile>
      <anchor>a22fbc5daa6ba0a50da0bd97386b0bf54</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>left</name>
      <anchorfile>classpxl_1_1_random.html</anchorfile>
      <anchor>a4e4d931875529f34acb97ea6e1f159ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classpxl_1_1_random.html</anchorfile>
      <anchor>a350d627aeb66bc5b822c5a17b6a27827</anchor>
      <arglist>(std::ostream &amp;os, const Random &amp;mtrand)</arglist>
    </member>
    <member kind="friend">
      <type>friend std::istream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>classpxl_1_1_random.html</anchorfile>
      <anchor>a3f3449854b004c8d90c8a2a09f190997</anchor>
      <arglist>(std::istream &amp;is, Random &amp;mtrand)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>pxl::RandomAccessInputFile</name>
    <filename>classpxl_1_1_random_access_input_file.html</filename>
    <base>pxl::InputFile</base>
    <member kind="function">
      <type></type>
      <name>RandomAccessInputFile</name>
      <anchorfile>classpxl_1_1_random_access_input_file.html</anchorfile>
      <anchor>a19fcf6d028ab09741a9ee3795e8f9e8e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RandomAccessInputFile</name>
      <anchorfile>classpxl_1_1_random_access_input_file.html</anchorfile>
      <anchor>a78a2aa0ad9f05f5fba6054bd701a6b03</anchor>
      <arglist>(const std::string &amp;filename)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~RandomAccessInputFile</name>
      <anchorfile>classpxl_1_1_random_access_input_file.html</anchorfile>
      <anchor>a0ebcf4028fa84f8c4c44f1181db37c2e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>open</name>
      <anchorfile>classpxl_1_1_random_access_input_file.html</anchorfile>
      <anchor>aa42c07e340a46a8f897abb98045f6686</anchor>
      <arglist>(const std::string &amp;filename)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>close</name>
      <anchorfile>classpxl_1_1_random_access_input_file.html</anchorfile>
      <anchor>ae84ca36c5957a971b70d4961ba432d08</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reopen</name>
      <anchorfile>classpxl_1_1_random_access_input_file.html</anchorfile>
      <anchor>a5c36060be5c39a500559fed114b4c1b8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>seekToEvent</name>
      <anchorfile>classpxl_1_1_random_access_input_file.html</anchorfile>
      <anchor>a346454fb8519c67d4ab88db47103a6b9</anchor>
      <arglist>(unsigned int event)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ChunkReader &amp;</type>
      <name>getChunkReader</name>
      <anchorfile>classpxl_1_1_input_file.html</anchorfile>
      <anchor>adb934c41f26078ace2185c28506544d3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>good</name>
      <anchorfile>classpxl_1_1_input_file.html</anchorfile>
      <anchor>ac930b409a4d86b12a3a494a47a30b1a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>eof</name>
      <anchorfile>classpxl_1_1_input_file.html</anchorfile>
      <anchor>aa9020a0c17457c1bbc557c9430022ea5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>bad</name>
      <anchorfile>classpxl_1_1_input_file.html</anchorfile>
      <anchor>a160654fac3e215f2d22218fbfc0cd45c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>unsigned long</type>
      <name>getSectionCount</name>
      <anchorfile>classpxl_1_1_input_handler.html</anchorfile>
      <anchor>a11ac4d648010645f8bc1888e8c26951b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>nextFileSection</name>
      <anchorfile>classpxl_1_1_input_handler.html</anchorfile>
      <anchor>aceac1f09334e1acdfb79f573d290253d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>nextFileSectionIf</name>
      <anchorfile>classpxl_1_1_input_handler.html</anchorfile>
      <anchor>a10a9a777703b9eed9a20f8902629412e</anchor>
      <arglist>(const std::string &amp;info, skipMode doSkip=on)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>readEvent</name>
      <anchorfile>classpxl_1_1_input_handler.html</anchorfile>
      <anchor>a93134c546c7f58e28ecba7f73c111a0e</anchor>
      <arglist>(Event *event)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>readEventIf</name>
      <anchorfile>classpxl_1_1_input_handler.html</anchorfile>
      <anchor>a3004d6fda71623a921729a84024f1ee9</anchor>
      <arglist>(Event *event, const std::string &amp;blockInfo, skipMode doSkip=on)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>readBasicContainer</name>
      <anchorfile>classpxl_1_1_input_handler.html</anchorfile>
      <anchor>a045966cbc08a8d84ffe1ae8c8cffa1f3</anchor>
      <arglist>(BasicContainer *basicContainer)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>readBasicContainerIf</name>
      <anchorfile>classpxl_1_1_input_handler.html</anchorfile>
      <anchor>a8ea143e4df33f62371a083b56782a8c1</anchor>
      <arglist>(BasicContainer *basicContainer, const std::string &amp;blockInfo, skipMode doSkip=on)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>readInformationChunk</name>
      <anchorfile>classpxl_1_1_input_handler.html</anchorfile>
      <anchor>a533858011acb44fedb61d39d2907b6b4</anchor>
      <arglist>(InformationChunk *chunk)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>readInformationChunkIf</name>
      <anchorfile>classpxl_1_1_input_handler.html</anchorfile>
      <anchor>a1b9495f30c18e58987a2bc0586727a16</anchor>
      <arglist>(InformationChunk *event, const std::string &amp;blockInfo, skipMode doSkip=on)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>skip</name>
      <anchorfile>classpxl_1_1_input_handler.html</anchorfile>
      <anchor>abbd9529482496067eea34632ea147fe8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>previous</name>
      <anchorfile>classpxl_1_1_input_handler.html</anchorfile>
      <anchor>ac1c94d22e40580f40f69344060389ef5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>skipFileSections</name>
      <anchorfile>classpxl_1_1_input_handler.html</anchorfile>
      <anchor>a2be884e47c3bcb1bae8d9da9d6907a31</anchor>
      <arglist>(int n)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>seekToFileSection</name>
      <anchorfile>classpxl_1_1_input_handler.html</anchorfile>
      <anchor>a687dedb636f2c38a30fae01a646ce179</anchor>
      <arglist>(int index)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>readBlock</name>
      <anchorfile>classpxl_1_1_input_handler.html</anchorfile>
      <anchor>a12081dde29e109d02c34423a5bbac815</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>readBlockIf</name>
      <anchorfile>classpxl_1_1_input_handler.html</anchorfile>
      <anchor>abe13a115c4896d62053ccaee526bf997</anchor>
      <arglist>(const std::string &amp;blockInfo, skipMode doSkip=on)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>readObject</name>
      <anchorfile>classpxl_1_1_input_handler.html</anchorfile>
      <anchor>ac018847652ee63143382a6430e81b96a</anchor>
      <arglist>(objecttype *obj)</arglist>
    </member>
    <member kind="function">
      <type>Serializable *</type>
      <name>seekToObject</name>
      <anchorfile>classpxl_1_1_input_handler.html</anchorfile>
      <anchor>a644562434d4a58f279657fc964a4164d</anchor>
      <arglist>(size_t index)</arglist>
    </member>
    <member kind="function">
      <type>Serializable *</type>
      <name>readNextObject</name>
      <anchorfile>classpxl_1_1_input_handler.html</anchorfile>
      <anchor>a0df5ee6f1eeedf06337df6b8f427aaf5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Serializable *</type>
      <name>readPreviousObject</name>
      <anchorfile>classpxl_1_1_input_handler.html</anchorfile>
      <anchor>a2569be1cce4b7c000fee2c274d6e40e9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>readObjects</name>
      <anchorfile>classpxl_1_1_input_handler.html</anchorfile>
      <anchor>a35b2cf0c84c82968fafda2171f3ec818</anchor>
      <arglist>(std::vector&lt; Serializable * &gt; &amp;objects)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>readObjects</name>
      <anchorfile>classpxl_1_1_input_handler.html</anchorfile>
      <anchor>af7ed1cf18808db8126c743e560deb076</anchor>
      <arglist>(BasicContainer *container)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>readObjects</name>
      <anchorfile>classpxl_1_1_input_handler.html</anchorfile>
      <anchor>a8defee7288e17f5f73fe8f7c4fe5bab3</anchor>
      <arglist>(Event *event)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>objectCount</name>
      <anchorfile>classpxl_1_1_input_handler.html</anchorfile>
      <anchor>a9f086768d30c3522ba8936586057b256</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classpxl_1_1_input_handler.html</anchorfile>
      <anchor>ac2400980a57a0650c38b871ada889715</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>getSize</name>
      <anchorfile>classpxl_1_1_input_handler.html</anchorfile>
      <anchor>a825f61894b086fef7c26d3a5ddcb582f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>getPosition</name>
      <anchorfile>classpxl_1_1_input_handler.html</anchorfile>
      <anchor>a7d7c69d66fac700c2725821ab45a4568</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>dCacheBuf::read_ahead_data</name>
    <filename>structd_cache_buf_1_1read__ahead__data.html</filename>
    <member kind="variable">
      <type>std::streamsize</type>
      <name>bufsize</name>
      <anchorfile>structd_cache_buf_1_1read__ahead__data.html</anchorfile>
      <anchor>aac474fa6e712535786a9aca0e70c2999</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>file</name>
      <anchorfile>structd_cache_buf_1_1read__ahead__data.html</anchorfile>
      <anchor>ad75b036914326ffcf0330be421b7aea1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::streamsize</type>
      <name>aheadsize</name>
      <anchorfile>structd_cache_buf_1_1read__ahead__data.html</anchorfile>
      <anchor>a48850d2d8c275cb5bb9d83da7c6b44d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>char *</type>
      <name>buffer</name>
      <anchorfile>structd_cache_buf_1_1read__ahead__data.html</anchorfile>
      <anchor>a1f3edbbe14e874a0031403f47ab5a68d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>pxl::Relations</name>
    <filename>classpxl_1_1_relations.html</filename>
    <member kind="typedef">
      <type>std::set&lt; Relative * &gt;::const_iterator</type>
      <name>const_iterator</name>
      <anchorfile>classpxl_1_1_relations.html</anchorfile>
      <anchor>a4dfe1da35f25aeb8e1af78d789bdbdd7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::set&lt; Relative * &gt;::iterator</type>
      <name>iterator</name>
      <anchorfile>classpxl_1_1_relations.html</anchorfile>
      <anchor>a2c577c8d6451936af813b614bbfc9510</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Relations</name>
      <anchorfile>classpxl_1_1_relations.html</anchorfile>
      <anchor>ac4f43e35c0a5ba245f5811cdfec2add6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>serialize</name>
      <anchorfile>classpxl_1_1_relations.html</anchorfile>
      <anchor>ad4d4b89b4c7288f272eefbf37917c2d3</anchor>
      <arglist>(const OutputStream &amp;out) const</arglist>
    </member>
    <member kind="function">
      <type>const std::set&lt; Relative * &gt; &amp;</type>
      <name>getContainer</name>
      <anchorfile>classpxl_1_1_relations.html</anchorfile>
      <anchor>a3d9ac415d9e09889fa448fe523bf9d91</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>set</name>
      <anchorfile>classpxl_1_1_relations.html</anchorfile>
      <anchor>a56dda351acde5984d88499a8c3d981b3</anchor>
      <arglist>(Relative *relative)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>erase</name>
      <anchorfile>classpxl_1_1_relations.html</anchorfile>
      <anchor>a419566df575bc58002240397f3a58b93</anchor>
      <arglist>(Relative *relative)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has</name>
      <anchorfile>classpxl_1_1_relations.html</anchorfile>
      <anchor>ac7d3f7dcfb5330a2f8d30ed0bbd7118e</anchor>
      <arglist>(Relative *relative) const</arglist>
    </member>
    <member kind="function">
      <type>Relative *</type>
      <name>getFirst</name>
      <anchorfile>classpxl_1_1_relations.html</anchorfile>
      <anchor>a87da266487299bacc319282eeb8e245a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>getObjectsOfType</name>
      <anchorfile>classpxl_1_1_relations.html</anchorfile>
      <anchor>aa3bc77f35731737a24e4cd9b76bc9a79</anchor>
      <arglist>(std::vector&lt; objecttype * &gt; &amp;relatives) const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>size</name>
      <anchorfile>classpxl_1_1_relations.html</anchorfile>
      <anchor>a88391f680423a74f6893d4097113d377</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>begin</name>
      <anchorfile>classpxl_1_1_relations.html</anchorfile>
      <anchor>ae8e24fb6d8fc2231af9b239e3cefbc1d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>begin</name>
      <anchorfile>classpxl_1_1_relations.html</anchorfile>
      <anchor>a978120ce4ac3229d20565bc972c53c86</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>end</name>
      <anchorfile>classpxl_1_1_relations.html</anchorfile>
      <anchor>aa4e79f67c3fb35f2162738a28895e06e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>end</name>
      <anchorfile>classpxl_1_1_relations.html</anchorfile>
      <anchor>a462f268d3d20d6b6098f3c678a5d9c3e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearContainer</name>
      <anchorfile>classpxl_1_1_relations.html</anchorfile>
      <anchor>aa96886fb3446a1a5f16daf53bc2aa0c0</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>pxl::Relative</name>
    <filename>classpxl_1_1_relative.html</filename>
    <base>pxl::Serializable</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Relative</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>a5c7926bdb9fc4ec3d7c7ca02df9d4dca</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Id</type>
      <name>id</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>a9bf6c17d6fd5b588c00463db4028870b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Id &amp;</type>
      <name>getTypeId</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>a2128ab48f3c4911e0b8213806de3db05</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>a0b4d51f3b1d3e288682e908149c0bab0</anchor>
      <arglist>(const OutputStream &amp;out) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>deserialize</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>af4575fb84213a69067fc1ff7d6c09193</anchor>
      <arglist>(const InputStream &amp;in)</arglist>
    </member>
    <member kind="function">
      <type>ObjectOwner *</type>
      <name>owner</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>a556c1cc09bed10e480cceb5da42edb33</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Serializable *</type>
      <name>clone</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>a212dcc5c8f0254f9fe444eaa6a6a4139</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Relations &amp;</type>
      <name>getMotherRelations</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>a10f8728c388408f48a120e90de6298ae</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Relations &amp;</type>
      <name>getDaughterRelations</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>ae3b09cfe9057e042b88cf1adf6b4a036</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Relations &amp;</type>
      <name>getFlatRelations</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>aa8b871a98b21677ef5c159dbb608722d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Relative *</type>
      <name>getMother</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>a53a7b6b11409893dab8a73a0159180ec</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Relative *</type>
      <name>getDaughter</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>a6e7b03ed37eca69cd1063f78fd05b6dc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::set&lt; Relative * &gt; &amp;</type>
      <name>getDaughters</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>a6c4f5b97226fe562ef9144fa14f8c0f5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::set&lt; Relative * &gt; &amp;</type>
      <name>getMothers</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>a1728bea81bb0f966335f32c832a1cffa</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>numberOfDaughters</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>aa92bd45d2b1751fe3bfbbc79c8a21b32</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>numberOfMothers</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>aab1ec876cfe2f1bebf212b60f66ba907</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>linkMother</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>af3f916466c571dad5b0be5f4baded3b3</anchor>
      <arglist>(Relative *target)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>linkDaughter</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>a0a6244c26919bdd6fd45cbb8ea5a8f8b</anchor>
      <arglist>(Relative *target)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>linkFlat</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>a5ee923ece292e0d9268495af7590f060</anchor>
      <arglist>(Relative *target)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unlinkMother</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>a2b75c81e4078d147d36310fe7c3a4800</anchor>
      <arglist>(Relative *target)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unlinkDaughter</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>aaface8521be14a7fbb256ad786355ea4</anchor>
      <arglist>(Relative *target)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unlinkFlat</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>a4a4eba4935e47072056671728c2bd139</anchor>
      <arglist>(Relative *target)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unlinkMothers</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>ad51348aae3792d8205823b46da02a564</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unlinkDaughters</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>a3bd2ff6a25aab01fda19df066bb492a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unlinkFlat</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>a8d81b6131cc1532e3ba868e3509cb9b2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>linkSoft</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>a2ea79223a0f9d9edeeb8398b53ff6ab1</anchor>
      <arglist>(Relative *relative, const std::string &amp;type)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unlinkSoft</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>a1e870e37dbe2b384f85b138b5ec51e0e</anchor>
      <arglist>(Relative *relative, const std::string &amp;type)</arglist>
    </member>
    <member kind="function">
      <type>const SoftRelations &amp;</type>
      <name>getSoftRelations</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>ae5b78c9536de71abbb15a413e31f655e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>SoftRelations &amp;</type>
      <name>getSoftRelations</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>ab72e809de894954b8cc73ff768d757a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getName</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>a5384c8188f28913c4cc898571f133f32</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setName</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>a483a501afd8965daa92d3bafb91b4dfe</anchor>
      <arglist>(const std::string &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>printDecayTree</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>afa50de942d2caa47defa7e39a79df0a9</anchor>
      <arglist>(int level=0, std::ostream &amp;os=std::cout, int pan=1) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::ostream &amp;</type>
      <name>print</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>af46011b02d433bca07fb7f1989f7bd46</anchor>
      <arglist>(int level=1, std::ostream &amp;os=std::cout, int pan=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual WkPtrBase *</type>
      <name>createSelfWkPtr</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>ab2422865677b93fb98cac56ed31fb0a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Id &amp;</type>
      <name>getId</name>
      <anchorfile>classpxl_1_1_serializable.html</anchorfile>
      <anchor>a071e3e5bdd7125cee5dd5178807c3647</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const std::string</type>
      <name>toString</name>
      <anchorfile>classpxl_1_1_serializable.html</anchorfile>
      <anchor>abe42afdf47f4fa9cad94e26e9a3d6ba1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const Id &amp;</type>
      <name>getStaticTypeId</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>a5fd98a32acb8e9d3c2b5d93de55bee95</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Relative</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>a02af23c8e66c8c115d30a08b09102706</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Relative</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>a9be19375153aafe91eb675e506960425</anchor>
      <arglist>(const Relative &amp;original)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Relative</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>a0c81a8ff22debbe97599fdf84a7646f6</anchor>
      <arglist>(const Relative *original)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::ostream &amp;</type>
      <name>printPan1st</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>a589f7baac2ec1c61eeb4c2c1e3403526</anchor>
      <arglist>(std::ostream &amp;os, int pan) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::ostream &amp;</type>
      <name>printPan</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>a5038bd2b7584b9aacb4b7d0ac02b26fa</anchor>
      <arglist>(std::ostream &amp;os, int pan) const</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WkPtrBase</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>a81f507e309884a3bfd572a74393bb6ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>ObjectOwner</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>a1efa44a5767fd2d46afa4bebd952439f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ReWeighter</name>
    <filename>class_re_weighter.html</filename>
    <member kind="function">
      <type></type>
      <name>ReWeighter</name>
      <anchorfile>class_re_weighter.html</anchorfile>
      <anchor>a2d9f0e38262183089a5ad64a7bebb17f</anchor>
      <arglist>(const Tools::MConfig &amp;cutconfig, int i)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ReWeighter</name>
      <anchorfile>class_re_weighter.html</anchorfile>
      <anchor>ac4997f7768198d983a609207f3e70f93</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ReWeightEvent</name>
      <anchorfile>class_re_weighter.html</anchorfile>
      <anchor>adfaa14ff0a6e3aaf2f58679c2641e821</anchor>
      <arglist>(pxl::Event *event)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>class_re_weighter.html</anchorfile>
      <anchor>afae85816b71acaf72cbd59d19f6c60d7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>adaptConfig</name>
      <anchorfile>class_re_weighter.html</anchorfile>
      <anchor>af086b3e66854244e17391a934654ed1b</anchor>
      <arglist>(Tools::MConfig &amp;config, const std::string &amp;filename)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>pxl::RotationMatrix</name>
    <filename>classpxl_1_1_rotation_matrix.html</filename>
    <base>pxl::BasicMatrix</base>
    <member kind="function">
      <type></type>
      <name>RotationMatrix</name>
      <anchorfile>classpxl_1_1_rotation_matrix.html</anchorfile>
      <anchor>a3bf4e24d03f78708a0cc1cb2de58118d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RotationMatrix</name>
      <anchorfile>classpxl_1_1_rotation_matrix.html</anchorfile>
      <anchor>a1e854332d82acfdab3523f0fb147d11e</anchor>
      <arglist>(const RotationMatrix &amp;orig)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RotationMatrix</name>
      <anchorfile>classpxl_1_1_rotation_matrix.html</anchorfile>
      <anchor>a960605d57e38808ee83117a595296251</anchor>
      <arglist>(const RotationMatrix *orig)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RotationMatrix</name>
      <anchorfile>classpxl_1_1_rotation_matrix.html</anchorfile>
      <anchor>a139d3e5ae4f8f5c873798804d50f2476</anchor>
      <arglist>(const Basic3Vector &amp;rotationAxis, double rotationAngle)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setName</name>
      <anchorfile>classpxl_1_1_basic_matrix.html</anchorfile>
      <anchor>aec4a5d42afe4c4490585e5d795c2d43f</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getName</name>
      <anchorfile>classpxl_1_1_basic_matrix.html</anchorfile>
      <anchor>a1480a18be1d5b9e5c91afb51f4c37977</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>use</name>
      <anchorfile>classpxl_1_1_basic_matrix.html</anchorfile>
      <anchor>a587703971f483b81de7413cb470a9bda</anchor>
      <arglist>(size_t size1, size_t size2, double *data)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isAlien</name>
      <anchorfile>classpxl_1_1_basic_matrix.html</anchorfile>
      <anchor>a786f5546e7e79a256b685a0cf5a69a85</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRowBasedStorage</name>
      <anchorfile>classpxl_1_1_basic_matrix.html</anchorfile>
      <anchor>a49c7339245f7463f7a47dd6f315b62e4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setColumnBasedStorage</name>
      <anchorfile>classpxl_1_1_basic_matrix.html</anchorfile>
      <anchor>a3d1e22a503d88582187aed32485971c6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isRowBasedStorage</name>
      <anchorfile>classpxl_1_1_basic_matrix.html</anchorfile>
      <anchor>a2e684118a5cb401d7849bde41542214f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isColumnBasedStorage</name>
      <anchorfile>classpxl_1_1_basic_matrix.html</anchorfile>
      <anchor>a878395d3cfe9ff03b3ac83ef92fd51d3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>getSize1</name>
      <anchorfile>classpxl_1_1_basic_matrix.html</anchorfile>
      <anchor>a7778a182e5cd6fcef87cf543088b5cde</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>getSize2</name>
      <anchorfile>classpxl_1_1_basic_matrix.html</anchorfile>
      <anchor>a2bf2100d58300bd4220db486c8e0350d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>getNumberOfRows</name>
      <anchorfile>classpxl_1_1_basic_matrix.html</anchorfile>
      <anchor>a819ced4f6bae68d36de2b8590c2b1762</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>getNumberOfColumns</name>
      <anchorfile>classpxl_1_1_basic_matrix.html</anchorfile>
      <anchor>a16a865f1cf49f6ade4f12a2df64ac765</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classpxl_1_1_basic_matrix.html</anchorfile>
      <anchor>af72d970b05408f91740536ec94e42038</anchor>
      <arglist>(size_t i, size_t j)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reshape</name>
      <anchorfile>classpxl_1_1_basic_matrix.html</anchorfile>
      <anchor>a9a52ad7ab8aa4f6164f9c652e71d55f9</anchor>
      <arglist>(size_t i, size_t j)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getElement</name>
      <anchorfile>classpxl_1_1_basic_matrix.html</anchorfile>
      <anchor>afa9c49730d955737a5b1afdac2f8fa41</anchor>
      <arglist>(size_t i, size_t j) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setElement</name>
      <anchorfile>classpxl_1_1_basic_matrix.html</anchorfile>
      <anchor>aac5c7b204e5e5eaa881652474283e09a</anchor>
      <arglist>(size_t i, size_t j, double val)</arglist>
    </member>
    <member kind="function">
      <type>double *</type>
      <name>getArray</name>
      <anchorfile>classpxl_1_1_basic_matrix.html</anchorfile>
      <anchor>ab97798e7f05e1dc7ca0fa0ef99f3fbdc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const double *</type>
      <name>getConstArray</name>
      <anchorfile>classpxl_1_1_basic_matrix.html</anchorfile>
      <anchor>a078fec6f5e797baa1253b5679f1ef26a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>BasicMatrix</type>
      <name>operator+</name>
      <anchorfile>classpxl_1_1_basic_matrix.html</anchorfile>
      <anchor>a4d998e8ec6459ca50dec7393c695da5a</anchor>
      <arglist>(const BasicMatrix &amp;M)</arglist>
    </member>
    <member kind="function">
      <type>BasicMatrix</type>
      <name>operator-</name>
      <anchorfile>classpxl_1_1_basic_matrix.html</anchorfile>
      <anchor>a66eb60178fa3316313d9b0dc2af83f1c</anchor>
      <arglist>(const BasicMatrix &amp;M)</arglist>
    </member>
    <member kind="function">
      <type>const BasicMatrix &amp;</type>
      <name>operator+=</name>
      <anchorfile>classpxl_1_1_basic_matrix.html</anchorfile>
      <anchor>adb18acb6a93c9d63a0afaa214ddf59ad</anchor>
      <arglist>(const BasicMatrix &amp;M)</arglist>
    </member>
    <member kind="function">
      <type>const BasicMatrix &amp;</type>
      <name>operator-=</name>
      <anchorfile>classpxl_1_1_basic_matrix.html</anchorfile>
      <anchor>a56461f7c450b6151d80913f9758a55e5</anchor>
      <arglist>(const BasicMatrix &amp;M)</arglist>
    </member>
    <member kind="function">
      <type>const BasicMatrix &amp;</type>
      <name>operator*=</name>
      <anchorfile>classpxl_1_1_basic_matrix.html</anchorfile>
      <anchor>a082b91431384c70238461ac90b6c5728</anchor>
      <arglist>(double skalar)</arglist>
    </member>
    <member kind="function">
      <type>const BasicMatrix &amp;</type>
      <name>operator/=</name>
      <anchorfile>classpxl_1_1_basic_matrix.html</anchorfile>
      <anchor>a54e474f3a51848d2c89bc6e0143e3827</anchor>
      <arglist>(double skalar)</arglist>
    </member>
    <member kind="function">
      <type>const BasicMatrix</type>
      <name>operator/</name>
      <anchorfile>classpxl_1_1_basic_matrix.html</anchorfile>
      <anchor>a1f0270ce6787b59144c0f0886f9768ee</anchor>
      <arglist>(double skalar) const</arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>operator()</name>
      <anchorfile>classpxl_1_1_basic_matrix.html</anchorfile>
      <anchor>a293ee1839c7a7bef4e447abd7255e9f0</anchor>
      <arglist>(size_t i, size_t j)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::ostream &amp;</type>
      <name>print</name>
      <anchorfile>classpxl_1_1_basic_matrix.html</anchorfile>
      <anchor>a3419fcdf8e59273e3039926873de40eb</anchor>
      <arglist>(int level=1, std::ostream &amp;os=std::cout, int pan=1) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Serializable *</type>
      <name>clone</name>
      <anchorfile>classpxl_1_1_basic_matrix.html</anchorfile>
      <anchor>a0ebefddb93ff78ef1e06b4ae7b3d162a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classpxl_1_1_basic_matrix.html</anchorfile>
      <anchor>a972c34855f3cb68717d5ceb4c7ca0bc4</anchor>
      <arglist>(const OutputStream &amp;out) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>deserialize</name>
      <anchorfile>classpxl_1_1_basic_matrix.html</anchorfile>
      <anchor>aaba7e0c2be2abb73fe91bf4087a1c0d6</anchor>
      <arglist>(const InputStream &amp;in)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Id &amp;</type>
      <name>getTypeId</name>
      <anchorfile>classpxl_1_1_basic_matrix.html</anchorfile>
      <anchor>aca22f44e283d058a0bbe7098fe3edb5d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Id &amp;</type>
      <name>getId</name>
      <anchorfile>classpxl_1_1_serializable.html</anchorfile>
      <anchor>a071e3e5bdd7125cee5dd5178807c3647</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const std::string</type>
      <name>toString</name>
      <anchorfile>classpxl_1_1_serializable.html</anchorfile>
      <anchor>abe42afdf47f4fa9cad94e26e9a3d6ba1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const Id &amp;</type>
      <name>getStaticTypeId</name>
      <anchorfile>classpxl_1_1_basic_matrix.html</anchorfile>
      <anchor>acf7b593372d68345d538e4f366fe6c4b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double *</type>
      <name>_data</name>
      <anchorfile>classpxl_1_1_basic_matrix.html</anchorfile>
      <anchor>a75a45c1acc2877006634b7781e89bf56</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RunLumiFilter</name>
    <filename>class_run_lumi_filter.html</filename>
    <member kind="function">
      <type></type>
      <name>RunLumiFilter</name>
      <anchorfile>class_run_lumi_filter.html</anchorfile>
      <anchor>ae880ca319ec1b9d3d5cf1518bf6e9bac</anchor>
      <arglist>(const std::string &amp;_input_json_file)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>operator()</name>
      <anchorfile>class_run_lumi_filter.html</anchorfile>
      <anchor>a76f86ad7bf49799fd702a9924a06ea6f</anchor>
      <arglist>(unsigned long run_number, unsigned long lumi) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lumi::RunLumiRanges</name>
    <filename>classlumi_1_1_run_lumi_ranges.html</filename>
    <member kind="function">
      <type></type>
      <name>RunLumiRanges</name>
      <anchorfile>classlumi_1_1_run_lumi_ranges.html</anchorfile>
      <anchor>a3cb66fb2108838ac373647939babda29</anchor>
      <arglist>(const std::string &amp;filename)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>check</name>
      <anchorfile>classlumi_1_1_run_lumi_ranges.html</anchorfile>
      <anchor>a02fc986101e8362c2c5c6b85a141ecee</anchor>
      <arglist>(const ID run, const ID LS)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SafeCastHelper</name>
    <filename>class_safe_cast_helper.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>SafeCastHelper&lt; bool, T, CastToBool &gt;</name>
    <filename>class_safe_cast_helper_3_01bool_00_01_t_00_01_cast_to_bool_01_4.html</filename>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>Cast</name>
      <anchorfile>class_safe_cast_helper_3_01bool_00_01_t_00_01_cast_to_bool_01_4.html</anchorfile>
      <anchor>aea074a0e1571517cf0bd932dc1e30c3f</anchor>
      <arglist>(T t, bool &amp;b)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>CastThrow</name>
      <anchorfile>class_safe_cast_helper_3_01bool_00_01_t_00_01_cast_to_bool_01_4.html</anchorfile>
      <anchor>aa469bfff6c5691999008fbddd8ca306f</anchor>
      <arglist>(bool b, T &amp;t)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SafeCastHelper&lt; T, bool, CastFromBool &gt;</name>
    <filename>class_safe_cast_helper_3_01_t_00_01bool_00_01_cast_from_bool_01_4.html</filename>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>Cast</name>
      <anchorfile>class_safe_cast_helper_3_01_t_00_01bool_00_01_cast_from_bool_01_4.html</anchorfile>
      <anchor>a334d705e892cb47fd4ff763ecde5f640</anchor>
      <arglist>(bool b, T &amp;t)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>CastThrow</name>
      <anchorfile>class_safe_cast_helper_3_01_t_00_01bool_00_01_cast_from_bool_01_4.html</anchorfile>
      <anchor>a387c35f6fa226e76da760303b50b3565</anchor>
      <arglist>(bool b, T &amp;t)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SafeCastHelper&lt; T, U, CastCheckGTMax &gt;</name>
    <filename>class_safe_cast_helper_3_01_t_00_01_u_00_01_cast_check_g_t_max_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>Cast</name>
      <anchorfile>class_safe_cast_helper_3_01_t_00_01_u_00_01_cast_check_g_t_max_01_4.html</anchorfile>
      <anchor>aa7527bc6815527031707d36c6aaf209f</anchor>
      <arglist>(U u, T &amp;t)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>CastThrow</name>
      <anchorfile>class_safe_cast_helper_3_01_t_00_01_u_00_01_cast_check_g_t_max_01_4.html</anchorfile>
      <anchor>a7186421a70a5666c10336e82878ea470</anchor>
      <arglist>(U u, T &amp;t)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SafeCastHelper&lt; T, U, CastCheckLTZero &gt;</name>
    <filename>class_safe_cast_helper_3_01_t_00_01_u_00_01_cast_check_l_t_zero_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>Cast</name>
      <anchorfile>class_safe_cast_helper_3_01_t_00_01_u_00_01_cast_check_l_t_zero_01_4.html</anchorfile>
      <anchor>adaf450b2cf85e57214b1cccc5e62b4bb</anchor>
      <arglist>(U u, T &amp;t)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>CastThrow</name>
      <anchorfile>class_safe_cast_helper_3_01_t_00_01_u_00_01_cast_check_l_t_zero_01_4.html</anchorfile>
      <anchor>a33185501e38876ee24e4f11e53c23ef2</anchor>
      <arglist>(U u, T &amp;t)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SafeCastHelper&lt; T, U, CastCheckMinMaxSigned &gt;</name>
    <filename>class_safe_cast_helper_3_01_t_00_01_u_00_01_cast_check_min_max_signed_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>Cast</name>
      <anchorfile>class_safe_cast_helper_3_01_t_00_01_u_00_01_cast_check_min_max_signed_01_4.html</anchorfile>
      <anchor>a9da975db1dee05b7fc13f6506ac6c394</anchor>
      <arglist>(U u, T &amp;t)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>CastThrow</name>
      <anchorfile>class_safe_cast_helper_3_01_t_00_01_u_00_01_cast_check_min_max_signed_01_4.html</anchorfile>
      <anchor>a13d072a17c72ce8de0ecf8712d012c4f</anchor>
      <arglist>(U u, T &amp;t)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SafeCastHelper&lt; T, U, CastCheckMinMaxUnsigned &gt;</name>
    <filename>class_safe_cast_helper_3_01_t_00_01_u_00_01_cast_check_min_max_unsigned_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>Cast</name>
      <anchorfile>class_safe_cast_helper_3_01_t_00_01_u_00_01_cast_check_min_max_unsigned_01_4.html</anchorfile>
      <anchor>a633b322cda49512ada768ac497886227</anchor>
      <arglist>(U u, T &amp;t)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>CastThrow</name>
      <anchorfile>class_safe_cast_helper_3_01_t_00_01_u_00_01_cast_check_min_max_unsigned_01_4.html</anchorfile>
      <anchor>a99c8c84659308cda1dd25716d7be4aa0</anchor>
      <arglist>(U u, T &amp;t)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SafeCastHelper&lt; T, U, CastFromFloat &gt;</name>
    <filename>class_safe_cast_helper_3_01_t_00_01_u_00_01_cast_from_float_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>Cast</name>
      <anchorfile>class_safe_cast_helper_3_01_t_00_01_u_00_01_cast_from_float_01_4.html</anchorfile>
      <anchor>a2ca19d254fec9e2adc525542aa8950ef</anchor>
      <arglist>(U u, T &amp;t)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>CastThrow</name>
      <anchorfile>class_safe_cast_helper_3_01_t_00_01_u_00_01_cast_from_float_01_4.html</anchorfile>
      <anchor>a1f2f8330b95d1a9a3055544caf552dce</anchor>
      <arglist>(U u, T &amp;t)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SafeCastHelper&lt; T, U, CastOK &gt;</name>
    <filename>class_safe_cast_helper_3_01_t_00_01_u_00_01_cast_o_k_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>Cast</name>
      <anchorfile>class_safe_cast_helper_3_01_t_00_01_u_00_01_cast_o_k_01_4.html</anchorfile>
      <anchor>ac81a935b7896ee4040359b329107ce42</anchor>
      <arglist>(U u, T &amp;t)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>CastThrow</name>
      <anchorfile>class_safe_cast_helper_3_01_t_00_01_u_00_01_cast_o_k_01_4.html</anchorfile>
      <anchor>a0ec3f1a85ac23d2d2a65cda6d1501fc0</anchor>
      <arglist>(U u, T &amp;t)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SafeInt</name>
    <filename>class_safe_int.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="enumeration">
      <type></type>
      <name>alignBits</name>
      <anchorfile>class_safe_int.html</anchorfile>
      <anchor>a6cff8c153afafee5d2566eddbcf67af9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>align2</name>
      <anchorfile>class_safe_int.html</anchorfile>
      <anchor>a6cff8c153afafee5d2566eddbcf67af9ad6dffff8e22e584f41f85b56a23b248a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>align4</name>
      <anchorfile>class_safe_int.html</anchorfile>
      <anchor>a6cff8c153afafee5d2566eddbcf67af9ae0c84c5771abfc7a7f7c6fb5bec04eba</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>align8</name>
      <anchorfile>class_safe_int.html</anchorfile>
      <anchor>a6cff8c153afafee5d2566eddbcf67af9afd35a80900e0f0633f0274ab4417ec76</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>align16</name>
      <anchorfile>class_safe_int.html</anchorfile>
      <anchor>a6cff8c153afafee5d2566eddbcf67af9a272f044fb3f6831124316bf9553575bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>align32</name>
      <anchorfile>class_safe_int.html</anchorfile>
      <anchor>a6cff8c153afafee5d2566eddbcf67af9ad255b09128f29c7544da357cfc898b0e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>align64</name>
      <anchorfile>class_safe_int.html</anchorfile>
      <anchor>a6cff8c153afafee5d2566eddbcf67af9a0013f3fd4149a2c67bb777993a491e96</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>align128</name>
      <anchorfile>class_safe_int.html</anchorfile>
      <anchor>a6cff8c153afafee5d2566eddbcf67af9ad193c4af04d3bdbb6b0bbb7de0863fcf</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>align256</name>
      <anchorfile>class_safe_int.html</anchorfile>
      <anchor>a6cff8c153afafee5d2566eddbcf67af9a51d50c907a8e284fb6d6efa8afc25818</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>align2</name>
      <anchorfile>class_safe_int.html</anchorfile>
      <anchor>a6cff8c153afafee5d2566eddbcf67af9ad6dffff8e22e584f41f85b56a23b248a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>align4</name>
      <anchorfile>class_safe_int.html</anchorfile>
      <anchor>a6cff8c153afafee5d2566eddbcf67af9ae0c84c5771abfc7a7f7c6fb5bec04eba</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>align8</name>
      <anchorfile>class_safe_int.html</anchorfile>
      <anchor>a6cff8c153afafee5d2566eddbcf67af9afd35a80900e0f0633f0274ab4417ec76</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>align16</name>
      <anchorfile>class_safe_int.html</anchorfile>
      <anchor>a6cff8c153afafee5d2566eddbcf67af9a272f044fb3f6831124316bf9553575bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>align32</name>
      <anchorfile>class_safe_int.html</anchorfile>
      <anchor>a6cff8c153afafee5d2566eddbcf67af9ad255b09128f29c7544da357cfc898b0e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>align64</name>
      <anchorfile>class_safe_int.html</anchorfile>
      <anchor>a6cff8c153afafee5d2566eddbcf67af9a0013f3fd4149a2c67bb777993a491e96</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>align128</name>
      <anchorfile>class_safe_int.html</anchorfile>
      <anchor>a6cff8c153afafee5d2566eddbcf67af9ad193c4af04d3bdbb6b0bbb7de0863fcf</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>align256</name>
      <anchorfile>class_safe_int.html</anchorfile>
      <anchor>a6cff8c153afafee5d2566eddbcf67af9a51d50c907a8e284fb6d6efa8afc25818</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SafeInt</name>
      <anchorfile>class_safe_int.html</anchorfile>
      <anchor>a638df9a565ea6d81ba72a9bebe574831</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SafeInt</name>
      <anchorfile>class_safe_int.html</anchorfile>
      <anchor>aa730194c3e5da83ef57f1e513b8791e4</anchor>
      <arglist>(const T &amp;i)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SafeInt</name>
      <anchorfile>class_safe_int.html</anchorfile>
      <anchor>a063649011419af33e35e922fd44234d6</anchor>
      <arglist>(bool b)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SafeInt</name>
      <anchorfile>class_safe_int.html</anchorfile>
      <anchor>a60cff69231e9c730104bc185a90b42bf</anchor>
      <arglist>(const SafeInt&lt; U, E &gt; &amp;u)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SafeInt</name>
      <anchorfile>class_safe_int.html</anchorfile>
      <anchor>a5800f76f674462963ddaad3688880d17</anchor>
      <arglist>(const U &amp;i)</arglist>
    </member>
    <member kind="function">
      <type>SafeInt&lt; T, E &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>class_safe_int.html</anchorfile>
      <anchor>a3b3c0df012542987bf803722f3756137</anchor>
      <arglist>(const U &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>SafeInt&lt; T, E &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>class_safe_int.html</anchorfile>
      <anchor>ac42f2b76d63130a4d9ee49a2b68b59a4</anchor>
      <arglist>(const T &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>SafeInt&lt; T, E &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>class_safe_int.html</anchorfile>
      <anchor>acf74a2ef4bfecb7999e6bfc7d21926c1</anchor>
      <arglist>(const SafeInt&lt; U, E &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>SafeInt&lt; T, E &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>class_safe_int.html</anchorfile>
      <anchor>aa979a2ffef4db55c61336b2e43f60bf0</anchor>
      <arglist>(const SafeInt&lt; T, E &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator bool</name>
      <anchorfile>class_safe_int.html</anchorfile>
      <anchor>a3dc178a912ca4acc9feba7dad8700e83</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator char</name>
      <anchorfile>class_safe_int.html</anchorfile>
      <anchor>a32197c75752ebed482b5a0d07f04be0c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator signed char</name>
      <anchorfile>class_safe_int.html</anchorfile>
      <anchor>ac6ce4884472d35a42989ffd229ab3903</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator unsigned char</name>
      <anchorfile>class_safe_int.html</anchorfile>
      <anchor>a3e1f8404dc8656c4b567ad391a18cc58</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator __int16</name>
      <anchorfile>class_safe_int.html</anchorfile>
      <anchor>a1185b3cae088d99b03c208ce032409f7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator unsigned __int16</name>
      <anchorfile>class_safe_int.html</anchorfile>
      <anchor>a5900c72cb6eb38ed1b057faa36a7dd7d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator __int32</name>
      <anchorfile>class_safe_int.html</anchorfile>
      <anchor>ac8b807062b02744d00e72d939f2faf55</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator unsigned __int32</name>
      <anchorfile>class_safe_int.html</anchorfile>
      <anchor>a69b9e595ac56e5980794cdefe14c54f6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator long</name>
      <anchorfile>class_safe_int.html</anchorfile>
      <anchor>a7a60f20964ea6007cdde7ca3558e92bb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator unsigned long</name>
      <anchorfile>class_safe_int.html</anchorfile>
      <anchor>a189a43d8fd956ddacbccf21404f2e8d3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator __int64</name>
      <anchorfile>class_safe_int.html</anchorfile>
      <anchor>abfdc7ed6d0fe25bfb6ae703ed41cd170</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator unsigned __int64</name>
      <anchorfile>class_safe_int.html</anchorfile>
      <anchor>a3971fed950d9ba0cdb87d812913abfa2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator float</name>
      <anchorfile>class_safe_int.html</anchorfile>
      <anchor>a6946f185d0e2a2f092670c6214ded17f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator double</name>
      <anchorfile>class_safe_int.html</anchorfile>
      <anchor>a298d94767114e1e6936a49518ed0bf8c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator long double</name>
      <anchorfile>class_safe_int.html</anchorfile>
      <anchor>abacd76e5fef938b5cdd84f97fc74aad9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>Ptr</name>
      <anchorfile>class_safe_int.html</anchorfile>
      <anchor>a98b0e448c896bf9cdd37669f64f7d2e1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const T *</type>
      <name>Ptr</name>
      <anchorfile>class_safe_int.html</anchorfile>
      <anchor>ab8e05c4a386d0c65684206d16f7efbea</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>Ref</name>
      <anchorfile>class_safe_int.html</anchorfile>
      <anchor>ad9d642b376cd93337eb82a705801134c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>operator&amp;</name>
      <anchorfile>class_safe_int.html</anchorfile>
      <anchor>ac9272bac9857253ffff4695be5a5b1d1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const T *</type>
      <name>operator&amp;</name>
      <anchorfile>class_safe_int.html</anchorfile>
      <anchor>a4b13cc92939bc15c0aefc5876ec12877</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!</name>
      <anchorfile>class_safe_int.html</anchorfile>
      <anchor>a5ef8156fe2b7060b1dd720a26e22aaa9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const SafeInt&lt; T, E &gt; &amp;</type>
      <name>operator+</name>
      <anchorfile>class_safe_int.html</anchorfile>
      <anchor>a853656e983800730310026ee5d98f172</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>SafeInt&lt; T, E &gt;</type>
      <name>operator-</name>
      <anchorfile>class_safe_int.html</anchorfile>
      <anchor>a1e3411b77ecc82da3c3852861c6d5c6f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>SafeInt&lt; T, E &gt; &amp;</type>
      <name>operator++</name>
      <anchorfile>class_safe_int.html</anchorfile>
      <anchor>a45b2cd1e7f540cc9fbab4689c6d4919f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SafeInt&lt; T, E &gt; &amp;</type>
      <name>operator--</name>
      <anchorfile>class_safe_int.html</anchorfile>
      <anchor>a81e49c15af6f3d971e4a104f98d5efa3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SafeInt&lt; T, E &gt;</type>
      <name>operator++</name>
      <anchorfile>class_safe_int.html</anchorfile>
      <anchor>ad2c4adde9e49b92cd934d190455678d6</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>SafeInt&lt; T, E &gt;</type>
      <name>operator--</name>
      <anchorfile>class_safe_int.html</anchorfile>
      <anchor>a442080e16aff6ca3e8cea80a3ebf4a60</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>SafeInt&lt; T, E &gt;</type>
      <name>operator~</name>
      <anchorfile>class_safe_int.html</anchorfile>
      <anchor>aea6541a48149d5437626f197a56a5036</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>SafeInt&lt; T, E &gt;</type>
      <name>operator%</name>
      <anchorfile>class_safe_int.html</anchorfile>
      <anchor>ac6dca454d4e8aa4b090ad0a9bf721424</anchor>
      <arglist>(U rhs) const</arglist>
    </member>
    <member kind="function">
      <type>SafeInt&lt; T, E &gt;</type>
      <name>operator%</name>
      <anchorfile>class_safe_int.html</anchorfile>
      <anchor>a63b735e04d744c4a3a3119bcaad70188</anchor>
      <arglist>(SafeInt&lt; T, E &gt; rhs) const</arglist>
    </member>
    <member kind="function">
      <type>SafeInt&lt; T, E &gt; &amp;</type>
      <name>operator%=</name>
      <anchorfile>class_safe_int.html</anchorfile>
      <anchor>ace1f2b08778be6cd5e8f942334b2bb5b</anchor>
      <arglist>(U rhs)</arglist>
    </member>
    <member kind="function">
      <type>SafeInt&lt; T, E &gt; &amp;</type>
      <name>operator%=</name>
      <anchorfile>class_safe_int.html</anchorfile>
      <anchor>a7c05d1a573b455a18e78c264c5060a6b</anchor>
      <arglist>(SafeInt&lt; U, E &gt; rhs)</arglist>
    </member>
    <member kind="function">
      <type>SafeInt&lt; T, E &gt;</type>
      <name>operator*</name>
      <anchorfile>class_safe_int.html</anchorfile>
      <anchor>a5369049d70264c6f6c5ddf3f96312e8d</anchor>
      <arglist>(U rhs) const</arglist>
    </member>
    <member kind="function">
      <type>SafeInt&lt; T, E &gt;</type>
      <name>operator*</name>
      <anchorfile>class_safe_int.html</anchorfile>
      <anchor>aa0f479b7a498ea587f62fa5e0c7e6e10</anchor>
      <arglist>(SafeInt&lt; T, E &gt; rhs) const</arglist>
    </member>
    <member kind="function">
      <type>SafeInt&lt; T, E &gt; &amp;</type>
      <name>operator*=</name>
      <anchorfile>class_safe_int.html</anchorfile>
      <anchor>a98037baf931c944312c138e7bdd9923b</anchor>
      <arglist>(SafeInt&lt; T, E &gt; rhs)</arglist>
    </member>
    <member kind="function">
      <type>SafeInt&lt; T, E &gt; &amp;</type>
      <name>operator*=</name>
      <anchorfile>class_safe_int.html</anchorfile>
      <anchor>aacbfd816033333569e43a6454399325e</anchor>
      <arglist>(U rhs)</arglist>
    </member>
    <member kind="function">
      <type>SafeInt&lt; T, E &gt; &amp;</type>
      <name>operator*=</name>
      <anchorfile>class_safe_int.html</anchorfile>
      <anchor>ad43c706862fdf3015a91607affb9aa68</anchor>
      <arglist>(SafeInt&lt; U, E &gt; rhs)</arglist>
    </member>
    <member kind="function">
      <type>SafeInt&lt; T, E &gt;</type>
      <name>operator/</name>
      <anchorfile>class_safe_int.html</anchorfile>
      <anchor>a25d84d89283a768924de4e53db2124f7</anchor>
      <arglist>(U rhs) const</arglist>
    </member>
    <member kind="function">
      <type>SafeInt&lt; T, E &gt;</type>
      <name>operator/</name>
      <anchorfile>class_safe_int.html</anchorfile>
      <anchor>a191165da2cadec8a59a68366211b1482</anchor>
      <arglist>(SafeInt&lt; T, E &gt; rhs) const</arglist>
    </member>
    <member kind="function">
      <type>SafeInt&lt; T, E &gt; &amp;</type>
      <name>operator/=</name>
      <anchorfile>class_safe_int.html</anchorfile>
      <anchor>ae37892812c19c4ced53bcb59f652f553</anchor>
      <arglist>(SafeInt&lt; T, E &gt; i)</arglist>
    </member>
    <member kind="function">
      <type>SafeInt&lt; T, E &gt; &amp;</type>
      <name>operator/=</name>
      <anchorfile>class_safe_int.html</anchorfile>
      <anchor>ae250744b4548859ed363cf0bf8c4ff46</anchor>
      <arglist>(U i)</arglist>
    </member>
    <member kind="function">
      <type>SafeInt&lt; T, E &gt; &amp;</type>
      <name>operator/=</name>
      <anchorfile>class_safe_int.html</anchorfile>
      <anchor>ae86ab6263b2bbfe4ef3ab4e98ce91696</anchor>
      <arglist>(SafeInt&lt; U, E &gt; i)</arglist>
    </member>
    <member kind="function">
      <type>SafeInt&lt; T, E &gt;</type>
      <name>operator+</name>
      <anchorfile>class_safe_int.html</anchorfile>
      <anchor>ac5753ab74d09fa968f385ed9766c378c</anchor>
      <arglist>(SafeInt&lt; T, E &gt; rhs) const</arglist>
    </member>
    <member kind="function">
      <type>SafeInt&lt; T, E &gt;</type>
      <name>operator+</name>
      <anchorfile>class_safe_int.html</anchorfile>
      <anchor>aa7f21b906b6d63db9dc0f8b94b1a298a</anchor>
      <arglist>(U rhs) const</arglist>
    </member>
    <member kind="function">
      <type>SafeInt&lt; T, E &gt; &amp;</type>
      <name>operator+=</name>
      <anchorfile>class_safe_int.html</anchorfile>
      <anchor>a1097939744334a2bb0a1408219930c8e</anchor>
      <arglist>(SafeInt&lt; T, E &gt; rhs)</arglist>
    </member>
    <member kind="function">
      <type>SafeInt&lt; T, E &gt; &amp;</type>
      <name>operator+=</name>
      <anchorfile>class_safe_int.html</anchorfile>
      <anchor>a12efb3c44e31fb9ca21b0926f6175bbc</anchor>
      <arglist>(U rhs)</arglist>
    </member>
    <member kind="function">
      <type>SafeInt&lt; T, E &gt; &amp;</type>
      <name>operator+=</name>
      <anchorfile>class_safe_int.html</anchorfile>
      <anchor>ae78acae662e882432676d879de8357d0</anchor>
      <arglist>(SafeInt&lt; U, E &gt; rhs)</arglist>
    </member>
    <member kind="function">
      <type>SafeInt&lt; T, E &gt;</type>
      <name>operator-</name>
      <anchorfile>class_safe_int.html</anchorfile>
      <anchor>a9059dbc3958ea4d82a66060031a31f78</anchor>
      <arglist>(U rhs) const</arglist>
    </member>
    <member kind="function">
      <type>SafeInt&lt; T, E &gt;</type>
      <name>operator-</name>
      <anchorfile>class_safe_int.html</anchorfile>
      <anchor>abf67151f9b578d648b057dd5397805e0</anchor>
      <arglist>(SafeInt&lt; T, E &gt; rhs) const</arglist>
    </member>
    <member kind="function">
      <type>SafeInt&lt; T, E &gt; &amp;</type>
      <name>operator-=</name>
      <anchorfile>class_safe_int.html</anchorfile>
      <anchor>a3876e9c7217ee5d0a8da76c75971bdbd</anchor>
      <arglist>(SafeInt&lt; T, E &gt; rhs)</arglist>
    </member>
    <member kind="function">
      <type>SafeInt&lt; T, E &gt; &amp;</type>
      <name>operator-=</name>
      <anchorfile>class_safe_int.html</anchorfile>
      <anchor>abddb7c37dbc489f629e3877867d89d9c</anchor>
      <arglist>(U rhs)</arglist>
    </member>
    <member kind="function">
      <type>SafeInt&lt; T, E &gt; &amp;</type>
      <name>operator-=</name>
      <anchorfile>class_safe_int.html</anchorfile>
      <anchor>a550f706384491272f9bf76a9ad8473e5</anchor>
      <arglist>(SafeInt&lt; U, E &gt; rhs)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>class_safe_int.html</anchorfile>
      <anchor>aca45160926fa0105acd68ae387644b67</anchor>
      <arglist>(U rhs) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>class_safe_int.html</anchorfile>
      <anchor>a3fe906c4fdac033dbb09b4d79ffff027</anchor>
      <arglist>(SafeInt&lt; T, E &gt; rhs) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;=</name>
      <anchorfile>class_safe_int.html</anchorfile>
      <anchor>a7de849fc2479b9c0fee310997fe8aee2</anchor>
      <arglist>(U rhs) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;=</name>
      <anchorfile>class_safe_int.html</anchorfile>
      <anchor>ae4d0c549ce7666620b701a18ceae33f1</anchor>
      <arglist>(SafeInt&lt; T, E &gt; rhs) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>class_safe_int.html</anchorfile>
      <anchor>ad41d5b2bd6cb25ea7485c2c21a44054b</anchor>
      <arglist>(U rhs) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>class_safe_int.html</anchorfile>
      <anchor>ac229a841a6f3f3abb38dc6416f1b9b1e</anchor>
      <arglist>(SafeInt&lt; T, E &gt; rhs) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;=</name>
      <anchorfile>class_safe_int.html</anchorfile>
      <anchor>a2d2ba4d9983219a4648aa149654f3fca</anchor>
      <arglist>(U rhs) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;=</name>
      <anchorfile>class_safe_int.html</anchorfile>
      <anchor>abb3aa7063a9137dccd375719378c9235</anchor>
      <arglist>(SafeInt&lt; T, E &gt; rhs) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>class_safe_int.html</anchorfile>
      <anchor>a1692edc28765ae8e1cce2c2659562958</anchor>
      <arglist>(U rhs) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>class_safe_int.html</anchorfile>
      <anchor>a3a75cec1495e9b2ef8ac930828783ecb</anchor>
      <arglist>(bool rhs) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>class_safe_int.html</anchorfile>
      <anchor>aa1d4fe712068a668230f2ee31062265b</anchor>
      <arglist>(SafeInt&lt; T, E &gt; rhs) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>class_safe_int.html</anchorfile>
      <anchor>afdb169680cbeeacf5f05d3291f42f723</anchor>
      <arglist>(U rhs) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>class_safe_int.html</anchorfile>
      <anchor>ae17cbaed0cd2cf185379fda5e0ac3272</anchor>
      <arglist>(bool b) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>class_safe_int.html</anchorfile>
      <anchor>aab323a1b0ba17ce9c70cdd0bbf78a7c6</anchor>
      <arglist>(SafeInt&lt; T, E &gt; rhs) const</arglist>
    </member>
    <member kind="function">
      <type>SafeInt&lt; T, E &gt;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>class_safe_int.html</anchorfile>
      <anchor>aeefb4c523cb305cbdef85abda897e13d</anchor>
      <arglist>(U bits) const</arglist>
    </member>
    <member kind="function">
      <type>SafeInt&lt; T, E &gt;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>class_safe_int.html</anchorfile>
      <anchor>ad94e55b277df0bc452a45209241d351c</anchor>
      <arglist>(SafeInt&lt; U, E &gt; bits) const</arglist>
    </member>
    <member kind="function">
      <type>SafeInt&lt; T, E &gt; &amp;</type>
      <name>operator&lt;&lt;=</name>
      <anchorfile>class_safe_int.html</anchorfile>
      <anchor>aa5b1a3e8dcd9a037c3f929f29cb5d50d</anchor>
      <arglist>(U bits)</arglist>
    </member>
    <member kind="function">
      <type>SafeInt&lt; T, E &gt; &amp;</type>
      <name>operator&lt;&lt;=</name>
      <anchorfile>class_safe_int.html</anchorfile>
      <anchor>a9d594ab1b12a08d48db7ac8253f47efd</anchor>
      <arglist>(SafeInt&lt; U, E &gt; bits)</arglist>
    </member>
    <member kind="function">
      <type>SafeInt&lt; T, E &gt;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>class_safe_int.html</anchorfile>
      <anchor>ae10b2d52ce35e4b7371d0aed2e906868</anchor>
      <arglist>(U bits) const</arglist>
    </member>
    <member kind="function">
      <type>SafeInt&lt; T, E &gt;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>class_safe_int.html</anchorfile>
      <anchor>aeb97c5389988ec532fa9f48dfbdf4219</anchor>
      <arglist>(SafeInt&lt; U, E &gt; bits) const</arglist>
    </member>
    <member kind="function">
      <type>SafeInt&lt; T, E &gt; &amp;</type>
      <name>operator&gt;&gt;=</name>
      <anchorfile>class_safe_int.html</anchorfile>
      <anchor>ae794faa80fe401b9e0325875adb0170b</anchor>
      <arglist>(U bits)</arglist>
    </member>
    <member kind="function">
      <type>SafeInt&lt; T, E &gt; &amp;</type>
      <name>operator&gt;&gt;=</name>
      <anchorfile>class_safe_int.html</anchorfile>
      <anchor>a28bbedca38c9aa60aee7b32dcd09d190</anchor>
      <arglist>(SafeInt&lt; U, E &gt; bits)</arglist>
    </member>
    <member kind="function">
      <type>SafeInt&lt; T, E &gt;</type>
      <name>operator&amp;</name>
      <anchorfile>class_safe_int.html</anchorfile>
      <anchor>a6cce1ee31b5fc7c8357e450db109f2be</anchor>
      <arglist>(SafeInt&lt; T, E &gt; rhs) const</arglist>
    </member>
    <member kind="function">
      <type>SafeInt&lt; T, E &gt;</type>
      <name>operator&amp;</name>
      <anchorfile>class_safe_int.html</anchorfile>
      <anchor>a5a5114e910cc89e5e4af2bd8f9b59263</anchor>
      <arglist>(U rhs) const</arglist>
    </member>
    <member kind="function">
      <type>SafeInt&lt; T, E &gt; &amp;</type>
      <name>operator&amp;=</name>
      <anchorfile>class_safe_int.html</anchorfile>
      <anchor>a75d29693799dae7bd803b80502fa0592</anchor>
      <arglist>(SafeInt&lt; T, E &gt; rhs)</arglist>
    </member>
    <member kind="function">
      <type>SafeInt&lt; T, E &gt; &amp;</type>
      <name>operator&amp;=</name>
      <anchorfile>class_safe_int.html</anchorfile>
      <anchor>a48dd1b76e328870b4a82a026b37e75e9</anchor>
      <arglist>(U rhs)</arglist>
    </member>
    <member kind="function">
      <type>SafeInt&lt; T, E &gt; &amp;</type>
      <name>operator&amp;=</name>
      <anchorfile>class_safe_int.html</anchorfile>
      <anchor>af76b604fc60d4024f38ff8fad54cc323</anchor>
      <arglist>(SafeInt&lt; U, E &gt; rhs)</arglist>
    </member>
    <member kind="function">
      <type>SafeInt&lt; T, E &gt;</type>
      <name>operator^</name>
      <anchorfile>class_safe_int.html</anchorfile>
      <anchor>a310e5c54af812df26f88a2f337400459</anchor>
      <arglist>(SafeInt&lt; T, E &gt; rhs) const</arglist>
    </member>
    <member kind="function">
      <type>SafeInt&lt; T, E &gt;</type>
      <name>operator^</name>
      <anchorfile>class_safe_int.html</anchorfile>
      <anchor>aff3af71c9f62e128e032c2699219322e</anchor>
      <arglist>(U rhs) const</arglist>
    </member>
    <member kind="function">
      <type>SafeInt&lt; T, E &gt; &amp;</type>
      <name>operator^=</name>
      <anchorfile>class_safe_int.html</anchorfile>
      <anchor>a215ea42f8f215416f47c8ca14f00d592</anchor>
      <arglist>(SafeInt&lt; T, E &gt; rhs)</arglist>
    </member>
    <member kind="function">
      <type>SafeInt&lt; T, E &gt; &amp;</type>
      <name>operator^=</name>
      <anchorfile>class_safe_int.html</anchorfile>
      <anchor>adbd89e1c3a7bb68bbb6c19288bbab54a</anchor>
      <arglist>(U rhs)</arglist>
    </member>
    <member kind="function">
      <type>SafeInt&lt; T, E &gt; &amp;</type>
      <name>operator^=</name>
      <anchorfile>class_safe_int.html</anchorfile>
      <anchor>ab55478e8cdc100782f80040334a6eb4e</anchor>
      <arglist>(SafeInt&lt; U, E &gt; rhs)</arglist>
    </member>
    <member kind="function">
      <type>SafeInt&lt; T, E &gt;</type>
      <name>operator|</name>
      <anchorfile>class_safe_int.html</anchorfile>
      <anchor>a71c5ad95cb02bc7b21abb83dd8cd0c54</anchor>
      <arglist>(SafeInt&lt; T, E &gt; rhs) const</arglist>
    </member>
    <member kind="function">
      <type>SafeInt&lt; T, E &gt;</type>
      <name>operator|</name>
      <anchorfile>class_safe_int.html</anchorfile>
      <anchor>ac3130e8c7aa488acf7d93fea45c3f7e1</anchor>
      <arglist>(U rhs) const</arglist>
    </member>
    <member kind="function">
      <type>SafeInt&lt; T, E &gt; &amp;</type>
      <name>operator|=</name>
      <anchorfile>class_safe_int.html</anchorfile>
      <anchor>ae658e5856b77c8c492b6ca7a707a5ead</anchor>
      <arglist>(SafeInt&lt; T, E &gt; rhs)</arglist>
    </member>
    <member kind="function">
      <type>SafeInt&lt; T, E &gt; &amp;</type>
      <name>operator|=</name>
      <anchorfile>class_safe_int.html</anchorfile>
      <anchor>aaf955a2340563d4a724ce3a170433e60</anchor>
      <arglist>(U rhs)</arglist>
    </member>
    <member kind="function">
      <type>SafeInt&lt; T, E &gt; &amp;</type>
      <name>operator|=</name>
      <anchorfile>class_safe_int.html</anchorfile>
      <anchor>af25ca94fa58d074542bde512da79faeb</anchor>
      <arglist>(SafeInt&lt; U, E &gt; rhs)</arglist>
    </member>
    <member kind="function">
      <type>SafeInt&lt; T, E &gt;</type>
      <name>Min</name>
      <anchorfile>class_safe_int.html</anchorfile>
      <anchor>ab94b287b040496ffc5b0ea51d161f594</anchor>
      <arglist>(SafeInt&lt; T, E &gt; test, const T floor=IntTraits&lt; T &gt;::minInt) const</arglist>
    </member>
    <member kind="function">
      <type>SafeInt&lt; T, E &gt;</type>
      <name>Max</name>
      <anchorfile>class_safe_int.html</anchorfile>
      <anchor>a324fab468139208cf4cc42a67662c5a4</anchor>
      <arglist>(SafeInt&lt; T, E &gt; test, const T upper=IntTraits&lt; T &gt;::maxInt) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Swap</name>
      <anchorfile>class_safe_int.html</anchorfile>
      <anchor>ad914278e7dc84113c0f937c6d316b707</anchor>
      <arglist>(SafeInt&lt; T, E &gt; &amp;with)</arglist>
    </member>
    <member kind="function">
      <type>const SafeInt&lt; T, E &gt; &amp;</type>
      <name>Align</name>
      <anchorfile>class_safe_int.html</anchorfile>
      <anchor>a246a4e551388c919980a00c28c08a14d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const SafeInt&lt; T, E &gt; &amp;</type>
      <name>Align2</name>
      <anchorfile>class_safe_int.html</anchorfile>
      <anchor>a347216223d48c79e111d5502b909a462</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const SafeInt&lt; T, E &gt; &amp;</type>
      <name>Align4</name>
      <anchorfile>class_safe_int.html</anchorfile>
      <anchor>ac55339c1400ba95702347f5c8a2874c9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const SafeInt&lt; T, E &gt; &amp;</type>
      <name>Align8</name>
      <anchorfile>class_safe_int.html</anchorfile>
      <anchor>a1442559c134a9af7d404a7bcccedb1ec</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const SafeInt&lt; T, E &gt; &amp;</type>
      <name>Align16</name>
      <anchorfile>class_safe_int.html</anchorfile>
      <anchor>a169562c4f16f156c64fda0192d9d686a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const SafeInt&lt; T, E &gt; &amp;</type>
      <name>Align32</name>
      <anchorfile>class_safe_int.html</anchorfile>
      <anchor>aa5dd644aa61879047daa1b7dab830aae</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const SafeInt&lt; T, E &gt; &amp;</type>
      <name>Align64</name>
      <anchorfile>class_safe_int.html</anchorfile>
      <anchor>aca57ce4bdf14bfb5f19711d53c9f42d5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SafeInt&lt; T, E &gt;</type>
      <name>SafeAtoI</name>
      <anchorfile>class_safe_int.html</anchorfile>
      <anchor>aca3424787e0c9c7629159b3bf036901a</anchor>
      <arglist>(const char *input)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SafeInt&lt; T, E &gt;</type>
      <name>SafeWtoI</name>
      <anchorfile>class_safe_int.html</anchorfile>
      <anchor>a27b9aff2382b980ead5a77a886fb111a</anchor>
      <arglist>(const wchar_t *input)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SafeIntCompare</name>
    <filename>class_safe_int_compare.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="enumvalue">
      <name>isBothSigned</name>
      <anchorfile>class_safe_int_compare.html</anchorfile>
      <anchor>a63ce85b536434ebfc9d29ef7e2c95644a0766916dfcbd93af2ba2e7193b1f18af</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>isBothUnsigned</name>
      <anchorfile>class_safe_int_compare.html</anchorfile>
      <anchor>a63ce85b536434ebfc9d29ef7e2c95644a6e873398740655551db38bf570ee9ffa</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>isLikeSigned</name>
      <anchorfile>class_safe_int_compare.html</anchorfile>
      <anchor>a63ce85b536434ebfc9d29ef7e2c95644ae434bda79a169729e84e65eba5c643b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>isCastOK</name>
      <anchorfile>class_safe_int_compare.html</anchorfile>
      <anchor>a63ce85b536434ebfc9d29ef7e2c95644a06232cc620a9701ab7cd1b1f1f68f08b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>isBothLT32Bit</name>
      <anchorfile>class_safe_int_compare.html</anchorfile>
      <anchor>a63ce85b536434ebfc9d29ef7e2c95644a0697b2d0c9356d1f5d2b68e3ce380869</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>isBothLT64Bit</name>
      <anchorfile>class_safe_int_compare.html</anchorfile>
      <anchor>a63ce85b536434ebfc9d29ef7e2c95644af33b0fe91eb79af263b5d1ebba2883cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>isBothSigned</name>
      <anchorfile>class_safe_int_compare.html</anchorfile>
      <anchor>a63ce85b536434ebfc9d29ef7e2c95644a0766916dfcbd93af2ba2e7193b1f18af</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>isBothUnsigned</name>
      <anchorfile>class_safe_int_compare.html</anchorfile>
      <anchor>a63ce85b536434ebfc9d29ef7e2c95644a6e873398740655551db38bf570ee9ffa</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>isLikeSigned</name>
      <anchorfile>class_safe_int_compare.html</anchorfile>
      <anchor>a63ce85b536434ebfc9d29ef7e2c95644ae434bda79a169729e84e65eba5c643b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>isCastOK</name>
      <anchorfile>class_safe_int_compare.html</anchorfile>
      <anchor>a63ce85b536434ebfc9d29ef7e2c95644a06232cc620a9701ab7cd1b1f1f68f08b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>isBothLT32Bit</name>
      <anchorfile>class_safe_int_compare.html</anchorfile>
      <anchor>a63ce85b536434ebfc9d29ef7e2c95644a0697b2d0c9356d1f5d2b68e3ce380869</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>isBothLT64Bit</name>
      <anchorfile>class_safe_int_compare.html</anchorfile>
      <anchor>a63ce85b536434ebfc9d29ef7e2c95644af33b0fe91eb79af263b5d1ebba2883cf</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SafeIntException</name>
    <filename>class_safe_int_exception.html</filename>
    <member kind="function">
      <type></type>
      <name>SafeIntException</name>
      <anchorfile>class_safe_int_exception.html</anchorfile>
      <anchor>a3e85dd8907aceb7582ce82e040f75cd6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SafeIntException</name>
      <anchorfile>class_safe_int_exception.html</anchorfile>
      <anchor>ad04e079f4c53033eb7242c038225cb89</anchor>
      <arglist>(SafeIntError code)</arglist>
    </member>
    <member kind="variable">
      <type>SafeIntError</type>
      <name>m_code</name>
      <anchorfile>class_safe_int_exception.html</anchorfile>
      <anchor>a0349acd5671bd56cbfd1b35d5ba55d36</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SafeIntInternal::SafeIntExceptionHandler</name>
    <filename>class_safe_int_internal_1_1_safe_int_exception_handler.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>SafeIntInternal::SafeIntExceptionHandler&lt; SafeIntException &gt;</name>
    <filename>class_safe_int_internal_1_1_safe_int_exception_handler_3_01_safe_int_exception_01_4.html</filename>
    <member kind="function" static="yes">
      <type>static</type>
      <name>__declspec</name>
      <anchorfile>class_safe_int_internal_1_1_safe_int_exception_handler_3_01_safe_int_exception_01_4.html</anchorfile>
      <anchor>a4caaa561bdbca7b2794f8aef0be6b64b</anchor>
      <arglist>(noreturn) void __stdcall SafeIntOnOverflow()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>__declspec</name>
      <anchorfile>class_safe_int_internal_1_1_safe_int_exception_handler_3_01_safe_int_exception_01_4.html</anchorfile>
      <anchor>ac18ccd6b7c7b4c28e69d4f0328cc1a42</anchor>
      <arglist>(noreturn) void __stdcall SafeIntOnDivZero()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ScaleFactor</name>
    <filename>class_scale_factor.html</filename>
    <member kind="function">
      <type></type>
      <name>ScaleFactor</name>
      <anchorfile>class_scale_factor.html</anchorfile>
      <anchor>ac30f1acac25dea2fb261ea81564d19f6</anchor>
      <arglist>(const std::string &amp;particleType, const std::string &amp;scale_factor_name, const Tools::MConfig &amp;cfg)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ScaleFactor</name>
      <anchorfile>class_scale_factor.html</anchorfile>
      <anchor>abdbc3f99fec4cd128c7a5ba2f49723c9</anchor>
      <arglist>(const ScaleFactor &amp;COPY)</arglist>
    </member>
    <member kind="function">
      <type>ScaleFactor &amp;</type>
      <name>operator=</name>
      <anchorfile>class_scale_factor.html</anchorfile>
      <anchor>ad566f695aa059c493a3f8bf3989b2b93</anchor>
      <arglist>(const ScaleFactor &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ScaleFactor</name>
      <anchorfile>class_scale_factor.html</anchorfile>
      <anchor>a96ea41c6945a1d5b1de009049a89e3ff</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getScaleFactor</name>
      <anchorfile>class_scale_factor.html</anchorfile>
      <anchor>a7c28d64de4b49c29fc6028dccbbd1b65</anchor>
      <arglist>(const pxl::Particle *object) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getScaleFactorError</name>
      <anchorfile>class_scale_factor.html</anchorfile>
      <anchor>a7d8cc05858bd5cf2f5e29da2eb54d597</anchor>
      <arglist>(const pxl::Particle *object) const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getType</name>
      <anchorfile>class_scale_factor.html</anchorfile>
      <anchor>a4dc8d6c02db4ba72a378f6fbeb21370b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getName</name>
      <anchorfile>class_scale_factor.html</anchorfile>
      <anchor>adff86041967b2032881a1c047b24f4a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getSystematic</name>
      <anchorfile>class_scale_factor.html</anchorfile>
      <anchor>aed76a537cb793c7e83bf0232402dce9e</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ScanResult</name>
    <filename>class_scan_result.html</filename>
    <member kind="function">
      <type></type>
      <name>ScanResult</name>
      <anchorfile>class_scan_result.html</anchorfile>
      <anchor>a9bd9de3646c349e52349a8b73d0a94d3</anchor>
      <arglist>(const MCBin &amp;mcbin=MCBin(), double data=0, double score=0, bool integralScan=false, bool skippedScan=false, const std::vector&lt; double &gt; &amp;dicedData=std::vector&lt; double &gt;(), double totalMc=0, double totalMcUncert=0)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>class_scan_result.html</anchorfile>
      <anchor>aa58531218a6c86dff568a8763889c558</anchor>
      <arglist>(const ScanResult &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>rs::Value</type>
      <name>rapidjsonValue</name>
      <anchorfile>class_scan_result.html</anchorfile>
      <anchor>af234f797c8815ea4a97971772ff7c1fa</anchor>
      <arglist>(rs::Document::AllocatorType &amp;allocator, bool verbose=true) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeCsvLine</name>
      <anchorfile>class_scan_result.html</anchorfile>
      <anchor>ab1d3353293be81535adf8c570d9144aa</anchor>
      <arglist>(std::ostream &amp;out) const</arglist>
    </member>
    <member kind="function">
      <type>const MCBin &amp;</type>
      <name>getMcBin</name>
      <anchorfile>class_scan_result.html</anchorfile>
      <anchor>a6bca4809e86165b62e2a0b19e6002851</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getScore</name>
      <anchorfile>class_scan_result.html</anchorfile>
      <anchor>a5c28d2695a6cf6ce3eb2441107e98041</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getData</name>
      <anchorfile>class_scan_result.html</anchorfile>
      <anchor>afd62ccba50ffb22a71a6beae8c573499</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getTotalMcEvents</name>
      <anchorfile>class_scan_result.html</anchorfile>
      <anchor>aad9279ec3a37c0b3f17fb8d828030756</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getTotalMcUncert</name>
      <anchorfile>class_scan_result.html</anchorfile>
      <anchor>a950f6cd5347df78c3bdd3ea8605326dd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getTotalData</name>
      <anchorfile>class_scan_result.html</anchorfile>
      <anchor>a45c8f069cbeedf93f25c6a17645cbb1c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isIntegralScan</name>
      <anchorfile>class_scan_result.html</anchorfile>
      <anchor>a61e1835e4b8d1a58fea6e02e19c0a65d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSkippedScan</name>
      <anchorfile>class_scan_result.html</anchorfile>
      <anchor>a68a4c3a82d5e8bd564d6d8113487e296</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>writeCsvHeader</name>
      <anchorfile>class_scan_result.html</anchorfile>
      <anchor>a8277417f9fc3428dcef70685a86a172c</anchor>
      <arglist>(std::ostream &amp;out)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>pxl::Serializable</name>
    <filename>classpxl_1_1_serializable.html</filename>
    <member kind="function">
      <type></type>
      <name>Serializable</name>
      <anchorfile>classpxl_1_1_serializable.html</anchorfile>
      <anchor>a2cbbf840a1124f3d9d207ca6ef02bfd2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Serializable</name>
      <anchorfile>classpxl_1_1_serializable.html</anchorfile>
      <anchor>a1f77b50c1a05ae56d704d9653c4b2f91</anchor>
      <arglist>(const Serializable &amp;original)</arglist>
    </member>
    <member kind="function">
      <type>Serializable &amp;</type>
      <name>operator=</name>
      <anchorfile>classpxl_1_1_serializable.html</anchorfile>
      <anchor>a793b6f3a5d789d4c897f39f7472edbbd</anchor>
      <arglist>(const Serializable &amp;original)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Serializable</name>
      <anchorfile>classpxl_1_1_serializable.html</anchorfile>
      <anchor>ac5e90c0dd23c221688756da7ded8ee5f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const Id &amp;</type>
      <name>getTypeId</name>
      <anchorfile>classpxl_1_1_serializable.html</anchorfile>
      <anchor>a78cdef4d2218431514f8848574f14a6d</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <type>const Id &amp;</type>
      <name>getId</name>
      <anchorfile>classpxl_1_1_serializable.html</anchorfile>
      <anchor>a071e3e5bdd7125cee5dd5178807c3647</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Serializable *</type>
      <name>clone</name>
      <anchorfile>classpxl_1_1_serializable.html</anchorfile>
      <anchor>a465d57a747bcbd0c61f01a0bb74b8218</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classpxl_1_1_serializable.html</anchorfile>
      <anchor>aafaf86ac39413ffbf98feb901fdcc0ad</anchor>
      <arglist>(const OutputStream &amp;out) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>deserialize</name>
      <anchorfile>classpxl_1_1_serializable.html</anchorfile>
      <anchor>a908898a2329bc74531ccde7770e383b4</anchor>
      <arglist>(const InputStream &amp;in)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::ostream &amp;</type>
      <name>print</name>
      <anchorfile>classpxl_1_1_serializable.html</anchorfile>
      <anchor>a1de4073599f70247eaaf7e33b2a729f8</anchor>
      <arglist>(int level=1, std::ostream &amp;os=std::cout, int pan=1) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const std::string</type>
      <name>toString</name>
      <anchorfile>classpxl_1_1_serializable.html</anchorfile>
      <anchor>abe42afdf47f4fa9cad94e26e9a3d6ba1</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>pxl::sFTPFileImpl</name>
    <filename>classpxl_1_1s_f_t_p_file_impl.html</filename>
    <base>pxl::FileImpl</base>
    <member kind="function">
      <type></type>
      <name>sFTPFileImpl</name>
      <anchorfile>classpxl_1_1s_f_t_p_file_impl.html</anchorfile>
      <anchor>a3558fd19b4759ee82dafe10e570b8e79</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sFTPFileImpl</name>
      <anchorfile>classpxl_1_1s_f_t_p_file_impl.html</anchorfile>
      <anchor>a7557d73bc2c004f04e4073e3f8c43a6e</anchor>
      <arglist>(const std::string &amp;filename, int32_t mode)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~sFTPFileImpl</name>
      <anchorfile>classpxl_1_1s_f_t_p_file_impl.html</anchorfile>
      <anchor>a3e253eced7121ac64a2f0e5878bfd4d9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>open</name>
      <anchorfile>classpxl_1_1s_f_t_p_file_impl.html</anchorfile>
      <anchor>a224339d886b5100e842ef92f7d0fff09</anchor>
      <arglist>(const std::string &amp;filename, int32_t mode)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>close</name>
      <anchorfile>classpxl_1_1s_f_t_p_file_impl.html</anchorfile>
      <anchor>a4182ca805ce9f5ae20fe17cbfe7ea60c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isEof</name>
      <anchorfile>classpxl_1_1s_f_t_p_file_impl.html</anchorfile>
      <anchor>a1610a3a3dc28def4fccd386921a8b763</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isOpen</name>
      <anchorfile>classpxl_1_1s_f_t_p_file_impl.html</anchorfile>
      <anchor>a6258466c9030b52fa72087b0e05f5d38</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isBad</name>
      <anchorfile>classpxl_1_1s_f_t_p_file_impl.html</anchorfile>
      <anchor>a6bea6e28230869d5bb7732a879929aa6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>clear</name>
      <anchorfile>classpxl_1_1s_f_t_p_file_impl.html</anchorfile>
      <anchor>ac3fa949804b6ee2b9cfc28aa5df94717</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isGood</name>
      <anchorfile>classpxl_1_1s_f_t_p_file_impl.html</anchorfile>
      <anchor>a05fa21584e3d90cd03de5ec1ab0c2e84</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int64_t</type>
      <name>tell</name>
      <anchorfile>classpxl_1_1s_f_t_p_file_impl.html</anchorfile>
      <anchor>ae30e4ce807f4fe686e4cc284df2346a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>seek</name>
      <anchorfile>classpxl_1_1s_f_t_p_file_impl.html</anchorfile>
      <anchor>a0d45aae4bf2561bc4e1fcf846336c32c</anchor>
      <arglist>(int64_t pos, int32_t d)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int32_t</type>
      <name>peek</name>
      <anchorfile>classpxl_1_1s_f_t_p_file_impl.html</anchorfile>
      <anchor>af8dba2fc23c6bd8451bb8a9a535e3d20</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int64_t</type>
      <name>read</name>
      <anchorfile>classpxl_1_1s_f_t_p_file_impl.html</anchorfile>
      <anchor>a263fd41550f58df223f0775cc8fe343d</anchor>
      <arglist>(char *s, size_t count)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int64_t</type>
      <name>write</name>
      <anchorfile>classpxl_1_1s_f_t_p_file_impl.html</anchorfile>
      <anchor>ae0bda48f1f40e3798129b4d70b147e34</anchor>
      <arglist>(const char *s, size_t count)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ignore</name>
      <anchorfile>classpxl_1_1s_f_t_p_file_impl.html</anchorfile>
      <anchor>a193c9724fd152e75937154157e0b72cc</anchor>
      <arglist>(int64_t count)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>destroy</name>
      <anchorfile>classpxl_1_1s_f_t_p_file_impl.html</anchorfile>
      <anchor>aeb921b4c26f2dd56c08f6926cf3a1a34</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Tools::SignalHandler</name>
    <filename>class_tools_1_1_signal_handler.html</filename>
    <member kind="function">
      <type>void</type>
      <name>register_handler</name>
      <anchorfile>class_tools_1_1_signal_handler.html</anchorfile>
      <anchor>a3823eab223e444b8e2a82828c4517312</anchor>
      <arglist>(int signum, EventHandler *eh)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove_handler</name>
      <anchorfile>class_tools_1_1_signal_handler.html</anchorfile>
      <anchor>ae4fd83d0aa3543487c2212136b9bba35</anchor>
      <arglist>(int signum, EventHandler *eh)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SignalHandler *</type>
      <name>handler</name>
      <anchorfile>class_tools_1_1_signal_handler.html</anchorfile>
      <anchor>a4ab8a2740ad0e3790357267e57dc2b4e</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SignedNegation</name>
    <filename>class_signed_negation.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>SignedNegation&lt; signed __int32 &gt;</name>
    <filename>class_signed_negation_3_01signed_01____int32_01_4.html</filename>
    <member kind="function" static="yes">
      <type>static signed __int32</type>
      <name>Value</name>
      <anchorfile>class_signed_negation_3_01signed_01____int32_01_4.html</anchorfile>
      <anchor>acd5489d07831443ee96e964c9a6ab358</anchor>
      <arglist>(unsigned __int64 in)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static signed __int32</type>
      <name>Value</name>
      <anchorfile>class_signed_negation_3_01signed_01____int32_01_4.html</anchorfile>
      <anchor>a231e7e3080dcb81b0a64288a7fced9e4</anchor>
      <arglist>(unsigned __int32 in)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SignedNegation&lt; signed __int64 &gt;</name>
    <filename>class_signed_negation_3_01signed_01____int64_01_4.html</filename>
    <member kind="function" static="yes">
      <type>static signed __int64</type>
      <name>Value</name>
      <anchorfile>class_signed_negation_3_01signed_01____int64_01_4.html</anchorfile>
      <anchor>ae863e2d9cfe2dde3fa3476531c80fa19</anchor>
      <arglist>(unsigned __int64 in)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SkipEvents</name>
    <filename>class_skip_events.html</filename>
    <member kind="typedef">
      <type>boost::filesystem::path</type>
      <name>Path</name>
      <anchorfile>class_skip_events.html</anchorfile>
      <anchor>a1f22452805d6f0b4f0ba570e0e109983</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; Path &gt;</type>
      <name>Paths</name>
      <anchorfile>class_skip_events.html</anchorfile>
      <anchor>a6f8453e7ea634bef5d2fd6f562760612</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::set&lt; unsigned int &gt;</type>
      <name>Events</name>
      <anchorfile>class_skip_events.html</anchorfile>
      <anchor>af374755508c5fa51139a14bd00f124f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::map&lt; unsigned int, Events &gt;</type>
      <name>LumiSections</name>
      <anchorfile>class_skip_events.html</anchorfile>
      <anchor>a9e08fe75cc0e4fc2a75dd804823f780a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::map&lt; int, LumiSections &gt;</type>
      <name>RunsLumisEvents</name>
      <anchorfile>class_skip_events.html</anchorfile>
      <anchor>a08f787f96f0bb273c7f3d926a295e965</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SkipEvents</name>
      <anchorfile>class_skip_events.html</anchorfile>
      <anchor>ad53787631b8723f04fd80fcd6f3a8805</anchor>
      <arglist>(Tools::MConfig const &amp;cfg)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SkipEvents</name>
      <anchorfile>class_skip_events.html</anchorfile>
      <anchor>abe70c6214251345220dfe1ac53157afc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>skip</name>
      <anchorfile>class_skip_events.html</anchorfile>
      <anchor>ab1281973c44a7b06f16fde2ec7546b06</anchor>
      <arglist>(unsigned int const runNumber, unsigned int const lumiSection, unsigned int const eventNumber)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>pxl::SoftRelations</name>
    <filename>classpxl_1_1_soft_relations.html</filename>
    <member kind="typedef">
      <type>std::multimap&lt; std::string, Id &gt;::const_iterator</type>
      <name>const_iterator</name>
      <anchorfile>classpxl_1_1_soft_relations.html</anchorfile>
      <anchor>ac7bdc51f11919a822a16a48e46251cdb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::multimap&lt; std::string, Id &gt;::iterator</type>
      <name>iterator</name>
      <anchorfile>classpxl_1_1_soft_relations.html</anchorfile>
      <anchor>acf64b18a6de4741030e9ab195df1bb3d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>serialize</name>
      <anchorfile>classpxl_1_1_soft_relations.html</anchorfile>
      <anchor>a5f1906923c747bb03bc4a80b01dc9182</anchor>
      <arglist>(const OutputStream &amp;out) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deserialize</name>
      <anchorfile>classpxl_1_1_soft_relations.html</anchorfile>
      <anchor>ae7242469c422855af4da8a5ccb8aa0ce</anchor>
      <arglist>(const InputStream &amp;in)</arglist>
    </member>
    <member kind="function">
      <type>Serializable *</type>
      <name>getFirst</name>
      <anchorfile>classpxl_1_1_soft_relations.html</anchorfile>
      <anchor>a12eb741e81c08fc9a1fe8c672f8a34ff</anchor>
      <arglist>(const ObjectOwner &amp;owner, const std::string &amp;name=&quot;&quot;) const</arglist>
    </member>
    <member kind="function">
      <type>Serializable *</type>
      <name>getFirst</name>
      <anchorfile>classpxl_1_1_soft_relations.html</anchorfile>
      <anchor>af33f94c8530a6219bf0f25f2b7984703</anchor>
      <arglist>(const BasicContainer &amp;container, const std::string &amp;name=&quot;&quot;) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getSoftRelatives</name>
      <anchorfile>classpxl_1_1_soft_relations.html</anchorfile>
      <anchor>a2bc90cd4e7a01ef6dd0ced79a20f92f8</anchor>
      <arglist>(std::vector&lt; Serializable * &gt; &amp;vec, const ObjectOwner &amp;owner, const std::string &amp;name) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getSoftRelatives</name>
      <anchorfile>classpxl_1_1_soft_relations.html</anchorfile>
      <anchor>a823ca40a5b2b30752180fbddcb434461</anchor>
      <arglist>(std::vector&lt; Serializable * &gt; &amp;vec, const ObjectOwner &amp;owner) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getSoftRelatives</name>
      <anchorfile>classpxl_1_1_soft_relations.html</anchorfile>
      <anchor>aaeac53b67bd436dc529562fcbd669d7d</anchor>
      <arglist>(std::vector&lt; Serializable * &gt; &amp;vec, const ObjectManager &amp;manager, const std::string &amp;name) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getSoftRelatives</name>
      <anchorfile>classpxl_1_1_soft_relations.html</anchorfile>
      <anchor>a022dc2c8134df183f3af0f7a52e2851e</anchor>
      <arglist>(std::vector&lt; Serializable * &gt; &amp;vec, const ObjectManager &amp;manager) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getSoftRelatives</name>
      <anchorfile>classpxl_1_1_soft_relations.html</anchorfile>
      <anchor>a89161481dcfd2eeafad0bb98ce9075d6</anchor>
      <arglist>(std::vector&lt; Serializable * &gt; &amp;vec, const BasicContainer &amp;container, const std::string &amp;name) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getSoftRelatives</name>
      <anchorfile>classpxl_1_1_soft_relations.html</anchorfile>
      <anchor>a9891238d5cba7cbecf008942c9909433</anchor>
      <arglist>(std::vector&lt; Serializable * &gt; &amp;vec, const BasicContainer &amp;container) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getSoftRelativesOfType</name>
      <anchorfile>classpxl_1_1_soft_relations.html</anchorfile>
      <anchor>aa1e57b95e8fa27097eaa202decbb9024</anchor>
      <arglist>(std::vector&lt; objecttype * &gt; &amp;vec, const ObjectOwner &amp;owner, const std::string &amp;name) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getSoftRelativesOfType</name>
      <anchorfile>classpxl_1_1_soft_relations.html</anchorfile>
      <anchor>a2162dd12f93189ce526ab4db57229345</anchor>
      <arglist>(std::vector&lt; objecttype * &gt; &amp;vec, const ObjectOwner &amp;owner) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getSoftRelativesOfType</name>
      <anchorfile>classpxl_1_1_soft_relations.html</anchorfile>
      <anchor>a4b46204191df909f1b1560575558d2cb</anchor>
      <arglist>(std::vector&lt; objecttype * &gt; &amp;vec, const BasicContainer &amp;owner, const std::string &amp;name) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getSoftRelativesOfType</name>
      <anchorfile>classpxl_1_1_soft_relations.html</anchorfile>
      <anchor>ad8126cca12140e5b0e257d88c3119c48</anchor>
      <arglist>(std::vector&lt; objecttype * &gt; &amp;vec, const BasicContainer &amp;owner) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>keepSoftRelatives</name>
      <anchorfile>classpxl_1_1_soft_relations.html</anchorfile>
      <anchor>a7b1394305ab315b46cbe4ea5a78db042</anchor>
      <arglist>(std::vector&lt; Serializable * &gt; &amp;vec, const std::string &amp;name) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>keepSoftRelatives</name>
      <anchorfile>classpxl_1_1_soft_relations.html</anchorfile>
      <anchor>a8afda563f4fe0add0e5b8b30e124087f</anchor>
      <arglist>(std::vector&lt; Serializable * &gt; &amp;vec) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has</name>
      <anchorfile>classpxl_1_1_soft_relations.html</anchorfile>
      <anchor>a796b2ee51ef23253acea8fda7dac460d</anchor>
      <arglist>(const Serializable *relative) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has</name>
      <anchorfile>classpxl_1_1_soft_relations.html</anchorfile>
      <anchor>a540c2bef84dd15b824a6d7a408862719</anchor>
      <arglist>(const Serializable *relative, const std::string &amp;name) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has</name>
      <anchorfile>classpxl_1_1_soft_relations.html</anchorfile>
      <anchor>a928026a62e1fce1ad0b74c06ed2ce9e9</anchor>
      <arglist>(const Id &amp;id) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has</name>
      <anchorfile>classpxl_1_1_soft_relations.html</anchorfile>
      <anchor>ac46a74f22ebf8f5d94da658978846175</anchor>
      <arglist>(const Id &amp;id, const std::string &amp;name) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasName</name>
      <anchorfile>classpxl_1_1_soft_relations.html</anchorfile>
      <anchor>aaff43aa708b84d4b7dc061f58cad2803</anchor>
      <arglist>(const std::string &amp;name) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>count</name>
      <anchorfile>classpxl_1_1_soft_relations.html</anchorfile>
      <anchor>ab60fcb31df676ce245c3ce7f1b37fbdc</anchor>
      <arglist>(const std::string &amp;name) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classpxl_1_1_soft_relations.html</anchorfile>
      <anchor>a3dd4cb1281913a44908f05a24cc42f55</anchor>
      <arglist>(const Serializable *relative, const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove</name>
      <anchorfile>classpxl_1_1_soft_relations.html</anchorfile>
      <anchor>ae3893cec985d1aef8e8a73ba9b16fd18</anchor>
      <arglist>(const Serializable *relative, const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove</name>
      <anchorfile>classpxl_1_1_soft_relations.html</anchorfile>
      <anchor>a30f2c720f961b7c64b6cb9fea8554daf</anchor>
      <arglist>(const Serializable *relative)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>size</name>
      <anchorfile>classpxl_1_1_soft_relations.html</anchorfile>
      <anchor>a5d56f88c0adf5286a16f01fbe48822d9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearContainer</name>
      <anchorfile>classpxl_1_1_soft_relations.html</anchorfile>
      <anchor>ae32ed014ebacb6618045604b49703092</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const std::multimap&lt; std::string, Id &gt; &amp;</type>
      <name>getContainer</name>
      <anchorfile>classpxl_1_1_soft_relations.html</anchorfile>
      <anchor>a63f342c3dd57abf8d739d078764c7d45</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>begin</name>
      <anchorfile>classpxl_1_1_soft_relations.html</anchorfile>
      <anchor>aafb5fcd9f4ce35220c51767618f9b1bb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>begin</name>
      <anchorfile>classpxl_1_1_soft_relations.html</anchorfile>
      <anchor>a06ec7f2215f3c79cc1f263e5d5c49069</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>end</name>
      <anchorfile>classpxl_1_1_soft_relations.html</anchorfile>
      <anchor>afe0d7a117e6fa33a9fb5f698af3d029a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>end</name>
      <anchorfile>classpxl_1_1_soft_relations.html</anchorfile>
      <anchor>a55793f5e9f659954d1a6ab5b33afb251</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>print</name>
      <anchorfile>classpxl_1_1_soft_relations.html</anchorfile>
      <anchor>a8ac26afe51d75323814e24f50d517063</anchor>
      <arglist>(int level=0, std::ostream &amp;os=std::cout, int pan=1) const</arglist>
    </member>
    <member kind="function">
      <type>const std::string</type>
      <name>toString</name>
      <anchorfile>classpxl_1_1_soft_relations.html</anchorfile>
      <anchor>aa0ed5be24e65973a6a25655fc83b8c9b</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>pxl::StdFileImpl</name>
    <filename>classpxl_1_1_std_file_impl.html</filename>
    <base>pxl::FileImpl</base>
    <member kind="function">
      <type></type>
      <name>StdFileImpl</name>
      <anchorfile>classpxl_1_1_std_file_impl.html</anchorfile>
      <anchor>a5fffdc50fed5217ed0b8e4bae48bdbaa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>StdFileImpl</name>
      <anchorfile>classpxl_1_1_std_file_impl.html</anchorfile>
      <anchor>a4693d6ea1957553d11929c0dbb45125d</anchor>
      <arglist>(const std::string &amp;filename, int32_t mode)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~StdFileImpl</name>
      <anchorfile>classpxl_1_1_std_file_impl.html</anchorfile>
      <anchor>a5d19eaf55954c33a2f41a6eb17ea4112</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>open</name>
      <anchorfile>classpxl_1_1_std_file_impl.html</anchorfile>
      <anchor>a2d57c8d8c8cb8681945a773b99f776a7</anchor>
      <arglist>(const std::string &amp;filename, int32_t mode)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>close</name>
      <anchorfile>classpxl_1_1_std_file_impl.html</anchorfile>
      <anchor>a574ac709e0675ab20a065aa93219e88f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isEof</name>
      <anchorfile>classpxl_1_1_std_file_impl.html</anchorfile>
      <anchor>a775ecd069ebf1724b7efb4c0490f53a9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isOpen</name>
      <anchorfile>classpxl_1_1_std_file_impl.html</anchorfile>
      <anchor>a30dea451c10e65b28fcd469e1816fa69</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isBad</name>
      <anchorfile>classpxl_1_1_std_file_impl.html</anchorfile>
      <anchor>a47117309eccc508bde0027b5823257fb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>clear</name>
      <anchorfile>classpxl_1_1_std_file_impl.html</anchorfile>
      <anchor>afce134f951599448ffe2970100deae07</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isGood</name>
      <anchorfile>classpxl_1_1_std_file_impl.html</anchorfile>
      <anchor>a9522de977c1ff5e9e9a8053727c306f1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int64_t</type>
      <name>tell</name>
      <anchorfile>classpxl_1_1_std_file_impl.html</anchorfile>
      <anchor>ae6219ddcebd1493e8b2039a07fa932cf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>seek</name>
      <anchorfile>classpxl_1_1_std_file_impl.html</anchorfile>
      <anchor>a2c31400b809ec9de72290908439e2d2f</anchor>
      <arglist>(int64_t pos, int32_t d)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int32_t</type>
      <name>peek</name>
      <anchorfile>classpxl_1_1_std_file_impl.html</anchorfile>
      <anchor>aec8b6d578a58c2d34faf9a5a28513caa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int64_t</type>
      <name>read</name>
      <anchorfile>classpxl_1_1_std_file_impl.html</anchorfile>
      <anchor>a2b1336b172657453d4050fbe04cc2f98</anchor>
      <arglist>(char *s, size_t count)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int64_t</type>
      <name>write</name>
      <anchorfile>classpxl_1_1_std_file_impl.html</anchorfile>
      <anchor>a946e39db98a9bee06b5ff28f9faea9d1</anchor>
      <arglist>(const char *s, size_t count)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ignore</name>
      <anchorfile>classpxl_1_1_std_file_impl.html</anchorfile>
      <anchor>a4fd78683a2220e8804e28708b57e013d</anchor>
      <arglist>(int64_t count)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>destroy</name>
      <anchorfile>classpxl_1_1_std_file_impl.html</anchorfile>
      <anchor>a5752f7792f9b73f97cfcf09868e07778</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SubtractionHelper</name>
    <filename>class_subtraction_helper.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg>method</templarg>
  </compound>
  <compound kind="class">
    <name>SubtractionHelper&lt; T, U, SubtractionState_BothUnsigned &gt;</name>
    <filename>class_subtraction_helper_3_01_t_00_01_u_00_01_subtraction_state___both_unsigned_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>Subtract</name>
      <anchorfile>class_subtraction_helper_3_01_t_00_01_u_00_01_subtraction_state___both_unsigned_01_4.html</anchorfile>
      <anchor>a291698769782d89f80d9a7997ed784ed</anchor>
      <arglist>(const T &amp;lhs, const U &amp;rhs, T &amp;result)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>SubtractThrow</name>
      <anchorfile>class_subtraction_helper_3_01_t_00_01_u_00_01_subtraction_state___both_unsigned_01_4.html</anchorfile>
      <anchor>a7aa776fbc0f5af7ee2657bdc3b9250b1</anchor>
      <arglist>(const T &amp;lhs, const U &amp;rhs, T &amp;result)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SubtractionHelper&lt; T, U, SubtractionState_BothUnsigned2 &gt;</name>
    <filename>class_subtraction_helper_3_01_t_00_01_u_00_01_subtraction_state___both_unsigned2_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>Subtract</name>
      <anchorfile>class_subtraction_helper_3_01_t_00_01_u_00_01_subtraction_state___both_unsigned2_01_4.html</anchorfile>
      <anchor>af0587c8313dc4ab6cbc2f84236284ceb</anchor>
      <arglist>(const T &amp;lhs, const U &amp;rhs, U &amp;result)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>SubtractThrow</name>
      <anchorfile>class_subtraction_helper_3_01_t_00_01_u_00_01_subtraction_state___both_unsigned2_01_4.html</anchorfile>
      <anchor>aa7f2896adf578f76b9c6df462e666eb1</anchor>
      <arglist>(const T &amp;lhs, const U &amp;rhs, U &amp;result)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SubtractionHelper&lt; T, U, SubtractionState_CastInt64CheckMin &gt;</name>
    <filename>class_subtraction_helper_3_01_t_00_01_u_00_01_subtraction_state___cast_int64_check_min_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>Subtract</name>
      <anchorfile>class_subtraction_helper_3_01_t_00_01_u_00_01_subtraction_state___cast_int64_check_min_01_4.html</anchorfile>
      <anchor>a2e75d9782194fcda3f6cf35886921c1b</anchor>
      <arglist>(const T &amp;lhs, const U &amp;rhs, T &amp;result)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>SubtractThrow</name>
      <anchorfile>class_subtraction_helper_3_01_t_00_01_u_00_01_subtraction_state___cast_int64_check_min_01_4.html</anchorfile>
      <anchor>af81b662f164fadf6fe8f615faea72e62</anchor>
      <arglist>(const T &amp;lhs, const U &amp;rhs, T &amp;result)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SubtractionHelper&lt; T, U, SubtractionState_CastInt64CheckMinMax &gt;</name>
    <filename>class_subtraction_helper_3_01_t_00_01_u_00_01_subtraction_state___cast_int64_check_min_max_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>Subtract</name>
      <anchorfile>class_subtraction_helper_3_01_t_00_01_u_00_01_subtraction_state___cast_int64_check_min_max_01_4.html</anchorfile>
      <anchor>ac224db88cab8adad24269e569c61f75f</anchor>
      <arglist>(const T &amp;lhs, const U &amp;rhs, T &amp;result)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>SubtractThrow</name>
      <anchorfile>class_subtraction_helper_3_01_t_00_01_u_00_01_subtraction_state___cast_int64_check_min_max_01_4.html</anchorfile>
      <anchor>ac81daeb5241e157fd916c9f4f4b40083</anchor>
      <arglist>(const T &amp;lhs, const U &amp;rhs, T &amp;result)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SubtractionHelper&lt; T, U, SubtractionState_CastIntCheckMin &gt;</name>
    <filename>class_subtraction_helper_3_01_t_00_01_u_00_01_subtraction_state___cast_int_check_min_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>Subtract</name>
      <anchorfile>class_subtraction_helper_3_01_t_00_01_u_00_01_subtraction_state___cast_int_check_min_01_4.html</anchorfile>
      <anchor>acd5d4328edae7eb65e0bd3292b248337</anchor>
      <arglist>(const T &amp;lhs, const U &amp;rhs, T &amp;result)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>SubtractThrow</name>
      <anchorfile>class_subtraction_helper_3_01_t_00_01_u_00_01_subtraction_state___cast_int_check_min_01_4.html</anchorfile>
      <anchor>aeb5ee63caa9f6a1fc2da892722cdd8e3</anchor>
      <arglist>(const T &amp;lhs, const U &amp;rhs, T &amp;result)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SubtractionHelper&lt; T, U, SubtractionState_CastIntCheckMinMax &gt;</name>
    <filename>class_subtraction_helper_3_01_t_00_01_u_00_01_subtraction_state___cast_int_check_min_max_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>Subtract</name>
      <anchorfile>class_subtraction_helper_3_01_t_00_01_u_00_01_subtraction_state___cast_int_check_min_max_01_4.html</anchorfile>
      <anchor>ae9b68f40febf8be20ed7cd2ead22ef69</anchor>
      <arglist>(const T &amp;lhs, const U &amp;rhs, T &amp;result)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>SubtractThrow</name>
      <anchorfile>class_subtraction_helper_3_01_t_00_01_u_00_01_subtraction_state___cast_int_check_min_max_01_4.html</anchorfile>
      <anchor>a46626c817a27260b04ee926863d4f8b5</anchor>
      <arglist>(const T &amp;lhs, const U &amp;rhs, T &amp;result)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SubtractionHelper&lt; T, U, SubtractionState_Int64Int &gt;</name>
    <filename>class_subtraction_helper_3_01_t_00_01_u_00_01_subtraction_state___int64_int_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>Subtract</name>
      <anchorfile>class_subtraction_helper_3_01_t_00_01_u_00_01_subtraction_state___int64_int_01_4.html</anchorfile>
      <anchor>ad49eaa790977dade6dbe042ed4b306d8</anchor>
      <arglist>(const T &amp;lhs, const U &amp;rhs, T &amp;result)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>SubtractThrow</name>
      <anchorfile>class_subtraction_helper_3_01_t_00_01_u_00_01_subtraction_state___int64_int_01_4.html</anchorfile>
      <anchor>a606d2ff3aac64d0596825a75d5ec7758</anchor>
      <arglist>(const T &amp;lhs, const U &amp;rhs, T &amp;result)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SubtractionHelper&lt; T, U, SubtractionState_Int64Uint &gt;</name>
    <filename>class_subtraction_helper_3_01_t_00_01_u_00_01_subtraction_state___int64_uint_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>Subtract</name>
      <anchorfile>class_subtraction_helper_3_01_t_00_01_u_00_01_subtraction_state___int64_uint_01_4.html</anchorfile>
      <anchor>aa19288d205e6a9ad7cd0bedd3addad33</anchor>
      <arglist>(const T &amp;lhs, const U &amp;rhs, T &amp;result)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>SubtractThrow</name>
      <anchorfile>class_subtraction_helper_3_01_t_00_01_u_00_01_subtraction_state___int64_uint_01_4.html</anchorfile>
      <anchor>a11b56e27982aca8d4a16b2d900ad76ad</anchor>
      <arglist>(const T &amp;lhs, const U &amp;rhs, T &amp;result)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SubtractionHelper&lt; T, U, SubtractionState_Int64Uint64 &gt;</name>
    <filename>class_subtraction_helper_3_01_t_00_01_u_00_01_subtraction_state___int64_uint64_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>Subtract</name>
      <anchorfile>class_subtraction_helper_3_01_t_00_01_u_00_01_subtraction_state___int64_uint64_01_4.html</anchorfile>
      <anchor>ae2dcf4e291b2385fc331094ae035b7b6</anchor>
      <arglist>(const __int64 &amp;lhs, const unsigned __int64 &amp;rhs, __int64 &amp;result)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>SubtractThrow</name>
      <anchorfile>class_subtraction_helper_3_01_t_00_01_u_00_01_subtraction_state___int64_uint64_01_4.html</anchorfile>
      <anchor>a91f8171dd1955418c3164624e5396bc0</anchor>
      <arglist>(const __int64 &amp;lhs, const unsigned __int64 &amp;rhs, T &amp;result)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SubtractionHelper&lt; T, U, SubtractionState_IntInt64 &gt;</name>
    <filename>class_subtraction_helper_3_01_t_00_01_u_00_01_subtraction_state___int_int64_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>Subtract</name>
      <anchorfile>class_subtraction_helper_3_01_t_00_01_u_00_01_subtraction_state___int_int64_01_4.html</anchorfile>
      <anchor>a643eb09069a42b8a2030d889932420b7</anchor>
      <arglist>(const T &amp;lhs, const U &amp;rhs, T &amp;result)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>SubtractThrow</name>
      <anchorfile>class_subtraction_helper_3_01_t_00_01_u_00_01_subtraction_state___int_int64_01_4.html</anchorfile>
      <anchor>ace9793851ebed4bba39e3106ca9a871c</anchor>
      <arglist>(const T &amp;lhs, const U &amp;rhs, T &amp;result)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SubtractionHelper&lt; T, U, SubtractionState_IntUint64 &gt;</name>
    <filename>class_subtraction_helper_3_01_t_00_01_u_00_01_subtraction_state___int_uint64_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>Subtract</name>
      <anchorfile>class_subtraction_helper_3_01_t_00_01_u_00_01_subtraction_state___int_uint64_01_4.html</anchorfile>
      <anchor>aeaff22a60684662b81a30f9cca268c46</anchor>
      <arglist>(const T &amp;lhs, const U &amp;rhs, T &amp;result)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>SubtractThrow</name>
      <anchorfile>class_subtraction_helper_3_01_t_00_01_u_00_01_subtraction_state___int_uint64_01_4.html</anchorfile>
      <anchor>adc4e303344d6019d2f3ea0097c7f0a1c</anchor>
      <arglist>(const T &amp;lhs, const U &amp;rhs, T &amp;result)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SubtractionHelper&lt; T, U, SubtractionState_Uint64Int &gt;</name>
    <filename>class_subtraction_helper_3_01_t_00_01_u_00_01_subtraction_state___uint64_int_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>Subtract</name>
      <anchorfile>class_subtraction_helper_3_01_t_00_01_u_00_01_subtraction_state___uint64_int_01_4.html</anchorfile>
      <anchor>aacdc2e4ab88c81c912fba5b1f74e6448</anchor>
      <arglist>(const T &amp;lhs, const U &amp;rhs, T &amp;result)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>SubtractThrow</name>
      <anchorfile>class_subtraction_helper_3_01_t_00_01_u_00_01_subtraction_state___uint64_int_01_4.html</anchorfile>
      <anchor>a715907c3f3d161db50c67f77ba91e1cf</anchor>
      <arglist>(const T &amp;lhs, const U &amp;rhs, T &amp;result)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SubtractionHelper&lt; T, U, SubtractionState_UintInt64 &gt;</name>
    <filename>class_subtraction_helper_3_01_t_00_01_u_00_01_subtraction_state___uint_int64_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>Subtract</name>
      <anchorfile>class_subtraction_helper_3_01_t_00_01_u_00_01_subtraction_state___uint_int64_01_4.html</anchorfile>
      <anchor>af9d29553bf0ec39c70a79ccc79c1d299</anchor>
      <arglist>(const T &amp;lhs, const U &amp;rhs, T &amp;result)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>SubtractThrow</name>
      <anchorfile>class_subtraction_helper_3_01_t_00_01_u_00_01_subtraction_state___uint_int64_01_4.html</anchorfile>
      <anchor>ad58228229381a722b654d031d2b5335a</anchor>
      <arglist>(const T &amp;lhs, const U &amp;rhs, T &amp;result)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SubtractionHelper&lt; U, T, SubtractionState_CastInt64CheckMinMax2 &gt;</name>
    <filename>class_subtraction_helper_3_01_u_00_01_t_00_01_subtraction_state___cast_int64_check_min_max2_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>Subtract</name>
      <anchorfile>class_subtraction_helper_3_01_u_00_01_t_00_01_subtraction_state___cast_int64_check_min_max2_01_4.html</anchorfile>
      <anchor>aa4105389b880561caeda317c82d9a194</anchor>
      <arglist>(const U &amp;lhs, const T &amp;rhs, T &amp;result)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>SubtractThrow</name>
      <anchorfile>class_subtraction_helper_3_01_u_00_01_t_00_01_subtraction_state___cast_int64_check_min_max2_01_4.html</anchorfile>
      <anchor>a3c1d88923361ec935f0ed44fccfe797e</anchor>
      <arglist>(const U &amp;lhs, const T &amp;rhs, T &amp;result)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SubtractionHelper&lt; U, T, SubtractionState_CastIntCheckMinMax2 &gt;</name>
    <filename>class_subtraction_helper_3_01_u_00_01_t_00_01_subtraction_state___cast_int_check_min_max2_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>Subtract</name>
      <anchorfile>class_subtraction_helper_3_01_u_00_01_t_00_01_subtraction_state___cast_int_check_min_max2_01_4.html</anchorfile>
      <anchor>a0e0268447cd1948ca35619b9317b2c8b</anchor>
      <arglist>(const U &amp;lhs, const T &amp;rhs, T &amp;result)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>SubtractThrow</name>
      <anchorfile>class_subtraction_helper_3_01_u_00_01_t_00_01_subtraction_state___cast_int_check_min_max2_01_4.html</anchorfile>
      <anchor>a2eb177d381651f62b232135523a848f5</anchor>
      <arglist>(const U &amp;lhs, const T &amp;rhs, T &amp;result)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SubtractionHelper&lt; U, T, SubtractionState_Int64Int2 &gt;</name>
    <filename>class_subtraction_helper_3_01_u_00_01_t_00_01_subtraction_state___int64_int2_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>Subtract</name>
      <anchorfile>class_subtraction_helper_3_01_u_00_01_t_00_01_subtraction_state___int64_int2_01_4.html</anchorfile>
      <anchor>aa8476535d8dda6015035bb63f437e4d3</anchor>
      <arglist>(const U &amp;lhs, const T &amp;rhs, T &amp;result)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>SubtractThrow</name>
      <anchorfile>class_subtraction_helper_3_01_u_00_01_t_00_01_subtraction_state___int64_int2_01_4.html</anchorfile>
      <anchor>a1acfaf6591bf16c3e98d1fa6131c486f</anchor>
      <arglist>(const U &amp;lhs, const T &amp;rhs, T &amp;result)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SubtractionHelper&lt; U, T, SubtractionState_Int64Uint2 &gt;</name>
    <filename>class_subtraction_helper_3_01_u_00_01_t_00_01_subtraction_state___int64_uint2_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>Subtract</name>
      <anchorfile>class_subtraction_helper_3_01_u_00_01_t_00_01_subtraction_state___int64_uint2_01_4.html</anchorfile>
      <anchor>a26015082ef967c909c854ba537a4e81f</anchor>
      <arglist>(const U &amp;lhs, const T &amp;rhs, T &amp;result)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>SubtractThrow</name>
      <anchorfile>class_subtraction_helper_3_01_u_00_01_t_00_01_subtraction_state___int64_uint2_01_4.html</anchorfile>
      <anchor>ae8be78cc1ec9f180d33a1f94d4c2b86d</anchor>
      <arglist>(const U &amp;lhs, const T &amp;rhs, T &amp;result)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SubtractionHelper&lt; U, T, SubtractionState_Int64Uint642 &gt;</name>
    <filename>class_subtraction_helper_3_01_u_00_01_t_00_01_subtraction_state___int64_uint642_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>Subtract</name>
      <anchorfile>class_subtraction_helper_3_01_u_00_01_t_00_01_subtraction_state___int64_uint642_01_4.html</anchorfile>
      <anchor>a94fc8582cd34b99432cf5f2c87783c61</anchor>
      <arglist>(const __int64 &amp;lhs, const unsigned __int64 &amp;rhs, T &amp;result)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>SubtractThrow</name>
      <anchorfile>class_subtraction_helper_3_01_u_00_01_t_00_01_subtraction_state___int64_uint642_01_4.html</anchorfile>
      <anchor>a380e17c061b9fd04d38c5e7a3c04e0a7</anchor>
      <arglist>(const __int64 &amp;lhs, const unsigned __int64 &amp;rhs, T &amp;result)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SubtractionHelper&lt; U, T, SubtractionState_IntInt642 &gt;</name>
    <filename>class_subtraction_helper_3_01_u_00_01_t_00_01_subtraction_state___int_int642_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>Subtract</name>
      <anchorfile>class_subtraction_helper_3_01_u_00_01_t_00_01_subtraction_state___int_int642_01_4.html</anchorfile>
      <anchor>a02c056ed7345cf6ac8fe099ca41772c8</anchor>
      <arglist>(const U &amp;lhs, const T &amp;rhs, T &amp;result)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>SubtractThrow</name>
      <anchorfile>class_subtraction_helper_3_01_u_00_01_t_00_01_subtraction_state___int_int642_01_4.html</anchorfile>
      <anchor>a274127ca6041626c31c30a8307f19e15</anchor>
      <arglist>(const U &amp;lhs, const T &amp;rhs, T &amp;result)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SubtractionHelper&lt; U, T, SubtractionState_IntUint642 &gt;</name>
    <filename>class_subtraction_helper_3_01_u_00_01_t_00_01_subtraction_state___int_uint642_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>Subtract</name>
      <anchorfile>class_subtraction_helper_3_01_u_00_01_t_00_01_subtraction_state___int_uint642_01_4.html</anchorfile>
      <anchor>aee8328dcfe5aa805b93ec4823cca12e6</anchor>
      <arglist>(const U &amp;lhs, const T &amp;rhs, T &amp;result)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>SubtractThrow</name>
      <anchorfile>class_subtraction_helper_3_01_u_00_01_t_00_01_subtraction_state___int_uint642_01_4.html</anchorfile>
      <anchor>a0fe53adc65b23f22344cde8af8878a4b</anchor>
      <arglist>(const U &amp;lhs, const T &amp;rhs, T &amp;result)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SubtractionHelper&lt; U, T, SubtractionState_Uint64Int2 &gt;</name>
    <filename>class_subtraction_helper_3_01_u_00_01_t_00_01_subtraction_state___uint64_int2_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>Subtract</name>
      <anchorfile>class_subtraction_helper_3_01_u_00_01_t_00_01_subtraction_state___uint64_int2_01_4.html</anchorfile>
      <anchor>a2cad9298883b44523120db0f480b3239</anchor>
      <arglist>(const U &amp;lhs, const T &amp;rhs, T &amp;result)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>SubtractThrow</name>
      <anchorfile>class_subtraction_helper_3_01_u_00_01_t_00_01_subtraction_state___uint64_int2_01_4.html</anchorfile>
      <anchor>acaef9df43abf808bb2c6687c90b945b8</anchor>
      <arglist>(const U &amp;lhs, const T &amp;rhs, T &amp;result)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SubtractionHelper&lt; U, T, SubtractionState_UintInt642 &gt;</name>
    <filename>class_subtraction_helper_3_01_u_00_01_t_00_01_subtraction_state___uint_int642_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>Subtract</name>
      <anchorfile>class_subtraction_helper_3_01_u_00_01_t_00_01_subtraction_state___uint_int642_01_4.html</anchorfile>
      <anchor>a5d5f311df23dad78a926a33fe5f588dd</anchor>
      <arglist>(const U &amp;lhs, const T &amp;rhs, T &amp;result)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>SubtractThrow</name>
      <anchorfile>class_subtraction_helper_3_01_u_00_01_t_00_01_subtraction_state___uint_int642_01_4.html</anchorfile>
      <anchor>a3c908b4e9335e37bf73a8a6698d4ac1a</anchor>
      <arglist>(const U &amp;lhs, const T &amp;rhs, T &amp;result)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SubtractionMethod</name>
    <filename>class_subtraction_method.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="enumvalue">
      <name>method</name>
      <anchorfile>class_subtraction_method.html</anchorfile>
      <anchor>a5a868916f1bf5197cd500308fd04a497ab6c4ffd692dfc358df173271cb168c59</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>method</name>
      <anchorfile>class_subtraction_method.html</anchorfile>
      <anchor>a5a868916f1bf5197cd500308fd04a497ab6c4ffd692dfc358df173271cb168c59</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SubtractionMethod2</name>
    <filename>class_subtraction_method2.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="enumvalue">
      <name>method</name>
      <anchorfile>class_subtraction_method2.html</anchorfile>
      <anchor>a4510aa842e7e70a67e45df00baebb3e6aa7d4f1fe870329404b4c13e737ab82ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>method</name>
      <anchorfile>class_subtraction_method2.html</anchorfile>
      <anchor>a4510aa842e7e70a67e45df00baebb3e6aa7d4f1fe870329404b4c13e737ab82ce</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BS::synced_stream</name>
    <filename>class_b_s_1_1synced__stream.html</filename>
    <member kind="function">
      <type></type>
      <name>synced_stream</name>
      <anchorfile>class_b_s_1_1synced__stream.html</anchorfile>
      <anchor>aa66339189e666fb9aec5759401dc6dfc</anchor>
      <arglist>(std::ostream &amp;out_stream_=std::cout)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>class_b_s_1_1synced__stream.html</anchorfile>
      <anchor>ab2f582fc2788f139bd3c99c4cb1cb302</anchor>
      <arglist>(T &amp;&amp;...items)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>println</name>
      <anchorfile>class_b_s_1_1synced__stream.html</anchorfile>
      <anchor>a1540a1e302a4b76378e627f46d075bc6</anchor>
      <arglist>(T &amp;&amp;...items)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static std::ostream &amp;(&amp;)</type>
      <name>endl</name>
      <anchorfile>class_b_s_1_1synced__stream.html</anchorfile>
      <anchor>aecb26211e0170537b99c96880582cde0</anchor>
      <arglist>(std::ostream &amp;)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static std::ostream &amp;(&amp;)</type>
      <name>flush</name>
      <anchorfile>class_b_s_1_1synced__stream.html</anchorfile>
      <anchor>a33cdf7cd5e56d2ddc047613838da1e6d</anchor>
      <arglist>(std::ostream &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Systematics</name>
    <filename>class_systematics.html</filename>
    <member kind="function">
      <type></type>
      <name>Systematics</name>
      <anchorfile>class_systematics.html</anchorfile>
      <anchor>a8d0a2bb15c234a7a1900c7630329d704</anchor>
      <arglist>(const Tools::MConfig &amp;cfg, unsigned int const debug)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Systematics</name>
      <anchorfile>class_systematics.html</anchorfile>
      <anchor>a57c05d90e5738e3c4b19473b55c3072e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>class_systematics.html</anchorfile>
      <anchor>a8805b8efb52f85d16654a155ae80bec6</anchor>
      <arglist>(pxl::Event *event)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>createShiftedViews</name>
      <anchorfile>class_systematics.html</anchorfile>
      <anchor>a2a4dd0f9ecc77514f4379a2c2ce3314e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::list&lt; std::string &gt;</type>
      <name>getAllSystNames</name>
      <anchorfile>class_systematics.html</anchorfile>
      <anchor>add6f0679b848913a7389e1b6e6070675</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; SystematicsInfo * &gt;</type>
      <name>m_activeSystematics</name>
      <anchorfile>class_systematics.html</anchorfile>
      <anchor>a55a0a89f42e42cef662043b33357bec4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SystematicsInfo</name>
    <filename>class_systematics_info.html</filename>
    <member kind="function">
      <type></type>
      <name>SystematicsInfo</name>
      <anchorfile>class_systematics_info.html</anchorfile>
      <anchor>a3a4e006d06b7117aba47c63ccba0426e</anchor>
      <arglist>(std::string particleType, std::string sysType, std::string funcKey, bool isDifferential=true, double constantShift=1.)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SystematicsInfo</name>
      <anchorfile>class_systematics_info.html</anchorfile>
      <anchor>a68ec814d8d19cebc8a6021a883de436a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; pxl::EventView * &gt;</type>
      <name>eventViewPointers</name>
      <anchorfile>class_systematics_info.html</anchorfile>
      <anchor>ac3e7683f3feeba907ddfef6592e218cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>m_isDifferential</name>
      <anchorfile>class_systematics_info.html</anchorfile>
      <anchor>adc9115be99b9c6fba24e3a3c7c7c6d2d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>m_particleType</name>
      <anchorfile>class_systematics_info.html</anchorfile>
      <anchor>a280dd5a9d1238a8da4c37e844da9a4ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>m_sysType</name>
      <anchorfile>class_systematics_info.html</anchorfile>
      <anchor>a5e2b6892f8704fd45f902b7f5d7ad067</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>m_funcKey</name>
      <anchorfile>class_systematics_info.html</anchorfile>
      <anchor>ac7459cadf96809a569a9602d90b7182d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>m_constantShift</name>
      <anchorfile>class_systematics_info.html</anchorfile>
      <anchor>a7f001021e635bc939ded40820639e762</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TauSelector</name>
    <filename>class_tau_selector.html</filename>
    <base>ObjectSelector</base>
    <member kind="function">
      <type></type>
      <name>TauSelector</name>
      <anchorfile>class_tau_selector.html</anchorfile>
      <anchor>a0ca37fc595cfcf2de27c5a6d6ee03edb</anchor>
      <arglist>(const Tools::MConfig &amp;config, OldNameMapper *globalOldNameMap)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TauSelector</name>
      <anchorfile>class_tau_selector.html</anchorfile>
      <anchor>a82794eb9a7d3a8951b734d8a5ed940bf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>passObjectSelection</name>
      <anchorfile>class_tau_selector.html</anchorfile>
      <anchor>a977713fa07227c84782f345f914f60f8</anchor>
      <arglist>(pxl::Particle *tau, double const tauRho, const std::string &amp;idType, const bool isSyst) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>tagJetsAsTau</name>
      <anchorfile>class_tau_selector.html</anchorfile>
      <anchor>a4745f8a7775963951c94e91b1895f1bc</anchor>
      <arglist>(std::vector&lt; pxl::Particle * &gt; &amp;taus, std::vector&lt; pxl::Particle * &gt; &amp;jets) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>passKinematics</name>
      <anchorfile>class_object_selector.html</anchorfile>
      <anchor>a96ba15ff2c5195e1797a1d3850c530a8</anchor>
      <arglist>(pxl::Particle *object, const bool isSyst=false) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setScaleFactors</name>
      <anchorfile>class_object_selector.html</anchorfile>
      <anchor>aa5e974f081f10a2e9ca4ab5569c22e7e</anchor>
      <arglist>(pxl::Particle *object)</arglist>
    </member>
    <member kind="variable">
      <type>OldNameMapper *</type>
      <name>oldNameMap</name>
      <anchorfile>class_object_selector.html</anchorfile>
      <anchor>a8944cd815366dde3b857d9b76e28b6bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_object_name</name>
      <anchorfile>class_object_selector.html</anchorfile>
      <anchor>a97be92d352eab8f1f7736e1210142697</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; ScaleFactor &gt;</type>
      <name>m_scale_factors</name>
      <anchorfile>class_object_selector.html</anchorfile>
      <anchor>acb033d208366dd65b0ee20215cde1eed</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TEventClass</name>
    <filename>class_t_event_class.html</filename>
    <class kind="struct">TEventClass::PDFResult</class>
    <member kind="function">
      <type></type>
      <name>TEventClass</name>
      <anchorfile>class_t_event_class.html</anchorfile>
      <anchor>a963d74447082c8c0f2fc3e248977f39d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TEventClass</name>
      <anchorfile>class_t_event_class.html</anchorfile>
      <anchor>aed8137b4ff552d5f1bcb975be853e323</anchor>
      <arglist>(const std::string &amp;EventType, const std::string &amp;EventClassType, const std::string runhash, bool const data, double const cme, std::map&lt; std::string, int &gt; countmap, const bool analyzedBjets, std::map&lt; std::string, std::vector&lt; double &gt;&gt; distTypeBins, const bool analyzedCharge, const int numCharge, const bool isInclusive, std::map&lt; std::string, double &gt; distTypMins, unsigned int m_numPDFvariations, std::map&lt; std::string, double &gt; distTypeMinsRequire, double lumi, std::set&lt; std::string &gt; systNames=std::set&lt; std::string &gt;(), std::map&lt; std::string, std::string &gt; ECItemShortlist=std::map&lt; std::string, std::string &gt;(), double const bin_size_min=10.0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyValues</name>
      <anchorfile>class_t_event_class.html</anchorfile>
      <anchor>adf1b04171702feac26db62c4584367d0</anchor>
      <arglist>(const TEventClass &amp;rhs, bool empty)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TEventClass</name>
      <anchorfile>class_t_event_class.html</anchorfile>
      <anchor>ad6bb4649940069cb70fc33f9f548abe4</anchor>
      <arglist>(const TEventClass &amp;orig, bool empty)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TEventClass</name>
      <anchorfile>class_t_event_class.html</anchorfile>
      <anchor>a4a441e1abe1e13aafcd5a30994461cd2</anchor>
      <arglist>(const TEventClass &amp;orig)</arglist>
    </member>
    <member kind="function">
      <type>TEventClass &amp;</type>
      <name>operator=</name>
      <anchorfile>class_t_event_class.html</anchorfile>
      <anchor>a443fa7770fe9cdf2c03a1cc1dc7bb072</anchor>
      <arglist>(const TEventClass &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TEventClass</name>
      <anchorfile>class_t_event_class.html</anchorfile>
      <anchor>a46fc7e853d9750a52776ba05fcb3b5cb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>InitializeHistos</name>
      <anchorfile>class_t_event_class.html</anchorfile>
      <anchor>a79978d883384152221642631fbb730b8</anchor>
      <arglist>(std::string const &amp;process)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>InitializePDFHistos</name>
      <anchorfile>class_t_event_class.html</anchorfile>
      <anchor>a140b5e1d3881a1576bf2343b5f370bb6</anchor>
      <arglist>(const std::string &amp;process, const std::vector&lt; float &gt; &amp;PDFweights)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>InitializeResolutions</name>
      <anchorfile>class_t_event_class.html</anchorfile>
      <anchor>a1858d8549b0a72951762977880c8d396</anchor>
      <arglist>(std::string const &amp;process)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Fill</name>
      <anchorfile>class_t_event_class.html</anchorfile>
      <anchor>a8c38b77a9393914b67265d2d512ee4d2</anchor>
      <arglist>(std::string const &amp;process, std::map&lt; std::string, double &gt; values, std::map&lt; std::string, std::pair&lt; double, double &gt;&gt; resolution_value, double weight=1., std::map&lt; std::string, double &gt; systWeights=std::map&lt; std::string, double &gt;(), std::vector&lt; float &gt; const &amp;PDFweights=std::vector&lt; float &gt;())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>FillDifferentialSystematic</name>
      <anchorfile>class_t_event_class.html</anchorfile>
      <anchor>aef963730c17058a1810827d0109eb678</anchor>
      <arglist>(std::string const &amp;process, std::map&lt; std::string, double &gt; values, double const weight, std::vector&lt; float &gt; const &amp;PDFweights, std::string systName)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scaleLumi</name>
      <anchorfile>class_t_event_class.html</anchorfile>
      <anchor>a9d5001d02694e44485cd90912724f142</anchor>
      <arglist>(double targetLumi)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scaleAllCrossSections</name>
      <anchorfile>class_t_event_class.html</anchorfile>
      <anchor>a3c830a14374101d9a124b1a399785d77</anchor>
      <arglist>(double factor)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>changeCrossSection</name>
      <anchorfile>class_t_event_class.html</anchorfile>
      <anchor>a43942d07e437eb4492d594a660b81122</anchor>
      <arglist>(std::string process, double cross_section)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scale</name>
      <anchorfile>class_t_event_class.html</anchorfile>
      <anchor>a7ac48545d31139522639eef3a2359bac</anchor>
      <arglist>(double totalXsec)</arglist>
    </member>
    <member kind="function">
      <type>std::set&lt; std::string &gt;</type>
      <name>ProcessList</name>
      <anchorfile>class_t_event_class.html</anchorfile>
      <anchor>aff57477a796e3d17c0cc4742f97102df</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::set&lt; std::string &gt;</type>
      <name>getProcessList</name>
      <anchorfile>class_t_event_class.html</anchorfile>
      <anchor>a88e2dcbf0e672c6d760ae877c83978a9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::set&lt; std::string &gt;</type>
      <name>getGlobalProcessList</name>
      <anchorfile>class_t_event_class.html</anchorfile>
      <anchor>a8462375a12b4aa67061d16eb693ec751</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGlobalProcessList</name>
      <anchorfile>class_t_event_class.html</anchorfile>
      <anchor>a9679dd255ab8d81ae92bbb44beac9965</anchor>
      <arglist>(const std::set&lt; std::string &gt; &amp;processList)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addToGlobalProcessList</name>
      <anchorfile>class_t_event_class.html</anchorfile>
      <anchor>a3acd88d9fc06f1cab6b5a2789b42fdd8</anchor>
      <arglist>(const std::string proc)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addToProcessGroupMap</name>
      <anchorfile>class_t_event_class.html</anchorfile>
      <anchor>ade2d12f5f585c7640148593249657e4d</anchor>
      <arglist>(std::string process, std::string processGroup)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getProcessGroup</name>
      <anchorfile>class_t_event_class.html</anchorfile>
      <anchor>a8e17b208c900b578b28033c651de301c</anchor>
      <arglist>(std::string process)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasSystematic</name>
      <anchorfile>class_t_event_class.html</anchorfile>
      <anchor>a8b5f756eab32708907c5eba0617c435c</anchor>
      <arglist>(std::string &amp;systName)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addSystematic</name>
      <anchorfile>class_t_event_class.html</anchorfile>
      <anchor>acfd890344d9496a670fac62715f86142</anchor>
      <arglist>(std::string systName)</arglist>
    </member>
    <member kind="function">
      <type>std::map&lt; std::string, std::map&lt; std::string, TH1F * &gt; &gt;</type>
      <name>getAllProcHistoMap</name>
      <anchorfile>class_t_event_class.html</anchorfile>
      <anchor>a090b559f6fed158c108741c690c2b23d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::map&lt; std::string, std::map&lt; std::string, std::map&lt; std::string, TH1F * &gt; &gt; &gt;</type>
      <name>getSystematicsProcHistoMap</name>
      <anchorfile>class_t_event_class.html</anchorfile>
      <anchor>af1f5e3698cba626a820a83574f33d09f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::map&lt; std::string, std::map&lt; std::string, std::map&lt; std::string, TH1F * &gt; &gt; &gt;</type>
      <name>getPDFvariedallProcHistoMap</name>
      <anchorfile>class_t_event_class.html</anchorfile>
      <anchor>afa895d93d22cf5106203b8f83a352f3c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::map&lt; std::string, std::map&lt; std::string, TH2F * &gt; &gt;</type>
      <name>getResolutionsMap</name>
      <anchorfile>class_t_event_class.html</anchorfile>
      <anchor>ae677db174ee074d48a44413bcad3ea64</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool &amp;</type>
      <name>getPDFInit</name>
      <anchorfile>class_t_event_class.html</anchorfile>
      <anchor>a50980ba96b765a0e9a2028b293999e93</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::map&lt; std::string, std::map&lt; std::string, TH1F * &gt; &gt;</type>
      <name>getPDFWeightsMap</name>
      <anchorfile>class_t_event_class.html</anchorfile>
      <anchor>ae50895f4cd7e22fe92a3f642ccceb17b</anchor>
      <arglist>(const std::string &amp;process)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPDFWeights</name>
      <anchorfile>class_t_event_class.html</anchorfile>
      <anchor>a6083722ef6811d30ac73670a342a09a5</anchor>
      <arglist>(const std::string &amp;process, const std::map&lt; std::string, std::map&lt; std::string, TH1F * &gt;&gt; &amp;pdfDistMap)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isFilled</name>
      <anchorfile>class_t_event_class.html</anchorfile>
      <anchor>a65e47bd8372e1349606d839ae7ca868e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>TH1F *</type>
      <name>getHistoPointer</name>
      <anchorfile>class_t_event_class.html</anchorfile>
      <anchor>a1db3e78a2087ee81b5abd0b887d47d38</anchor>
      <arglist>(const std::string &amp;process, const std::string &amp;distType)</arglist>
    </member>
    <member kind="function">
      <type>TH1F *</type>
      <name>getHistoPointerUnweighted</name>
      <anchorfile>class_t_event_class.html</anchorfile>
      <anchor>a5d9899ad41241b69b2935d6b91bef446</anchor>
      <arglist>(const std::string &amp;process, const std::string &amp;distType)</arglist>
    </member>
    <member kind="function">
      <type>TH1F *</type>
      <name>getPDFHistoPointer</name>
      <anchorfile>class_t_event_class.html</anchorfile>
      <anchor>acb3093d757c9c035f5c120fa67a03f50</anchor>
      <arglist>(const std::string &amp;process, const std::string distType, const std::string histname)</arglist>
    </member>
    <member kind="function">
      <type>TH1F *</type>
      <name>getSystHistoPointer</name>
      <anchorfile>class_t_event_class.html</anchorfile>
      <anchor>a8276cee43a81a9f148edd400bf9de370</anchor>
      <arglist>(const std::string &amp;process, const std::string distType, const std::string systName)</arglist>
    </member>
    <member kind="function">
      <type>TH2F *</type>
      <name>getResolutionsHistoPointer</name>
      <anchorfile>class_t_event_class.html</anchorfile>
      <anchor>a526bcd57fa147fefe0e9c82c4ec0d69c</anchor>
      <arglist>(std::string const &amp;process, std::string distType)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addHisto</name>
      <anchorfile>class_t_event_class.html</anchorfile>
      <anchor>a74413f72205f8e7d3b24f55a532963b3</anchor>
      <arglist>(const std::string &amp;process, std::string distType, TH1F *histo, std::map&lt; std::string, std::map&lt; std::string, TH1F * &gt;&gt; &amp;histoMap)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addHisto</name>
      <anchorfile>class_t_event_class.html</anchorfile>
      <anchor>af96e1649fe5c30037a66517be8f566c1</anchor>
      <arglist>(const std::string &amp;process, std::string distType, TH1F *histo)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addHistoUnweighted</name>
      <anchorfile>class_t_event_class.html</anchorfile>
      <anchor>a53e9e9bbb06bf775c19f3f6568afb56b</anchor>
      <arglist>(const std::string &amp;process, std::string distType, TH1F *histo)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addHisto</name>
      <anchorfile>class_t_event_class.html</anchorfile>
      <anchor>ac8ff1619f561a5767737065e0848aa2b</anchor>
      <arglist>(const std::string &amp;process, std::string distType, std::string systName, TH1F *histo)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addResolutionHistogram</name>
      <anchorfile>class_t_event_class.html</anchorfile>
      <anchor>ae6ee55db0b63e092b7456262ee820977</anchor>
      <arglist>(std::string const &amp;process, std::string distType, TH2F *const histo)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>replaceHisto</name>
      <anchorfile>class_t_event_class.html</anchorfile>
      <anchor>af6555d9c7fa3a97164b30945fd5a433d</anchor>
      <arglist>(const std::string &amp;process, std::string distType, TH1F *histo)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getClassType</name>
      <anchorfile>class_t_event_class.html</anchorfile>
      <anchor>aba4858ccbe67ee2f30e5a51cbaa4a3f4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::set&lt; std::string &gt;</type>
      <name>getSystematicNames</name>
      <anchorfile>class_t_event_class.html</anchorfile>
      <anchor>a91d014cc25e8f6fc5854e9700d3f424e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getRunHash</name>
      <anchorfile>class_t_event_class.html</anchorfile>
      <anchor>a4f935ab0148feb3290b0ce2bbeb49b45</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getType</name>
      <anchorfile>class_t_event_class.html</anchorfile>
      <anchor>aa79b41fbe49ffd7ca38379077d843321</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isInclusive</name>
      <anchorfile>class_t_event_class.html</anchorfile>
      <anchor>a741028cc966ca95036edd4cfa30f1148</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isData</name>
      <anchorfile>class_t_event_class.html</anchorfile>
      <anchor>af4bb30365a7ee882ef6dddd4037dd01d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getCME</name>
      <anchorfile>class_t_event_class.html</anchorfile>
      <anchor>add9d89352b3418e1997d853af02bb33c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::map&lt; std::string, int &gt;</type>
      <name>getCountMap</name>
      <anchorfile>class_t_event_class.html</anchorfile>
      <anchor>aeb7cad7a679747cb272469b7fa7e372b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getnumECItem</name>
      <anchorfile>class_t_event_class.html</anchorfile>
      <anchor>a5332e0199cb03a77c37f915a9ec5ca35</anchor>
      <arglist>(std::string ECItemName)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getTotalNumECItems</name>
      <anchorfile>class_t_event_class.html</anchorfile>
      <anchor>a179f62854e2a8046ca93d6677b44fa41</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>analyzedBjets</name>
      <anchorfile>class_t_event_class.html</anchorfile>
      <anchor>a5a752beb99096987b0764983ab47f6ad</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>analyzedCharges</name>
      <anchorfile>class_t_event_class.html</anchorfile>
      <anchor>af6bccb0bb9025c150aa5e6ae3dff3aa9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumCharge</name>
      <anchorfile>class_t_event_class.html</anchorfile>
      <anchor>ac912f3ddf06cbf5c8bd58c52d106313e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getLumi</name>
      <anchorfile>class_t_event_class.html</anchorfile>
      <anchor>afdd8344f8a1f0bb71326b00c6ef24582</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLumi</name>
      <anchorfile>class_t_event_class.html</anchorfile>
      <anchor>aaef96d4e77d74e44d0973340ad06a805</anchor>
      <arglist>(double targetLumi)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getScaleFactor</name>
      <anchorfile>class_t_event_class.html</anchorfile>
      <anchor>ace436c68bcfa5993ef3d914548da998a</anchor>
      <arglist>(const std::string &amp;process)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setScaleFactor</name>
      <anchorfile>class_t_event_class.html</anchorfile>
      <anchor>ad2c081375526e5ea9f6152e163313f34</anchor>
      <arglist>(const std::string &amp;process, double factor)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getCrossSection</name>
      <anchorfile>class_t_event_class.html</anchorfile>
      <anchor>ad1777732dc14add36e9650fcebe6eec5</anchor>
      <arglist>(const std::string &amp;process)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCrossSection</name>
      <anchorfile>class_t_event_class.html</anchorfile>
      <anchor>a13b0534523d5399b1103746af5731460</anchor>
      <arglist>(const std::string &amp;process, double xsec)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getNumOfDistributions</name>
      <anchorfile>class_t_event_class.html</anchorfile>
      <anchor>ad0dc123a30b523f8445d880d3eb805f4</anchor>
      <arglist>(const std::string process, std::map&lt; std::string, std::map&lt; std::string, std::map&lt; std::string, TH1F * &gt;&gt;&gt; &amp;procMap)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getNumOfDistributions</name>
      <anchorfile>class_t_event_class.html</anchorfile>
      <anchor>a3974f47a2e2a3baa4bd6c1fc9c51f07f</anchor>
      <arglist>(const std::string process, std::map&lt; std::string, std::map&lt; std::string, TH1F * &gt;&gt; &amp;procMap)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getNumOfDistributions</name>
      <anchorfile>class_t_event_class.html</anchorfile>
      <anchor>aac6e2be64602e4bfc4c32e7c65e2db4c</anchor>
      <arglist>(const std::string process)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getNumOfPDFHistos</name>
      <anchorfile>class_t_event_class.html</anchorfile>
      <anchor>a4d236b12f93c68cfb81140deb61eaf55</anchor>
      <arglist>(const std::string &amp;process)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getNumOfSystHistos</name>
      <anchorfile>class_t_event_class.html</anchorfile>
      <anchor>ab44e848edc0aaa34dd64953844ac9be0</anchor>
      <arglist>(const std::string &amp;process)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getNumOfResolutionHistos</name>
      <anchorfile>class_t_event_class.html</anchorfile>
      <anchor>af0bad2c9c06d321f09a7073ece055be6</anchor>
      <arglist>(std::string const &amp;process) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>calculatePDFUncertainty</name>
      <anchorfile>class_t_event_class.html</anchorfile>
      <anchor>a169561453471badf149b88279a278d69</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dropPDFHistograms</name>
      <anchorfile>class_t_event_class.html</anchorfile>
      <anchor>a65d7321b8b4921d57c1d410ea4531a93</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Bool_t</type>
      <name>IsFolder</name>
      <anchorfile>class_t_event_class.html</anchorfile>
      <anchor>aad145f7eb2c846c744496cba4ec03943</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Browse</name>
      <anchorfile>class_t_event_class.html</anchorfile>
      <anchor>a6871d54601b02285d89cd660b4b8404f</anchor>
      <arglist>(TBrowser *b)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getEventCount</name>
      <anchorfile>class_t_event_class.html</anchorfile>
      <anchor>a0bce3299dfbb7ad51573d0786013b8c0</anchor>
      <arglist>(const std::string &amp;process=&quot;&quot;) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getTotalEvents</name>
      <anchorfile>class_t_event_class.html</anchorfile>
      <anchor>adb5fa8b1f8668019506fa044f161266c</anchor>
      <arglist>(const std::string &amp;process=&quot;&quot;) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getTotalEventsUnweighted</name>
      <anchorfile>class_t_event_class.html</anchorfile>
      <anchor>ad0550dd773b68110a0f8787252e75f55</anchor>
      <arglist>(const std::string &amp;process=&quot;&quot;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setEventCount</name>
      <anchorfile>class_t_event_class.html</anchorfile>
      <anchor>af5b9df6bf7b96e6b5702a8028a5e6ba8</anchor>
      <arglist>(const std::string &amp;process, const unsigned int &amp;num)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTotalEvents</name>
      <anchorfile>class_t_event_class.html</anchorfile>
      <anchor>a1b6f49f42c261388cdc222cca20c513a</anchor>
      <arglist>(const std::string &amp;process, const double &amp;num)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTotalEventsUnweighted</name>
      <anchorfile>class_t_event_class.html</anchorfile>
      <anchor>a3613d93066ba78a7ab2e211645c3e4f7</anchor>
      <arglist>(const std::string &amp;process, const double &amp;num)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTotalEventsUnweighted</name>
      <anchorfile>class_t_event_class.html</anchorfile>
      <anchor>a1f1d52974569586392e3016e764ff62e</anchor>
      <arglist>(const std::map&lt; std::string, double &gt; &amp;nums)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addEventClass</name>
      <anchorfile>class_t_event_class.html</anchorfile>
      <anchor>a3fd1da134fd4f01fc6e98d4f56c9729c</anchor>
      <arglist>(TEventClass *ECtoBeAdded, std::set&lt; std::string &gt; &amp;processesToMerge, bool data)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::string &gt;</type>
      <name>getDistTypes</name>
      <anchorfile>class_t_event_class.html</anchorfile>
      <anchor>a51e437a7e312f6084f2ef4b5e76f2087</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getDistTypeMin</name>
      <anchorfile>class_t_event_class.html</anchorfile>
      <anchor>a64ae4640e3707503f880bb8ea9e9ca34</anchor>
      <arglist>(std::string distType) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getDistTypeMinTopo</name>
      <anchorfile>class_t_event_class.html</anchorfile>
      <anchor>a93210848b484ff313aa6b834903b8e3d</anchor>
      <arglist>(std::string distType) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getDistTypeMinRequire</name>
      <anchorfile>class_t_event_class.html</anchorfile>
      <anchor>a7111b041df0ca614a258ae8a7352f2c3</anchor>
      <arglist>(std::string distType) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isEmpty</name>
      <anchorfile>class_t_event_class.html</anchorfile>
      <anchor>a8e1da5a507dc40e547b367eb776a729b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>TH1F *</type>
      <name>getBinHisto</name>
      <anchorfile>class_t_event_class.html</anchorfile>
      <anchor>ae3b10d98db4a1f1be5293deeda16bc49</anchor>
      <arglist>(std::string distType) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>findBin</name>
      <anchorfile>class_t_event_class.html</anchorfile>
      <anchor>aa5d6145996de355042ef1d72b3294e11</anchor>
      <arglist>(std::string histname, double const xvalue) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getBinCenter</name>
      <anchorfile>class_t_event_class.html</anchorfile>
      <anchor>a37b6ef6acf60435f45ea8d7012a9bce0</anchor>
      <arglist>(std::string histname, int const bin) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getBinLowEdge</name>
      <anchorfile>class_t_event_class.html</anchorfile>
      <anchor>acd128d18ade364758a480a5068e6f7f5</anchor>
      <arglist>(std::string histname, int const bin) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNbins</name>
      <anchorfile>class_t_event_class.html</anchorfile>
      <anchor>a089ff088a59cf7a36b85bfad9be86b5a</anchor>
      <arglist>(std::string histname) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getMinBinWidth</name>
      <anchorfile>class_t_event_class.html</anchorfile>
      <anchor>a9564e888883f4144304f5e7693fee7cd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setEventCount</name>
      <anchorfile>class_t_event_class.html</anchorfile>
      <anchor>a01a62f0ca443de8f0244a3490960f068</anchor>
      <arglist>(const std::map&lt; std::string, unsigned int &gt; &amp;nums)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTotalEvents</name>
      <anchorfile>class_t_event_class.html</anchorfile>
      <anchor>a392ea73cfa79016341f1fe3ce93f37b8</anchor>
      <arglist>(const std::map&lt; std::string, double &gt; &amp;nums)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addScanResult</name>
      <anchorfile>class_t_event_class.html</anchorfile>
      <anchor>ae9223c451edc94844cc225a718531d12</anchor>
      <arglist>(std::string distribution, double nData, double nMC, double totalUncert, double lowerEdge, double width, double compareScore, bool pseudoScan, const std::vector&lt; double &gt; &amp;dicedData=std::vector&lt; double &gt;())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearSignalScanResults</name>
      <anchorfile>class_t_event_class.html</anchorfile>
      <anchor>ab9ce16406d72fb1d4253e6a2f24679e4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearPseudoScanResults</name>
      <anchorfile>class_t_event_class.html</anchorfile>
      <anchor>a432b98f4c40e746b22d02d6494b571f1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasDataScan</name>
      <anchorfile>class_t_event_class.html</anchorfile>
      <anchor>aefdae76fb81006579dbb09acdfe8aedc</anchor>
      <arglist>(std::string distribution) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNpseudoExp</name>
      <anchorfile>class_t_event_class.html</anchorfile>
      <anchor>a540f204cf9a55b030d2b617780ee4725</anchor>
      <arglist>(std::string distribution) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNsignalRounds</name>
      <anchorfile>class_t_event_class.html</anchorfile>
      <anchor>a2081808700d7094d9d5c496d06a81872</anchor>
      <arglist>(std::string distribution) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getNDataEntry</name>
      <anchorfile>class_t_event_class.html</anchorfile>
      <anchor>ac7a5d9755897986531f414c99315f67e</anchor>
      <arglist>(std::string distribution, int iSignal=0) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getNDataPseudoEntry</name>
      <anchorfile>class_t_event_class.html</anchorfile>
      <anchor>af7d3d10234b2e5bad09d02daddcda192</anchor>
      <arglist>(std::string distribution, int iPseudo=0) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getNMCEntry</name>
      <anchorfile>class_t_event_class.html</anchorfile>
      <anchor>a16243304ca6361fe6289fd01e97c3e1f</anchor>
      <arglist>(std::string distribution, int iSignal=0) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getNMCPseudoEntry</name>
      <anchorfile>class_t_event_class.html</anchorfile>
      <anchor>abe515374859cdb3d93427cb62f8de144</anchor>
      <arglist>(std::string distribution, int iPseudo=0) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getTotalUncertEntry</name>
      <anchorfile>class_t_event_class.html</anchorfile>
      <anchor>ac86912f21211761061664ff7f84b0219</anchor>
      <arglist>(std::string distribution, int iSignal=0) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getTotalUncertPseudoEntry</name>
      <anchorfile>class_t_event_class.html</anchorfile>
      <anchor>aeba645878f17208222b33906c3cafdd8</anchor>
      <arglist>(std::string distribution, int iPseudo=0) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getLowerEdgeEntry</name>
      <anchorfile>class_t_event_class.html</anchorfile>
      <anchor>aa1dde01922150d58735a29433c9a886f</anchor>
      <arglist>(std::string distribution, int iSignal=0) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getLowerEdgePseudoEntry</name>
      <anchorfile>class_t_event_class.html</anchorfile>
      <anchor>ac4bef163539551dedb7eef5e3c6d7d4e</anchor>
      <arglist>(std::string distribution, int iPseudo=0) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getWidthEntry</name>
      <anchorfile>class_t_event_class.html</anchorfile>
      <anchor>a40edf55189a898f030486a5df924506f</anchor>
      <arglist>(std::string distribution, int iSignal=0) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getWidthPseudoEntry</name>
      <anchorfile>class_t_event_class.html</anchorfile>
      <anchor>a86ec396960cb4cb5f0be598c0ac1f9ce</anchor>
      <arglist>(std::string distribution, int iPseudo=0) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getCompareEntry</name>
      <anchorfile>class_t_event_class.html</anchorfile>
      <anchor>ad2ed3a50fadde37b507a827349c64c94</anchor>
      <arglist>(std::string distribution, int iSignal=0) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getComparePseudoEntry</name>
      <anchorfile>class_t_event_class.html</anchorfile>
      <anchor>a9a6cfc20777d8b3f10bbee38ec265683</anchor>
      <arglist>(std::string distribution, int iPseudo=0) const</arglist>
    </member>
    <member kind="function">
      <type>TH1F</type>
      <name>getDicedDataHisto</name>
      <anchorfile>class_t_event_class.html</anchorfile>
      <anchor>ad1eebc1e9b90389b87c3517b4f8442c1</anchor>
      <arglist>(std::string distribution, int iSignal=0) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addChangeLogEntry</name>
      <anchorfile>class_t_event_class.html</anchorfile>
      <anchor>a3b450236336bc9792130d2a68fc5745e</anchor>
      <arglist>(std::string change)</arglist>
    </member>
    <member kind="function">
      <type>std::map&lt; std::time_t, std::pair&lt; std::string, std::set&lt; std::string &gt; &gt; &gt;</type>
      <name>getChangeLog</name>
      <anchorfile>class_t_event_class.html</anchorfile>
      <anchor>ac93922249754a0fd7ab12e0ca451b081</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mergeChangeLogs</name>
      <anchorfile>class_t_event_class.html</anchorfile>
      <anchor>a5b3402e8ddc115552b9be17df97a5941</anchor>
      <arglist>(std::map&lt; std::time_t, std::pair&lt; std::string, std::set&lt; std::string &gt;&gt;&gt; changeLogToMerge)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>calculateEventClass</name>
      <anchorfile>class_t_event_class.html</anchorfile>
      <anchor>a5b527d2b6a425e83f7f7ba3ff431220f</anchor>
      <arglist>(const std::map&lt; std::string, int &gt; countmap, const std::map&lt; std::string, int &gt; shortmap=std::map&lt; std::string, int &gt;(), std::function&lt; bool(std::string, std::string)&gt; orderFunction=[](std::string a, std::string b) { return(a&lt;=b);})</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BS::thread_pool</name>
    <filename>class_b_s_1_1thread__pool.html</filename>
    <member kind="function">
      <type></type>
      <name>thread_pool</name>
      <anchorfile>class_b_s_1_1thread__pool.html</anchorfile>
      <anchor>af0705b5edcf3809e4f133272e8070d12</anchor>
      <arglist>(const concurrency_t thread_count_=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~thread_pool</name>
      <anchorfile>class_b_s_1_1thread__pool.html</anchorfile>
      <anchor>a1f7cc32367d0d0c020bf103782506998</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>get_tasks_queued</name>
      <anchorfile>class_b_s_1_1thread__pool.html</anchorfile>
      <anchor>ab5faf242cb0eacbb5c1142a2bd966468</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>get_tasks_running</name>
      <anchorfile>class_b_s_1_1thread__pool.html</anchorfile>
      <anchor>a07b4d97e3a9e40e3228e2ed1f9a717cc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>get_tasks_total</name>
      <anchorfile>class_b_s_1_1thread__pool.html</anchorfile>
      <anchor>afdec64ff8998d66017cc185ae397e064</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>concurrency_t</type>
      <name>get_thread_count</name>
      <anchorfile>class_b_s_1_1thread__pool.html</anchorfile>
      <anchor>afe1cb80839e30f218818e99af4d1dc64</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_paused</name>
      <anchorfile>class_b_s_1_1thread__pool.html</anchorfile>
      <anchor>adc7938f7b2b9140c3f6e729b48db79b2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>multi_future&lt; R &gt;</type>
      <name>parallelize_loop</name>
      <anchorfile>class_b_s_1_1thread__pool.html</anchorfile>
      <anchor>a7567b2d637a74178f069265f969649c8</anchor>
      <arglist>(const T1 first_index, const T2 index_after_last, F &amp;&amp;loop, const size_t num_blocks=0)</arglist>
    </member>
    <member kind="function">
      <type>multi_future&lt; R &gt;</type>
      <name>parallelize_loop</name>
      <anchorfile>class_b_s_1_1thread__pool.html</anchorfile>
      <anchor>a9a1874dbd7bc21887cab0a18167ce984</anchor>
      <arglist>(const T index_after_last, F &amp;&amp;loop, const size_t num_blocks=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pause</name>
      <anchorfile>class_b_s_1_1thread__pool.html</anchorfile>
      <anchor>aefb5f1e179eb97f6458d4f77fbb331fd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push_loop</name>
      <anchorfile>class_b_s_1_1thread__pool.html</anchorfile>
      <anchor>ae7cec549d4a8729beac50f5eba3ec63f</anchor>
      <arglist>(const T1 first_index, const T2 index_after_last, F &amp;&amp;loop, const size_t num_blocks=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push_loop</name>
      <anchorfile>class_b_s_1_1thread__pool.html</anchorfile>
      <anchor>a2ffca1428e1f111220b5f9aed9ff9eac</anchor>
      <arglist>(const T index_after_last, F &amp;&amp;loop, const size_t num_blocks=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push_task</name>
      <anchorfile>class_b_s_1_1thread__pool.html</anchorfile>
      <anchor>a2ebd481672891be26e73f19f70b38e01</anchor>
      <arglist>(F &amp;&amp;task, A &amp;&amp;...args)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>class_b_s_1_1thread__pool.html</anchorfile>
      <anchor>a5d3623b19c51a513fe4612b2157b0314</anchor>
      <arglist>(const concurrency_t thread_count_=0)</arglist>
    </member>
    <member kind="function">
      <type>std::future&lt; R &gt;</type>
      <name>submit</name>
      <anchorfile>class_b_s_1_1thread__pool.html</anchorfile>
      <anchor>a49a3930b4a4094be01ba61c0a63cfffd</anchor>
      <arglist>(F &amp;&amp;task, A &amp;&amp;...args)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unpause</name>
      <anchorfile>class_b_s_1_1thread__pool.html</anchorfile>
      <anchor>ad57048e0479f878af3ac3a27031a2d6e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>wait_for_tasks</name>
      <anchorfile>class_b_s_1_1thread__pool.html</anchorfile>
      <anchor>a1e16153b1a14b5b4d8191168ccf6e4b8</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BS::timer</name>
    <filename>class_b_s_1_1timer.html</filename>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>class_b_s_1_1timer.html</anchorfile>
      <anchor>ad442341cacfb7970960a8e2090d66c10</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>stop</name>
      <anchorfile>class_b_s_1_1timer.html</anchorfile>
      <anchor>aef4f43b7877eceaaaa1a34a5b58db903</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::chrono::milliseconds::rep</type>
      <name>ms</name>
      <anchorfile>class_b_s_1_1timer.html</anchorfile>
      <anchor>a69eabae9b119282e3cb1f8a13fa02159</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>pxl::Tokenizer</name>
    <filename>classpxl_1_1_tokenizer.html</filename>
    <member kind="enumeration">
      <type></type>
      <name>CharType</name>
      <anchorfile>classpxl_1_1_tokenizer.html</anchorfile>
      <anchor>a02a5ca51c76e30f5079ea6847928ca6d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>WHITESPACE</name>
      <anchorfile>classpxl_1_1_tokenizer.html</anchorfile>
      <anchor>a02a5ca51c76e30f5079ea6847928ca6dabfe457bb4599d2e01dc5f480ae80d77f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ORDINARY</name>
      <anchorfile>classpxl_1_1_tokenizer.html</anchorfile>
      <anchor>a02a5ca51c76e30f5079ea6847928ca6da733b7359ecfb552d4eb1ff6db05ccf2e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DELIM</name>
      <anchorfile>classpxl_1_1_tokenizer.html</anchorfile>
      <anchor>a02a5ca51c76e30f5079ea6847928ca6dadbec933ad1d67e828d551c05d8a9b93d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LITERAL</name>
      <anchorfile>classpxl_1_1_tokenizer.html</anchorfile>
      <anchor>a02a5ca51c76e30f5079ea6847928ca6da91922317f8c432d1123ca23d0f162d7d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>WHITESPACE</name>
      <anchorfile>classpxl_1_1_tokenizer.html</anchorfile>
      <anchor>a02a5ca51c76e30f5079ea6847928ca6dabfe457bb4599d2e01dc5f480ae80d77f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ORDINARY</name>
      <anchorfile>classpxl_1_1_tokenizer.html</anchorfile>
      <anchor>a02a5ca51c76e30f5079ea6847928ca6da733b7359ecfb552d4eb1ff6db05ccf2e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DELIM</name>
      <anchorfile>classpxl_1_1_tokenizer.html</anchorfile>
      <anchor>a02a5ca51c76e30f5079ea6847928ca6dadbec933ad1d67e828d551c05d8a9b93d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LITERAL</name>
      <anchorfile>classpxl_1_1_tokenizer.html</anchorfile>
      <anchor>a02a5ca51c76e30f5079ea6847928ca6da91922317f8c432d1123ca23d0f162d7d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Tokenizer</name>
      <anchorfile>classpxl_1_1_tokenizer.html</anchorfile>
      <anchor>aec6834474066194d552ebe7e1757d3aa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Tokenizer</name>
      <anchorfile>classpxl_1_1_tokenizer.html</anchorfile>
      <anchor>a5029c1b9519f8849c6b151fb938fa144</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasNext</name>
      <anchorfile>classpxl_1_1_tokenizer.html</anchorfile>
      <anchor>ad1a3747b7741570316ba88342fa2e704</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>next</name>
      <anchorfile>classpxl_1_1_tokenizer.html</anchorfile>
      <anchor>a1057f1a36e756183585690afdb4ba74c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCharType</name>
      <anchorfile>classpxl_1_1_tokenizer.html</anchorfile>
      <anchor>a38b46414184a8a665bf9c311289f67d7</anchor>
      <arglist>(size_t begin, size_t end, CharType type)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCharType</name>
      <anchorfile>classpxl_1_1_tokenizer.html</anchorfile>
      <anchor>a13b641acbe35e7243e6bab78932121e9</anchor>
      <arglist>(size_t chr, CharType type)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setText</name>
      <anchorfile>classpxl_1_1_tokenizer.html</anchorfile>
      <anchor>af0f806c4cc710bc408fc458396692b43</anchor>
      <arglist>(const std::string &amp;str)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TriggerGroup</name>
    <filename>class_trigger_group.html</filename>
    <member kind="typedef">
      <type>std::vector&lt; double &gt;</type>
      <name>TriggerCuts</name>
      <anchorfile>class_trigger_group.html</anchorfile>
      <anchor>a3ad63a5664e46f62df63522601a2931c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::map&lt; std::string, TriggerCuts &gt;</type>
      <name>TriggerCutsCollection</name>
      <anchorfile>class_trigger_group.html</anchorfile>
      <anchor>a527f19abeb0f923e534b23dd579ab2a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::set&lt; std::string &gt;</type>
      <name>Triggers</name>
      <anchorfile>class_trigger_group.html</anchorfile>
      <anchor>a2eb2920e7b172d57da8b977a1d13b03a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::map&lt; std::string, bool &gt;</type>
      <name>TriggerResults</name>
      <anchorfile>class_trigger_group.html</anchorfile>
      <anchor>a48b19e99f87885ccc49829d8a178bc57</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TriggerGroup</name>
      <anchorfile>class_trigger_group.html</anchorfile>
      <anchor>a201f5439f1c85eb5771d7962fc399d5d</anchor>
      <arglist>(Tools::MConfig const &amp;cfg, std::string const &amp;triggerPrefix, std::string const &amp;groupName)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TriggerGroup</name>
      <anchorfile>class_trigger_group.html</anchorfile>
      <anchor>a75efc9705c5a7889403d566388678785</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool const  &amp;</type>
      <name>getRequire</name>
      <anchorfile>class_trigger_group.html</anchorfile>
      <anchor>a9906d66a5376a0c0302d45984ac439b0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool const  &amp;</type>
      <name>getReject</name>
      <anchorfile>class_trigger_group.html</anchorfile>
      <anchor>ac20837aae66e9d5ee275382cd0a406f3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool const</type>
      <name>getCuts</name>
      <anchorfile>class_trigger_group.html</anchorfile>
      <anchor>a7500a18eb531268be8f3a5f74113169c</anchor>
      <arglist>(std::string const &amp;particleType, TriggerCuts &amp;cuts) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNCuts</name>
      <anchorfile>class_trigger_group.html</anchorfile>
      <anchor>a4ea1bd5674f0e9dea094c25855a07ae7</anchor>
      <arglist>(std::string const &amp;particleType) const</arglist>
    </member>
    <member kind="function">
      <type>TriggerResults</type>
      <name>getTriggerResults</name>
      <anchorfile>class_trigger_group.html</anchorfile>
      <anchor>a8b45ffb92db0f532e93af1b4eb828853</anchor>
      <arglist>(pxl::EventView const *evtView) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>checkTopology</name>
      <anchorfile>class_trigger_group.html</anchorfile>
      <anchor>a19627fb99beadf6aed057a1cb08f6d40</anchor>
      <arglist>(const std::map&lt; std::string, int &gt; count_map) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>passTriggerParticles</name>
      <anchorfile>class_trigger_group.html</anchorfile>
      <anchor>a71e87ea655da1ac9046c35da45eb17d3</anchor>
      <arglist>(const std::map&lt; std::string, std::vector&lt; pxl::Particle * &gt;&gt; &amp;particleMap) const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getName</name>
      <anchorfile>class_trigger_group.html</anchorfile>
      <anchor>adf60ee8ee03683d971d29fdb7e199539</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TriggerSelector</name>
    <filename>class_trigger_selector.html</filename>
    <member kind="typedef">
      <type>std::list&lt; TriggerGroup &gt;</type>
      <name>TriggerGroupCollection</name>
      <anchorfile>class_trigger_selector.html</anchorfile>
      <anchor>a6c76e00f472d8afba0636277d201200e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TriggerSelector</name>
      <anchorfile>class_trigger_selector.html</anchorfile>
      <anchor>a58d66ead094a40169de64fcad506c1db</anchor>
      <arglist>(Tools::MConfig const &amp;cfg)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TriggerSelector</name>
      <anchorfile>class_trigger_selector.html</anchorfile>
      <anchor>aeb068111fa6037ce01a14eeb823e61e9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>passHLTrigger</name>
      <anchorfile>class_trigger_selector.html</anchorfile>
      <anchor>a341b36a1605074d4cb63d09d5ff0c306</anchor>
      <arglist>(const std::map&lt; std::string, std::vector&lt; pxl::Particle * &gt;&gt; &amp;particleMap, pxl::EventView *evtView) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>checkVeto</name>
      <anchorfile>class_trigger_selector.html</anchorfile>
      <anchor>a9dfaee40d45dd65463faaf3f19ab1a17</anchor>
      <arglist>(const std::map&lt; std::string, std::vector&lt; pxl::Particle * &gt;&gt; &amp;particleMap, pxl::EventView const *evtView) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>checkOfflineCut</name>
      <anchorfile>class_trigger_selector.html</anchorfile>
      <anchor>acdd21b3f3ab6c545e93c14771c8988fe</anchor>
      <arglist>(const std::map&lt; std::string, std::vector&lt; pxl::Particle * &gt;&gt; &amp;particleMap, pxl::EventView *evtView) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>passHLTriggerWithoutOffline</name>
      <anchorfile>class_trigger_selector.html</anchorfile>
      <anchor>a2a421078536c9f076b9b9285c79b0a80</anchor>
      <arglist>(const std::map&lt; std::string, std::vector&lt; pxl::Particle * &gt;&gt; &amp;particleMap, pxl::EventView *evtView) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>passEventTopology</name>
      <anchorfile>class_trigger_selector.html</anchorfile>
      <anchor>aeab5c6ffbdcfec035f829b5bec801814</anchor>
      <arglist>(const std::map&lt; std::string, int &gt; &amp;count_map) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TriggerStream</name>
    <filename>class_trigger_stream.html</filename>
    <member kind="function">
      <type>void</type>
      <name>addEntry</name>
      <anchorfile>class_trigger_stream.html</anchorfile>
      <anchor>a4736c9d03d8236bd5536cc83c48dbe7b</anchor>
      <arglist>(const pxl::Event *const event)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeUniqueTriggers</name>
      <anchorfile>class_trigger_stream.html</anchorfile>
      <anchor>ac9cd5020686a905cefaf49f509d8b9c7</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Tools::unsorted_error</name>
    <filename>class_tools_1_1unsorted__error.html</filename>
    <base>std::runtime_error</base>
    <member kind="function">
      <type></type>
      <name>unsorted_error</name>
      <anchorfile>class_tools_1_1unsorted__error.html</anchorfile>
      <anchor>a17c49c7d749f66456fc9b84e7356808e</anchor>
      <arglist>(std::string const &amp;msg)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>pxl::UserRecordHelper</name>
    <filename>classpxl_1_1_user_record_helper.html</filename>
    <member kind="function">
      <type>const UserRecords &amp;</type>
      <name>getUserRecords</name>
      <anchorfile>classpxl_1_1_user_record_helper.html</anchorfile>
      <anchor>ab7d2e9d7fd53f986163bff24ed9ec2e3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setUserRecords</name>
      <anchorfile>classpxl_1_1_user_record_helper.html</anchorfile>
      <anchor>a8bc754ecfd9c00f2a2ccb6395ac0891d</anchor>
      <arglist>(const UserRecords &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>UserRecords &amp;</type>
      <name>getUserRecords</name>
      <anchorfile>classpxl_1_1_user_record_helper.html</anchorfile>
      <anchor>aed523d427700d001e76af09b138f3355</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setUserRecord</name>
      <anchorfile>classpxl_1_1_user_record_helper.html</anchorfile>
      <anchor>af3ecea27c07445ab7dab72987672a8fd</anchor>
      <arglist>(const std::string &amp;key, const Variant &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>eraseUserRecord</name>
      <anchorfile>classpxl_1_1_user_record_helper.html</anchorfile>
      <anchor>a558dd61337c50bfd93af44f1c65867d7</anchor>
      <arglist>(const std::string &amp;key)</arglist>
    </member>
    <member kind="function">
      <type>const Variant &amp;</type>
      <name>getUserRecord</name>
      <anchorfile>classpxl_1_1_user_record_helper.html</anchorfile>
      <anchor>a0c4e05e6defb9e4eabb75a1aef41d300</anchor>
      <arglist>(const std::string &amp;key) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getUserRecord</name>
      <anchorfile>classpxl_1_1_user_record_helper.html</anchorfile>
      <anchor>a3df9f904d21e126a0527a81663f13ae8</anchor>
      <arglist>(const std::string &amp;key, datatype &amp;item) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasUserRecord</name>
      <anchorfile>classpxl_1_1_user_record_helper.html</anchorfile>
      <anchor>aeae48d210cf0dfd2a52fb7adcfc4bb41</anchor>
      <arglist>(const std::string &amp;key) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>serialize</name>
      <anchorfile>classpxl_1_1_user_record_helper.html</anchorfile>
      <anchor>a6ce991830a4d06ab8f721030f86dbedd</anchor>
      <arglist>(const OutputStream &amp;out) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deserialize</name>
      <anchorfile>classpxl_1_1_user_record_helper.html</anchorfile>
      <anchor>ac4df0c6feadb16c29eba40f85bf078a5</anchor>
      <arglist>(const InputStream &amp;in)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>pxl::UserRecords</name>
    <filename>classpxl_1_1_user_records.html</filename>
    <member kind="typedef">
      <type>std::map&lt; std::string, Variant &gt;</type>
      <name>map_type</name>
      <anchorfile>classpxl_1_1_user_records.html</anchorfile>
      <anchor>a3a711033a2497e3ee4c16d12bd265f32</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>map_type::const_iterator</type>
      <name>const_iterator</name>
      <anchorfile>classpxl_1_1_user_records.html</anchorfile>
      <anchor>a2bc94309c3210f8e73cf06ccf2a787da</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>map_type::iterator</type>
      <name>iterator</name>
      <anchorfile>classpxl_1_1_user_records.html</anchorfile>
      <anchor>a24e339170ae0bb81287cc81b8c67f2fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UserRecords</name>
      <anchorfile>classpxl_1_1_user_records.html</anchorfile>
      <anchor>a587eb03b9ec1aeabcd94a598b5220359</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UserRecords</name>
      <anchorfile>classpxl_1_1_user_records.html</anchorfile>
      <anchor>a0597ebd643781bb5fb56ebf957977fe7</anchor>
      <arglist>(const UserRecords &amp;original)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UserRecords</name>
      <anchorfile>classpxl_1_1_user_records.html</anchorfile>
      <anchor>abb02bd961be2cc953aeaa311bf98c644</anchor>
      <arglist>(const UserRecords *original)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~UserRecords</name>
      <anchorfile>classpxl_1_1_user_records.html</anchorfile>
      <anchor>a870859067830554c7383a633f6244545</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>serialize</name>
      <anchorfile>classpxl_1_1_user_records.html</anchorfile>
      <anchor>a50492c7ba3b7aecaa962a728ac0a47a4</anchor>
      <arglist>(const OutputStream &amp;out) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deserialize</name>
      <anchorfile>classpxl_1_1_user_records.html</anchorfile>
      <anchor>a8854db87fef6c07c77f92d0f0fbbeded</anchor>
      <arglist>(const InputStream &amp;in)</arglist>
    </member>
    <member kind="function">
      <type>UserRecords &amp;</type>
      <name>operator=</name>
      <anchorfile>classpxl_1_1_user_records.html</anchorfile>
      <anchor>a38ec65e1272849dcdfcab1d3db2dfc3f</anchor>
      <arglist>(const UserRecords &amp;original)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classpxl_1_1_user_records.html</anchorfile>
      <anchor>ac61f8d199e1bc9347e49c46669ebddb2</anchor>
      <arglist>(const std::string &amp;key, const Variant &amp;item)</arglist>
    </member>
    <member kind="function">
      <type>const Variant &amp;</type>
      <name>get</name>
      <anchorfile>classpxl_1_1_user_records.html</anchorfile>
      <anchor>a20fb421ccdf6eec3a14d6499263f41ad</anchor>
      <arglist>(const std::string &amp;key) const</arglist>
    </member>
    <member kind="function">
      <type>Variant *</type>
      <name>find</name>
      <anchorfile>classpxl_1_1_user_records.html</anchorfile>
      <anchor>a5df9dc31ad2909bfc716c9ca695da5c9</anchor>
      <arglist>(const std::string &amp;key)</arglist>
    </member>
    <member kind="function">
      <type>const Variant *</type>
      <name>find</name>
      <anchorfile>classpxl_1_1_user_records.html</anchorfile>
      <anchor>a65cb5aa66408220622502777f7d59f9f</anchor>
      <arglist>(const std::string &amp;key) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has</name>
      <anchorfile>classpxl_1_1_user_records.html</anchorfile>
      <anchor>a582087c33460078ec7a838019b7e8370</anchor>
      <arglist>(const std::string &amp;key) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get</name>
      <anchorfile>classpxl_1_1_user_records.html</anchorfile>
      <anchor>a99de14017b0e38c87ee2c1b0735773b6</anchor>
      <arglist>(const std::string &amp;key, datatype &amp;item) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>change</name>
      <anchorfile>classpxl_1_1_user_records.html</anchorfile>
      <anchor>ad383ab3962275c15f9abc2b027f37c8d</anchor>
      <arglist>(const std::string &amp;key, datatype item)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classpxl_1_1_user_records.html</anchorfile>
      <anchor>ae34d1e21fc9c292ae03f793214891426</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>erase</name>
      <anchorfile>classpxl_1_1_user_records.html</anchorfile>
      <anchor>aa426bbe3308333963b46c8b96282971e</anchor>
      <arglist>(const std::string &amp;key)</arglist>
    </member>
    <member kind="function">
      <type>const std::map&lt; std::string, Variant &gt; *</type>
      <name>getContainer</name>
      <anchorfile>classpxl_1_1_user_records.html</anchorfile>
      <anchor>a36ff99dfad187a1c9f8d7968ecd41da4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>begin</name>
      <anchorfile>classpxl_1_1_user_records.html</anchorfile>
      <anchor>ab804bd9bdc659dc5123fda46338d30c9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>end</name>
      <anchorfile>classpxl_1_1_user_records.html</anchorfile>
      <anchor>a46dd26aedc570a878e7e1a83cfffd0b6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>size</name>
      <anchorfile>classpxl_1_1_user_records.html</anchorfile>
      <anchor>a466d54116564d85f10052039f90f91d8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>print</name>
      <anchorfile>classpxl_1_1_user_records.html</anchorfile>
      <anchor>a12673fb7cf40ff6b37a36c018c793c8d</anchor>
      <arglist>(int level=0, std::ostream &amp;os=std::cout, int pan=0) const</arglist>
    </member>
    <member kind="function">
      <type>const std::string</type>
      <name>toString</name>
      <anchorfile>classpxl_1_1_user_records.html</anchorfile>
      <anchor>a57fd421b60bf4e70e3983cd1a04f4576</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ValidComparison</name>
    <filename>class_valid_comparison.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="enumvalue">
      <name>method</name>
      <anchorfile>class_valid_comparison.html</anchorfile>
      <anchor>a9ab54c0747e98a31b1848d20f4d282baa226bb2c99170020486fa75a3991bca48</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>method</name>
      <anchorfile>class_valid_comparison.html</anchorfile>
      <anchor>a9ab54c0747e98a31b1848d20f4d282baa226bb2c99170020486fa75a3991bca48</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Tools::value_error</name>
    <filename>class_tools_1_1value__error.html</filename>
    <base>std::runtime_error</base>
    <member kind="function">
      <type></type>
      <name>value_error</name>
      <anchorfile>class_tools_1_1value__error.html</anchorfile>
      <anchor>a42e7e08c8cf2bff8689f72a9265fb082</anchor>
      <arglist>(std::string const &amp;msg)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>pxl::Variant</name>
    <filename>classpxl_1_1_variant.html</filename>
    <class kind="class">pxl::Variant::bad_conversion</class>
    <member kind="enumeration">
      <type></type>
      <name>Type</name>
      <anchorfile>classpxl_1_1_variant.html</anchorfile>
      <anchor>acf937eaa6d1adaf7f9666edc32d3a7c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TYPE_NONE</name>
      <anchorfile>classpxl_1_1_variant.html</anchorfile>
      <anchor>acf937eaa6d1adaf7f9666edc32d3a7c5a7831144bef98da8c9e0bce274153d941</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TYPE_BOOL</name>
      <anchorfile>classpxl_1_1_variant.html</anchorfile>
      <anchor>acf937eaa6d1adaf7f9666edc32d3a7c5a6289bca89bf5ec6a6695f1e207073311</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TYPE_CHAR</name>
      <anchorfile>classpxl_1_1_variant.html</anchorfile>
      <anchor>acf937eaa6d1adaf7f9666edc32d3a7c5a758deb880e07c9d8b2ab9f1d5fcef7ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TYPE_UCHAR</name>
      <anchorfile>classpxl_1_1_variant.html</anchorfile>
      <anchor>acf937eaa6d1adaf7f9666edc32d3a7c5afe8e1df13e55044d1c59b6919bffd37d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TYPE_INT16</name>
      <anchorfile>classpxl_1_1_variant.html</anchorfile>
      <anchor>acf937eaa6d1adaf7f9666edc32d3a7c5abcc7f2e89abc54364458d3fbeff484fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TYPE_UINT16</name>
      <anchorfile>classpxl_1_1_variant.html</anchorfile>
      <anchor>acf937eaa6d1adaf7f9666edc32d3a7c5aedc36ff59096526c4a80285b188f4078</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TYPE_INT32</name>
      <anchorfile>classpxl_1_1_variant.html</anchorfile>
      <anchor>acf937eaa6d1adaf7f9666edc32d3a7c5a5c93b98fcb5b3236b9a9f293c6330eb7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TYPE_UINT32</name>
      <anchorfile>classpxl_1_1_variant.html</anchorfile>
      <anchor>acf937eaa6d1adaf7f9666edc32d3a7c5a248f43912a60f996ae8fd7651af30250</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TYPE_INT64</name>
      <anchorfile>classpxl_1_1_variant.html</anchorfile>
      <anchor>acf937eaa6d1adaf7f9666edc32d3a7c5ad04d9ce0b5d31195895798c54ded4a76</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TYPE_UINT64</name>
      <anchorfile>classpxl_1_1_variant.html</anchorfile>
      <anchor>acf937eaa6d1adaf7f9666edc32d3a7c5aaf03074237409ea6c2dd834fc49ffc4a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TYPE_FLOAT</name>
      <anchorfile>classpxl_1_1_variant.html</anchorfile>
      <anchor>acf937eaa6d1adaf7f9666edc32d3a7c5aaa968ff564a36c640643afc8cd39caaf</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TYPE_DOUBLE</name>
      <anchorfile>classpxl_1_1_variant.html</anchorfile>
      <anchor>acf937eaa6d1adaf7f9666edc32d3a7c5a3d5adaffa784926fde22a1b6140d5910</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TYPE_STRING</name>
      <anchorfile>classpxl_1_1_variant.html</anchorfile>
      <anchor>acf937eaa6d1adaf7f9666edc32d3a7c5ab6b54ca2fa4e88cf921efc76f6538625</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TYPE_SERIALIZABLE</name>
      <anchorfile>classpxl_1_1_variant.html</anchorfile>
      <anchor>acf937eaa6d1adaf7f9666edc32d3a7c5a835057bfaf06235736f629911f42835d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TYPE_BASIC3VECTOR</name>
      <anchorfile>classpxl_1_1_variant.html</anchorfile>
      <anchor>acf937eaa6d1adaf7f9666edc32d3a7c5a1555ac39d01efdf3e4020331d2864811</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TYPE_LORENTZVECTOR</name>
      <anchorfile>classpxl_1_1_variant.html</anchorfile>
      <anchor>acf937eaa6d1adaf7f9666edc32d3a7c5a690e3693143448e199232068a3307d39</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TYPE_VECTOR</name>
      <anchorfile>classpxl_1_1_variant.html</anchorfile>
      <anchor>acf937eaa6d1adaf7f9666edc32d3a7c5ae26dbaba10d56df2834d758f5c3c0b91</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TYPE_NONE</name>
      <anchorfile>classpxl_1_1_variant.html</anchorfile>
      <anchor>acf937eaa6d1adaf7f9666edc32d3a7c5a7831144bef98da8c9e0bce274153d941</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TYPE_BOOL</name>
      <anchorfile>classpxl_1_1_variant.html</anchorfile>
      <anchor>acf937eaa6d1adaf7f9666edc32d3a7c5a6289bca89bf5ec6a6695f1e207073311</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TYPE_CHAR</name>
      <anchorfile>classpxl_1_1_variant.html</anchorfile>
      <anchor>acf937eaa6d1adaf7f9666edc32d3a7c5a758deb880e07c9d8b2ab9f1d5fcef7ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TYPE_UCHAR</name>
      <anchorfile>classpxl_1_1_variant.html</anchorfile>
      <anchor>acf937eaa6d1adaf7f9666edc32d3a7c5afe8e1df13e55044d1c59b6919bffd37d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TYPE_INT16</name>
      <anchorfile>classpxl_1_1_variant.html</anchorfile>
      <anchor>acf937eaa6d1adaf7f9666edc32d3a7c5abcc7f2e89abc54364458d3fbeff484fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TYPE_UINT16</name>
      <anchorfile>classpxl_1_1_variant.html</anchorfile>
      <anchor>acf937eaa6d1adaf7f9666edc32d3a7c5aedc36ff59096526c4a80285b188f4078</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TYPE_INT32</name>
      <anchorfile>classpxl_1_1_variant.html</anchorfile>
      <anchor>acf937eaa6d1adaf7f9666edc32d3a7c5a5c93b98fcb5b3236b9a9f293c6330eb7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TYPE_UINT32</name>
      <anchorfile>classpxl_1_1_variant.html</anchorfile>
      <anchor>acf937eaa6d1adaf7f9666edc32d3a7c5a248f43912a60f996ae8fd7651af30250</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TYPE_INT64</name>
      <anchorfile>classpxl_1_1_variant.html</anchorfile>
      <anchor>acf937eaa6d1adaf7f9666edc32d3a7c5ad04d9ce0b5d31195895798c54ded4a76</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TYPE_UINT64</name>
      <anchorfile>classpxl_1_1_variant.html</anchorfile>
      <anchor>acf937eaa6d1adaf7f9666edc32d3a7c5aaf03074237409ea6c2dd834fc49ffc4a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TYPE_FLOAT</name>
      <anchorfile>classpxl_1_1_variant.html</anchorfile>
      <anchor>acf937eaa6d1adaf7f9666edc32d3a7c5aaa968ff564a36c640643afc8cd39caaf</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TYPE_DOUBLE</name>
      <anchorfile>classpxl_1_1_variant.html</anchorfile>
      <anchor>acf937eaa6d1adaf7f9666edc32d3a7c5a3d5adaffa784926fde22a1b6140d5910</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TYPE_STRING</name>
      <anchorfile>classpxl_1_1_variant.html</anchorfile>
      <anchor>acf937eaa6d1adaf7f9666edc32d3a7c5ab6b54ca2fa4e88cf921efc76f6538625</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TYPE_SERIALIZABLE</name>
      <anchorfile>classpxl_1_1_variant.html</anchorfile>
      <anchor>acf937eaa6d1adaf7f9666edc32d3a7c5a835057bfaf06235736f629911f42835d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TYPE_BASIC3VECTOR</name>
      <anchorfile>classpxl_1_1_variant.html</anchorfile>
      <anchor>acf937eaa6d1adaf7f9666edc32d3a7c5a1555ac39d01efdf3e4020331d2864811</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TYPE_LORENTZVECTOR</name>
      <anchorfile>classpxl_1_1_variant.html</anchorfile>
      <anchor>acf937eaa6d1adaf7f9666edc32d3a7c5a690e3693143448e199232068a3307d39</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TYPE_VECTOR</name>
      <anchorfile>classpxl_1_1_variant.html</anchorfile>
      <anchor>acf937eaa6d1adaf7f9666edc32d3a7c5ae26dbaba10d56df2834d758f5c3c0b91</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Variant</name>
      <anchorfile>classpxl_1_1_variant.html</anchorfile>
      <anchor>ac4ef8e97f854c803da461c6f4bd02122</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Variant</name>
      <anchorfile>classpxl_1_1_variant.html</anchorfile>
      <anchor>a21ac4ad46db94d6703ef9f4cd07891f6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Variant</name>
      <anchorfile>classpxl_1_1_variant.html</anchorfile>
      <anchor>a53c5ab81ae31fb5d82b961df2e218161</anchor>
      <arglist>(const Variant &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>const std::type_info &amp;</type>
      <name>getTypeInfo</name>
      <anchorfile>classpxl_1_1_variant.html</anchorfile>
      <anchor>a89032f9e4cbf3fc8a46177f8035cecc6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getTypeName</name>
      <anchorfile>classpxl_1_1_variant.html</anchorfile>
      <anchor>a9546ab2947683bf12fcf49e11b8846be</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>to</name>
      <anchorfile>classpxl_1_1_variant.html</anchorfile>
      <anchor>aa4648eb4247646dde55eeaadec7a3ac6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Type</type>
      <name>getType</name>
      <anchorfile>classpxl_1_1_variant.html</anchorfile>
      <anchor>a3d23f19017608dab2aef760821084c0b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classpxl_1_1_variant.html</anchorfile>
      <anchor>a0a184604bd3e347df96bb821bf27b7dd</anchor>
      <arglist>(const Variant &amp;a) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classpxl_1_1_variant.html</anchorfile>
      <anchor>aded073005621517184516a2c5efc7bbc</anchor>
      <arglist>(const Variant &amp;a) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>classpxl_1_1_variant.html</anchorfile>
      <anchor>a5ee0ae617e0105b8c7b2ac8dbabf8be4</anchor>
      <arglist>(const Variant &amp;a) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;=</name>
      <anchorfile>classpxl_1_1_variant.html</anchorfile>
      <anchor>a0576ae7bf193d8ce655411c76e5725d7</anchor>
      <arglist>(const Variant &amp;a) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>classpxl_1_1_variant.html</anchorfile>
      <anchor>a93c876befcc9abc8203a970f937bf8ab</anchor>
      <arglist>(const Variant &amp;a) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;=</name>
      <anchorfile>classpxl_1_1_variant.html</anchorfile>
      <anchor>a22db0f65d7106d325dfd2defa286188e</anchor>
      <arglist>(const Variant &amp;a) const</arglist>
    </member>
    <member kind="function">
      <type>Variant &amp;</type>
      <name>operator=</name>
      <anchorfile>classpxl_1_1_variant.html</anchorfile>
      <anchor>a4079fd9bb835f1e99dc1a6974b695dcd</anchor>
      <arglist>(const Variant &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>classpxl_1_1_variant.html</anchorfile>
      <anchor>a31c3cea53ed313b2117225d2309d76c3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isBool</name>
      <anchorfile>classpxl_1_1_variant.html</anchorfile>
      <anchor>a8479760d43e0ead6c774cf655b425844</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator bool</name>
      <anchorfile>classpxl_1_1_variant.html</anchorfile>
      <anchor>a650d7eb838bfa2d21f3cbaa57f11007d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool &amp;</type>
      <name>asBool</name>
      <anchorfile>classpxl_1_1_variant.html</anchorfile>
      <anchor>a79418b2cf57082ad74f0e6518ce177c8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const bool &amp;</type>
      <name>asBool</name>
      <anchorfile>classpxl_1_1_variant.html</anchorfile>
      <anchor>aaa9c01b77728b6dfa8fbdb1d7f952e8c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>toBool</name>
      <anchorfile>classpxl_1_1_variant.html</anchorfile>
      <anchor>afa64adbb8932d8573550338aff926d51</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Variant &amp;</type>
      <name>operator=</name>
      <anchorfile>classpxl_1_1_variant.html</anchorfile>
      <anchor>a454054812cb1c9a93674af32e93f3cf5</anchor>
      <arglist>(const bool &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classpxl_1_1_variant.html</anchorfile>
      <anchor>aa51a98266d78d7ecaa369ff9ee998b40</anchor>
      <arglist>(const bool &amp;a) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classpxl_1_1_variant.html</anchorfile>
      <anchor>a852c96bdb0a75d14ede8f37550e37288</anchor>
      <arglist>(const bool &amp;a) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Variant</name>
      <anchorfile>classpxl_1_1_variant.html</anchorfile>
      <anchor>a9ee3acfb3fc97abcfa232990e14c8610</anchor>
      <arglist>(const bool &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isChar</name>
      <anchorfile>classpxl_1_1_variant.html</anchorfile>
      <anchor>afb5fc0bebb77665b7727706dd1376b3d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator char</name>
      <anchorfile>classpxl_1_1_variant.html</anchorfile>
      <anchor>ae37b7f2639fe8cae2e32550cf208570c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>char &amp;</type>
      <name>asChar</name>
      <anchorfile>classpxl_1_1_variant.html</anchorfile>
      <anchor>a2b91e3d979f9d89c0213c8af7d7dff88</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const char &amp;</type>
      <name>asChar</name>
      <anchorfile>classpxl_1_1_variant.html</anchorfile>
      <anchor>abd5e43838f9148ee5f57930217787f21</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>char</type>
      <name>toChar</name>
      <anchorfile>classpxl_1_1_variant.html</anchorfile>
      <anchor>aeabf7db016b28bf95002f3a0d465ff23</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Variant &amp;</type>
      <name>operator=</name>
      <anchorfile>classpxl_1_1_variant.html</anchorfile>
      <anchor>a251c3ec4db77f74e24e52c7e60582660</anchor>
      <arglist>(const char &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classpxl_1_1_variant.html</anchorfile>
      <anchor>a4afecf269375c809203b85b08da76d41</anchor>
      <arglist>(const char &amp;a) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classpxl_1_1_variant.html</anchorfile>
      <anchor>a750f9637878fd1350d9cfc082dc5ac59</anchor>
      <arglist>(const char &amp;a) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Variant</name>
      <anchorfile>classpxl_1_1_variant.html</anchorfile>
      <anchor>a9c636f38700e7cb14aaadcb8e3e1d12d</anchor>
      <arglist>(const char &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isUChar</name>
      <anchorfile>classpxl_1_1_variant.html</anchorfile>
      <anchor>a98f9f55ec79ae4e3df6c81f2ec857fe3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator unsigned char</name>
      <anchorfile>classpxl_1_1_variant.html</anchorfile>
      <anchor>a482b6783b17d9618c8804a198cc7815b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned char &amp;</type>
      <name>asUChar</name>
      <anchorfile>classpxl_1_1_variant.html</anchorfile>
      <anchor>abe98ea474950b8b06c27cf30c46ae301</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const unsigned char &amp;</type>
      <name>asUChar</name>
      <anchorfile>classpxl_1_1_variant.html</anchorfile>
      <anchor>ab2e9d6ceec51bad5c6eb92438fa226b5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned char</type>
      <name>toUChar</name>
      <anchorfile>classpxl_1_1_variant.html</anchorfile>
      <anchor>a92952c3e34c6187417db651467aede3e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Variant &amp;</type>
      <name>operator=</name>
      <anchorfile>classpxl_1_1_variant.html</anchorfile>
      <anchor>aa2561fffb451fa124ed3e442735f2568</anchor>
      <arglist>(const unsigned char &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classpxl_1_1_variant.html</anchorfile>
      <anchor>a6deff52eeb39f585d977ca0fb30622da</anchor>
      <arglist>(const unsigned char &amp;a) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classpxl_1_1_variant.html</anchorfile>
      <anchor>a871f13d072fe71f6ef8217eb3a0cdc1b</anchor>
      <arglist>(const unsigned char &amp;a) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Variant</name>
      <anchorfile>classpxl_1_1_variant.html</anchorfile>
      <anchor>afd999bff7b26921f6cb22ee7688c94d6</anchor>
      <arglist>(const unsigned char &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isInt16</name>
      <anchorfile>classpxl_1_1_variant.html</anchorfile>
      <anchor>a9ef931263c6f64e0eaa6339f51732407</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator int16_t</name>
      <anchorfile>classpxl_1_1_variant.html</anchorfile>
      <anchor>af86a26fc953e4eeb1051d9e0f31351bd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int16_t &amp;</type>
      <name>asInt16</name>
      <anchorfile>classpxl_1_1_variant.html</anchorfile>
      <anchor>a337febb775db310f899d87f827aa198a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const int16_t &amp;</type>
      <name>asInt16</name>
      <anchorfile>classpxl_1_1_variant.html</anchorfile>
      <anchor>aaa60a0923b485cd723ca544a9ca27af0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int16_t</type>
      <name>toInt16</name>
      <anchorfile>classpxl_1_1_variant.html</anchorfile>
      <anchor>a8b366a91ac2a369cda076b52b4e94ab5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Variant &amp;</type>
      <name>operator=</name>
      <anchorfile>classpxl_1_1_variant.html</anchorfile>
      <anchor>ab0c79d0c388c3694305f2056426672cf</anchor>
      <arglist>(const int16_t &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classpxl_1_1_variant.html</anchorfile>
      <anchor>a1450d9e955bec60d6fe5b7498d855107</anchor>
      <arglist>(const int16_t &amp;a) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classpxl_1_1_variant.html</anchorfile>
      <anchor>a8496392c6dbd7dbeaf6e20208be1b762</anchor>
      <arglist>(const int16_t &amp;a) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Variant</name>
      <anchorfile>classpxl_1_1_variant.html</anchorfile>
      <anchor>a59c60e8c2c14ee21d05a285781c1b2a5</anchor>
      <arglist>(const int16_t &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isUInt16</name>
      <anchorfile>classpxl_1_1_variant.html</anchorfile>
      <anchor>a229e2e9ff04d62e8b402370525d07c88</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator uint16_t</name>
      <anchorfile>classpxl_1_1_variant.html</anchorfile>
      <anchor>a47484520ec2b3733ee2e707eac60fd99</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>uint16_t &amp;</type>
      <name>asUInt16</name>
      <anchorfile>classpxl_1_1_variant.html</anchorfile>
      <anchor>aa11562b9461db68d30db0431d11389b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const uint16_t &amp;</type>
      <name>asUInt16</name>
      <anchorfile>classpxl_1_1_variant.html</anchorfile>
      <anchor>a2515a8d450aaa1d7dbb2901fc9c779e7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>uint16_t</type>
      <name>toUInt16</name>
      <anchorfile>classpxl_1_1_variant.html</anchorfile>
      <anchor>ae1914708928fa46c2301703a66d64d9a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Variant &amp;</type>
      <name>operator=</name>
      <anchorfile>classpxl_1_1_variant.html</anchorfile>
      <anchor>af6346750e4cfb4e0a22f1170c5b706dd</anchor>
      <arglist>(const uint16_t &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classpxl_1_1_variant.html</anchorfile>
      <anchor>a3b971f6a08b736d53e360098fa7ae956</anchor>
      <arglist>(const uint16_t &amp;a) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classpxl_1_1_variant.html</anchorfile>
      <anchor>a1766030bf35c2a292b9855385b28467b</anchor>
      <arglist>(const uint16_t &amp;a) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Variant</name>
      <anchorfile>classpxl_1_1_variant.html</anchorfile>
      <anchor>a0b9d204eec30d69496c7a5bbf81e4fad</anchor>
      <arglist>(const uint16_t &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isInt32</name>
      <anchorfile>classpxl_1_1_variant.html</anchorfile>
      <anchor>a5b00d4d7444898d6c62bf60c1367c2b1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator int32_t</name>
      <anchorfile>classpxl_1_1_variant.html</anchorfile>
      <anchor>af0f608be9ea53b5c4223391d615a9e1c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int32_t &amp;</type>
      <name>asInt32</name>
      <anchorfile>classpxl_1_1_variant.html</anchorfile>
      <anchor>a756c25dea11160a6fdf85799b3710e0a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const int32_t &amp;</type>
      <name>asInt32</name>
      <anchorfile>classpxl_1_1_variant.html</anchorfile>
      <anchor>aec58c54deda59bdef1c87e5b1b4e7e94</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>toInt32</name>
      <anchorfile>classpxl_1_1_variant.html</anchorfile>
      <anchor>a78dda87fd1e51bb62074bdcd4e0a628d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Variant &amp;</type>
      <name>operator=</name>
      <anchorfile>classpxl_1_1_variant.html</anchorfile>
      <anchor>a2b1947148a0933f8698e20437214c8d1</anchor>
      <arglist>(const int32_t &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classpxl_1_1_variant.html</anchorfile>
      <anchor>ab84328610df946fcd4d33ffb6aef6502</anchor>
      <arglist>(const int32_t &amp;a) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classpxl_1_1_variant.html</anchorfile>
      <anchor>afd07825be1c694de810a8ac0eb5ece89</anchor>
      <arglist>(const int32_t &amp;a) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Variant</name>
      <anchorfile>classpxl_1_1_variant.html</anchorfile>
      <anchor>a1691d22b4bd6fb301493ac4621e8e70a</anchor>
      <arglist>(const int32_t &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isUInt32</name>
      <anchorfile>classpxl_1_1_variant.html</anchorfile>
      <anchor>aad356d680813eecef87a8293cc8dcfc2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator uint32_t</name>
      <anchorfile>classpxl_1_1_variant.html</anchorfile>
      <anchor>a672bd60bc8102f81585a2f4fc0eade9c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>uint32_t &amp;</type>
      <name>asUInt32</name>
      <anchorfile>classpxl_1_1_variant.html</anchorfile>
      <anchor>a9172225cebeb5a4798d90b327c3fa698</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const uint32_t &amp;</type>
      <name>asUInt32</name>
      <anchorfile>classpxl_1_1_variant.html</anchorfile>
      <anchor>a11c324c521fbad52584851976df246aa</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>uint32_t</type>
      <name>toUInt32</name>
      <anchorfile>classpxl_1_1_variant.html</anchorfile>
      <anchor>ab6396c0ad2f5052f1a66ec54eb4c3c34</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Variant &amp;</type>
      <name>operator=</name>
      <anchorfile>classpxl_1_1_variant.html</anchorfile>
      <anchor>a6e017e3fc61638e91d5585a0fb9a87de</anchor>
      <arglist>(const uint32_t &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classpxl_1_1_variant.html</anchorfile>
      <anchor>a576cf6d3773b34d2f16faf89b2423965</anchor>
      <arglist>(const uint32_t &amp;a) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classpxl_1_1_variant.html</anchorfile>
      <anchor>abe77e19de2588ed415fe2e44d2622908</anchor>
      <arglist>(const uint32_t &amp;a) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Variant</name>
      <anchorfile>classpxl_1_1_variant.html</anchorfile>
      <anchor>a7e85e4a641f4405504e2390aa0392357</anchor>
      <arglist>(const uint32_t &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isInt64</name>
      <anchorfile>classpxl_1_1_variant.html</anchorfile>
      <anchor>a4ecaf673a6b1b518a30fa3e7acf4d818</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator int64_t</name>
      <anchorfile>classpxl_1_1_variant.html</anchorfile>
      <anchor>adf841be5ff196e40c4765b5dbf1c14f0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int64_t &amp;</type>
      <name>asInt64</name>
      <anchorfile>classpxl_1_1_variant.html</anchorfile>
      <anchor>ae444f4387e18dc11dda8e5a1cecd8824</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const int64_t &amp;</type>
      <name>asInt64</name>
      <anchorfile>classpxl_1_1_variant.html</anchorfile>
      <anchor>a78d39ae8499085d488f450829fcaf34e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int64_t</type>
      <name>toInt64</name>
      <anchorfile>classpxl_1_1_variant.html</anchorfile>
      <anchor>a1dbb8f7a19dab9c5e3556746450aa8cf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Variant &amp;</type>
      <name>operator=</name>
      <anchorfile>classpxl_1_1_variant.html</anchorfile>
      <anchor>a2cca255f6c3af522f0554423e9e5c24f</anchor>
      <arglist>(const int64_t &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classpxl_1_1_variant.html</anchorfile>
      <anchor>abe2a13c5631c58fc09a0bab7c4a2100d</anchor>
      <arglist>(const int64_t &amp;a) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classpxl_1_1_variant.html</anchorfile>
      <anchor>a4a86b72020283813924be2e978607adc</anchor>
      <arglist>(const int64_t &amp;a) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Variant</name>
      <anchorfile>classpxl_1_1_variant.html</anchorfile>
      <anchor>ac3e779d2cf50c9627fb9ed1513660f1e</anchor>
      <arglist>(const int64_t &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isUInt64</name>
      <anchorfile>classpxl_1_1_variant.html</anchorfile>
      <anchor>accce3efe3aa1cde37a9530a3af988419</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator uint64_t</name>
      <anchorfile>classpxl_1_1_variant.html</anchorfile>
      <anchor>a757d632cef78d5401e6190b1fff93b1c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>uint64_t &amp;</type>
      <name>asUInt64</name>
      <anchorfile>classpxl_1_1_variant.html</anchorfile>
      <anchor>a0674bd6fc1116612bd1d999bbc581918</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const uint64_t &amp;</type>
      <name>asUInt64</name>
      <anchorfile>classpxl_1_1_variant.html</anchorfile>
      <anchor>a33fa1dc99a9444ee3f8b275288710e78</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>uint64_t</type>
      <name>toUInt64</name>
      <anchorfile>classpxl_1_1_variant.html</anchorfile>
      <anchor>ac1ad72da1b18426f2a09ad5e42946986</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Variant &amp;</type>
      <name>operator=</name>
      <anchorfile>classpxl_1_1_variant.html</anchorfile>
      <anchor>ae50f5bb3d975aac97c4e1d7dc2bb945b</anchor>
      <arglist>(const uint64_t &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classpxl_1_1_variant.html</anchorfile>
      <anchor>a205b5f132c4450694739cb325ff3320f</anchor>
      <arglist>(const uint64_t &amp;a) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classpxl_1_1_variant.html</anchorfile>
      <anchor>ae12c59126453c35d269e8e6784f5f757</anchor>
      <arglist>(const uint64_t &amp;a) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Variant</name>
      <anchorfile>classpxl_1_1_variant.html</anchorfile>
      <anchor>afba8823561fefcf339ea2628e3dfbb0d</anchor>
      <arglist>(const uint64_t &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isFloat</name>
      <anchorfile>classpxl_1_1_variant.html</anchorfile>
      <anchor>ace80c6c29d20303f2c0eb33fb1d35026</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator float</name>
      <anchorfile>classpxl_1_1_variant.html</anchorfile>
      <anchor>ad8ae4fb247a616a4dd1feab1ed652df8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>float &amp;</type>
      <name>asFloat</name>
      <anchorfile>classpxl_1_1_variant.html</anchorfile>
      <anchor>aaebfedcb76b2be3da637382d5f316300</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const float &amp;</type>
      <name>asFloat</name>
      <anchorfile>classpxl_1_1_variant.html</anchorfile>
      <anchor>a6d49801fc6d8ce5894063fc1e4f9f084</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>toFloat</name>
      <anchorfile>classpxl_1_1_variant.html</anchorfile>
      <anchor>a0d2bfeec5c36e0f611b7468c0c2bc6d9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Variant &amp;</type>
      <name>operator=</name>
      <anchorfile>classpxl_1_1_variant.html</anchorfile>
      <anchor>a7b1eb86f9c3a3bf52068033158d19a55</anchor>
      <arglist>(const float &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classpxl_1_1_variant.html</anchorfile>
      <anchor>a847b466c60b9315560d0c0a1f418b909</anchor>
      <arglist>(const float &amp;a) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classpxl_1_1_variant.html</anchorfile>
      <anchor>ad164fd649ee21c5f958dc1651368e317</anchor>
      <arglist>(const float &amp;a) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Variant</name>
      <anchorfile>classpxl_1_1_variant.html</anchorfile>
      <anchor>a7b2e2a9949a83326b26b4fd3c051cab9</anchor>
      <arglist>(const float &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isDouble</name>
      <anchorfile>classpxl_1_1_variant.html</anchorfile>
      <anchor>a446868c6562630ad7b08206bceec98a8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator double</name>
      <anchorfile>classpxl_1_1_variant.html</anchorfile>
      <anchor>ace51412ec2a7673952ebe6d6e0b38bca</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>asDouble</name>
      <anchorfile>classpxl_1_1_variant.html</anchorfile>
      <anchor>a2e7c85ba31c86598e54ca0812ffa9434</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const double &amp;</type>
      <name>asDouble</name>
      <anchorfile>classpxl_1_1_variant.html</anchorfile>
      <anchor>a8dad016f65e18423bb73fe731aefd69c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>toDouble</name>
      <anchorfile>classpxl_1_1_variant.html</anchorfile>
      <anchor>a0095b4d99d5830e5a2ad8dea1db730fb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Variant &amp;</type>
      <name>operator=</name>
      <anchorfile>classpxl_1_1_variant.html</anchorfile>
      <anchor>a079d08966274eaeb68d0fb60f8aa8d94</anchor>
      <arglist>(const double &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classpxl_1_1_variant.html</anchorfile>
      <anchor>ab71f68c8ac5621b3e63d72757f74fd1a</anchor>
      <arglist>(const double &amp;a) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classpxl_1_1_variant.html</anchorfile>
      <anchor>ad2810bf66450a8cfa44ccce447d21fa6</anchor>
      <arglist>(const double &amp;a) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Variant</name>
      <anchorfile>classpxl_1_1_variant.html</anchorfile>
      <anchor>a8adf734a43abc2d61e4a1293feabc348</anchor>
      <arglist>(const double &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classpxl_1_1_variant.html</anchorfile>
      <anchor>a749b93d453535e2842474f03e27bfd5a</anchor>
      <arglist>(const Basic3Vector &amp;a) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classpxl_1_1_variant.html</anchorfile>
      <anchor>aa85003dacfac6514d2437efdbbb14b79</anchor>
      <arglist>(const Basic3Vector &amp;a) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isBasic3Vector</name>
      <anchorfile>classpxl_1_1_variant.html</anchorfile>
      <anchor>ae4bfd066ae4488108e299ae6158c8508</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Basic3Vector &amp;</type>
      <name>asBasic3Vector</name>
      <anchorfile>classpxl_1_1_variant.html</anchorfile>
      <anchor>af4d16c397de049cd570cb11169196d71</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Basic3Vector &amp;</type>
      <name>asBasic3Vector</name>
      <anchorfile>classpxl_1_1_variant.html</anchorfile>
      <anchor>acd996180bdd497933733d200b6c65bf6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Variant &amp;</type>
      <name>operator=</name>
      <anchorfile>classpxl_1_1_variant.html</anchorfile>
      <anchor>a2a4058c7b9d66c5a1a98312ea58ec876</anchor>
      <arglist>(const Basic3Vector &amp;a)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Variant</name>
      <anchorfile>classpxl_1_1_variant.html</anchorfile>
      <anchor>a2a981987e8504d86f814babd2b4b0816</anchor>
      <arglist>(const Basic3Vector &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classpxl_1_1_variant.html</anchorfile>
      <anchor>a3c89edfb00cd64ae1a5495b8634412f5</anchor>
      <arglist>(const LorentzVector &amp;a) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classpxl_1_1_variant.html</anchorfile>
      <anchor>a05c6d6bd7e248e206d4ea45e074c0115</anchor>
      <arglist>(const LorentzVector &amp;a) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isLorentzVector</name>
      <anchorfile>classpxl_1_1_variant.html</anchorfile>
      <anchor>a006aaccdda61c50700a3acc0c6673ae5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>LorentzVector &amp;</type>
      <name>asLorentzVector</name>
      <anchorfile>classpxl_1_1_variant.html</anchorfile>
      <anchor>a0c6fc0c69de17827e4fedc2ac3decc14</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const LorentzVector &amp;</type>
      <name>asLorentzVector</name>
      <anchorfile>classpxl_1_1_variant.html</anchorfile>
      <anchor>a9e8222b592a0fa2da9ee4ef1b434dd1d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Variant &amp;</type>
      <name>operator=</name>
      <anchorfile>classpxl_1_1_variant.html</anchorfile>
      <anchor>abcef04e8d71b8a24ee09b49a7b387447</anchor>
      <arglist>(const LorentzVector &amp;a)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Variant</name>
      <anchorfile>classpxl_1_1_variant.html</anchorfile>
      <anchor>afd0204753222c04043824a7926455ac3</anchor>
      <arglist>(const LorentzVector &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classpxl_1_1_variant.html</anchorfile>
      <anchor>a5643c589c2c3ba5cd4c3788301e1946a</anchor>
      <arglist>(const std::string &amp;a) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classpxl_1_1_variant.html</anchorfile>
      <anchor>aecbec9b088df80053d0fd95e6e8323cf</anchor>
      <arglist>(const std::string &amp;a) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isString</name>
      <anchorfile>classpxl_1_1_variant.html</anchorfile>
      <anchor>ae575f6dede005e20614f25d281641172</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string &amp;</type>
      <name>asString</name>
      <anchorfile>classpxl_1_1_variant.html</anchorfile>
      <anchor>a8ab9ab662d6e6404f914c6442977cc9e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>asString</name>
      <anchorfile>classpxl_1_1_variant.html</anchorfile>
      <anchor>a893446ba81c977ea486488db59700234</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Variant &amp;</type>
      <name>operator=</name>
      <anchorfile>classpxl_1_1_variant.html</anchorfile>
      <anchor>ad1476811c40c04d1e8b9776ff08579f5</anchor>
      <arglist>(const std::string &amp;a)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Variant</name>
      <anchorfile>classpxl_1_1_variant.html</anchorfile>
      <anchor>a39b913f3c985d125e76eb87a9e1c87a7</anchor>
      <arglist>(const std::string &amp;a)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Variant</name>
      <anchorfile>classpxl_1_1_variant.html</anchorfile>
      <anchor>a74dbd6bef17b6485d2140ef0c21e27bf</anchor>
      <arglist>(const char *s)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>toString</name>
      <anchorfile>classpxl_1_1_variant.html</anchorfile>
      <anchor>a5194f6325bba2cc657e3eab581894366</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classpxl_1_1_variant.html</anchorfile>
      <anchor>a9b4b256fa33ec6de05d7a86aabe03242</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classpxl_1_1_variant.html</anchorfile>
      <anchor>a1574f6342ef5de61d314426016535b74</anchor>
      <arglist>(const char *a) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSerializable</name>
      <anchorfile>classpxl_1_1_variant.html</anchorfile>
      <anchor>a4050a76072568976dadafcd148a5068e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Serializable &amp;</type>
      <name>asSerializable</name>
      <anchorfile>classpxl_1_1_variant.html</anchorfile>
      <anchor>a2d52c3df6dd82e3ad13562cc5d698baa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Serializable &amp;</type>
      <name>asSerializable</name>
      <anchorfile>classpxl_1_1_variant.html</anchorfile>
      <anchor>a570da5a451b58d7380555eaa775c94a0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Variant</name>
      <anchorfile>classpxl_1_1_variant.html</anchorfile>
      <anchor>ae5a6697745cd6215e90957298030578a</anchor>
      <arglist>(const Serializable *a)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Variant</name>
      <anchorfile>classpxl_1_1_variant.html</anchorfile>
      <anchor>ab7d5f75d354fc14c41c68fdb604c2806</anchor>
      <arglist>(const Serializable &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>Variant &amp;</type>
      <name>operator=</name>
      <anchorfile>classpxl_1_1_variant.html</anchorfile>
      <anchor>a0d0e0985a260d1fc105333890492a0ca</anchor>
      <arglist>(const Serializable &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>Variant &amp;</type>
      <name>operator=</name>
      <anchorfile>classpxl_1_1_variant.html</anchorfile>
      <anchor>a3f990c1f4a9158aff8742722a960f776</anchor>
      <arglist>(const Serializable *a)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>cast</name>
      <anchorfile>classpxl_1_1_variant.html</anchorfile>
      <anchor>afe9722275cd49fe9ee35b9d6cc4e4e8c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const T</type>
      <name>cast</name>
      <anchorfile>classpxl_1_1_variant.html</anchorfile>
      <anchor>a409cd4bd2812a5264017b3b45ca8b892</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classpxl_1_1_variant.html</anchorfile>
      <anchor>a4bdfc19a3321f73385bd6a0d5f5e2952</anchor>
      <arglist>(const Serializable *a) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classpxl_1_1_variant.html</anchorfile>
      <anchor>a6129f4d81d1eedc84b4055407f7eff93</anchor>
      <arglist>(const Serializable *a) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Variant</name>
      <anchorfile>classpxl_1_1_variant.html</anchorfile>
      <anchor>a5527fe078d5e5bfe2a37821288efa8bd</anchor>
      <arglist>(const std::vector&lt; Variant &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isVector</name>
      <anchorfile>classpxl_1_1_variant.html</anchorfile>
      <anchor>a2074c2ee5ddbe2da193c00b6fee25535</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::vector&lt; Variant &gt; &amp;</name>
      <anchorfile>classpxl_1_1_variant.html</anchorfile>
      <anchor>a3455f24f7c8f4235d79b97b78ecfc82b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator const std::vector&lt; Variant &gt; &amp;</name>
      <anchorfile>classpxl_1_1_variant.html</anchorfile>
      <anchor>a40cbaca2278d015f027838642d1f1d9a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; Variant &gt; &amp;</type>
      <name>asVector</name>
      <anchorfile>classpxl_1_1_variant.html</anchorfile>
      <anchor>a49194d107670411a3198d08d8bcb8e55</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; Variant &gt; &amp;</type>
      <name>asVector</name>
      <anchorfile>classpxl_1_1_variant.html</anchorfile>
      <anchor>a2a2d24bbb99f2e8fc7eeadf5712f2689</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; Variant &gt;</type>
      <name>toVector</name>
      <anchorfile>classpxl_1_1_variant.html</anchorfile>
      <anchor>a364514821156438bed4d9467e3a750b1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Variant &amp;</type>
      <name>operator=</name>
      <anchorfile>classpxl_1_1_variant.html</anchorfile>
      <anchor>aa94e143b0c491c7cb82846130964e4cc</anchor>
      <arglist>(const std::vector&lt; Variant &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classpxl_1_1_variant.html</anchorfile>
      <anchor>a0180b49ba974c9ba3abb0bc76399f625</anchor>
      <arglist>(const std::vector&lt; Variant &gt; &amp;a) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classpxl_1_1_variant.html</anchorfile>
      <anchor>ab3549ce56b23f97124d03426a181792c</anchor>
      <arglist>(const std::vector&lt; Variant &gt; &amp;a) const</arglist>
    </member>
    <member kind="function">
      <type>Variant &amp;</type>
      <name>operator[]</name>
      <anchorfile>classpxl_1_1_variant.html</anchorfile>
      <anchor>a95fa6931796dd8e9a7eb5553650198df</anchor>
      <arglist>(size_t i)</arglist>
    </member>
    <member kind="function">
      <type>const Variant &amp;</type>
      <name>operator[]</name>
      <anchorfile>classpxl_1_1_variant.html</anchorfile>
      <anchor>ab3bc3f04a5226c9b0d73aa86e0aa9c55</anchor>
      <arglist>(size_t i) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classpxl_1_1_variant.html</anchorfile>
      <anchor>ac158e840ab8942d89957293ba1414873</anchor>
      <arglist>(size_t i)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>serialize</name>
      <anchorfile>classpxl_1_1_variant.html</anchorfile>
      <anchor>ae05a98670e5ca65f2450be11fd3110f1</anchor>
      <arglist>(const OutputStream &amp;out) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deserialize</name>
      <anchorfile>classpxl_1_1_variant.html</anchorfile>
      <anchor>a2f5b3456df81453386396eaa952c8654</anchor>
      <arglist>(const InputStream &amp;in)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classpxl_1_1_variant.html</anchorfile>
      <anchor>a36c0fdc9dd67d146ebaa2c4cc8db1b85</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>to</name>
      <anchorfile>classpxl_1_1_variant.html</anchorfile>
      <anchor>ab0429be2dfafaa35c298a0a1924fb365</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>char</type>
      <name>to</name>
      <anchorfile>classpxl_1_1_variant.html</anchorfile>
      <anchor>a3755913f53ecf9f4b6506549bdd857b3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned char</type>
      <name>to</name>
      <anchorfile>classpxl_1_1_variant.html</anchorfile>
      <anchor>aab427bc999fc2f5429bafc5196ef827c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int16_t</type>
      <name>to</name>
      <anchorfile>classpxl_1_1_variant.html</anchorfile>
      <anchor>abf73df39aee1a6a4793eb0489aee5b79</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>uint16_t</type>
      <name>to</name>
      <anchorfile>classpxl_1_1_variant.html</anchorfile>
      <anchor>a14228e412b5091a3059fcd01b16a2559</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>to</name>
      <anchorfile>classpxl_1_1_variant.html</anchorfile>
      <anchor>a0e709d17230e6ca43aa6d5fe55be8242</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>uint32_t</type>
      <name>to</name>
      <anchorfile>classpxl_1_1_variant.html</anchorfile>
      <anchor>ae2a902d013ee57a10eee0181e5aaae52</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int64_t</type>
      <name>to</name>
      <anchorfile>classpxl_1_1_variant.html</anchorfile>
      <anchor>a8f74dc07fd389f7069e735c0a7341bab</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>uint64_t</type>
      <name>to</name>
      <anchorfile>classpxl_1_1_variant.html</anchorfile>
      <anchor>a37c5e7edf1540961377be99835ddf093</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>to</name>
      <anchorfile>classpxl_1_1_variant.html</anchorfile>
      <anchor>a222c19264dea71af9fda82495ddb5fe5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>to</name>
      <anchorfile>classpxl_1_1_variant.html</anchorfile>
      <anchor>a350fdca25c3edfc7038f70a6fdc36bdc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Type</type>
      <name>toType</name>
      <anchorfile>classpxl_1_1_variant.html</anchorfile>
      <anchor>ac34a5f841308a767f9ac1630e0dc412e</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const char *</type>
      <name>getTypeName</name>
      <anchorfile>classpxl_1_1_variant.html</anchorfile>
      <anchor>a269104d8d652588260cbf84d9749435f</anchor>
      <arglist>(Type type)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Variant</type>
      <name>fromBool</name>
      <anchorfile>classpxl_1_1_variant.html</anchorfile>
      <anchor>a6c54c9ca352e0fe44c2e23e885a75cbb</anchor>
      <arglist>(const bool &amp;a)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Variant</type>
      <name>fromChar</name>
      <anchorfile>classpxl_1_1_variant.html</anchorfile>
      <anchor>aa66a695123a108ddd55e1fdde834f28c</anchor>
      <arglist>(const char &amp;a)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Variant</type>
      <name>fromUChar</name>
      <anchorfile>classpxl_1_1_variant.html</anchorfile>
      <anchor>aa4bc4c3d1732c644b3c75dc6fa4534d6</anchor>
      <arglist>(const unsigned char &amp;a)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Variant</type>
      <name>fromInt16</name>
      <anchorfile>classpxl_1_1_variant.html</anchorfile>
      <anchor>a6b61ce97e6be156ba1ecf99b19e789b4</anchor>
      <arglist>(const int16_t &amp;a)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Variant</type>
      <name>fromUInt16</name>
      <anchorfile>classpxl_1_1_variant.html</anchorfile>
      <anchor>a3d53f88e00da43d5cab6d0340b4361aa</anchor>
      <arglist>(const uint16_t &amp;a)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Variant</type>
      <name>fromInt32</name>
      <anchorfile>classpxl_1_1_variant.html</anchorfile>
      <anchor>a14f15a8dc4c2ad242702e5aedb8d0bd5</anchor>
      <arglist>(const int32_t &amp;a)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Variant</type>
      <name>fromUInt32</name>
      <anchorfile>classpxl_1_1_variant.html</anchorfile>
      <anchor>a918214b8c14a7c9ab374dbc7ac7eaa89</anchor>
      <arglist>(const uint32_t &amp;a)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Variant</type>
      <name>fromInt64</name>
      <anchorfile>classpxl_1_1_variant.html</anchorfile>
      <anchor>a4054f1ecd3fe269c4e5293e4548cc0f7</anchor>
      <arglist>(const int64_t &amp;a)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Variant</type>
      <name>fromUInt64</name>
      <anchorfile>classpxl_1_1_variant.html</anchorfile>
      <anchor>a69a8041236ecc72bc403a294ca74b6a2</anchor>
      <arglist>(const uint64_t &amp;a)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Variant</type>
      <name>fromFloat</name>
      <anchorfile>classpxl_1_1_variant.html</anchorfile>
      <anchor>a10d78313f9b773c3f77d8d67faf544ba</anchor>
      <arglist>(const float &amp;a)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Variant</type>
      <name>fromDouble</name>
      <anchorfile>classpxl_1_1_variant.html</anchorfile>
      <anchor>a9c49f547ea468b6006f699742d7c264d</anchor>
      <arglist>(const double &amp;a)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Variant</type>
      <name>fromBasic3Vector</name>
      <anchorfile>classpxl_1_1_variant.html</anchorfile>
      <anchor>ac9eb8b1f3a3f31442442046143acef13</anchor>
      <arglist>(const Basic3Vector &amp;a)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Variant</type>
      <name>fromLorentzVector</name>
      <anchorfile>classpxl_1_1_variant.html</anchorfile>
      <anchor>a3faefdd96e8e1271de38c3f84cdb0527</anchor>
      <arglist>(const LorentzVector &amp;a)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Variant</type>
      <name>fromString</name>
      <anchorfile>classpxl_1_1_variant.html</anchorfile>
      <anchor>af3e360680c61a837d2578ea0975e8bde</anchor>
      <arglist>(const std::string &amp;a)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Variant</type>
      <name>fromString</name>
      <anchorfile>classpxl_1_1_variant.html</anchorfile>
      <anchor>a2c02eb37cfad415785320bda3536833f</anchor>
      <arglist>(const std::string &amp;str, Type type)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Variant</type>
      <name>fromSerializable</name>
      <anchorfile>classpxl_1_1_variant.html</anchorfile>
      <anchor>aca50002d715e6400f40297eb1d45276f</anchor>
      <arglist>(const Serializable &amp;a)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Variant</type>
      <name>fromVector</name>
      <anchorfile>classpxl_1_1_variant.html</anchorfile>
      <anchor>a95e4127c9687f4c04e9f60470bb7ed2e</anchor>
      <arglist>(const std::vector&lt; Variant &gt; &amp;s)</arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>_u_bool</name>
      <anchorfile>classpxl_1_1_variant.html</anchorfile>
      <anchor>a2283447bc75af14415147c2e00804190</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>char</type>
      <name>_u_char</name>
      <anchorfile>classpxl_1_1_variant.html</anchorfile>
      <anchor>a5fa07022d5c5b5f1ac7ad1fcb200ff0c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned char</type>
      <name>_u_uchar</name>
      <anchorfile>classpxl_1_1_variant.html</anchorfile>
      <anchor>ae4ccdb0c2a89c6db4b88d2a78b54793e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int16_t</type>
      <name>_u_int16</name>
      <anchorfile>classpxl_1_1_variant.html</anchorfile>
      <anchor>a29b41eb9447c7630c91126ff9b7d2612</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint16_t</type>
      <name>_u_uint16</name>
      <anchorfile>classpxl_1_1_variant.html</anchorfile>
      <anchor>a96f761f607abbada2f3a2719f67ae919</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32_t</type>
      <name>_u_int32</name>
      <anchorfile>classpxl_1_1_variant.html</anchorfile>
      <anchor>a2c2f4bec57207837c8d37467317bad4c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>_u_uint32</name>
      <anchorfile>classpxl_1_1_variant.html</anchorfile>
      <anchor>a2ee59e3f6c3bac522ade855c82c89ede</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int64_t</type>
      <name>_u_int64</name>
      <anchorfile>classpxl_1_1_variant.html</anchorfile>
      <anchor>a763e4e8f8cbe944a34eebbb8f506af9e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint64_t</type>
      <name>_u_uint64</name>
      <anchorfile>classpxl_1_1_variant.html</anchorfile>
      <anchor>a5a09bd91461bf06d74458e5ae6a73d0a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>_u_double</name>
      <anchorfile>classpxl_1_1_variant.html</anchorfile>
      <anchor>aee0533e9d20acca01015d221aaf17a1f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>float</type>
      <name>_u_float</name>
      <anchorfile>classpxl_1_1_variant.html</anchorfile>
      <anchor>a44462e2eb861c35a0d8ada96c0250018</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Serializable *</type>
      <name>_u_Serializable</name>
      <anchorfile>classpxl_1_1_variant.html</anchorfile>
      <anchor>a654165e77913e82dcfc4128eef3c187e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Basic3Vector *</type>
      <name>_u_Basic3Vector</name>
      <anchorfile>classpxl_1_1_variant.html</anchorfile>
      <anchor>ab684afb2bfc4e00b61f1bcb4a5e80272</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>LorentzVector *</type>
      <name>_u_LorentzVector</name>
      <anchorfile>classpxl_1_1_variant.html</anchorfile>
      <anchor>a90c8b23ded009e199818f087b9eac3f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector_t *</type>
      <name>_u_vector</name>
      <anchorfile>classpxl_1_1_variant.html</anchorfile>
      <anchor>a6ec061ff5b3b9128c2908d8af7c5c9fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string *</type>
      <name>_u_string</name>
      <anchorfile>classpxl_1_1_variant.html</anchorfile>
      <anchor>a594e728933c549b0024481eebdacd2cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::vector&lt; Variant &gt;</type>
      <name>vector_t</name>
      <anchorfile>classpxl_1_1_variant.html</anchorfile>
      <anchor>acb587c820fd7ff62fa53fbfe0fa70bd1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::map&lt; std::string, Variant &gt;</type>
      <name>map_t</name>
      <anchorfile>classpxl_1_1_variant.html</anchorfile>
      <anchor>abbfed950cc801a76a0f84b2dea9f3076</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Type</type>
      <name>type</name>
      <anchorfile>classpxl_1_1_variant.html</anchorfile>
      <anchor>a3ba5d692cf262740634b05bb294142c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>union pxl::Variant::@3</type>
      <name>data</name>
      <anchorfile>classpxl_1_1_variant.html</anchorfile>
      <anchor>a920397a79be1facb0e39e302adb02176</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>pxl::Vertex</name>
    <filename>classpxl_1_1_vertex.html</filename>
    <base>pxl::Object</base>
    <base>pxl::CommonVertex</base>
    <member kind="function">
      <type></type>
      <name>Vertex</name>
      <anchorfile>classpxl_1_1_vertex.html</anchorfile>
      <anchor>aa8f62bac89b1f354098457f4b57184b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Vertex</name>
      <anchorfile>classpxl_1_1_vertex.html</anchorfile>
      <anchor>a3adbc7fad9bfab765bfc4698a3b6c9c6</anchor>
      <arglist>(const Vertex &amp;original)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Vertex</name>
      <anchorfile>classpxl_1_1_vertex.html</anchorfile>
      <anchor>ab8ccf57469ceae3f2a120e97dc3f22c7</anchor>
      <arglist>(const Vertex *original)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Id &amp;</type>
      <name>getTypeId</name>
      <anchorfile>classpxl_1_1_vertex.html</anchorfile>
      <anchor>a6d440182266c51539512be57031b0dce</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classpxl_1_1_vertex.html</anchorfile>
      <anchor>a3f69169eb58aec4e933e261c17ea0cb7</anchor>
      <arglist>(const OutputStream &amp;out) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>deserialize</name>
      <anchorfile>classpxl_1_1_vertex.html</anchorfile>
      <anchor>a62c8be1b93b94c405c671cda863aff0e</anchor>
      <arglist>(const InputStream &amp;in)</arglist>
    </member>
    <member kind="function">
      <type>const Basic3Vector &amp;</type>
      <name>getVector</name>
      <anchorfile>classpxl_1_1_vertex.html</anchorfile>
      <anchor>ae36877e0f2fc1cb964f32cae028c85fa</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getX</name>
      <anchorfile>classpxl_1_1_vertex.html</anchorfile>
      <anchor>a131542ae2f4ca07fee3871e706433ee6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getY</name>
      <anchorfile>classpxl_1_1_vertex.html</anchorfile>
      <anchor>a256110f7b67d757af266723222a9d61a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getZ</name>
      <anchorfile>classpxl_1_1_vertex.html</anchorfile>
      <anchor>a571b3b2af3454669a713429a04f00e62</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setX</name>
      <anchorfile>classpxl_1_1_vertex.html</anchorfile>
      <anchor>a1ba03f3f89c993ab2c574b252762450a</anchor>
      <arglist>(double x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setY</name>
      <anchorfile>classpxl_1_1_vertex.html</anchorfile>
      <anchor>a646dc3f2bd691a4c1f04ac784991f0a3</anchor>
      <arglist>(double y)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setZ</name>
      <anchorfile>classpxl_1_1_vertex.html</anchorfile>
      <anchor>a4ba733e33e648e2e02564ace01def590</anchor>
      <arglist>(double z)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setXYZ</name>
      <anchorfile>classpxl_1_1_vertex.html</anchorfile>
      <anchor>aa92af21376dcc03b556c52d9f0163b9a</anchor>
      <arglist>(double x, double y, double z)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setVector</name>
      <anchorfile>classpxl_1_1_vertex.html</anchorfile>
      <anchor>a33b026b16ed9644f8526a8d5e00d950b</anchor>
      <arglist>(const Basic3Vector &amp;vector)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addXYZ</name>
      <anchorfile>classpxl_1_1_vertex.html</anchorfile>
      <anchor>a31a7018a9c7fcd9b02af8dda885a465d</anchor>
      <arglist>(double x, double y, double z)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addVector</name>
      <anchorfile>classpxl_1_1_vertex.html</anchorfile>
      <anchor>a0c0cadd2a2b35e00a3fa5d81944ceb85</anchor>
      <arglist>(const Basic3Vector &amp;vector)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addVertex</name>
      <anchorfile>classpxl_1_1_vertex.html</anchorfile>
      <anchor>a75395eb9ff796ff9e86450cf8bed7a4b</anchor>
      <arglist>(const Vertex *vx)</arglist>
    </member>
    <member kind="function">
      <type>const Vertex &amp;</type>
      <name>operator+=</name>
      <anchorfile>classpxl_1_1_vertex.html</anchorfile>
      <anchor>a0554535b53264f984b7ff3362a89dc63</anchor>
      <arglist>(const Vertex &amp;vx)</arglist>
    </member>
    <member kind="function">
      <type>const Vertex &amp;</type>
      <name>operator-=</name>
      <anchorfile>classpxl_1_1_vertex.html</anchorfile>
      <anchor>a9652458fc223e6073292bc627d79ef01</anchor>
      <arglist>(const Vertex &amp;vx)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Serializable *</type>
      <name>clone</name>
      <anchorfile>classpxl_1_1_vertex.html</anchorfile>
      <anchor>a5dfed1b52e2bdac96db6a4e8480fb066</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::ostream &amp;</type>
      <name>print</name>
      <anchorfile>classpxl_1_1_vertex.html</anchorfile>
      <anchor>ab34809b836c34292078b15617512c7b5</anchor>
      <arglist>(int level=1, std::ostream &amp;os=std::cout, int pan=0) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isLocked</name>
      <anchorfile>classpxl_1_1_object.html</anchorfile>
      <anchor>a584e513d1aada593146e4bb4dca8c1fa</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getWorkFlag</name>
      <anchorfile>classpxl_1_1_object.html</anchorfile>
      <anchor>a9e82ee54fca13b8818634ebd8adda493</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLocked</name>
      <anchorfile>classpxl_1_1_object.html</anchorfile>
      <anchor>a1b2dbf2aef26a3bc4a92735572649a94</anchor>
      <arglist>(bool v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setWorkFlag</name>
      <anchorfile>classpxl_1_1_object.html</anchorfile>
      <anchor>a91d83fb75b1a480ae8323e7b2a5276ad</anchor>
      <arglist>(int v)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::ostream &amp;</type>
      <name>printContent</name>
      <anchorfile>classpxl_1_1_object.html</anchorfile>
      <anchor>a434021cf01b990778a93f5144817de2d</anchor>
      <arglist>(int level=1, std::ostream &amp;os=std::cout, int pan=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual WkPtrBase *</type>
      <name>createSelfWkPtr</name>
      <anchorfile>classpxl_1_1_object.html</anchorfile>
      <anchor>a0bea63fb2d1460f19eee438c30bf514a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Id</type>
      <name>id</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>a9bf6c17d6fd5b588c00463db4028870b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ObjectOwner *</type>
      <name>owner</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>a556c1cc09bed10e480cceb5da42edb33</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Relations &amp;</type>
      <name>getMotherRelations</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>a10f8728c388408f48a120e90de6298ae</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Relations &amp;</type>
      <name>getDaughterRelations</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>ae3b09cfe9057e042b88cf1adf6b4a036</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Relations &amp;</type>
      <name>getFlatRelations</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>aa8b871a98b21677ef5c159dbb608722d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Relative *</type>
      <name>getMother</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>a53a7b6b11409893dab8a73a0159180ec</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Relative *</type>
      <name>getDaughter</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>a6e7b03ed37eca69cd1063f78fd05b6dc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::set&lt; Relative * &gt; &amp;</type>
      <name>getDaughters</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>a6c4f5b97226fe562ef9144fa14f8c0f5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::set&lt; Relative * &gt; &amp;</type>
      <name>getMothers</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>a1728bea81bb0f966335f32c832a1cffa</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>numberOfDaughters</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>aa92bd45d2b1751fe3bfbbc79c8a21b32</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>numberOfMothers</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>aab1ec876cfe2f1bebf212b60f66ba907</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>linkMother</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>af3f916466c571dad5b0be5f4baded3b3</anchor>
      <arglist>(Relative *target)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>linkDaughter</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>a0a6244c26919bdd6fd45cbb8ea5a8f8b</anchor>
      <arglist>(Relative *target)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>linkFlat</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>a5ee923ece292e0d9268495af7590f060</anchor>
      <arglist>(Relative *target)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unlinkMother</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>a2b75c81e4078d147d36310fe7c3a4800</anchor>
      <arglist>(Relative *target)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unlinkDaughter</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>aaface8521be14a7fbb256ad786355ea4</anchor>
      <arglist>(Relative *target)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unlinkFlat</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>a4a4eba4935e47072056671728c2bd139</anchor>
      <arglist>(Relative *target)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unlinkFlat</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>a8d81b6131cc1532e3ba868e3509cb9b2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unlinkMothers</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>ad51348aae3792d8205823b46da02a564</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unlinkDaughters</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>a3bd2ff6a25aab01fda19df066bb492a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>linkSoft</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>a2ea79223a0f9d9edeeb8398b53ff6ab1</anchor>
      <arglist>(Relative *relative, const std::string &amp;type)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unlinkSoft</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>a1e870e37dbe2b384f85b138b5ec51e0e</anchor>
      <arglist>(Relative *relative, const std::string &amp;type)</arglist>
    </member>
    <member kind="function">
      <type>const SoftRelations &amp;</type>
      <name>getSoftRelations</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>ae5b78c9536de71abbb15a413e31f655e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>SoftRelations &amp;</type>
      <name>getSoftRelations</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>ab72e809de894954b8cc73ff768d757a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getName</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>a5384c8188f28913c4cc898571f133f32</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setName</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>a483a501afd8965daa92d3bafb91b4dfe</anchor>
      <arglist>(const std::string &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>printDecayTree</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>afa50de942d2caa47defa7e39a79df0a9</anchor>
      <arglist>(int level=0, std::ostream &amp;os=std::cout, int pan=1) const</arglist>
    </member>
    <member kind="function">
      <type>const Id &amp;</type>
      <name>getId</name>
      <anchorfile>classpxl_1_1_serializable.html</anchorfile>
      <anchor>a071e3e5bdd7125cee5dd5178807c3647</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const std::string</type>
      <name>toString</name>
      <anchorfile>classpxl_1_1_serializable.html</anchorfile>
      <anchor>abe42afdf47f4fa9cad94e26e9a3d6ba1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const UserRecords &amp;</type>
      <name>getUserRecords</name>
      <anchorfile>classpxl_1_1_user_record_helper.html</anchorfile>
      <anchor>ab7d2e9d7fd53f986163bff24ed9ec2e3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>UserRecords &amp;</type>
      <name>getUserRecords</name>
      <anchorfile>classpxl_1_1_user_record_helper.html</anchorfile>
      <anchor>aed523d427700d001e76af09b138f3355</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setUserRecords</name>
      <anchorfile>classpxl_1_1_user_record_helper.html</anchorfile>
      <anchor>a8bc754ecfd9c00f2a2ccb6395ac0891d</anchor>
      <arglist>(const UserRecords &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setUserRecord</name>
      <anchorfile>classpxl_1_1_user_record_helper.html</anchorfile>
      <anchor>af3ecea27c07445ab7dab72987672a8fd</anchor>
      <arglist>(const std::string &amp;key, const Variant &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>eraseUserRecord</name>
      <anchorfile>classpxl_1_1_user_record_helper.html</anchorfile>
      <anchor>a558dd61337c50bfd93af44f1c65867d7</anchor>
      <arglist>(const std::string &amp;key)</arglist>
    </member>
    <member kind="function">
      <type>const Variant &amp;</type>
      <name>getUserRecord</name>
      <anchorfile>classpxl_1_1_user_record_helper.html</anchorfile>
      <anchor>a0c4e05e6defb9e4eabb75a1aef41d300</anchor>
      <arglist>(const std::string &amp;key) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getUserRecord</name>
      <anchorfile>classpxl_1_1_user_record_helper.html</anchorfile>
      <anchor>a3df9f904d21e126a0527a81663f13ae8</anchor>
      <arglist>(const std::string &amp;key, datatype &amp;item) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasUserRecord</name>
      <anchorfile>classpxl_1_1_user_record_helper.html</anchorfile>
      <anchor>aeae48d210cf0dfd2a52fb7adcfc4bb41</anchor>
      <arglist>(const std::string &amp;key) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const Id &amp;</type>
      <name>getStaticTypeId</name>
      <anchorfile>classpxl_1_1_vertex.html</anchorfile>
      <anchor>add1c2e249bceebbdcb0879a6c340f2a9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::ostream &amp;</type>
      <name>printPan1st</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>a589f7baac2ec1c61eeb4c2c1e3403526</anchor>
      <arglist>(std::ostream &amp;os, int pan) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::ostream &amp;</type>
      <name>printPan</name>
      <anchorfile>classpxl_1_1_relative.html</anchorfile>
      <anchor>a5038bd2b7584b9aacb4b7d0ac02b26fa</anchor>
      <arglist>(std::ostream &amp;os, int pan) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>WallClock</name>
    <filename>class_wall_clock.html</filename>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>getTime</name>
      <anchorfile>class_wall_clock.html</anchorfile>
      <anchor>a6c9582520f90b3c8796713acd0645b1b</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>pxl::weak_ptr</name>
    <filename>classpxl_1_1weak__ptr.html</filename>
    <templarg></templarg>
    <base>pxl::WkPtrBase</base>
    <member kind="function">
      <type></type>
      <name>weak_ptr</name>
      <anchorfile>classpxl_1_1weak__ptr.html</anchorfile>
      <anchor>a7f0a89956ddbd7b09b62ef71aca6df58</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>weak_ptr</name>
      <anchorfile>classpxl_1_1weak__ptr.html</anchorfile>
      <anchor>aea003e0ab8e23c97eb8e298ffcfa02e8</anchor>
      <arglist>(objecttype *ptr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>weak_ptr</name>
      <anchorfile>classpxl_1_1weak__ptr.html</anchorfile>
      <anchor>abbe149fadf85209f71cfc99761f4a01b</anchor>
      <arglist>(objecttype &amp;object)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>weak_ptr</name>
      <anchorfile>classpxl_1_1weak__ptr.html</anchorfile>
      <anchor>aa51fdfea3b0d52c8d58ba68fad76f30c</anchor>
      <arglist>(const weak_ptr&lt; objecttype &gt; &amp;original)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>weak_ptr</name>
      <anchorfile>classpxl_1_1weak__ptr.html</anchorfile>
      <anchor>a594668ea323c6187f05db7b8fabcf83b</anchor>
      <arglist>(const weak_ptr&lt; objecttype &gt; *original)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~weak_ptr</name>
      <anchorfile>classpxl_1_1weak__ptr.html</anchorfile>
      <anchor>ae617cf23e8d567dbf6d0e5200982f914</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual WkPtrBase *</type>
      <name>clone</name>
      <anchorfile>classpxl_1_1weak__ptr.html</anchorfile>
      <anchor>ad7a511f40977c68df7b0f41c369f9692</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator=</name>
      <anchorfile>classpxl_1_1weak__ptr.html</anchorfile>
      <anchor>a352eda32d5451a0a5eaeebea92953da0</anchor>
      <arglist>(const weak_ptr&lt; objecttype &gt; &amp;pptr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator=</name>
      <anchorfile>classpxl_1_1weak__ptr.html</anchorfile>
      <anchor>a07331f21a2a1156b5a2f4c7029040584</anchor>
      <arglist>(objecttype &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator=</name>
      <anchorfile>classpxl_1_1weak__ptr.html</anchorfile>
      <anchor>a22415229d08b7464e08009aedec69f57</anchor>
      <arglist>(objecttype *objectptr)</arglist>
    </member>
    <member kind="function">
      <type>objecttype &amp;</type>
      <name>object</name>
      <anchorfile>classpxl_1_1weak__ptr.html</anchorfile>
      <anchor>aa6aa22f059e2b8d4ec0fbfcb0800de85</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>objecttype *</type>
      <name>operator-&gt;</name>
      <anchorfile>classpxl_1_1weak__ptr.html</anchorfile>
      <anchor>a9dfbcc972abf3e285d3f76e6bf77feca</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>objecttype *</type>
      <name>ptr</name>
      <anchorfile>classpxl_1_1weak__ptr.html</anchorfile>
      <anchor>af7898116dbe8cb3314e7883b607cb582</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator objecttype *</name>
      <anchorfile>classpxl_1_1weak__ptr.html</anchorfile>
      <anchor>aa7b2575973608b8af4f3d9fd9776d70d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>objecttype *</type>
      <name>access</name>
      <anchorfile>classpxl_1_1weak__ptr.html</anchorfile>
      <anchor>af3ff91489ab103f953c1c7ab5d935665</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Relative *</type>
      <name>pointer</name>
      <anchorfile>classpxl_1_1_wk_ptr_base.html</anchorfile>
      <anchor>a21be12fbc6e267451420a3fc17ce04ca</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>valid</name>
      <anchorfile>classpxl_1_1_wk_ptr_base.html</anchorfile>
      <anchor>a078fd76f5bf0fc5308b7ff3a3bbbfefc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator bool</name>
      <anchorfile>classpxl_1_1_wk_ptr_base.html</anchorfile>
      <anchor>a1d6ca7baf5ffaf2d62478a44011c84f6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classpxl_1_1_wk_ptr_base.html</anchorfile>
      <anchor>a2da24c58629e04208f8bf98ef7b30664</anchor>
      <arglist>(WkPtrBase &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classpxl_1_1_wk_ptr_base.html</anchorfile>
      <anchor>ac7ea8ac15387f5b390852714bf48f322</anchor>
      <arglist>(WkPtrBase &amp;other) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static weak_ptr&lt; objecttype &gt; *</type>
      <name>cast_dynamic</name>
      <anchorfile>classpxl_1_1weak__ptr.html</anchorfile>
      <anchor>a39920a61d6299a0495b447007df22429</anchor>
      <arglist>(WkPtrBase *orig)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>notifyDeleted</name>
      <anchorfile>classpxl_1_1_wk_ptr_base.html</anchorfile>
      <anchor>aa6d5be6e8074d137c92d1f229d9a052f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>connect</name>
      <anchorfile>classpxl_1_1_wk_ptr_base.html</anchorfile>
      <anchor>a957c66b946b36a618bb1e173ae8b74c0</anchor>
      <arglist>(Relative *pointer)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>WkPtrBase *</type>
      <name>_notifyChainIn</name>
      <anchorfile>classpxl_1_1_wk_ptr_base.html</anchorfile>
      <anchor>afdd77bdf35c898a3e1fde1f1ae607ac7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>WkPtrBase *</type>
      <name>_notifyChainOut</name>
      <anchorfile>classpxl_1_1_wk_ptr_base.html</anchorfile>
      <anchor>a184114c58bc6fb804ec7bd46176fcd74</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Relative *</type>
      <name>_objectRef</name>
      <anchorfile>classpxl_1_1_wk_ptr_base.html</anchorfile>
      <anchor>ad34807ef5d9616ce51ba5a913edbbe85</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>pxl::WkPtrBase</name>
    <filename>classpxl_1_1_wk_ptr_base.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~WkPtrBase</name>
      <anchorfile>classpxl_1_1_wk_ptr_base.html</anchorfile>
      <anchor>a024a4209e31ffa0b75d956a8dd5c8ccf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual WkPtrBase *</type>
      <name>clone</name>
      <anchorfile>classpxl_1_1_wk_ptr_base.html</anchorfile>
      <anchor>a520cd9ac8882c4d4d3e59f569fa551ec</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Relative *</type>
      <name>pointer</name>
      <anchorfile>classpxl_1_1_wk_ptr_base.html</anchorfile>
      <anchor>a21be12fbc6e267451420a3fc17ce04ca</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>valid</name>
      <anchorfile>classpxl_1_1_wk_ptr_base.html</anchorfile>
      <anchor>a078fd76f5bf0fc5308b7ff3a3bbbfefc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator bool</name>
      <anchorfile>classpxl_1_1_wk_ptr_base.html</anchorfile>
      <anchor>a1d6ca7baf5ffaf2d62478a44011c84f6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Relative *</type>
      <name>operator-&gt;</name>
      <anchorfile>classpxl_1_1_wk_ptr_base.html</anchorfile>
      <anchor>a45e41041bd10eba817e9f6139a0f60df</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classpxl_1_1_wk_ptr_base.html</anchorfile>
      <anchor>a2da24c58629e04208f8bf98ef7b30664</anchor>
      <arglist>(WkPtrBase &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classpxl_1_1_wk_ptr_base.html</anchorfile>
      <anchor>ac7ea8ac15387f5b390852714bf48f322</anchor>
      <arglist>(WkPtrBase &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>Relative *</type>
      <name>access</name>
      <anchorfile>classpxl_1_1_wk_ptr_base.html</anchorfile>
      <anchor>a622e97306f7912ead3d43047dbd410dd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static WkPtrBase *</type>
      <name>cast_dynamic</name>
      <anchorfile>classpxl_1_1_wk_ptr_base.html</anchorfile>
      <anchor>a3faba16319a513af94cb0c60d155c473</anchor>
      <arglist>(WkPtrBase *orig)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>WkPtrBase</name>
      <anchorfile>classpxl_1_1_wk_ptr_base.html</anchorfile>
      <anchor>a3462787c30711a6400efeb8d5d979ff6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>notifyDeleted</name>
      <anchorfile>classpxl_1_1_wk_ptr_base.html</anchorfile>
      <anchor>aa6d5be6e8074d137c92d1f229d9a052f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>connect</name>
      <anchorfile>classpxl_1_1_wk_ptr_base.html</anchorfile>
      <anchor>a957c66b946b36a618bb1e173ae8b74c0</anchor>
      <arglist>(Relative *pointer)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>WkPtrBase *</type>
      <name>_notifyChainIn</name>
      <anchorfile>classpxl_1_1_wk_ptr_base.html</anchorfile>
      <anchor>afdd77bdf35c898a3e1fde1f1ae607ac7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>WkPtrBase *</type>
      <name>_notifyChainOut</name>
      <anchorfile>classpxl_1_1_wk_ptr_base.html</anchorfile>
      <anchor>a184114c58bc6fb804ec7bd46176fcd74</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Relative *</type>
      <name>_objectRef</name>
      <anchorfile>classpxl_1_1_wk_ptr_base.html</anchorfile>
      <anchor>ad34807ef5d9616ce51ba5a913edbbe85</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend class</type>
      <name>Relative</name>
      <anchorfile>classpxl_1_1_wk_ptr_base.html</anchorfile>
      <anchor>a4484557dd4bfd0553f89af851f0f73f6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>BS</name>
    <filename>namespace_b_s.html</filename>
    <class kind="class">BS::blocks</class>
    <class kind="class">BS::multi_future</class>
    <class kind="class">BS::synced_stream</class>
    <class kind="class">BS::thread_pool</class>
    <class kind="class">BS::timer</class>
    <member kind="typedef">
      <type>std::invoke_result_t&lt; decltype(std::thread::hardware_concurrency)&gt;</type>
      <name>concurrency_t</name>
      <anchorfile>namespace_b_s.html</anchorfile>
      <anchor>a7bb1747ef283bd1349183c445ee89aaa</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>Color</name>
    <filename>namespace_color.html</filename>
    <class kind="class">Color::Modifier</class>
    <member kind="enumeration">
      <type></type>
      <name>Code</name>
      <anchorfile>namespace_color.html</anchorfile>
      <anchor>a20a7b04657c1d83fae5d54514d3f1622</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FG_RED</name>
      <anchorfile>namespace_color.html</anchorfile>
      <anchor>a20a7b04657c1d83fae5d54514d3f1622abe34efdb5a71e6c08dbd73b2b048594e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FG_GREEN</name>
      <anchorfile>namespace_color.html</anchorfile>
      <anchor>a20a7b04657c1d83fae5d54514d3f1622a3a47691d3524832443f1a94c9301cbc1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FG_YELLOW</name>
      <anchorfile>namespace_color.html</anchorfile>
      <anchor>a20a7b04657c1d83fae5d54514d3f1622a89cd1fbea5f6f69b83a2cfe8e8b3a0b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FG_BLUE</name>
      <anchorfile>namespace_color.html</anchorfile>
      <anchor>a20a7b04657c1d83fae5d54514d3f1622a91581c34f3a125bd751e1d0ea15c54e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FG_CYAN</name>
      <anchorfile>namespace_color.html</anchorfile>
      <anchor>a20a7b04657c1d83fae5d54514d3f1622ae429d988155b73516653a3042c4190b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FG_ACQUA</name>
      <anchorfile>namespace_color.html</anchorfile>
      <anchor>a20a7b04657c1d83fae5d54514d3f1622a02876d9224a122f43db70368c35a84c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FG_DEFAULT</name>
      <anchorfile>namespace_color.html</anchorfile>
      <anchor>a20a7b04657c1d83fae5d54514d3f1622a8a2002a109cc5d185745a3371776eabb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BG_RED</name>
      <anchorfile>namespace_color.html</anchorfile>
      <anchor>a20a7b04657c1d83fae5d54514d3f1622aafa9e9d96317844f2479b794417dfbd4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BG_GREEN</name>
      <anchorfile>namespace_color.html</anchorfile>
      <anchor>a20a7b04657c1d83fae5d54514d3f1622a6a1218e3191bd7ffdc1071677d454196</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BG_BLUE</name>
      <anchorfile>namespace_color.html</anchorfile>
      <anchor>a20a7b04657c1d83fae5d54514d3f1622a0c518bf654e18a54857f69a03685ad8e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BG_CYAN</name>
      <anchorfile>namespace_color.html</anchorfile>
      <anchor>a20a7b04657c1d83fae5d54514d3f1622a7d8fdd00a1ffed112671ed7fbea0938c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BG_DEFAULT</name>
      <anchorfile>namespace_color.html</anchorfile>
      <anchor>a20a7b04657c1d83fae5d54514d3f1622a2f4ff5db29c759ed5319cb528fdc3ad2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>emojicpp</name>
    <filename>namespaceemojicpp.html</filename>
    <member kind="function">
      <type>std::string</type>
      <name>emojize</name>
      <anchorfile>namespaceemojicpp.html</anchorfile>
      <anchor>a6bb4b8775ae489335c752949a881e687</anchor>
      <arglist>(std::string s, bool escape=true)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>HistClass</name>
    <filename>namespace_hist_class.html</filename>
    <member kind="function">
      <type>void</type>
      <name>split</name>
      <anchorfile>namespace_hist_class.html</anchorfile>
      <anchor>a7a3cc1b23690daea1ffb70d196f4a0f0</anchor>
      <arglist>(const std::string &amp;s, char delim, std::vector&lt; std::string &gt; *elems)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::string &gt;</type>
      <name>split</name>
      <anchorfile>namespace_hist_class.html</anchorfile>
      <anchor>a3b9f2e0dd38e3ceb2981c47595ad40c9</anchor>
      <arglist>(const std::string &amp;s, char delim)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>indicators</name>
    <filename>namespaceindicators.html</filename>
    <namespace>indicators::details</namespace>
    <class kind="class">indicators::BlockProgressBar</class>
    <class kind="class">indicators::DynamicProgress</class>
    <class kind="class">indicators::IndeterminateProgressBar</class>
    <class kind="class">indicators::MultiProgress</class>
    <class kind="class">indicators::ProgressBar</class>
    <class kind="class">indicators::ProgressSpinner</class>
    <member kind="enumeration">
      <type></type>
      <name>Color</name>
      <anchorfile>namespaceindicators.html</anchorfile>
      <anchor>a21cb670516a74f8f15aa29d22223349f</anchor>
      <arglist></arglist>
      <enumvalue file="namespaceindicators.html" anchor="a21cb670516a74f8f15aa29d22223349faca50000a180a293de0b27acb67a695cb">grey</enumvalue>
      <enumvalue file="namespaceindicators.html" anchor="a21cb670516a74f8f15aa29d22223349fabda9643ac6601722a28f238714274da4">red</enumvalue>
      <enumvalue file="namespaceindicators.html" anchor="a21cb670516a74f8f15aa29d22223349fa9f27410725ab8cc8854a2769c7a516b8">green</enumvalue>
      <enumvalue file="namespaceindicators.html" anchor="a21cb670516a74f8f15aa29d22223349fad487dd0b55dfcacdd920ccbdaeafa351">yellow</enumvalue>
      <enumvalue file="namespaceindicators.html" anchor="a21cb670516a74f8f15aa29d22223349fa48d6215903dff56238e52e8891380c8f">blue</enumvalue>
      <enumvalue file="namespaceindicators.html" anchor="a21cb670516a74f8f15aa29d22223349fa4c2a4a7078da0ac6733464eacfd00f86">magenta</enumvalue>
      <enumvalue file="namespaceindicators.html" anchor="a21cb670516a74f8f15aa29d22223349fa6411532ba4971f378391776a9db629d3">cyan</enumvalue>
      <enumvalue file="namespaceindicators.html" anchor="a21cb670516a74f8f15aa29d22223349fad508fe45cecaf653904a0e774084bb5c">white</enumvalue>
      <enumvalue file="namespaceindicators.html" anchor="a21cb670516a74f8f15aa29d22223349fad415f0e30c471dfdd9bc4f827329ef48">unspecified</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>FontStyle</name>
      <anchorfile>namespaceindicators.html</anchorfile>
      <anchor>ae7df6316e62332d1ef7f35253aca27dc</anchor>
      <arglist></arglist>
      <enumvalue file="namespaceindicators.html" anchor="ae7df6316e62332d1ef7f35253aca27dca69dcab4a73aeec2113f69b61e6263da8">bold</enumvalue>
      <enumvalue file="namespaceindicators.html" anchor="ae7df6316e62332d1ef7f35253aca27dcaa82fd95db10ff25dfad39f07372ebe37">dark</enumvalue>
      <enumvalue file="namespaceindicators.html" anchor="ae7df6316e62332d1ef7f35253aca27dca030c5b6d1e5715105943ac111d9671bf">italic</enumvalue>
      <enumvalue file="namespaceindicators.html" anchor="ae7df6316e62332d1ef7f35253aca27dca6dc7b4483f8c2c701a48e42db552806d">underline</enumvalue>
      <enumvalue file="namespaceindicators.html" anchor="ae7df6316e62332d1ef7f35253aca27dca40652ee9ae143f1c1c830f01a5449ecb">blink</enumvalue>
      <enumvalue file="namespaceindicators.html" anchor="ae7df6316e62332d1ef7f35253aca27dca4d9c2073afa3c2abb817dceb22c34de6">reverse</enumvalue>
      <enumvalue file="namespaceindicators.html" anchor="ae7df6316e62332d1ef7f35253aca27dca2235b9ee5dbac65f79cb61d4a4baced2">concealed</enumvalue>
      <enumvalue file="namespaceindicators.html" anchor="ae7df6316e62332d1ef7f35253aca27dcafade7e5041fdebd013b445486161c31c">crossed</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>ProgressType</name>
      <anchorfile>namespaceindicators.html</anchorfile>
      <anchor>a458cab7e6f3aea9f31820e8eb0102b90</anchor>
      <arglist></arglist>
      <enumvalue file="namespaceindicators.html" anchor="a458cab7e6f3aea9f31820e8eb0102b90a57e48ffcfe372672b239d90ecbe3919a">incremental</enumvalue>
      <enumvalue file="namespaceindicators.html" anchor="a458cab7e6f3aea9f31820e8eb0102b90af4a7a844a60aa57ff7aef6060bdec414">decremental</enumvalue>
    </member>
  </compound>
  <compound kind="namespace">
    <name>indicators::details</name>
    <filename>namespaceindicators_1_1details.html</filename>
    <class kind="class">indicators::details::BlockProgressScaleWriter</class>
    <class kind="class">indicators::details::IndeterminateProgressScaleWriter</class>
    <class kind="class">indicators::details::ProgressScaleWriter</class>
    <member kind="function">
      <type>void</type>
      <name>set_stream_color</name>
      <anchorfile>namespaceindicators_1_1details.html</anchorfile>
      <anchor>aac088c2287d6d53b0f3e667019a4a80f</anchor>
      <arglist>(std::ostream &amp;os, Color color)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_font_style</name>
      <anchorfile>namespaceindicators_1_1details.html</anchorfile>
      <anchor>ab308cc03b14b87ecdf07aaa5b8ea3e23</anchor>
      <arglist>(std::ostream &amp;os, FontStyle style)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>write_duration</name>
      <anchorfile>namespaceindicators_1_1details.html</anchorfile>
      <anchor>aebf59d2f5f28de4d2d071d558f507d4b</anchor>
      <arglist>(std::ostream &amp;os, std::chrono::nanoseconds ns)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>lumi</name>
    <filename>namespacelumi.html</filename>
    <class kind="class">lumi::bad_config</class>
    <class kind="class">lumi::LumiRanges</class>
    <class kind="class">lumi::RunLumiRanges</class>
    <member kind="typedef">
      <type>unsigned long</type>
      <name>ID</name>
      <anchorfile>namespacelumi.html</anchorfile>
      <anchor>ab421167e7e4d0729e04e038f04f430cc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>pdf</name>
    <filename>namespacepdf.html</filename>
    <class kind="struct">pdf::PDFInfo</class>
    <class kind="class">pdf::PDFTool</class>
  </compound>
  <compound kind="namespace">
    <name>pxl</name>
    <filename>namespacepxl.html</filename>
    <namespace>pxl::skipSpace</namespace>
    <class kind="class">pxl::AnalysisFork</class>
    <class kind="class">pxl::AnalysisProcess</class>
    <class kind="class">pxl::Basic3Vector</class>
    <class kind="class">pxl::BasicContainer</class>
    <class kind="class">pxl::BasicMatrix</class>
    <class kind="class">pxl::BasicNVector</class>
    <class kind="class">pxl::BufferInput</class>
    <class kind="class">pxl::BufferOutput</class>
    <class kind="class">pxl::ChunkReader</class>
    <class kind="class">pxl::ChunkWriter</class>
    <class kind="class">pxl::Collision</class>
    <class kind="class">pxl::CommonParticle</class>
    <class kind="class">pxl::CommonVertex</class>
    <class kind="class">pxl::ComparatorInterface</class>
    <class kind="class">pxl::Configuration</class>
    <class kind="class">pxl::ConsoleLogHandler</class>
    <class kind="class">pxl::Core</class>
    <class kind="class">pxl::dCacheInputFile</class>
    <class kind="class">pxl::dCapFileImpl</class>
    <class kind="class">pxl::Event</class>
    <class kind="class">pxl::EventView</class>
    <class kind="class">pxl::File</class>
    <class kind="class">pxl::FileFactory</class>
    <class kind="class">pxl::FileImpl</class>
    <class kind="class">pxl::FileProducerInterface</class>
    <class kind="class">pxl::FileProducerTemplate</class>
    <class kind="class">pxl::Filter</class>
    <class kind="class">pxl::FilterCriterionInterface</class>
    <class kind="class">pxl::GenericInputHandler</class>
    <class kind="class">pxl::GenericOutputHandler</class>
    <class kind="class">pxl::Hep</class>
    <class kind="class">pxl::Id</class>
    <class kind="class">pxl::InformationChunk</class>
    <class kind="class">pxl::InputFile</class>
    <class kind="class">pxl::InputHandler</class>
    <class kind="class">pxl::InputStream</class>
    <class kind="class">pxl::LocalFileImpl</class>
    <class kind="class">pxl::LogBuffer</class>
    <class kind="class">pxl::LogDispatcher</class>
    <class kind="class">pxl::Logger</class>
    <class kind="class">pxl::LogHandler</class>
    <class kind="class">pxl::LorentzVector</class>
    <class kind="class">pxl::MessageDispatcher</class>
    <class kind="class">pxl::MessageHandler</class>
    <class kind="class">pxl::NamedTMPFile</class>
    <class kind="class">pxl::Object</class>
    <class kind="class">pxl::ObjectFactory</class>
    <class kind="class">pxl::ObjectManager</class>
    <class kind="class">pxl::ObjectOwner</class>
    <class kind="class">pxl::ObjectOwnerTypeIterator</class>
    <class kind="class">pxl::ObjectProducerInterface</class>
    <class kind="class">pxl::ObjectProducerTemplate</class>
    <class kind="class">pxl::OutputFile</class>
    <class kind="class">pxl::OutputHandler</class>
    <class kind="class">pxl::OutputStream</class>
    <class kind="class">pxl::Particle</class>
    <class kind="class">pxl::ParticlePDGidPtCriterion</class>
    <class kind="class">pxl::ParticlePtComparator</class>
    <class kind="class">pxl::ParticlePtCriterion</class>
    <class kind="class">pxl::ParticlePtEtaNameCriterion</class>
    <class kind="class">pxl::PluginManager</class>
    <class kind="class">pxl::Random</class>
    <class kind="class">pxl::RandomAccessInputFile</class>
    <class kind="class">pxl::Relations</class>
    <class kind="class">pxl::Relative</class>
    <class kind="class">pxl::RotationMatrix</class>
    <class kind="class">pxl::Serializable</class>
    <class kind="class">pxl::sFTPFileImpl</class>
    <class kind="class">pxl::SoftRelations</class>
    <class kind="class">pxl::StdFileImpl</class>
    <class kind="class">pxl::Tokenizer</class>
    <class kind="class">pxl::UserRecordHelper</class>
    <class kind="class">pxl::UserRecords</class>
    <class kind="class">pxl::Variant</class>
    <class kind="class">pxl::Vertex</class>
    <class kind="class">pxl::weak_ptr</class>
    <class kind="class">pxl::WkPtrBase</class>
    <member kind="typedef">
      <type>Filter&lt; Particle, ParticlePtComparator &gt;</type>
      <name>ParticleFilter</name>
      <anchorfile>namespacepxl.html</anchorfile>
      <anchor>a9f0fb37dcffd5e9b09c08620c5d9c397</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>StorageOrder</name>
      <anchorfile>namespacepxl.html</anchorfile>
      <anchor>af7ae1a96f4c70538f6387257fd6f9fd8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ROWMAJOR</name>
      <anchorfile>namespacepxl.html</anchorfile>
      <anchor>af7ae1a96f4c70538f6387257fd6f9fd8a3ea06d453c92b780c1e2604391fea557</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>COLUMNMAJOR</name>
      <anchorfile>namespacepxl.html</anchorfile>
      <anchor>af7ae1a96f4c70538f6387257fd6f9fd8ac1082ce93c99232eb3db733d13b92a43</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>SeekDirectionEnum</name>
      <anchorfile>namespacepxl.html</anchorfile>
      <anchor>a50b4b5d7346adc40cc4674a15610a03d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SeekBegin</name>
      <anchorfile>namespacepxl.html</anchorfile>
      <anchor>a50b4b5d7346adc40cc4674a15610a03dac831f6540d1fcaa875aa6f3c1ba32b67</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SeekCurrent</name>
      <anchorfile>namespacepxl.html</anchorfile>
      <anchor>a50b4b5d7346adc40cc4674a15610a03da4c0e0cc66408660013cfbec168b304d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SeekEnd</name>
      <anchorfile>namespacepxl.html</anchorfile>
      <anchor>a50b4b5d7346adc40cc4674a15610a03daa485595b61952ce9b1c1f1572d9c3372</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>OpenModeEnum</name>
      <anchorfile>namespacepxl.html</anchorfile>
      <anchor>ae58cd884d34dd6dc5807bde796b22ea9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OpenRead</name>
      <anchorfile>namespacepxl.html</anchorfile>
      <anchor>ae58cd884d34dd6dc5807bde796b22ea9a33d6bf6a067fd7b4d74c242f0e9c5a1e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OpenWrite</name>
      <anchorfile>namespacepxl.html</anchorfile>
      <anchor>ae58cd884d34dd6dc5807bde796b22ea9adc85e9afb6f588de527fd8b80640c2d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OpenOverwrite</name>
      <anchorfile>namespacepxl.html</anchorfile>
      <anchor>ae58cd884d34dd6dc5807bde796b22ea9a196d5ae3cd70d85361ffcdf2d311ce57</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>LogLevel</name>
      <anchorfile>namespacepxl.html</anchorfile>
      <anchor>aa2803878ec506ff556ee8052dc205e88</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LOG_LEVEL_ALL</name>
      <anchorfile>namespacepxl.html</anchorfile>
      <anchor>aa2803878ec506ff556ee8052dc205e88a7611cae06169b4c64eba57a6dc4a0756</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LOG_LEVEL_DEBUG</name>
      <anchorfile>namespacepxl.html</anchorfile>
      <anchor>aa2803878ec506ff556ee8052dc205e88a3b7a2ba37e251a3e1f92d7c882d6b146</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LOG_LEVEL_INFO</name>
      <anchorfile>namespacepxl.html</anchorfile>
      <anchor>aa2803878ec506ff556ee8052dc205e88a38e8653cc2a48d8e79615d680c8587d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LOG_LEVEL_WARNING</name>
      <anchorfile>namespacepxl.html</anchorfile>
      <anchor>aa2803878ec506ff556ee8052dc205e88a58ff20de7f93ed96f082102525d65a60</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LOG_LEVEL_ERROR</name>
      <anchorfile>namespacepxl.html</anchorfile>
      <anchor>aa2803878ec506ff556ee8052dc205e88a70e0cfbcd32e8e073afa4b3f4e547796</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LOG_LEVEL_NONE</name>
      <anchorfile>namespacepxl.html</anchorfile>
      <anchor>aa2803878ec506ff556ee8052dc205e88a4bfe3e015dc5487e190adc02b925cbc2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>PXL_DLL_EXPORT bool</type>
      <name>operator==</name>
      <anchorfile>namespacepxl.html</anchorfile>
      <anchor>a23aca4365b37065fd14de599e26dc3f3</anchor>
      <arglist>(const Basic3Vector &amp;obj1, const Basic3Vector &amp;obj2)</arglist>
    </member>
    <member kind="function">
      <type>PXL_DLL_EXPORT bool</type>
      <name>operator!=</name>
      <anchorfile>namespacepxl.html</anchorfile>
      <anchor>a4c8d346aaa14d6ebaeac2183b6184ab9</anchor>
      <arglist>(const Basic3Vector &amp;obj1, const Basic3Vector &amp;obj2)</arglist>
    </member>
    <member kind="function">
      <type>PXL_DLL_EXPORT Basic3Vector</type>
      <name>operator*</name>
      <anchorfile>namespacepxl.html</anchorfile>
      <anchor>aba142ab2f56d4095bf5ba126247dd344</anchor>
      <arglist>(const double skalar, const Basic3Vector &amp;vec)</arglist>
    </member>
    <member kind="function">
      <type>PXL_DLL_EXPORT Basic3Vector</type>
      <name>operator*</name>
      <anchorfile>namespacepxl.html</anchorfile>
      <anchor>aa4b1e1c118580dd6e3472eb697e13114</anchor>
      <arglist>(const Basic3Vector &amp;vec, const double skalar)</arglist>
    </member>
    <member kind="function">
      <type>PXL_DLL_EXPORT bool</type>
      <name>operator==</name>
      <anchorfile>namespacepxl.html</anchorfile>
      <anchor>a3ff2c9f172bc71f021aa95e6c796badf</anchor>
      <arglist>(const BasicMatrix &amp;obj1, const BasicMatrix &amp;obj2)</arglist>
    </member>
    <member kind="function">
      <type>PXL_DLL_EXPORT bool</type>
      <name>operator!=</name>
      <anchorfile>namespacepxl.html</anchorfile>
      <anchor>a939db489ab19f05274af15d08f93b816</anchor>
      <arglist>(const BasicMatrix &amp;obj1, const BasicMatrix &amp;obj2)</arglist>
    </member>
    <member kind="function">
      <type>PXL_DLL_EXPORT BasicMatrix</type>
      <name>operator*</name>
      <anchorfile>namespacepxl.html</anchorfile>
      <anchor>acece6400a95843be6e4398d0fab28b2e</anchor>
      <arglist>(double skalar, const BasicMatrix &amp;vec)</arglist>
    </member>
    <member kind="function">
      <type>PXL_DLL_EXPORT BasicMatrix</type>
      <name>operator*</name>
      <anchorfile>namespacepxl.html</anchorfile>
      <anchor>a66b66028508605fb49583cc6a8116ffa</anchor>
      <arglist>(const BasicMatrix &amp;vec, double skalar)</arglist>
    </member>
    <member kind="function">
      <type>PXL_DLL_EXPORT BasicNVector</type>
      <name>operator*</name>
      <anchorfile>namespacepxl.html</anchorfile>
      <anchor>a5e75cd305a915bbc5530368dabeda6e9</anchor>
      <arglist>(const BasicMatrix &amp;M, const BasicNVector &amp;vec)</arglist>
    </member>
    <member kind="function">
      <type>PXL_DLL_EXPORT Basic3Vector</type>
      <name>operator*</name>
      <anchorfile>namespacepxl.html</anchorfile>
      <anchor>a5f95421bd897ed7ffded50b12a574638</anchor>
      <arglist>(const BasicMatrix &amp;M, const Basic3Vector &amp;vec)</arglist>
    </member>
    <member kind="function">
      <type>PXL_DLL_EXPORT bool</type>
      <name>operator==</name>
      <anchorfile>namespacepxl.html</anchorfile>
      <anchor>a59e6851abb3c85074cffa37dcb2387e9</anchor>
      <arglist>(const BasicNVector &amp;obj1, const BasicNVector &amp;obj2)</arglist>
    </member>
    <member kind="function">
      <type>PXL_DLL_EXPORT bool</type>
      <name>operator!=</name>
      <anchorfile>namespacepxl.html</anchorfile>
      <anchor>abe449f184b052af5d9c8e6aa00ca3776</anchor>
      <arglist>(const BasicNVector &amp;obj1, const BasicNVector &amp;obj2)</arglist>
    </member>
    <member kind="function">
      <type>PXL_DLL_EXPORT BasicNVector</type>
      <name>operator*</name>
      <anchorfile>namespacepxl.html</anchorfile>
      <anchor>abfb0f98d28b925598cd3c2695c092339</anchor>
      <arglist>(double skalar, const BasicNVector &amp;vec)</arglist>
    </member>
    <member kind="function">
      <type>PXL_DLL_EXPORT BasicNVector</type>
      <name>operator*</name>
      <anchorfile>namespacepxl.html</anchorfile>
      <anchor>a4dd7157cbcb3f47b9e6c144c58567351</anchor>
      <arglist>(const BasicNVector &amp;vec, double skalar)</arglist>
    </member>
    <member kind="function">
      <type>void PXL_DLL_EXPORT</type>
      <name>fillConfigFromSimpleIni</name>
      <anchorfile>namespacepxl.html</anchorfile>
      <anchor>a68546bc6b2c65ba1aaa012780e6912a8</anchor>
      <arglist>(const CSimpleIniA &amp;iniFile)</arglist>
    </member>
    <member kind="function">
      <type>void PXL_DLL_EXPORT</type>
      <name>loadDefaultConfigurations</name>
      <anchorfile>namespacepxl.html</anchorfile>
      <anchor>aea0ae9ab093941fcf705982e0dda3f74</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>PXL_DLL_EXPORT double</type>
      <name>getCpuTime</name>
      <anchorfile>namespacepxl.html</anchorfile>
      <anchor>a72150d45d91cfa83646673ed33dd54c7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string PXL_DLL_EXPORT</type>
      <name>trim_right</name>
      <anchorfile>namespacepxl.html</anchorfile>
      <anchor>ad6862ebbad2672bf7da7cffb51c85417</anchor>
      <arglist>(const std::string &amp;s, const std::string &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>std::string PXL_DLL_EXPORT</type>
      <name>trim_left</name>
      <anchorfile>namespacepxl.html</anchorfile>
      <anchor>a7d5f1c395ab6616a0fd0cdd56f30a60f</anchor>
      <arglist>(const std::string &amp;s, const std::string &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>std::string PXL_DLL_EXPORT</type>
      <name>trim</name>
      <anchorfile>namespacepxl.html</anchorfile>
      <anchor>a46971e4f31f6cd630377d2751c724b5c</anchor>
      <arglist>(const std::string &amp;s, const std::string &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>std::string PXL_DLL_EXPORT</type>
      <name>trim</name>
      <anchorfile>namespacepxl.html</anchorfile>
      <anchor>afadca93d49c9f4ecff0cd62345bdd8f6</anchor>
      <arglist>(const std::string &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>void PXL_DLL_EXPORT</type>
      <name>explode</name>
      <anchorfile>namespacepxl.html</anchorfile>
      <anchor>ad8e5398846f5604a3fbba3eb3b1703ea</anchor>
      <arglist>(const std::string &amp;s, std::vector&lt; std::string &gt; &amp;v, const bool trim_spaces, const std::string &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>PXL_DLL_EXPORT std::string</type>
      <name>implode</name>
      <anchorfile>namespacepxl.html</anchorfile>
      <anchor>a293bc85a0eca67f4a0f18d36bfe5290b</anchor>
      <arglist>(const std::vector&lt; std::string &gt; &amp;v, const std::string &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>std::string PXL_DLL_EXPORT</type>
      <name>expandEnvironmentVariables</name>
      <anchorfile>namespacepxl.html</anchorfile>
      <anchor>a21b5965003d046282ce19a0715a42f3b</anchor>
      <arglist>(const std::string &amp;input)</arglist>
    </member>
    <member kind="function">
      <type>PXL_DLL_EXPORT std::string &amp;</type>
      <name>replace</name>
      <anchorfile>namespacepxl.html</anchorfile>
      <anchor>a4c35b2d05f6fa9327599470e1a613fbe</anchor>
      <arglist>(std::string &amp;context, const std::string &amp;from, const std::string &amp;to)</arglist>
    </member>
    <member kind="function">
      <type>std::string PXL_DLL_EXPORT</type>
      <name>getParentDirectory</name>
      <anchorfile>namespacepxl.html</anchorfile>
      <anchor>a2cf21720566d475ff1c3a5fa3c292546</anchor>
      <arglist>(const std::string &amp;path)</arglist>
    </member>
    <member kind="function">
      <type>bool PXL_DLL_EXPORT</type>
      <name>createDirectory</name>
      <anchorfile>namespacepxl.html</anchorfile>
      <anchor>aa656b00bcfb11f066358deea2f491a7a</anchor>
      <arglist>(const std::string &amp;path)</arglist>
    </member>
    <member kind="function">
      <type>bool PXL_DLL_EXPORT</type>
      <name>isAbsolutePath</name>
      <anchorfile>namespacepxl.html</anchorfile>
      <anchor>a5d6b2310f2579cbf869d24087089c029</anchor>
      <arglist>(const std::string &amp;path)</arglist>
    </member>
    <member kind="function">
      <type>bool PXL_DLL_EXPORT</type>
      <name>isDirectory</name>
      <anchorfile>namespacepxl.html</anchorfile>
      <anchor>ac1bac77f87ec356165ef219b177c561e</anchor>
      <arglist>(const std::string &amp;path)</arglist>
    </member>
    <member kind="function">
      <type>bool PXL_DLL_EXPORT</type>
      <name>isFile</name>
      <anchorfile>namespacepxl.html</anchorfile>
      <anchor>affc92681eb5eaf2682a0cf923f34e94a</anchor>
      <arglist>(const std::string &amp;path)</arglist>
    </member>
    <member kind="function">
      <type>std::string PXL_DLL_EXPORT</type>
      <name>clearPathName</name>
      <anchorfile>namespacepxl.html</anchorfile>
      <anchor>ad5d9993a61a75cf187a21293014dd737</anchor>
      <arglist>(const std::string &amp;path)</arglist>
    </member>
    <member kind="function">
      <type>void PXL_DLL_EXPORT</type>
      <name>splitSchema</name>
      <anchorfile>namespacepxl.html</anchorfile>
      <anchor>a3d02b8420aa8cb883fadbc57fb30cdad</anchor>
      <arglist>(const std::string &amp;url, std::string &amp;schema, std::string &amp;path)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>safe_delete</name>
      <anchorfile>namespacepxl.html</anchorfile>
      <anchor>ae283a40e7bf5abf179d085f0791c0451</anchor>
      <arglist>(T *&amp;p)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>safe_string</name>
      <anchorfile>namespacepxl.html</anchorfile>
      <anchor>a03eb4c77adbea5e768476b4d8ed8fdf7</anchor>
      <arglist>(const char *ptr)</arglist>
    </member>
    <member kind="function">
      <type>PXL_DLL_EXPORT std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespacepxl.html</anchorfile>
      <anchor>a080762f4b0ac64b6d921a4a5c6f374a1</anchor>
      <arglist>(std::ostream &amp;os, const Id &amp;id)</arglist>
    </member>
    <member kind="function">
      <type>PXL_DLL_EXPORT LogLevel</type>
      <name>intToLogLevel</name>
      <anchorfile>namespacepxl.html</anchorfile>
      <anchor>acceb9e5999d6ad93a76d6f13e5eafa1c</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>PXL_DLL_EXPORT const std::string &amp;</type>
      <name>LogLevelToString</name>
      <anchorfile>namespacepxl.html</anchorfile>
      <anchor>a0c4e1c40b93c1426be45ee71f006bcda</anchor>
      <arglist>(LogLevel level)</arglist>
    </member>
    <member kind="function">
      <type>PXL_DLL_EXPORT bool</type>
      <name>operator==</name>
      <anchorfile>namespacepxl.html</anchorfile>
      <anchor>a50f445e4d5bafb8741ff9c12f0305591</anchor>
      <arglist>(const LorentzVector &amp;obj1, const LorentzVector &amp;obj2)</arglist>
    </member>
    <member kind="function">
      <type>PXL_DLL_EXPORT bool</type>
      <name>operator!=</name>
      <anchorfile>namespacepxl.html</anchorfile>
      <anchor>af46472ac54840ff1c36635156498f064</anchor>
      <arglist>(const LorentzVector &amp;obj1, const LorentzVector &amp;obj2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swap_endianess</name>
      <anchorfile>namespacepxl.html</anchorfile>
      <anchor>af22c8fe2c93dde81dafbec5e1ac13b70</anchor>
      <arglist>(T &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>Variant::to&lt; std::string &gt;</name>
      <anchorfile>namespacepxl.html</anchorfile>
      <anchor>a348838c38e29172db9236f08fd96fa51</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; Variant &gt;</type>
      <name>Variant::to&lt; std::vector&lt; Variant &gt; &gt;</name>
      <anchorfile>namespacepxl.html</anchorfile>
      <anchor>af72f2a220208937fceae6784e3827220</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>PXL_DLL_EXPORT std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespacepxl.html</anchorfile>
      <anchor>a2f9369f4db8d58d4f78304f008d94c72</anchor>
      <arglist>(std::ostream &amp;os, const Variant &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>objecttype &amp;</type>
      <name>operator*</name>
      <anchorfile>namespacepxl.html</anchorfile>
      <anchor>a144ba670a325156850a559beab87961f</anchor>
      <arglist>(weak_ptr&lt; objecttype &gt; &amp;wkPtr)</arglist>
    </member>
    <member kind="function">
      <type>const objecttype &amp;</type>
      <name>operator*</name>
      <anchorfile>namespacepxl.html</anchorfile>
      <anchor>aeae0595b07df3b42c1856420d1e96de8</anchor>
      <arglist>(const weak_ptr&lt; objecttype &gt; &amp;wkPtr)</arglist>
    </member>
    <member kind="function">
      <type>PXL_DLL_EXPORT bool</type>
      <name>operator==</name>
      <anchorfile>namespacepxl.html</anchorfile>
      <anchor>ac014b48d7f80607c25df78585fcbcb11</anchor>
      <arglist>(const Particle &amp;obj1, const Particle &amp;obj2)</arglist>
    </member>
    <member kind="function">
      <type>PXL_DLL_EXPORT bool</type>
      <name>operator!=</name>
      <anchorfile>namespacepxl.html</anchorfile>
      <anchor>a8cebb9c684317076e64fd5e28c9e540a</anchor>
      <arglist>(const Particle &amp;obj1, const Particle &amp;obj2)</arglist>
    </member>
    <member kind="function">
      <type>PXL_DLL_EXPORT bool</type>
      <name>operator==</name>
      <anchorfile>namespacepxl.html</anchorfile>
      <anchor>af4cb19e7b109712cd7beba9aa2e2a7ea</anchor>
      <arglist>(const Vertex &amp;obj1, const Vertex &amp;obj2)</arglist>
    </member>
    <member kind="function">
      <type>PXL_DLL_EXPORT bool</type>
      <name>operator!=</name>
      <anchorfile>namespacepxl.html</anchorfile>
      <anchor>a36c0747413d7b562c5011996a0ae6d41</anchor>
      <arglist>(const Vertex &amp;obj1, const Vertex &amp;obj2)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>compPart</name>
      <anchorfile>namespacepxl.html</anchorfile>
      <anchor>aa96953839edd598a6fda4689a5bbf484</anchor>
      <arglist>(pxl::Particle *first, pxl::Particle *second)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sortParticles</name>
      <anchorfile>namespacepxl.html</anchorfile>
      <anchor>a7dbca8a3fe7c607c8fb6d5d64c5a1c74</anchor>
      <arglist>(std::vector&lt; pxl::Particle * &gt; &amp;vec)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>pxl::skipSpace</name>
    <filename>namespacepxl_1_1skip_space.html</filename>
    <member kind="enumeration">
      <type></type>
      <name>skipMode</name>
      <anchorfile>namespacepxl_1_1skip_space.html</anchorfile>
      <anchor>a8d9fe41b00cc2d3e18653134f24faa42</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>off</name>
      <anchorfile>namespacepxl_1_1skip_space.html</anchorfile>
      <anchor>a8d9fe41b00cc2d3e18653134f24faa42a277c4676ab05227e8dfbf87236c4b8ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>on</name>
      <anchorfile>namespacepxl_1_1skip_space.html</anchorfile>
      <anchor>a8d9fe41b00cc2d3e18653134f24faa42a54e9ed69d6e83394af322670a5b13e53</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>Resolutions</name>
    <filename>namespace_resolutions.html</filename>
    <member kind="function">
      <type>double</type>
      <name>muon</name>
      <anchorfile>namespace_resolutions.html</anchorfile>
      <anchor>a7ddd199af0b2c68fed3a73a4205f2c21</anchor>
      <arglist>(double pt)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>electron</name>
      <anchorfile>namespace_resolutions.html</anchorfile>
      <anchor>a0d147ed8f76aef17e47a0401327beea6</anchor>
      <arglist>(double const energy)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>tau</name>
      <anchorfile>namespace_resolutions.html</anchorfile>
      <anchor>a8910fa37d40be85450c3d93adc347681</anchor>
      <arglist>(const double pt)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>gamma</name>
      <anchorfile>namespace_resolutions.html</anchorfile>
      <anchor>ac86a47eddf8a699c196707c80ea59e9d</anchor>
      <arglist>(double energy)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>jet</name>
      <anchorfile>namespace_resolutions.html</anchorfile>
      <anchor>ac780743ccd89cbca45ef66a7b5a904d4</anchor>
      <arglist>(double pt)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>met</name>
      <anchorfile>namespace_resolutions.html</anchorfile>
      <anchor>aa46c02eb6435a9e5060c205b1fd8515a</anchor>
      <arglist>(double const sumpt)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>SafeIntInternal</name>
    <filename>namespace_safe_int_internal.html</filename>
    <class kind="class">SafeIntInternal::SafeIntExceptionHandler</class>
    <class kind="class">SafeIntInternal::SafeIntExceptionHandler&lt; SafeIntException &gt;</class>
  </compound>
  <compound kind="namespace">
    <name>Splitting</name>
    <filename>namespace_splitting.html</filename>
    <member kind="function">
      <type>void</type>
      <name>split</name>
      <anchorfile>namespace_splitting.html</anchorfile>
      <anchor>a8da68d30b5f5620d0fcef1fd004837a4</anchor>
      <arglist>(std::map&lt; std::string, std::vector&lt; pxl::Particle * &gt;&gt; &amp;map, const std::function&lt; bool(pxl::Particle *)&gt; &amp;splittingFunc, const std::string &amp;origName, const std::string &amp;name1, const std::string &amp;name2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>merge</name>
      <anchorfile>namespace_splitting.html</anchorfile>
      <anchor>aaa7e71ec7078723673fbc7d90eb1a237</anchor>
      <arglist>(std::map&lt; std::string, std::vector&lt; pxl::Particle * &gt;&gt; &amp;map, const std::string &amp;name1, const std::string &amp;name2, const std::string &amp;newName)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>merge</name>
      <anchorfile>namespace_splitting.html</anchorfile>
      <anchor>a0b0724d92287a9a0da57e14a4fb6e1e4</anchor>
      <arglist>(std::map&lt; std::string, std::vector&lt; pxl::Particle * &gt;&gt; &amp;map, const std::vector&lt; std::string &gt; &amp;names, const std::string &amp;newName)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>splitBjets</name>
      <anchorfile>namespace_splitting.html</anchorfile>
      <anchor>a50b956fa256c1a4d929fcc522894e229</anchor>
      <arglist>(std::map&lt; std::string, std::vector&lt; pxl::Particle * &gt;&gt; &amp;map)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>splitGammaEndcap</name>
      <anchorfile>namespace_splitting.html</anchorfile>
      <anchor>a4391a9943da061562cdea34ed91a7b92</anchor>
      <arglist>(std::map&lt; std::string, std::vector&lt; pxl::Particle * &gt;&gt; &amp;map)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>splitEleEndcap</name>
      <anchorfile>namespace_splitting.html</anchorfile>
      <anchor>a60d34750ad704251ca4375fa0e3cc2c1</anchor>
      <arglist>(std::map&lt; std::string, std::vector&lt; pxl::Particle * &gt;&gt; &amp;map)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>splitWfatjets</name>
      <anchorfile>namespace_splitting.html</anchorfile>
      <anchor>aaef2582f857d50761762e286a148ec3a</anchor>
      <arglist>(std::map&lt; std::string, std::vector&lt; pxl::Particle * &gt;&gt; &amp;map)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mergeWfatjets</name>
      <anchorfile>namespace_splitting.html</anchorfile>
      <anchor>a8d4d50824fa67344b62577f8f176969a</anchor>
      <arglist>(std::map&lt; std::string, std::vector&lt; pxl::Particle * &gt;&gt; &amp;map)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mergeBjets</name>
      <anchorfile>namespace_splitting.html</anchorfile>
      <anchor>a4811f3607723173a8ba442e8907979c9</anchor>
      <arglist>(std::map&lt; std::string, std::vector&lt; pxl::Particle * &gt;&gt; &amp;map)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mergeZ</name>
      <anchorfile>namespace_splitting.html</anchorfile>
      <anchor>aa6b7149e518a9e8ca86c54a9046e7dca</anchor>
      <arglist>(std::map&lt; std::string, std::vector&lt; pxl::Particle * &gt;&gt; &amp;map, double deltaM, std::list&lt; std::string &gt; particles, std::string newName)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>Tools</name>
    <filename>namespace_tools.html</filename>
    <class kind="class">Tools::config_error</class>
    <class kind="class">Tools::EventHandler</class>
    <class kind="class">Tools::file_not_found</class>
    <class kind="class">Tools::MConfig</class>
    <class kind="class">Tools::SignalHandler</class>
    <class kind="class">Tools::unsorted_error</class>
    <class kind="class">Tools::value_error</class>
    <member kind="typedef">
      <type>boost::filesystem::path</type>
      <name>Path</name>
      <anchorfile>namespace_tools.html</anchorfile>
      <anchor>ad75b68ac70e81e850dbfe8cc5ececdb4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>std::map&lt; std::string, confObjType &gt;</type>
      <name>getConfigParticleMap</name>
      <anchorfile>namespace_tools.html</anchorfile>
      <anchor>a78ff41210e7d97d09872fb8e221d97fa</anchor>
      <arglist>(const Tools::MConfig &amp;cfg, const std::string &amp;label, confObjType objDummy)</arglist>
    </member>
    <member kind="function">
      <type>std::map&lt; std::string, confObjType &gt;</type>
      <name>getConfigParticleReverseMap</name>
      <anchorfile>namespace_tools.html</anchorfile>
      <anchor>ab83000996657097563d13304dc44216d</anchor>
      <arglist>(const Tools::MConfig &amp;cfg, const std::string &amp;label, confObjType objDummy)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>musicAbsPath</name>
      <anchorfile>namespace_tools.html</anchorfile>
      <anchor>a7db58becf00acaa3519fab94e4f6665d</anchor>
      <arglist>(std::string relPath)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>removeComment</name>
      <anchorfile>namespace_tools.html</anchorfile>
      <anchor>a50243b657b62c7ca509f1f1cb54049c6</anchor>
      <arglist>(std::string line, char const commentChar=&apos;#&apos;)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>random_string</name>
      <anchorfile>namespace_tools.html</anchorfile>
      <anchor>a1a488ac515c63bc9f3b0f3778c7b3981</anchor>
      <arglist>(size_t length)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::string &gt;</type>
      <name>getParticleTypeAbbreviations</name>
      <anchorfile>namespace_tools.html</anchorfile>
      <anchor>a19aec321c0fb11c0a5db5d0f144c9730</anchor>
      <arglist>(bool isRec=true)</arglist>
    </member>
    <member kind="function">
      <type>std::map&lt; int, std::string &gt;</type>
      <name>pdg_id_type_map</name>
      <anchorfile>namespace_tools.html</anchorfile>
      <anchor>a7d05729a64012804c21ae1370a3bdda1</anchor>
      <arglist>(bool useBJet=false)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>toString</name>
      <anchorfile>namespace_tools.html</anchorfile>
      <anchor>a1ac8c9ccc5ea2292e2a5b004a3225baf</anchor>
      <arglist>(T &amp;input)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fromString</name>
      <anchorfile>namespace_tools.html</anchorfile>
      <anchor>a33e5fdbeef6c18029b7b35ed8363d46e</anchor>
      <arglist>(const std::string &amp;valuestring)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>fromString&lt; std::string &gt;</name>
      <anchorfile>namespace_tools.html</anchorfile>
      <anchor>ab89a06dc9302e2de99efb673a9c9cc91</anchor>
      <arglist>(const std::string &amp;input)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>splitString</name>
      <anchorfile>namespace_tools.html</anchorfile>
      <anchor>afa894c72e8a81fc63c03f0edb6b41f32</anchor>
      <arglist>(std::vector&lt; T &gt; &amp;result, const std::string &amp;input, const std::string &amp;sep=&quot;,&quot;, bool ignoreEmpty=false)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; T &gt;</type>
      <name>splitString</name>
      <anchorfile>namespace_tools.html</anchorfile>
      <anchor>aa1b3b57a93ae7c7c4ab47a316d9d0472</anchor>
      <arglist>(const std::string &amp;input, const bool ignoreEmpty=false, const std::string sep=&quot;,&quot;)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>ExpandPath</name>
      <anchorfile>namespace_tools.html</anchorfile>
      <anchor>adc60a3d4a2e21756bf526f4724d61469</anchor>
      <arglist>(Path const &amp;path)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>AbsolutePath</name>
      <anchorfile>namespace_tools.html</anchorfile>
      <anchor>af7ec4031cb991f4e2b1a599a5804c899</anchor>
      <arglist>(Path const &amp;path)</arglist>
    </member>
  </compound>
</tagfile>
